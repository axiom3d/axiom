<?xml version="1.0" ?>
<project name="AxiomDemos" default="build.all">

	<!-- set build.date property to current date in format yyyy-MM-dd -->
	<tstamp property="build.date" pattern="yyyy-MM-dd" />

	<!-- global project settings -->
	<property name="project.name" value="AxiomDemos" />
	<property name="project.version" value="0.7.1.0" unless="${property::exists('project.version')}" />
	<property name="project.release.type" value="dev" unless="${property::exists('project.release.type')}" />
	<!-- nightly / dev / alpha / beta# / rc# / release -->
	<if test="${project.release.type == 'nightly'}">
		<property name="project.version.full" value="${project.version + '-nightly-' + build.date}" />
	</if>
	<if test="${project.release.type != 'nightly'}">
		<property name="project.version.full" value="${project.version + if(project.release.type == 'release', '', '-' + project.release.type)}" dynamic="true" />
	</if>

	<!-- Define location of build include files useful for any project.  Required (if you want to use any) -->
	<property name="build.includes.dir" value="${path::combine(project::get-base-directory(), '../../BuildSupport/NAntIncludes') }" dynamic="false" />
	
	<!-- Framework support targets  -->
	<include verbose="false" buildfile="${path::combine(build.includes.dir, 'frameworksupport.include')}" />
	
	<!-- Axiom build and run-time dependencies -->
	<!-- Define locations of Axiom dependencies top-level directory.  Required. -->
	<property name="libs.topdir" value="${project::get-base-directory()}/../../Lib" dynamic="false" />
	<!-- Load aliases for managed and native dependencies -->
	<include verbose="true" buildfile="${path::combine(libs.topdir, 'AxiomDependencies.include')}" />
	<!-- Load aliases for compiled Axiom assemblies -->
	<include verbose="true" buildfile="${path::combine(libs.topdir, 'AxiomAssemblies.include')}" />

	<!-- named project configurations -->

	<!-- Master build and dist output dirs -->
	<property name="top.build.dir" value="${project::get-base-directory()}/build" dynamic="true" />
	<property name="top.dist.dir" value="${project::get-base-directory()}/dist" dynamic="true" />

	<!-- global build settings -->
	<!-- Note: build.dir is dynamic and is defined in the named project configuration tasks (eg. debug, release) -->

	<!-- Settings for the top-level build envirnment -->
	<property name="build.bin.dir" value="${path::combine(build.dir, 'bin')}" dynamic="true" />
	<property name="build.lib.dir" value="${path::combine(build.dir, 'lib')}" dynamic="true" />

	<!-- default configuration -->
	<property name="project.config" value="debug" />
	<!-- debug|release -->
	<property name="build.defines" value="" />
	<property name="build.number" value="${math::abs(math::floor(timespan::get-total-days(datetime::now() - datetime::parse('01/01/2000'))))}" />

	<!-- platform specific properties. These are the defaults -->
	<property name="current.build.defines" value="${build.defines}" />

	<property name="build.dir" value="${top.build.dir}/${project.config}" />
	<property name="dist.dir" value="${top.dist.dir}/${framework::get-target-framework()}.${platform::get-name()}/${project.name}-${project.version}-${project.config}" />
	<property name="axiom.assemblies.dir" value="${axiom.assemblies.topdir}/${project.config}" />
	<!-- 
		Sets config parameters for build type and dynamically defines top-level 
		build output directory based on target framework,platform,project name,
		build type and version.
	-->
	<target name="debug" description="Perform a 'debug' build">
		<property name="project.config" value="debug" />
		<property name="build.debug" value="true" />
		<property name="build.dir" value="${top.build.dir}/${project.config}" />
		<property name="dist.dir" value="${top.dist.dir}/${framework::get-target-framework()}.${platform::get-name()}/${project.name}-${project.version}-${project.config}" />
		<property name="axiom.assemblies.dir" value="${axiom.assemblies.topdir}/${project.config}" />
	</target>

	<target name="release" description="Perform a 'release' build">
		<property name="project.config" value="release" />
		<property name="build.debug" value="false" />
		<property name="build.dir" value="${top.build.dir}/${project.config}" />
		<property name="dist.dir" value="${top.dist.dir}/${framework::get-target-framework()}.${platform::get-name()}/${project.name}-${project.version}-${project.config}" />
		<property name="axiom.assemblies.dir" value="${axiom.assemblies.topdir}/${project.config}" />
	</target>

	<!-- Buildfile aliases for sub-projects of the solution -->
	<!-- 
		Right now one fileset is defined for each buildfile to allow
		build targets to be fine-grained (one for each project in the
		overall solution).  Could be combined to reduce complexity (eg. all
		buildfiles for Axiom plugins or scenemanagers could be treated as a unit)
	-->
	<fileset id="axiom.demos.buildfile">
		<include name="Source/Demos/Axiom.Demos.build" />
	</fileset>
	<fileset id="axiom.demos.browser.commandline.buildfile">
		<include name="Source/Browser/CommandLine/Axiom.Demos.Browser.CommandLine.build" />
	</fileset>

	<!-- BEGIN: General build tasks -->
	<target name="init" description="Initializes build properties" unless="${target::has-executed('init')}">
		<call target="${project.config}" />
		<call target="set-framework-configuration" />
	</target>

	<target name="build.clean" depends="init" description="Deletes current build configuration">
		<delete dir="${build.dir}" if="${directory::exists(build.dir)}" />
	</target>

	<target name="build.cleanall" description="Deletes every build configuration">
		<echo message="Deleting all builds from all configurations" />
		<delete dir="${top.build.dir}" if="${directory::exists(top.build.dir)}" />
	</target>

	<target name="cleanall" description="Deletes every build and dist configuration" depends="build.cleanall"/>

	<target name="build.setup" depends="init, create-common-assemblyinfo" unless="${target::has-executed('build.setup')}" description="Sets up build area">
		<echo message="Build Directory is ${build.dir}" />
		<!-- ensure build directory exists -->
		<mkdir dir="${build.dir}" />
	</target>

	<target name="build.all" depends="build.axiom.demos" description="Build everything"/>

	<!-- END: General build tasks -->

	<!-- 
		specifies whether the CommonAssemblyInfo.cs file should be created.
		we do not want this for releases (whether they're beta or release) as
		this would cause the build number to be updated
		NOTE: disabled at present for Axiom, but left in for future consideration
	-->
	<property name="create.assemblyinfo" value="false" />

	<target name="create-common-assemblyinfo" if="${create.assemblyinfo}">
		<!-- ensure CommonAssemblyInfo.cs is writable if it already exists -->
		<attrib file="Axiom/GlobalAssemblyInfo.cs" readonly="false" if="${file::exists('Axiom/GlobalAssemblyInfo.cs')}" />
		<!-- generate the source file holding the common assembly-level attributes -->
		<asminfo output="Axiom/GlobalAssemblyInfo.cs" language="CSharp">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
				<import namespace="System.Runtime.InteropServices" />
			</imports>
			<attributes>
				<attribute type="ComVisibleAttribute" value="false" />
				<attribute type="CLSCompliantAttribute" value="false" />
				<attribute type="AssemblyTitleAttribute" value="AxiomDemos" />
				<attribute type="AssemblyDescriptionAttribute" value="Demos for Axiom, A .NET Graphics Engine" />
				<attribute type="AssemblyConfigurationAttribute" value="${project.release.type}" />
				<attribute type="AssemblyCompanyAttribute" value="http://axiomengine.sourceforge.net" />
				<attribute type="AssemblyProductAttribute" value="AxiomDemos" />
				<attribute type="AssemblyCopyrightAttribute" value="Copyright (C) 2005-${datetime::get-year(datetime::now())} The Axiom Team" />
				<attribute type="AssemblyTrademarkAttribute" value="" />
				<attribute type="AssemblyCultureAttribute" value="" />
				<attribute type="AssemblyVersionAttribute" value="${project.version}.${build.number}.0" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${project.version}" />
			</attributes>
		</asminfo>
	</target>

	<!-- BEGIN: Axiom Demos build tasks -->
	<target name="build.axiom.demos.setup" depends="build.setup" unless="${target::has-executed('build.axiom.demos.setup')}" description="Sets up build area">
		<!-- 
			Define build directory for Axiom Demos
		-->
		<property name="axiom.demos.build.dir" value="${build.dir}" />

		<!-- ensure Axiom Demos build directory exists -->
		<mkdir dir="${axiom.demos.build.dir}" />
	</target>

	<!-- BEGIN:  Axiom Demos tasks -->
	<target name="build.axiom.demos" depends="build.axiom.demos.setup" description="Builds the Axiom3D engine demos for the current build configuration">
		<!-- Call required targets in order -->
		<call target="build.axiom.demos.base" />
		<call target="build.axiom.demos.browser.commandline" />
	</target>

	<target name="build.axiom.demos.base" description="Build the Axiom Demos" depends="build.axiom.demos.setup" unless="${target::has-executed('build.axiom.demos.base')}">
		<nant target="build">
			<buildfiles refid="axiom.demos.buildfile"/>
		</nant>
	</target>
	
	<target name="build.axiom.demos.browser.commandline" description="Build the Axiom Demos CommandLine Browser" depends="build.axiom.demos.base" unless="${target::has-executed('build.axiom.demos.browser.commandline')}">
		<nant target="build">
			<buildfiles refid="axiom.demos.browser.commandline.buildfile"/>
		</nant>
	</target>

	<target name="run.axiom.demos" description="Run the Axiom Demos app" depends="build.axiom.demos">
		<nant target="run">
			<buildfiles refid="axiom.demos.browser.commandline.buildfile"/>
		</nant>
	</target>

	<!-- END: Axiom Demos tasks -->

</project>
