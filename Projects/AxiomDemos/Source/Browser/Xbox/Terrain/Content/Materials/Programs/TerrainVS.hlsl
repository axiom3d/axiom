/***************************************************************************************
 * This shader was generated by a tool; any changes made to this file may be lost
 * Axiom Fixed Function Emulation Layer
 * Vertex Program Entry Point :		VS
 * Vertex Buffer Delcaration :		Float3 Position0;
 *									Float3 Normal0;
 *									Float2 TexCoords0;
 *									Float2 TexCoords1;
 *
 ***************************************************************************************/
struct VS_INPUT
{
	float4 Position0 : POSITION0;
	float3 Normal0 : NORMAL0;
	float2 Texcoord0 : TEXCOORD0;
	float2 Texcoord1 : TEXCOORD1;
};

float4x4  World;
float4x4  View;
float4x4  Projection;
float4x4  ViewIT;
float4x4  WorldViewIT;
shared float4x4  TextureMatrix0; //technique: None
float4 FogDensity;
float4  FogColor;
float4 BaseLightAmbient;
float4 MaterialAmbient=float4(1,1,1,1);
float4 MaterialDiffuse=float4(1,1,1,1);
float4 MaterialSpecular=(float4)0;

struct VS_OUTPUT
{
	float4 Pos : POSITION;
	float2 Texcoord0 : TEXCOORD0;
	float4 Color: COLOR0;
	float4 ColorSpec: COLOR1;
	float fogDist : FOG;
};

VS_OUTPUT VS( VS_INPUT input )
{
	VS_OUTPUT output = (VS_OUTPUT)0;
	float4 worldPos = mul( World, input.Position0);
	float4 cameraPos = mul( View, worldPos );
	output.Pos = mul( Projection, cameraPos );
	float3 Normal = input.Normal0;
	//debug info : texture stage 0 coordindex: 1
	{
		float4 texCordWithMatrix = float4(input.Texcoord1, 1, 1);
		texCordWithMatrix = mul(texCordWithMatrix, TextureMatrix0 );
		output.Texcoord0 = texCordWithMatrix.xy;
	}
	output.ColorSpec =MaterialSpecular;
	output.Color = MaterialAmbient;
	output.fogDist = length( cameraPos.xyz );
	#define E 2.71828
	output.fogDist = 1.0 / pow( E, output.fogDist * output.fogDist * FogDensity * FogDensity );
	output.fogDist = clamp( output.fogDist, 0, 1 );
	return output;
}