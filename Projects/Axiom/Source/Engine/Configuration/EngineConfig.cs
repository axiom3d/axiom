//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Axiom.Configuration {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class EngineConfig : DataSet {
        
        private FilePathDataTable tableFilePath;
        
        private DisplayModeDataTable tableDisplayMode;
        
        public EngineConfig() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected EngineConfig(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FilePath"] != null)) {
                    this.Tables.Add(new FilePathDataTable(ds.Tables["FilePath"]));
                }
                if ((ds.Tables["DisplayMode"] != null)) {
                    this.Tables.Add(new DisplayModeDataTable(ds.Tables["DisplayMode"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FilePathDataTable FilePath {
            get {
                return this.tableFilePath;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DisplayModeDataTable DisplayMode {
            get {
                return this.tableDisplayMode;
            }
        }
        
        public override DataSet Clone() {
            EngineConfig cln = ((EngineConfig)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FilePath"] != null)) {
                this.Tables.Add(new FilePathDataTable(ds.Tables["FilePath"]));
            }
            if ((ds.Tables["DisplayMode"] != null)) {
                this.Tables.Add(new DisplayModeDataTable(ds.Tables["DisplayMode"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFilePath = ((FilePathDataTable)(this.Tables["FilePath"]));
            if ((this.tableFilePath != null)) {
                this.tableFilePath.InitVars();
            }
            this.tableDisplayMode = ((DisplayModeDataTable)(this.Tables["DisplayMode"]));
            if ((this.tableDisplayMode != null)) {
                this.tableDisplayMode.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "EngineConfig";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EngineConfig.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFilePath = new FilePathDataTable();
            this.Tables.Add(this.tableFilePath);
            this.tableDisplayMode = new DisplayModeDataTable();
            this.Tables.Add(this.tableDisplayMode);
        }
        
        private bool ShouldSerializeFilePath() {
            return false;
        }
        
        private bool ShouldSerializeDisplayMode() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FilePathRowChangeEventHandler(object sender, FilePathRowChangeEvent e);
        
        public delegate void DisplayModeRowChangeEventHandler(object sender, DisplayModeRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FilePathDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnsrc;
            
            private DataColumn columntype;
            
            internal FilePathDataTable() : 
                    base("FilePath") {
                this.InitClass();
            }
            
            internal FilePathDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn srcColumn {
                get {
                    return this.columnsrc;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            public FilePathRow this[int index] {
                get {
                    return ((FilePathRow)(this.Rows[index]));
                }
            }
            
            public event FilePathRowChangeEventHandler FilePathRowChanged;
            
            public event FilePathRowChangeEventHandler FilePathRowChanging;
            
            public event FilePathRowChangeEventHandler FilePathRowDeleted;
            
            public event FilePathRowChangeEventHandler FilePathRowDeleting;
            
            public void AddFilePathRow(FilePathRow row) {
                this.Rows.Add(row);
            }
            
            public FilePathRow AddFilePathRow(string src, string type) {
                FilePathRow rowFilePathRow = ((FilePathRow)(this.NewRow()));
                rowFilePathRow.ItemArray = new object[] {
                        src,
                        type};
                this.Rows.Add(rowFilePathRow);
                return rowFilePathRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FilePathDataTable cln = ((FilePathDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FilePathDataTable();
            }
            
            internal void InitVars() {
                this.columnsrc = this.Columns["src"];
                this.columntype = this.Columns["type"];
            }
            
            private void InitClass() {
                this.columnsrc = new DataColumn("src", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnsrc);
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntype);
                this.columnsrc.Namespace = "";
                this.columntype.Namespace = "";
            }
            
            public FilePathRow NewFilePathRow() {
                return ((FilePathRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FilePathRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FilePathRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FilePathRowChanged != null)) {
                    this.FilePathRowChanged(this, new FilePathRowChangeEvent(((FilePathRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FilePathRowChanging != null)) {
                    this.FilePathRowChanging(this, new FilePathRowChangeEvent(((FilePathRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FilePathRowDeleted != null)) {
                    this.FilePathRowDeleted(this, new FilePathRowChangeEvent(((FilePathRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FilePathRowDeleting != null)) {
                    this.FilePathRowDeleting(this, new FilePathRowChangeEvent(((FilePathRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFilePathRow(FilePathRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FilePathRow : DataRow {
            
            private FilePathDataTable tableFilePath;
            
            internal FilePathRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFilePath = ((FilePathDataTable)(this.Table));
            }
            
            public string src {
                get {
                    try {
                        return ((string)(this[this.tableFilePath.srcColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFilePath.srcColumn] = value;
                }
            }
            
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableFilePath.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFilePath.typeColumn] = value;
                }
            }
            
            public bool IssrcNull() {
                return this.IsNull(this.tableFilePath.srcColumn);
            }
            
            public void SetsrcNull() {
                this[this.tableFilePath.srcColumn] = System.Convert.DBNull;
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tableFilePath.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tableFilePath.typeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FilePathRowChangeEvent : EventArgs {
            
            private FilePathRow eventRow;
            
            private DataRowAction eventAction;
            
            public FilePathRowChangeEvent(FilePathRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FilePathRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DisplayModeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnWidth;
            
            private DataColumn columnHeight;
            
            private DataColumn columnBpp;
            
            private DataColumn columnSelected;
            
            private DataColumn columnFullScreen;
            
            internal DisplayModeDataTable() : 
                    base("DisplayMode") {
                this.InitClass();
            }
            
            internal DisplayModeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            internal DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            internal DataColumn BppColumn {
                get {
                    return this.columnBpp;
                }
            }
            
            internal DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            internal DataColumn FullScreenColumn {
                get {
                    return this.columnFullScreen;
                }
            }
            
            public DisplayModeRow this[int index] {
                get {
                    return ((DisplayModeRow)(this.Rows[index]));
                }
            }
            
            public event DisplayModeRowChangeEventHandler DisplayModeRowChanged;
            
            public event DisplayModeRowChangeEventHandler DisplayModeRowChanging;
            
            public event DisplayModeRowChangeEventHandler DisplayModeRowDeleted;
            
            public event DisplayModeRowChangeEventHandler DisplayModeRowDeleting;
            
            public void AddDisplayModeRow(DisplayModeRow row) {
                this.Rows.Add(row);
            }
            
            public DisplayModeRow AddDisplayModeRow(int Width, int Height, int Bpp, bool Selected, bool FullScreen) {
                DisplayModeRow rowDisplayModeRow = ((DisplayModeRow)(this.NewRow()));
                rowDisplayModeRow.ItemArray = new object[] {
                        Width,
                        Height,
                        Bpp,
                        Selected,
                        FullScreen};
                this.Rows.Add(rowDisplayModeRow);
                return rowDisplayModeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DisplayModeDataTable cln = ((DisplayModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DisplayModeDataTable();
            }
            
            internal void InitVars() {
                this.columnWidth = this.Columns["Width"];
                this.columnHeight = this.Columns["Height"];
                this.columnBpp = this.Columns["Bpp"];
                this.columnSelected = this.Columns["Selected"];
                this.columnFullScreen = this.Columns["FullScreen"];
            }
            
            private void InitClass() {
                this.columnWidth = new DataColumn("Width", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnWidth);
                this.columnHeight = new DataColumn("Height", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHeight);
                this.columnBpp = new DataColumn("Bpp", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBpp);
                this.columnSelected = new DataColumn("Selected", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSelected);
                this.columnFullScreen = new DataColumn("FullScreen", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFullScreen);
                this.columnWidth.Namespace = "";
                this.columnHeight.Namespace = "";
                this.columnBpp.Namespace = "";
                this.columnSelected.Namespace = "";
            }
            
            public DisplayModeRow NewDisplayModeRow() {
                return ((DisplayModeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DisplayModeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DisplayModeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DisplayModeRowChanged != null)) {
                    this.DisplayModeRowChanged(this, new DisplayModeRowChangeEvent(((DisplayModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DisplayModeRowChanging != null)) {
                    this.DisplayModeRowChanging(this, new DisplayModeRowChangeEvent(((DisplayModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DisplayModeRowDeleted != null)) {
                    this.DisplayModeRowDeleted(this, new DisplayModeRowChangeEvent(((DisplayModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DisplayModeRowDeleting != null)) {
                    this.DisplayModeRowDeleting(this, new DisplayModeRowChangeEvent(((DisplayModeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDisplayModeRow(DisplayModeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DisplayModeRow : DataRow {
            
            private DisplayModeDataTable tableDisplayMode;
            
            internal DisplayModeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDisplayMode = ((DisplayModeDataTable)(this.Table));
            }
            
            public int Width {
                get {
                    try {
                        return ((int)(this[this.tableDisplayMode.WidthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDisplayMode.WidthColumn] = value;
                }
            }
            
            public int Height {
                get {
                    try {
                        return ((int)(this[this.tableDisplayMode.HeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDisplayMode.HeightColumn] = value;
                }
            }
            
            public int Bpp {
                get {
                    try {
                        return ((int)(this[this.tableDisplayMode.BppColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDisplayMode.BppColumn] = value;
                }
            }
            
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDisplayMode.SelectedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDisplayMode.SelectedColumn] = value;
                }
            }
            
            public bool FullScreen {
                get {
                    try {
                        return ((bool)(this[this.tableDisplayMode.FullScreenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDisplayMode.FullScreenColumn] = value;
                }
            }
            
            public bool IsWidthNull() {
                return this.IsNull(this.tableDisplayMode.WidthColumn);
            }
            
            public void SetWidthNull() {
                this[this.tableDisplayMode.WidthColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeightNull() {
                return this.IsNull(this.tableDisplayMode.HeightColumn);
            }
            
            public void SetHeightNull() {
                this[this.tableDisplayMode.HeightColumn] = System.Convert.DBNull;
            }
            
            public bool IsBppNull() {
                return this.IsNull(this.tableDisplayMode.BppColumn);
            }
            
            public void SetBppNull() {
                this[this.tableDisplayMode.BppColumn] = System.Convert.DBNull;
            }
            
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDisplayMode.SelectedColumn);
            }
            
            public void SetSelectedNull() {
                this[this.tableDisplayMode.SelectedColumn] = System.Convert.DBNull;
            }
            
            public bool IsFullScreenNull() {
                return this.IsNull(this.tableDisplayMode.FullScreenColumn);
            }
            
            public void SetFullScreenNull() {
                this[this.tableDisplayMode.FullScreenColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DisplayModeRowChangeEvent : EventArgs {
            
            private DisplayModeRow eventRow;
            
            private DataRowAction eventAction;
            
            public DisplayModeRowChangeEvent(DisplayModeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DisplayModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
