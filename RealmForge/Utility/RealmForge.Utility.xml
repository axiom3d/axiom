<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RealmForge.Utility</name>
    </assembly>
    <members>
        <member name="T:RealmForge.Serialization.IObjectParser">
            <summary>
            Represents a parser which can convert an object to and from strings
            For use in seralization
            Example: Vector3 == "(12,14,14)"
            </summary>
        </member>
        <member name="M:RealmForge.Serialization.IObjectParser.GetParsableText(System.Object)">
            <summary>
            
            </summary>
            <remarks>if null is returned then run through member info retrieved through reflection
            Unless the type of this object was registered earlier under a Custom, Fields, or Public SerializeType's then there will be no member info</remarks>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:RealmForge.Serialization.IParsable">
            <summary>
            Provides functionality to serialize and deserialize an object manually
            This requires that the object can be formated as a string and parsed from one
            An error will be throw on deserailization if there is no constructor that accepts
            one parameter of type ParsingData
            </summary>
        </member>
        <member name="M:RealmForge.Serialization.IParsable.ToParsableText">
            <summary>
            
            </summary>
            <remarks>if null is returned then run through member info retrieved through reflection
            Unless the type of this object was registered earlier under a Custom, Fields, or Public SerializeType's then there will be no member info</remarks>
            <returns></returns>
        </member>
        <member name="T:DotNet3D.Math.Matrix3">
            <summary>
            A 3x3 matrix which can represent rotations around axes.
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix3.Identity">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix3.Zero">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.#ctor(DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            	Creates a new Matrix3 with all the specified parameters.
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.#ctor(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            Create a new Matrix3 from 3 Vector3 objects.
            </summary>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <param name="zAxis"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.#ctor(DotNet3D.Math.Real[0:,0:])">
            <summary>
            Creates a new Matrix3 from an array of Reals
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.#ctor(DotNet3D.Math.Vector3[])">
            <summary>
            Creates a new Matrix3 from an array of Vector3s
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.#ctor(DotNet3D.Math.Matrix3)">
            <summary>
            Creates a new Matrix3 from an existing Matrix3.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.ToString">
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Matrix4.
            </summary>
            <returns>A string representation of a vector3.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.GetHashCode">
            <summary>
            	Provides a unique hash code based on the member variables of this
            	class.  This should be done because the equality operators (==, !=)
            	have been overriden by this class.
            	<p/>
            	The standard implementation is a simple XOR operation between all local
            	member variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Equals(System.Object)">
            <summary>
            	Compares this Matrix to another object.  This should be done because the 
            	equality operators (==, !=) have been overriden by this class.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.op_Addition(DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3)">
            <summary>
            	Used to add two matrices together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.op_UnaryNegation(DotNet3D.Math.Matrix3)">
            <summary>
            Negates all the items in the Matrix.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.op_Subtraction(DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3)">
            <summary>
            	Used to subtract two matrices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.op_Multiply(DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3)">
            <summary>
            Multiply (concatenate) two Matrix3 instances together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.op_Multiply(DotNet3D.Math.Vector3,DotNet3D.Math.Matrix3)">
            <summary>
            	vector * matrix [1x3 * 3x3 = 1x3]
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.op_Multiply(DotNet3D.Math.Matrix3,DotNet3D.Math.Vector3)">
            <summary>
            	matrix * vector [3x3 * 3x1 = 3x1]
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.op_Multiply(DotNet3D.Math.Matrix3,DotNet3D.Math.Real)">
            <summary>
            Multiplies all the items in the Matrix3 by a scalar value.
            </summary>
            <param name="matrix"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.op_Multiply(DotNet3D.Math.Real,DotNet3D.Math.Matrix3)">
            <summary>
            Multiplies all the items in the Matrix3 by a scalar value.
            </summary>
            <param name="matrix"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.op_Equality(DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3)">
            <summary>
            	Test two matrices for (value) equality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.op_Inequality(DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Add(DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3)">
            <summary>
            	Used to add two matrices together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Negate(DotNet3D.Math.Matrix3)">
            <summary>
            Negates all the items in the Matrix.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Subtract(DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3)">
            <summary>
            	Used to subtract two matrices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Multiply(DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3)">
            <summary>
            Multiply (concatenate) two Matrix3 instances together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Multiply(DotNet3D.Math.Matrix3,DotNet3D.Math.Vector3)">
            <summary>
            	matrix * vector [3x3 * 3x1 = 3x1]
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Multiply(DotNet3D.Math.Vector3,DotNet3D.Math.Matrix3)">
            <summary>
            	vector * matrix [1x3 * 3x3 = 1x3]
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Multiply(DotNet3D.Math.Matrix3,DotNet3D.Math.Real)">
            <summary>
            Multiplies all the items in the Matrix3 by a scalar value.
            </summary>
            <param name="matrix"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Multiply(DotNet3D.Math.Real,DotNet3D.Math.Matrix3)">
            <summary>
            Multiplies all the items in the Matrix3 by a scalar value.
            </summary>
            <param name="matrix"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Transpose">
            <summary>
            Swap the rows of the matrix with the columns.
            </summary>
            <returns>A transposed Matrix.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.GetColumn(System.Int32)">
            <summary>
            	Gets a matrix column by index.
            </summary>
            <param name="col"></param>
            <returns>A Vector3 representing one of the Matrix columns.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.SetColumn(System.Int32,DotNet3D.Math.Vector3)">
            <summary>
            	Sets one of the columns of the Matrix with a Vector3.
            </summary>
            <param name="col"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.FromAxes(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Creates a Matrix3 from 3 axes.
            </summary>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <param name="zAxis"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.FromEulerAnglesXYZ(DotNet3D.Math.Radian,DotNet3D.Math.Radian,DotNet3D.Math.Radian)">
            <summary>
               Constructs this Matrix from 3 euler angles, in radians.
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.FromEulerAnglesXZY(DotNet3D.Math.Radian,DotNet3D.Math.Radian,DotNet3D.Math.Radian)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.FromEulerAnglesYXZ(DotNet3D.Math.Radian,DotNet3D.Math.Radian,DotNet3D.Math.Radian)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.FromEulerAnglesYZX(DotNet3D.Math.Radian,DotNet3D.Math.Radian,DotNet3D.Math.Radian)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.FromEulerAnglesZXY(DotNet3D.Math.Radian,DotNet3D.Math.Radian,DotNet3D.Math.Radian)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.FromEulerAnglesZYX(DotNet3D.Math.Radian,DotNet3D.Math.Radian,DotNet3D.Math.Radian)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.ToEulerAnglesXYZ(DotNet3D.Math.Radian@,DotNet3D.Math.Radian@,DotNet3D.Math.Radian@)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
            <returns></returns>
            <remarks>
            The matrix must be orthonormal.  The decomposition is yaw*pitch*roll
            where yaw is rotation about the Up vector, pitch is rotation about the
            Right axis, and roll is rotation about the Direction axis.
            </remarks>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.ToEulerAnglesXZY(DotNet3D.Math.Radian@,DotNet3D.Math.Radian@,DotNet3D.Math.Radian@)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.ToEulerAnglesYXZ(DotNet3D.Math.Radian@,DotNet3D.Math.Radian@,DotNet3D.Math.Radian@)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.ToEulerAnglesYZX(DotNet3D.Math.Radian@,DotNet3D.Math.Radian@,DotNet3D.Math.Radian@)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.ToEulerAnglesZXY(DotNet3D.Math.Radian@,DotNet3D.Math.Radian@,DotNet3D.Math.Radian@)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.ToEulerAnglesZYX(DotNet3D.Math.Radian@,DotNet3D.Math.Radian@,DotNet3D.Math.Radian@)">
            <summary>
            
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Inverse(DotNet3D.Math.Matrix3)">
            <summary>
            
            </summary>
            <param name="rkInverse"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Inverse(DotNet3D.Math.Matrix3,DotNet3D.Math.Real)">
            <summary>
            Invert a 3x3 using cofactors
            </summary>
            <param name="rkInverse"></param>
            <param name="fTolerance"></param>
            <returns></returns>
            <remarks>This is about 8 times faster than the Numerical Recipes code which uses Gaussian elimination.</remarks>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Inverse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Inverse(DotNet3D.Math.Real)">
            <summary>
            
            </summary>
            <param name="fTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.SingularValueComposition(DotNet3D.Math.Matrix3,DotNet3D.Math.Vector3,DotNet3D.Math.Matrix3)">
            <summary>
            
            </summary>
            <param name="rkL"></param>
            <param name="rkS"></param>
            <param name="rkR"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.SingularValueDecomposition(DotNet3D.Math.Matrix3,DotNet3D.Math.Vector3,DotNet3D.Math.Matrix3)">
            <summary>
            
            </summary>
            <param name="rkL"></param>
            <param name="rkS"></param>
            <param name="rkR"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.Orthonormalize">
            <summary>
            Gram-Schmidt orthonormalization (applied to columns of rotation matrix)
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.QDUDecomposition(DotNet3D.Math.Matrix3,DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            orthogonal Q, diagonal D, upper triangular U stored as (u01,u02,u12)
            </summary>
            <param name="rkQ"></param>
            <param name="rkD"></param>
            <param name="rkU"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.SpectralNorm">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.ToAxisAngle(DotNet3D.Math.Vector3@,DotNet3D.Math.Radian@)">
            <summary>
            
            </summary>
            <param name="axis"></param>
            <returns></returns>
            <remarks>matrix must be orthonormal</remarks>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.FromAxisAngle(DotNet3D.Math.Vector3,DotNet3D.Math.Radian)">
            <summary>
            
            </summary>
            <param name="axis"></param>
            <param name="radians"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.EigenSolveSymmetric(DotNet3D.Math.Real[],DotNet3D.Math.Vector3[])">
            <summary>
            
            </summary>
            <param name="eigenValue"></param>
            <param name="eigenVector"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3.TensorProduct(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,DotNet3D.Math.Matrix3)">
            <summary>
            
            </summary>
            <param name="rkU"></param>
            <param name="rkV"></param>
            <param name="rkProduct"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3._triDiagonal(DotNet3D.Math.Real[],DotNet3D.Math.Real[])">
            <summary>
            
            </summary>
            <param name="diag"></param>
            <param name="afSubDiag"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3._qlAlgorithm(DotNet3D.Math.Real[],DotNet3D.Math.Real[])">
            <summary>
            
            </summary>
            <param name="afDiag"></param>
            <param name="afSubDiag"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix3._biDiagonalize(DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3)">
            <summary>
            
            </summary>
            <param name="kA"></param>
            <param name="kL"></param>
            <param name="kR"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3._golubKahanStep(DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3,DotNet3D.Math.Matrix3)">
            <summary>
            
            </summary>
            <param name="kA"></param>
            <param name="kL"></param>
            <param name="kR"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix3._maxCubicRoot(DotNet3D.Math.Real[])">
            <summary>
            
            </summary>
            <param name="coEfficient"></param>
            <returns></returns>
        </member>
        <member name="P:DotNet3D.Math.Matrix3.Determinant">
            <summary>
            
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Matrix3.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for accessing the matrix like a 2d array (i.e. matrix[2,3]).
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Matrix3.Item(System.Int32)">
            <summary>
            	Allows the Matrix to be accessed linearly (m[0] -> m[8]).  
            </summary>
        </member>
        <member name="T:RealmForge.ResourceLoadingException">
            <summary>
            The exception that is thrown when an error occurs while loading a resource such as if it has an invalid format or is not supported.
            </summary>
        </member>
        <member name="T:RealmForge.InitializationException">
            <summary>
            The exception that is thrown thrown when an error occurs during initialization allowing a more generic and meaninful exception to be bubbled up to the user.
            </summary>
        </member>
        <member name="T:Axiom.MathLib.Collections.BaseCollection">
            <summary>
            	Serves as a basis for strongly typed collections in the math lib.
            </summary>
            <remarks>
            	Can't wait for Generics in .Net Framework 2.0!   
            </remarks>
        </member>
        <member name="F:Axiom.MathLib.Collections.BaseCollection.objectList">
            <summary></summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.#ctor">
            <summary>
            	
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.Add(System.Object)">
            <summary>
            	Adds an item to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.Clear">
            <summary>
            	Clears all objects from the collection.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.Remove(System.Object)">
            <summary>
            	Removes the item from the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.Reset">
            <summary>
            	Resets the in progress enumerator.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.MoveNext">
            <summary>
            	Moves to the next item in the enumeration if there is one.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Axiom.MathLib.Collections.BaseCollection.Item(System.Int32)">
            <summary>
            	
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Collections.BaseCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Collections.BaseCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Collections.BaseCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Collections.BaseCollection.Current">
            <summary>
            	Returns the current object in the enumeration.
            </summary>
        </member>
        <member name="T:RealmForge.Serialization.IObjectFactory">
            <summary>
            Creates objects based on a table of properties, used for custom deserialization
            </summary>
        </member>
        <member name="M:RealmForge.Serialization.IObjectFactory.CreateObject(System.Collections.IDictionary)">
            <summary>
            Creates an object from a table of deserialized members
            </summary>
            <param name="members">A table of all of the deserialized values for the object
            keyed to their member names (or the alternatives specified by the SerialiedAttribute)
            </param>
            <param name="usedMembers">A collection to which the names of all members that have been used should be added</param>
        </member>
        <member name="M:RealmForge.Serialization.IObjectFactory.GetObjectData(System.Object)">
            <summary>
            
            </summary>
            <remarks>if null is returned then run through member info retrieved through reflection
            Unless the type of this object was registered earlier under a Custom, Fields, or Public SerializeType's then there will be no member info
            
            Members names that start with '@' are used as XML attributes, this is not preserved when deserialized and the @ will not show up for CreateObject()</remarks>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet3D.Math.Vector4">
            <summary>
            4D homogeneous vector.
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.x">
            <summary>X component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.y">
            <summary>Y component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.z">
            <summary>Z component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.w">
            <summary>W component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.PositiveInfinity">
            <summary>Gets a Vector4 with all units set to positive infinity.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.NegativeInfinity">
            <summary>Gets a Vector4 with all units set to negative infinity.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.Invalid">
            <summary>Gets a Vector4 with all units set to Invalid.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.Zero">
            <summary>Gets a Vector4 with all components set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.UnitX">
            <summary>Gets a Vector4 with the X set to 1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.UnitY">
            <summary>Gets a Vector4 with the Y set to 1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.UnitZ">
            <summary>Gets a Vector4 with the Z set to 1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.UnitW">
            <summary>Gets a Vector4 with the W set to 1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.NegativeUnitX">
            <summary>Gets a Vector4 with the X set to -1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.NegativeUnitY">
            <summary>Gets a Vector4 with the Y set to -1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.NegativeUnitZ">
            <summary>Gets a Vector4 with the Z set to -1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.NegativeUnitW">
            <summary>Gets a Vector4 with the W set to -1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector4.Unit">
            <summary>Gets a Vector4 with all components set to 1.</summary>
        </member>
        <member name="M:DotNet3D.Math.Vector4.#ctor(DotNet3D.Math.Vector4)">
            <overloads>
            <summary>
                Creates a new 4 dimensional Vector.
            </summary>
            </overloads>
            <param name="source">the source vector.</param>
        </member>
        <member name="M:DotNet3D.Math.Vector4.#ctor(DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
            <param name="w">W position.</param>
        </member>
        <member name="M:DotNet3D.Math.Vector4.#ctor(DotNet3D.Math.Real)">
            <param name="unitDimension"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DotNet3D.Math.Vector4.#ctor(System.String)" -->
        <member name="M:DotNet3D.Math.Vector4.#ctor(DotNet3D.Math.Real[])">
            <param name="coordinates">An array of 3 decimal values.</param>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Parse(System.String)">
            <summary>
            Parses a Vector4 from a string
            </summary>
            <remarks>
            The parseableText parameter is a comma seperated list of values e.g. "(#.##, #.##, #.##, #.##)" 
            </remarks>
            <param name="text">a comma seperated list of values</param>
            <returns>a new instance</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.ToString">
            <overrides>
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Vector4.
            </summary>
            <returns>A string representation of a Vector4.</returns>
            </overrides>
        </member>
        <member name="M:DotNet3D.Math.Vector4.ToString(System.Int32)">
            <param name="decimalPlaces">number of decimal places to render</param>
        </member>
        <member name="M:DotNet3D.Math.Vector4.GetHashCode">
            <summary>
            	Provides a unique hash code based on the member variables of this
            	class.  This should be done because the equality operators (==, !=)
            	have been overriden by this class.
            	<p/>
            	The standard implementation is a simple XOR operation between all local
            	member variables.
            </summary>
            <returns>a unique code to represent this object</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Equals(System.Object)">
            <summary>
            	Compares this Vector to another object.  This should be done because the 
            	equality operators (==, !=) have been overriden by this class.
            </summary>
            <param name="obj">object to compare to</param>
            <returns>true or false</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Addition(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
            	Used when a Vector4 is added to another Vector4.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Subtraction(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
            	Used to subtract a Vector4 from another Vector4.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Multiply(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
            	Used when a Vector4 is multiplied by another vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Multiply(DotNet3D.Math.Vector4,DotNet3D.Math.Real)">
            <summary>
            	Used when a Vector4 is multiplied by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Multiply(DotNet3D.Math.Real,DotNet3D.Math.Vector4)">
            <summary>
            	Used when a scalar value is multiplied by a Vector4.
            </summary>
            <param name="scalar"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Multiply(DotNet3D.Math.Vector4,DotNet3D.Math.Matrix4)">
            <summary>
            Used when a Vector4 is multiplied by a Matrix4.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Division(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
            	Used when a Vector4 is divided by another vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Division(DotNet3D.Math.Vector4,DotNet3D.Math.Real)">
            <summary>
            Used to divide a vector by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_UnaryNegation(DotNet3D.Math.Vector4)">
            <summary>
            	Used to negate the elements of a vector.
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Equality(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
            	User to compare two Vector4 instances for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true or false</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Inequality(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
            	User to compare two Vector4 instances for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true or false</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_GreaterThan(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
               Returns true if the vector's scalar components are all smaller
               that the ones of the vector it is compared against.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_LessThan(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
               Returns true if the vector's scalar components are all greater
               that the ones of the vector it is compared against.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Add(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
            	Used when a Vector4 is added to another Vector4.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Subtract(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
            	Used to subtract a Vector4 from another Vector4.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Multiply(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
            	Used when a Vector4 is multiplied by another vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Multiply(DotNet3D.Math.Vector4,DotNet3D.Math.Real)">
            <summary>
            	Used when a Vector4 is multiplied by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Multiply(DotNet3D.Math.Real,DotNet3D.Math.Vector4)">
            <summary>
            	Used when a scalar value is multiplied by a Vector4.
            </summary>
            <param name="scalar"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Multiply(DotNet3D.Math.Vector4,DotNet3D.Math.Matrix4)">
            <summary>
            	
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Divide(DotNet3D.Math.Vector4,DotNet3D.Math.Vector4)">
            <summary>
            	Used when a Vector4 is divided by another vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Divide(DotNet3D.Math.Vector4,DotNet3D.Math.Real)">
            <summary>
            Used to divide a vector by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Negate(DotNet3D.Math.Vector4)">
            <summary>
            	Used to negate the elements of a vector.
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Implicit(System.String)~DotNet3D.Math.Vector4">
            <summary>
            Implicit conversion from string to Vector4
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Explicit(DotNet3D.Math.Vector4)~System.String">
            <summary>
            Explicit conversion from Vector4 to string
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.op_Implicit(DotNet3D.Math.Real[])~DotNet3D.Math.Vector4">
            <summary>
            Implicit conversion from Real[] to Vector4
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.ToArray``1">
            <summary>
            Generic method to get the elments of the vector as an array.
            </summary>
            <typeparam name="K">Any value based type (Real, int, float, decimal... )</typeparam>
            <returns>An array of the specified type containing 3 elements</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.ToArray">
            <summary>
            Specific method to get the elments of the vector as an array of Reals.
            </summary>
            <returns>An array Reals containing 3 elements</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Offset(DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            Offsets the Vector2 by the specified values.
            </summary>
            <param name="x">Amount to offset the x component.</param>
            <param name="y">Amount to offset the y component.</param>
            <param name="y">Amount to offset the z component.</param>
            <remarks>This is equivilent to v += new Vector2( x, y );</remarks>
            <returns>the resultant Vector4</returns>        
        </member>
        <member name="M:DotNet3D.Math.Vector4.DotProduct(DotNet3D.Math.Vector4)">
            <summary>
            	Performs a Dot Product operation on 2 vectors, which produces the angle between them.
            </summary>
            <param name="vector">The vector to perform the Dot Product against.</param>
            <returns>The angle between the 2 vectors.</returns>       
        </member>
        <member name="M:DotNet3D.Math.Vector4.MidPoint(DotNet3D.Math.Vector4)">
            <summary>
            	Finds the midpoint between the supplied Vector and this vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.ToCeiling(DotNet3D.Math.Vector4)">
            <summary>
            	Compares the supplied vector and updates it's x/y/z/w components of they are higher in value.
            </summary>
            <param name="compare"></param>
        </member>
        <member name="M:DotNet3D.Math.Vector4.ToFloor(DotNet3D.Math.Vector4)">
            <summary>
            	Compares the supplied vector and updates it's x/y/z/w components of they are lower in value.
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.ToNormalized">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Normalize">
            <summary>
            	Normalizes the vector.
            </summary>
            <remarks>
            	This method normalises the vector such that it's
            	length / magnitude is 1. The result is called a unit vector.
            	<p/>
            	This function will not crash for zero-sized vectors, but there
            	will be no changes made to their components.
            </remarks>
            <returns>The previous length of the vector.</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.Reflect(DotNet3D.Math.Vector4)">
            <summary>
               Calculates a reflection vector to the plane with the given normal.
            </summary>
            <remarks>
               Assumes this vector is pointing AWAY from the plane, invert if not.
            </remarks>
            <param name="normal">Normal vector on which this vector will be reflected.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector4.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization contructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DotNet3D.Math.Vector4.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Method
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsPostiveInfinity">
            <summary>Return True if the vector is the Positive Infinity Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsNegativeInfinity">
            <summary>Return True if the vector is the Negative Infinity Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsInvalid">
            <summary>Return True if the vector is the Invalid Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsZero">
            <summary>Return True if the vector is the Zero Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsUnitX">
            <summary>Return True if the vector is the Unit X Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsUnitY">
            <summary>Return True if the vector is the UnitY Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsUnitZ">
            <summary>Return True if the vector is the UnitZ Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsUnitW">
            <summary>Return True if the vector is the UnitW Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsNegativeUnitX">
            <summary>Return True if the vector is the NegativeUnitX Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsNegativeUnitY">
            <summary>Return True if the vector is the NegativeUnitY Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsNegativeUnitZ">
            <summary>Return True if the vector is the NegativeUnitY Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsNegativeUnitW">
            <summary>Return True if the vector is the NegativeUnitW Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsUnit">
            <summary>Return True if the vector is the Unit Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.IsNormalized">
            <summary>Return True if the vector is Normalized</summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.Length">
            <summary>
               Gets the length (magnitude) of this Vector4.  The Sqrt operation is expensive, so 
               only use this if you need the exact length of the Vector.  If vector lengths are only going
               to be compared, use LengthSquared instead.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.LengthSquared">
            <summary>
               Returns the length (magnitude) of the vector squared.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector4.Item(System.Int32)">
            <summary>
            	Used to access a Vector by index 0 = x, 1 = y, 2 = z.  
            </summary>
            <remarks>
            uses unsafe pointer arithmatic for speed
            </remarks>
            <exception cref="!:ArgumentOutOfRange"/>
        </member>
        <member name="T:RealmForge.PluginLoadingException">
            <summary>
            That exception that is thrown when a problem occurs during the loading, initialization, or execution of a plug-in.
            </summary>
        </member>
        <member name="T:RealmForge.AssertionFailedException">
            <summary>
            The exception that is thrown when an invalid state is encountered in a method or when an outcome is not as expected
            </summary>
        </member>
        <member name="T:DotNet3D.Math.Vector3">
            <summary>
               Standard 3-dimensional vector.
            </summary>
            <remarks>
                A direction in 3D space represented as distances along the 3
                orthoganal axes (x, y, z). Note that positions, directions and
                scaling factors can be represented by a vector, depending on how
                you interpret the values.
            </remarks>
        </member>
        <member name="F:DotNet3D.Math.Vector3.x">
            <summary>X component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.y">
            <summary>Y component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.z">
            <summary>Z component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.PositiveInfinity">
            <summary>Gets a Vector3 with all units set to positive infinity.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.NegativeInfinity">
            <summary>Gets a Vector3 with all units set to negative infinity.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.Invalid">
            <summary>Gets a Vector3 with all units set to Invalid.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.Zero">
            <summary>Gets a Vector3 with all components set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.UnitX">
            <summary>Gets a Vector3 with the X set to 1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.UnitY">
            <summary>Gets a Vector3 with the Y set to 1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.UnitZ">
            <summary>Gets a Vector3 with the Z set to 1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.NegativeUnitX">
            <summary>Gets a Vector3 with the X set to -1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.NegativeUnitY">
            <summary>Gets a Vector3 with the Y set to -1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.NegativeUnitZ">
            <summary>Gets a Vector3 with the Z set to -1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector3.Unit">
            <summary>Gets a Vector3 with all components set to 1.</summary>
        </member>
        <member name="M:DotNet3D.Math.Vector3.#ctor(DotNet3D.Math.Vector3)">
            <overloads>
            <summary>
                Creates a new 3 dimensional Vector.
            </summary>
            </overloads>
            <param name="source">the source vector.</param>
        </member>
        <member name="M:DotNet3D.Math.Vector3.#ctor(DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <param name="x">X position.</param>
            <param name="y">Y position</param>
            <param name="z">Z position</param>
        </member>
        <member name="M:DotNet3D.Math.Vector3.#ctor(DotNet3D.Math.Real)">
            <param name="unitDimension"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DotNet3D.Math.Vector3.#ctor(System.String)" -->
        <member name="M:DotNet3D.Math.Vector3.#ctor(DotNet3D.Math.Real[])">
            <param name="coordinates">An array of 3 decimal values.</param>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Parse(System.String)">
            <summary>
            Parses a Vector3 from a string
            </summary>
            <remarks>
            The parseableText parameter is a comma seperated list of values e.g. "(###, ###)" 
            </remarks>
            <param name="text">a comma seperated list of values</param>
            <returns>a new instance</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.ToString">
            <overrides>
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Vector3.
            </summary>
            <returns>A string representation of a Vector3.</returns>
            </overrides>
        </member>
        <member name="M:DotNet3D.Math.Vector3.ToString(System.Int32)">
            <param name="decimalPlaces">number of decimal places to render</param>
        </member>
        <member name="M:DotNet3D.Math.Vector3.GetHashCode">
            <summary>
            	Provides a unique hash code based on the member variables of this
            	class.  This should be done because the equality operators (==, !=)
            	have been overriden by this class.
            	<p/>
            	The standard implementation is a simple XOR operation between all local
            	member variables.
            </summary>
            <returns>a unique code to represent this object</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Equals(System.Object)">
            <summary>
            	Compares this Vector to another object.  This should be done because the 
            	equality operators (==, !=) have been overriden by this class.
            </summary>
            <param name="obj">object to compare to</param>
            <returns>true or false</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Addition(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Used when a Vector3 is added to another Vector3.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Subtraction(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Used to subtract a Vector3 from another Vector3.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Multiply(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Used when a Vector3 is multiplied by another vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Multiply(DotNet3D.Math.Vector3,DotNet3D.Math.Real)">
            <summary>
            	Used when a Vector3 is multiplied by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Multiply(DotNet3D.Math.Real,DotNet3D.Math.Vector3)">
            <summary>
            	Used when a scalar value is multiplied by a Vector3.
            </summary>
            <param name="scalar"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Division(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Used when a Vector3 is divided by another vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Division(DotNet3D.Math.Vector3,DotNet3D.Math.Real)">
            <summary>
            Used to divide a vector by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_UnaryNegation(DotNet3D.Math.Vector3)">
            <summary>
            	Used to negate the elements of a vector.
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Equality(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	User to compare two Vector3 instances for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true or false</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Inequality(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	User to compare two Vector3 instances for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true or false</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_GreaterThan(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
               Returns true if the vector's scalar components are all smaller
               that the ones of the vector it is compared against.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_LessThan(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
               Returns true if the vector's scalar components are all greater
               that the ones of the vector it is compared against.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Add(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Used when a Vector3 is added to another Vector3.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Subtract(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Used to subtract a Vector3 from another Vector3.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Multiply(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Used when a Vector3 is multiplied by another vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Multiply(DotNet3D.Math.Vector3,DotNet3D.Math.Real)">
            <summary>
            	Used when a Vector3 is multiplied by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Multiply(DotNet3D.Math.Real,DotNet3D.Math.Vector3)">
            <summary>
            	Used when a scalar value is multiplied by a Vector3.
            </summary>
            <param name="scalar"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Divide(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Used when a Vector3 is divided by another vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Divide(DotNet3D.Math.Vector3,DotNet3D.Math.Real)">
            <summary>
            Used to divide a vector by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Negate(DotNet3D.Math.Vector3)">
            <summary>
            	Used to negate the elements of a vector.
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Implicit(System.String)~DotNet3D.Math.Vector3">
            <summary>
            Implicit conversion from string to Vector3
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Explicit(DotNet3D.Math.Vector3)~System.String">
            <summary>
            Explicit conversion from Vector3 to string
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Implicit(DotNet3D.Math.Real[])~DotNet3D.Math.Vector3">
            <summary>
            Implicit conversion from Real[] to Vector3
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.op_Explicit(DotNet3D.Math.Vector3)~DotNet3D.Math.Vector4">
            <summary>
            Explicit conversion from a Vector3 to a Vector4
            </summary>
            <param name="vec3"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.ToArray``1">
            <summary>
            Generic method to get the elments of the vector as an array.
            </summary>
            <typeparam name="K">Any value based type (Real, int, float, decimal... )</typeparam>
            <returns>An array of the specified type containing 3 elements</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.ToArray">
            <summary>
            Specific method to get the elments of the vector as an array of Reals.
            </summary>
            <returns>An array Reals containing 3 elements</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Offset(DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            Offsets the Vector2 by the specified values.
            </summary>
            <param name="x">Amount to offset the x component.</param>
            <param name="y">Amount to offset the y component.</param>
            <param name="y">Amount to offset the z component.</param>
            <remarks>This is equivilent to v += new Vector2( x, y );</remarks>
            <returns>the resultant Vector3</returns>        
        </member>
        <member name="M:DotNet3D.Math.Vector3.DotProduct(DotNet3D.Math.Vector3)">
            <summary>
            	Performs a Dot Product operation on 2 vectors, which produces the angle between them.
            </summary>
            <param name="vector">The vector to perform the Dot Product against.</param>
            <returns>The angle between the 2 vectors.</returns>       
        </member>
        <member name="M:DotNet3D.Math.Vector3.CrossProduct(DotNet3D.Math.Vector3)">
            <summary>
            	Performs a Cross Product operation on 2 vectors, which returns a vector that is perpendicular
            	to the intersection of the 2 vectors.  Useful for finding face normals.
            </summary>
            <param name="vector">A vector to perform the Cross Product against.</param>
            <returns>A new Vector3 perpedicular to the 2 original vectors.</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Perpendicular">
            <summary>
            	Finds a vector perpendicular to this one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.MidPoint(DotNet3D.Math.Vector3)">
            <summary>
            	Finds the midpoint between the supplied Vector and this vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.ToCeiling(DotNet3D.Math.Vector3)">
            <summary>
            	Compares the supplied vector and updates it's x/y/z components of they are higher in value.
            </summary>
            <param name="compare"></param>
        </member>
        <member name="M:DotNet3D.Math.Vector3.ToFloor(DotNet3D.Math.Vector3)">
            <summary>
            	Compares the supplied vector and updates it's x/y/z components of they are lower in value.
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.GetRotationTo(DotNet3D.Math.Vector3)">
            <summary>
            	Gets the shortest arc quaternion to rotate this vector to the destination vector. 
            </summary>
            <remarks>
            	Don't call this if you think the dest vector can be close to the inverse
            	of this vector, since then ANY axis of rotation is ok.
            </remarks>
        </member>
        <member name="M:DotNet3D.Math.Vector3.ToNormalized">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Normalize">
            <summary>
            	Normalizes the vector.
            </summary>
            <remarks>
            	This method normalises the vector such that it's
            	length / magnitude is 1. The result is called a unit vector.
            	<p/>
            	This function will not crash for zero-sized vectors, but there
            	will be no changes made to their components.
            </remarks>
            <returns>The previous length of the vector.</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.Reflect(DotNet3D.Math.Vector3)">
            <summary>
               Calculates a reflection vector to the plane with the given normal.
            </summary>
            <remarks>
               Assumes this vector is pointing AWAY from the plane, invert if not.
            </remarks>
            <param name="normal">Normal vector on which this vector will be reflected.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.RandomDeviant(DotNet3D.Math.Radian,DotNet3D.Math.Vector3)">
            <summary>
            Generates a new random vector which deviates from this vector by a
            given angle in a random direction.
            </summary>
            <remarks>
            This method assumes that the random number generator has already 
            been seeded appropriately.
            </remarks>
            <param name="angle">The angle at which to deviate</param>
            <param name="up">Any vector perpendicular to this one (which could generated 
                   by cross-product of this vector and any other non-colinear 
                   vector). If you choose not to provide this the function will 
                   derive one on it's own, however if you provide one yourself the 
                   function will be faster (this allows you to reuse up vectors if 
                   you call this method more than once) 
            </param>
            <returns>A random vector which deviates from this vector by angle. This 
                   vector will not be normalised, normalise it if you wish 
                   afterwards.
            </returns>
        </member>
        <member name="M:DotNet3D.Math.Vector3.PositionEquals(DotNet3D.Math.Vector3)">
            <overloads>
            <summary>Returns wether this vector is within a positional tolerance of another vector</summary>
            <param name="right">The vector to compare with</param>
            </overloads>
            <remarks>Uses a defalut tolerance of 1E-03</remarks>
        </member>
        <member name="M:DotNet3D.Math.Vector3.PositionEquals(DotNet3D.Math.Vector3,DotNet3D.Math.Real)">
            <param name="tolerance">The amount that each element of the vector may vary by and still be considered equal.</param>
        </member>
        <member name="M:DotNet3D.Math.Vector3.DirectionEquals(DotNet3D.Math.Vector3,DotNet3D.Math.Radian)">
            <summary>
            Returns whether this vector is within a directional tolerance of another vector.
            </summary>
            <param name="right">The vector to compare with.</param>
            <param name="tolerance">The maximum angle by which the vectors may vary and still be considered equal.</param>
        </member>
        <member name="M:DotNet3D.Math.Vector3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization contructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DotNet3D.Math.Vector3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Method
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsPostiveInfinity">
            <summary>Return True if the vector is the Positive Infinity Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsNegativeInfinity">
            <summary>Return True if the vector is the Negative Infinity Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsInvalid">
            <summary>Return True if the vector is the Invalid Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsZero">
            <summary>Return True if the vector is the Zero Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsUnitX">
            <summary>Return True if the vector is the Unit X Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsUnitY">
            <summary>Return True if the vector is the UnitY Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsUnitZ">
            <summary>Return True if the vector is the UnitZ Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsNegativeUnitX">
            <summary>Return True if the vector is the NegativeUnitX Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsNegativeUnitY">
            <summary>Return True if the vector is the NegativeUnitY Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsNegativeUnitZ">
            <summary>Return True if the vector is the NegativeUnitY Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsUnit">
            <summary>Return True if the vector is the Unit Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.IsNormalized">
            <summary>Return True if the vector is Normalized</summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.Length">
            <summary>
               Gets the length (magnitude) of this Vector3.  The Sqrt operation is expensive, so 
               only use this if you need the exact length of the Vector.  If vector lengths are only going
               to be compared, use LengthSquared instead.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.LengthSquared">
            <summary>
               Returns the length (magnitude) of the vector squared.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector3.Item(System.Int32)">
            <summary>
            	Used to access a Vector by index 0 = x, 1 = y, 2 = z.  
            </summary>
            <remarks>
            uses unsafe pointer arithmatic for speed
            </remarks>
            <exception cref="!:ArgumentOutOfRange"/>
        </member>
        <member name="T:Axiom.MathLib.PositionalSpline">
            <summary>
            	A Catmull-Rom spline that can be used for interpolating translation movements.
            </summary>
            <remarks>
            	A Catmull-Rom spline is a derivitive of the Hermite spline.  The difference is that the Hermite spline
            	allows you to specifiy 2 endpoints and 2 tangents, then the spline is generated.  A Catmull-Rom spline
            	allows you to just supply 1-n number of points and the tangents will be automatically calculated.
            	<p/>
            	Derivation of the hermite polynomial can be found here: 
            	<a href="http://www.cs.unc.edu/~hoff/projects/comp236/curves/papers/hermite.html">Hermite splines.</a>
            </remarks>
        </member>
        <member name="F:Axiom.MathLib.PositionalSpline.pointList">
            <summary>Collection of control points.</summary>
        </member>
        <member name="F:Axiom.MathLib.PositionalSpline.tangentList">
            <summary>Collection of generated tangents for the spline controls points.</summary>
        </member>
        <member name="F:Axiom.MathLib.PositionalSpline.autoCalculateTangents">
            <summary>Specifies whether or not to recalculate tangents as each control point is added.</summary>
        </member>
        <member name="M:Axiom.MathLib.PositionalSpline.#ctor">
            <summary>
            	Creates a new Positional Spline.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.PositionalSpline.AddPoint(DotNet3D.Math.Vector3)">
            <summary>
               Adds a new control point to the end of this spline.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Axiom.MathLib.PositionalSpline.Clear">
            <summary>
               Removes all current control points from this spline.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.PositionalSpline.GetPoint(System.Int32)">
            <summary>
                Returns the point at the specified index.
            </summary>
            <param name="index">Index at which to retreive a point.</param>
            <returns>Vector3 containing the point data.</returns>
        </member>
        <member name="M:Axiom.MathLib.PositionalSpline.Interpolate(System.Single)">
            <summary>
            	Returns an interpolated point based on a parametric value over the whole series.
            </summary>
            <remarks>
            	Given a t value between 0 and 1 representing the parametric distance along the
            	whole length of the spline, this method returns an interpolated point.
            </remarks>
            <param name="t">Parametric value.</param>
            <returns>An interpolated point along the spline.</returns>
        </member>
        <member name="M:Axiom.MathLib.PositionalSpline.Interpolate(System.Int32,System.Single)">
            <summary>
            	Interpolates a single segment of the spline given a parametric value.
            </summary>
            <param name="index">The point index to treat as t=0. index + 1 is deemed to be t=1</param>
            <param name="t">Parametric value</param>
            <returns>An interpolated point along the spline.</returns>
        </member>
        <member name="M:Axiom.MathLib.PositionalSpline.RecalculateTangents">
            <summary>
            	Recalculates the tangents associated with this spline. 
            </summary>
            <remarks>
            	If you tell the spline not to update on demand by setting AutoCalculate to false,
            	then you must call this after completing your updates to the spline points.
            </remarks>
        </member>
        <member name="P:Axiom.MathLib.PositionalSpline.AutoCalculate">
            <summary>
            	Specifies whether or not to recalculate tangents as each control point is added.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.PositionalSpline.PointCount">
            <summary>
               Gets the number of control points in this spline.
            </summary>
        </member>
        <member name="T:DotNet3D.Math.Plane">
             <summary>
             Defines a plane in 3D space.
             </summary>
             <remarks>
             A plane is defined in 3D space by the equation
             Ax + By + Cz + D = 0
            
             This equates to a vector (the normal of the plane, whose x, y
             and z components equate to the coefficients A, B and C
             respectively), and a constant (D) which is the distance along
             the normal you have to go to move the plane back to the origin.
             </remarks>
        </member>
        <member name="F:DotNet3D.Math.Plane.Normal">
            <summary>
            	Direction the plane is facing.
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Plane.Distance">
            <summary>
            	Distance from the origin.
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Plane.#ctor(DotNet3D.Math.Vector3,System.Single)">
            <summary>
            	Construct a plane through a normal, and a distance to move the plane along the normal.
            </summary>
            <param name="normal"></param>
            <param name="constant"></param>
        </member>
        <member name="M:DotNet3D.Math.Plane.#ctor(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Construct a plane from 3 coplanar points.
            </summary>
            <param name="point0">First point.</param>
            <param name="point1">Second point.</param>
            <param name="point2">Third point.</param>
        </member>
        <member name="M:DotNet3D.Math.Plane.GetSide(DotNet3D.Math.Vector3)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Plane.GetDistance(DotNet3D.Math.Vector3)">
            <summary>
            This is a pseudodistance. The sign of the return value is
            positive if the point is on the positive side of the plane,
            negative if the point is on the negative side, and zero if the
             point is on the plane.
            The absolute value of the return value is the true distance only
            when the plane normal is a unit length vector.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Plane.Redefine(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Construct a plane from 3 coplanar points.
            </summary>
            <param name="point0">First point.</param>
            <param name="point1">Second point.</param>
            <param name="point2">Third point.</param>
        </member>
        <member name="M:DotNet3D.Math.Plane.Equals(System.Object)">
            <summary>
            	Object method for testing equality.
            </summary>
            <param name="obj">Object to test.</param>
            <returns>True if the 2 planes are logically equal, false otherwise.</returns>
        </member>
        <member name="M:DotNet3D.Math.Plane.GetHashCode">
            <summary>
            	Gets the hashcode for this Plane.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Plane.ToString">
            <summary>
            	Returns a string representation of this Plane.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Plane.op_Equality(DotNet3D.Math.Plane,DotNet3D.Math.Plane)">
            <summary>
            	Compares 2 Planes for equality.
            </summary>
            <param name="left">First plane.</param>
            <param name="right">Second plane.</param>
            <returns>true if equal, false if not equal.</returns>
        </member>
        <member name="M:DotNet3D.Math.Plane.op_Inequality(DotNet3D.Math.Plane,DotNet3D.Math.Plane)">
            <summary>
            	Compares 2 Planes for inequality.
            </summary>
            <param name="left">First plane.</param>
            <param name="right">Second plane.</param>
            <returns>true if not equal, false if equal.</returns>
        </member>
        <member name="T:DotNet3D.Math.Plane.Side">
            <summary>
            The "positive side" of the plane is the half space to which the
            plane normal points. The "negative side" is the other half
            space. The flag "no side" indicates the plane itself.
            </summary>
        </member>
        <member name="T:DotNet3D.Math.Collections.PlaneList">
            <summary>
            A Collection of Planes
            </summary>
        </member>
        <member name="T:RealmForge.Collections.IdentifiableCollectionBase">
            <summary>
            Provides the light-weight base class for strongly-typed tables of T's keyed to their ID's
            </summary>
            <remarks>The underlying collection is a SortedList so this is light-weight and geared towards smaller and infrequently modified collections.</remarks>
        </member>
        <member name="T:DotNet3D.Math.Real">
            <summary>
            a floating point number abstraction allows the use of either a single-precision or double-precision floating point number
            </summary>
            <remarks>
            Use the _REAL_AS_DOUBLE condition compilation argument to use a double-precision value or
            _REAL_AS_SINGLE to use a single-precision value.
            </remarks>
        </member>
        <member name="F:DotNet3D.Math.Real.englishCulture">
            <summary>
            	Culture info to use for parsing numeric data.
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Real._value">
            <summary>Internal storage for value</summary>
        </member>
        <member name="F:DotNet3D.Math.Real.Zero">
            <summary>The value 0</summary>
        </member>
        <member name="F:DotNet3D.Math.Real.PositiveInfinity">
            <summary>The value of Positive Infinity</summary>
        </member>
        <member name="F:DotNet3D.Math.Real.NegativeInfinity">
            <summary>The value of Negative Infinity</summary>
        </member>
        <member name="F:DotNet3D.Math.Real.NaN">
            <summary>Represents not a number</summary>
        </member>
        <member name="F:DotNet3D.Math.Real.Epsilon">
            <summary>The value of Epsilon</summary>
        </member>
        <member name="F:DotNet3D.Math.Real.MaxValue">
            <summary>The maximum possible value</summary>
        </member>
        <member name="F:DotNet3D.Math.Real.MinValue">
            <summary>The minimum possible value</summary>
        </member>
        <member name="M:DotNet3D.Math.Real.IsPositiveInfinity(DotNet3D.Math.Real)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity
            </summary>
            <param name="number">a floating point number</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:DotNet3D.Math.Real.IsNegativeInfinity(DotNet3D.Math.Real)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity
            </summary>
            <param name="number">a floating point number</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:DotNet3D.Math.Real.IsInfinity(DotNet3D.Math.Real)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity
            </summary>
            <param name="number">a floating point number</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:DotNet3D.Math.Real.IsNaN(DotNet3D.Math.Real)">
            <summary>
            Returns a value indicating whether the specified number evaluates to not a number
            </summary>
            <param name="number">a floating point number</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Parse(System.String)">
            <overloads>
            <summary>
            converts a string representation of a number in a specified style and culture-specific format
            to its floating point number equivilent
            </summary>
            <param name="value">a floating point number</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <returns>a Real</returns>
            </overloads>
        </member>
        <member name="M:DotNet3D.Math.Real.Parse(System.String,System.IFormatProvider)">
            <param name="value"></param>
            <param name="provider"></param>
        </member>
        <member name="M:DotNet3D.Math.Real.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <param name="value"></param>
            <param name="style"></param>
            <param name="provider"></param>
        </member>
        <member name="M:DotNet3D.Math.Real.Parse(System.String,System.Globalization.NumberStyles)">
            <param name="value">a floating point number</param>
            <param name="style"></param>
        </member>
        <member name="M:DotNet3D.Math.Real.#ctor(System.Int32)">
            <overloads>
            <summary>
            initializes a Real with a specified value
            </summary>
            </overloads>
            <param name="value">an integer representation of the value to convert</param>
        </member>
        <member name="M:DotNet3D.Math.Real.#ctor(System.Int64)">
            <param name="value">a long representation of the value to convert</param>
        </member>
        <member name="M:DotNet3D.Math.Real.#ctor(System.Single)">
            <param name="value">a float representation of the value to convert</param>
        </member>
        <member name="M:DotNet3D.Math.Real.#ctor(System.Double)">
            <param name="value">a double representation of the value to convert</param>
        </member>
        <member name="M:DotNet3D.Math.Real.#ctor(System.Decimal)">
            <param name="value">a decimal representation of the value to convert</param>
        </member>
        <member name="M:DotNet3D.Math.Real.#ctor(System.String)">
            <param name="value">a string representation of the value to convert</param>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Implicit(System.Int32)~DotNet3D.Math.Real">
            <summary>
            Implicit conversion from int to Real
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Explicit(DotNet3D.Math.Real)~System.Int32">
            <summary>
            Explicit conversion from Real to int
            </summary>
            <param name="real"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Implicit(System.Int64)~DotNet3D.Math.Real">
            <summary>
            Implicit conversion from int to Real
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Explicit(DotNet3D.Math.Real)~System.Int64">
            <summary>
            Explicit conversion from Real to int
            </summary>
            <param name="real"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Implicit(System.Single)~DotNet3D.Math.Real">
            <summary>
            Implicit conversion from float to Real
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Implicit(DotNet3D.Math.Real)~System.Single">
            <summary>
            Implicit conversion from Real to float
            </summary>
            <param name="real"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Implicit(System.Double)~DotNet3D.Math.Real">
            <summary>
            Implicit conversion from double to Real
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Implicit(DotNet3D.Math.Real)~System.Double">
            <summary>
            Explicit conversion from Real to double
            </summary>
            <param name="real"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Implicit(System.Decimal)~DotNet3D.Math.Real">
            <summary>
            Implicit conversion from decimal to Real
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Explicit(DotNet3D.Math.Real)~System.Decimal">
            <summary>
            Explicit conversion from Real to decimal
            </summary>
            <param name="real"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Implicit(System.String)~DotNet3D.Math.Real">
            <summary>
            Implicit conversion from string to Real
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Explicit(DotNet3D.Math.Real)~System.String">
            <summary>
            Explicit conversion from Real to string
            </summary>
            <param name="real"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Equality(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            Used to test equality between two Reals
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
            <remarks>The == operator uses the static Tolerance value to determine equality</remarks>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Inequality(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            Used to test inequality between two Reals
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
            <remarks>The == operator uses the static Tolerance value to determine equality </remarks>
        </member>
        <member name="M:DotNet3D.Math.Real.op_GreaterThan(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_LessThan(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_GreaterThanOrEqual(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_LessThanOrEqual(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Addition(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            	Used when a Real is added to another Real.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Subtraction(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            	Used to subtract a Real from another Real.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Multiply(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            	Used when a Real is multiplied by a Real.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_Division(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
                Used when a Real is divided by a Real
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.op_UnaryNegation(DotNet3D.Math.Real)">
            <summary>
            	Used to negate the elements of a Real.
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Add(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            	Used when a Real is added to another Real.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Subtract(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            	Used to subtract a Real from another Real.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Multiply(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            	Used when a Real is multiplied by a Real.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Divide(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            Used when a Real is divided by a Real.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Negate(DotNet3D.Math.Real)">
            <summary>
            	Used to negate the elements of a Real.
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Floor">
            <summary>
            Returns the samllest integer less than or equal to the current value
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Ceiling">
            <summary>
            Returns the samllest integer greater than or equal to the current value
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Equals(DotNet3D.Math.Real)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.Equals(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Real.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DotNet3D.Math.Real.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DotNet3D.Math.Real.CompareTo(DotNet3D.Math.Real)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:RealmForge.Serialization.New.SerializationFormatter">
            <summary>
            Summary description for SerializationFormatter.
            </summary>
        </member>
        <member name="T:DotNet3D.Math.Vector2">
             <summary>
             Standard 2-Dimensional Vector.
             </summary>
             <remarks>            
             A direction in 2D space represented as distances along the 2
             orthoganal axes (x, y). Note that positions, directions and
             scaling factors can be represented by a vector, depending on how
             you interpret the values.
            </remarks>
        </member>
        <member name="F:DotNet3D.Math.Vector2.x">
            <summary>X component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector2.y">
            <summary>Y component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector2.PositiveInfinity">
            <summary>Gets a Vector2 with all units set to positive infinity.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector2.NegativeInfinity">
            <summary>Gets a Vector2 with all units set to negative infinity.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector2.Invalid">
            <summary>Gets a Vector2 with all units set to Invalid.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector2.Zero">
            <summary>Gets a Vector2 with all components set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector2.UnitX">
            <summary>Gets a Vector2 with the X set to 1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector2.UnitY">
            <summary>Gets a Vector2 with the Y set to 1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector2.NegativeUnitX">
            <summary>Gets a Vector2 with the X set to -1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector2.NegativeUnitY">
            <summary>Gets a Vector2 with the Y set to -1, and the others set to 0.</summary>
        </member>
        <member name="F:DotNet3D.Math.Vector2.Unit">
            <summary>Gets a Vector2 with all components set to 1.</summary>
        </member>
        <member name="M:DotNet3D.Math.Vector2.#ctor(DotNet3D.Math.Vector2)">
            <overloads>
            <summary>
                Creates a new Vector2
            </summary>
            </overloads>
            <param name="source">the source vector.</param>
        </member>
        <member name="M:DotNet3D.Math.Vector2.#ctor(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <param name="x">X position.</param>
            <param name="y">Y position</param>
        </member>
        <member name="M:DotNet3D.Math.Vector2.#ctor(DotNet3D.Math.Real)">
            <param name="unitDimension"></param>
        </member>
        <member name="M:DotNet3D.Math.Vector2.#ctor(System.String)">
            <remarks>
            The parseableText parameter is a comma seperated list of values e.g. "&lt; 1.0, 1.0 &gt;" 
            Format : {[(&lt;} Real, Real {&gt;)]}
            </remarks>
            <param name="parsableText">a comma seperated list of values</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:DotNet3D.Math.Vector2.#ctor(DotNet3D.Math.Real[])">
            <param name="coordinates">An array of 2 decimal values.</param>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Parse(System.String)">
            <summary>
            Parses a Vector2 from a string
            </summary>
            <remarks>
            The parseableText parameter is a comma seperated list of values e.g. "(###, ###)" 
            </remarks>
            <param name="text">a comma seperated list of values</param>
            <returns>a new instance</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.ToString">
            <overrides>
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Vector2.
            </summary>
            <returns>A string representation of a Vector2.</returns>
            </overrides>
        </member>
        <member name="M:DotNet3D.Math.Vector2.ToString(System.Int32)">
            <param name="decimalPlaces">number of decimal places to render</param>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Equals(System.Object)">
            <summary>
            	Compares this Vector to another object.  This should be done because the 
            	equality operators (==, !=) have been overriden by this class.
            </summary>
            <param name="obj">object to compare to</param>
            <returns>true or false</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.GetHashCode">
            <summary>
            	Provides a unique hash code based on the member variables of this
            	class.  This should be done because the equality operators (==, !=)
            	have been overriden by this class.
            	<p/>
            	The standard implementation is a simple XOR operation between all local
            	member variables.
            </summary>
            <returns>a unique code to represent this object</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Addition(DotNet3D.Math.Vector2,DotNet3D.Math.Vector2)">
            <summary>
            	Used when a Vector2 is added to another Vector2.
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Subtraction(DotNet3D.Math.Vector2,DotNet3D.Math.Vector2)">
            <summary>
            	Used to subtract a Vector2 from another Vector2.
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Multiply(DotNet3D.Math.Vector2,DotNet3D.Math.Vector2)">
            <summary>
            	Used when a Vector2 is multiplied by a Vector2.
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Multiply(DotNet3D.Math.Vector2,DotNet3D.Math.Real)">
            <summary>
            	Used when a Vector2 is multiplied by a scalar value.
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="scalar">The scalar to multiply by</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Multiply(DotNet3D.Math.Real,DotNet3D.Math.Vector2)">
            <summary>
            	Used when a scalar value is multiplied by a Vector2.
            </summary>
            <param name="scalar">The scalar to multiply by</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Equality(DotNet3D.Math.Vector2,DotNet3D.Math.Vector2)">
            <summary>
            Used to test equality between two Vector2s
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Inequality(DotNet3D.Math.Vector2,DotNet3D.Math.Vector2)">
            <summary>
            Used to test inequality between two Vector2s
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_UnaryNegation(DotNet3D.Math.Vector2)">
            <summary>
            	Used to negate the elements of a vector.
            </summary>
            <param name="left">LHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_GreaterThan(DotNet3D.Math.Vector2,DotNet3D.Math.Vector2)">
            <summary>
               Returns true if the vector's scalar components are all smaller
               that the ones of the vector it is compared against.
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_LessThan(DotNet3D.Math.Vector2,DotNet3D.Math.Vector2)">
            <summary>
               Returns true if the vector's scalar components are all greater
               that the ones of the vector it is compared against.
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Add(DotNet3D.Math.Vector2,DotNet3D.Math.Vector2)">
            <summary>
            	Used when a Vector2 is added to another Vector2.
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Subtract(DotNet3D.Math.Vector2,DotNet3D.Math.Vector2)">
            <summary>
            	Used to subtract a Vector2 from another Vector2.
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Multiply(DotNet3D.Math.Vector2,DotNet3D.Math.Vector2)">
            <summary>
            	Used when a Vector2 is multiplied by a Vector2.
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Multiply(DotNet3D.Math.Vector2,DotNet3D.Math.Real)">
            <summary>
            	Used when a Vector2 is multiplied by a scalar value.
            </summary>
            <param name="left">LHS of the operator</param>
            <param name="scalar">The scalar to multiply by</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Multiply(DotNet3D.Math.Real,DotNet3D.Math.Vector2)">
            <summary>
            	Used when a scalar value is multiplied by a Vector2.
            </summary>
            <param name="scalar">The scalar to multiply by</param>
            <param name="right">RHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Negate(DotNet3D.Math.Vector2)">
            <summary>
            	Used to negate the elements of a vector.
            </summary>
            <param name="left">LHS of the operator</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Implicit(System.String)~DotNet3D.Math.Vector2">
            <summary>
            Implicit conversion from string to Vector2
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Explicit(DotNet3D.Math.Vector2)~System.String">
            <summary>
            Explicit conversion from Vector2 to string
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Implicit(DotNet3D.Math.Real[])~DotNet3D.Math.Vector2">
            <summary>
            Implicit conversion from Real[] to Vector2
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.op_Explicit(DotNet3D.Math.Vector2)~DotNet3D.Math.Vector3">
            <summary>
            Explicit conversion from a Vector3 to a Vector4
            </summary>
            <param name="vec3"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.ToArray``1">
            <summary>
            Generic method to get the elments of the vector as an array.
            </summary>
            <typeparam name="K">Any value based type (Real, int, float, decimal... )</typeparam>
            <returns>An array of the specified type containing 2 elements</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.ToArray">
            <summary>
            Specific method to get the elments of the vector as an array of Reals.
            </summary>
            <returns>An array Reals containing 2 elements</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Offset(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            Offsets the Vector2 by the specified values.
            </summary>
            <param name="x">Amount to offset the x component.</param>
            <param name="y">Amount to offset the y component.</param>
            <remarks>This is equivilent to v += new Vector2( x, y );</remarks>
            <returns>the resultant Vector3</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.DotProduct(DotNet3D.Math.Vector2)">
            <summary>
            	Performs a Dot Product operation on 2 vectors, which produces the angle between them.
            </summary>
            <param name="vector">The vector to perform the Dot Product against.</param>
            <returns>The angle between the 2 vectors.</returns>       
        </member>
        <member name="M:DotNet3D.Math.Vector2.CrossProduct(DotNet3D.Math.Vector2)">
            <summary>
            	Performs a Cross Product operation on 2 vectors, which returns a vector that is perpendicular
            	to the intersection of the 2 vectors.  Useful for finding face normals.
            </summary>
            <param name="vector">A vector to perform the Cross Product against.</param>
            <returns>A new Vector2 perpedicular to the 2 original vectors.</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Perpendicular">
            <summary>
            	Finds a vector perpendicular to this one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.MidPoint(DotNet3D.Math.Vector2)">
            <summary>
            	Finds the midpoint between the supplied Vector and this vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.ToCeiling(DotNet3D.Math.Vector2)">
            <summary>
            	Compares the supplied vector and updates it's x/y/z components of they are higher in value.
            </summary>
            <param name="compare"></param>
        </member>
        <member name="M:DotNet3D.Math.Vector2.ToFloor(DotNet3D.Math.Vector2)">
            <summary>
            	Compares the supplied vector and updates it's x/y/z components of they are lower in value.
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.ToNormalized">
            <summary>
            returns a normailized vector of the current vector.
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Normalize">
            <summary>
            	Normalizes the vector.
            </summary>
            <remarks>
            	This method normalises the vector such that it's
            	length / magnitude is 1. The result is called a unit vector.
            	<p/>
            	This function will not crash for zero-sized vectors, but there
            	will be no changes made to their components.
            </remarks>
            <returns>The previous length of the vector.</returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.Reflect(DotNet3D.Math.Vector2)">
            <summary>
               Calculates a reflection vector to the plane with the given normal.
            </summary>
            <remarks>
               Assumes this vector is pointing AWAY from the plane, invert if not.
            </remarks>
            <param name="normal">Normal vector on which this vector will be reflected.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Vector2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization contructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DotNet3D.Math.Vector2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Method
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:DotNet3D.Math.Vector2.IsPostiveInfinity">
            <summary>Return True if the vector is the Positive Infinity Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.IsNegativeInfinity">
            <summary>Return True if the vector is the Negative Infinity Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.IsInvalid">
            <summary>Return True if the vector is the Invalid Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.IsZero">
            <summary>Return True if the vector is the Zero Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.IsUnitX">
            <summary>Return True if the vector is the Unit X Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.IsUnitY">
            <summary>Return True if the vector is the UnitY Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.IsNegativeUnitX">
            <summary>Return True if the vector is the NegativeUnitX Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.IsNegativeUnitY">
            <summary>Return True if the vector is the NegativeUnitY Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.IsUnit">
            <summary>Return True if the vector is the Unit Vector </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.IsNormalized">
            <summary>Return True if the vector is normalized </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.Length">
            <summary>
               Gets the length (magnitude) of this Vector3.  The Sqrt operation is expensive, so 
               only use this if you need the exact length of the Vector.  If vector lengths are only going
               to be compared, use LengthSquared instead.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.LengthSquared">
            <summary>
               Returns the length (magnitude) of the vector squared.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Vector2.Item(System.Int32)">
            <summary>
            	Used to access a Vector by index 0 = x, 1 = y. 
            </summary>
            <remarks>
            uses unsafe pointer arithmatic for speed
            </remarks>
            <exception cref="!:ArgumentOutOfRange"/>
        </member>
        <member name="T:Axiom.MathLib.Intersection">
            <summary>
               Type of intersection detected between 2 object.
            </summary>
        </member>
        <member name="F:Axiom.MathLib.Intersection.None">
            <summary>
               The objects are not intersecting.
            </summary>
        </member>
        <member name="F:Axiom.MathLib.Intersection.Contained">
            <summary>
               An object is fully contained within another object.
            </summary>
        </member>
        <member name="F:Axiom.MathLib.Intersection.Contains">
            <summary>
               An object fully contains another object.
            </summary>
        </member>
        <member name="F:Axiom.MathLib.Intersection.Partial">
            <summary>
               The objects are partially intersecting each other.
            </summary>
        </member>
        <member name="T:RealmForge.ParsableFlagCollection">
            <summary>
            Summary description for FlagCollection.
            </summary>
            <remarks>You should probably override Clone()</remarks>
        </member>
        <member name="T:RealmForge.Reflection.TypeInstanceList">
            <summary>
            
            </summary>
        </member>
        <member name="T:RealmForge.Reflection.ClassSerializationInfoCollection">
            <summary>
            A collection of stored serialization rules which support different kinds of 
            serialization including support for versioning
            </summary>
            <remarks>The rules are stored to cut down on the overhead of Reflection for every object that is serialized or deserialized</remarks>
        </member>
        <member name="F:RealmForge.Reflection.ClassSerializationInfoCollection.DEFAULT_ALIAS_IS_FULL_NAME">
            <summary>
            If true, then uses the fully qualified type name as the tag name/alias instead of just the class name
            This fixes the case in which mulitple classes have the same name (as is common with scripts) but different namespaces
            </summary>
        </member>
        <member name="M:RealmForge.Reflection.ClassSerializationInfoCollection.RegisterType(System.Type,System.Object)">
            <summary>
            This is called explicitly to associate a class with a helper, so it overrides any existing serialization info
            </summary>
            <param name="type"></param>
            <param name="parserOrFactory"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.Reflection.ClassSerializationInfoCollection.RegisterType(System.Type)">
            <summary>
            Registers the type for deserialization if not already registered
            </summary>
            <remarks>This is called for every field encountered to ensure that their types are registered</remarks>
            <param name="type"></param>
        </member>
        <member name="T:DotNet3D.Math.Quaternion">
            <summary>
            Implementation of a Quaternion, i.e. a rotation around an axis.
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Quaternion.w">
            <summary>W component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Quaternion.x">
            <summary>X component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Quaternion.y">
            <summary>Y component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Quaternion.z">
            <summary>Z component.</summary>
        </member>
        <member name="F:DotNet3D.Math.Quaternion.Identity">
            <summary>An Identity Quaternion.</summary>
        </member>
        <member name="F:DotNet3D.Math.Quaternion.Zero">
            <summary>A Quaternion with all elements set to 0.0;</summary>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.#ctor(DotNet3D.Math.Quaternion)">
            <overloads>
            <summary>
            Creates a new Quaternion.
            </summary>
            </overloads>
            <param name="source">the source vector.</param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.#ctor(DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.#ctor(DotNet3D.Math.Matrix3)">
            <summary>
            Construct a quaternion from an rotational matrix
            </summary>
            <param name="rot"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.#ctor(DotNet3D.Math.Radian,DotNet3D.Math.Vector3)">
            <summary>
            Construct a quaternion from an angle/axis
            </summary>
            <param name="angle"></param>
            <param name="axis"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.#ctor(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            Construct a quaternion from 3 orthonormal local axes
            </summary>
            <param name="xaxis"></param>
            <param name="yaxis"></param>
            <param name="zaxis"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.#ctor(DotNet3D.Math.Vector3[])">
            <summary>
            Construct a quaternion from 3 orthonormal local axes
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Slerp(DotNet3D.Math.Real,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="quatA"></param>
            <param name="quatB"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Slerp(DotNet3D.Math.Real,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="quatA"></param>
            <param name="quatB"></param>
            <param name="useShortestPath"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.SlerpExtraSpins(DotNet3D.Math.Real,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion,System.Int32)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="quatA"></param>
            <param name="quatB"></param>
            <param name="extraSpins"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Nlerp(DotNet3D.Math.Real,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <overloads><summary>
            normalised linear interpolation - faster but less accurate (non-constant rotation velocity)
            </summary>
            <param name="fT"></param>
            <param name="rkP"></param>
            <param name="rkQ"></param>
            <returns></returns>
            </overloads>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Nlerp(DotNet3D.Math.Real,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion,System.Boolean)">
            <param name="shortestPath"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Intermediate(DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion@,DotNet3D.Math.Quaternion@)">
            <summary>
            setup for spherical quadratic interpolation
            </summary>
            <param name="rkQ0"></param>
            <param name="rkQ1"></param>
            <param name="rkQ2"></param>
            <param name="rka"></param>
            <param name="rkB"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Squad(DotNet3D.Math.Real,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <overloads>
            <summary>
            	Performs spherical quadratic interpolation.
            </summary>
            <param name="t"></param>
            <param name="p"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="q"></param>
            </overloads>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Squad(DotNet3D.Math.Real,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion,System.Boolean)">
            <param name="useShortestPath"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.ToString">
            <overrides>
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Quaternion.
            </summary>
            <returns>A string representation of a Quaternion.</returns>
            </overrides>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.ToString(System.Int32)">
            <param name="decimalPlaces">number of decimal places to render</param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.GetHashCode">
            <summary>
            	Provides a unique hash code based on the member variables of this
            	class.  This should be done because the equality operators (==, !=)
            	have been overriden by this class.
            	<p/>
            	The standard implementation is a simple XOR operation between all local
            	member variables.
            </summary>
            <returns>a unique code to represent this object</returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Equals(System.Object)">
            <overloads>
            <summary>
            	Compares this Vector to another object. This should be done because the 
            	equality operators (==, !=) have been overriden by this class.
            </summary>
            </overloads>
            <param name="obj">object to compare to</param>
            <returns>true or false</returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Equals(DotNet3D.Math.Quaternion,DotNet3D.Math.Real)">
            <param name="right"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.op_Addition(DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <summary>
            Used when a Quaternion is added to another Quaternion.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.op_UnaryNegation(DotNet3D.Math.Quaternion)">
            <summary>
                Negates a Quaternion, which simply returns a new Quaternion
                with all components negated.
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.op_Subtraction(DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.op_Multiply(DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <summary>
            Used to multiply 2 Quaternions together.
            </summary>
            <remarks>
            	Quaternion multiplication is not communative in most cases.
            	i.e. p*q != q*p
            </remarks>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.op_Multiply(DotNet3D.Math.Quaternion,DotNet3D.Math.Vector3)">
            <summary>
            
            </summary>
            <param name="quat"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.op_Multiply(DotNet3D.Math.Quaternion,DotNet3D.Math.Real)">
            <summary>
            Used when a Quaternion is multiplied by a Real value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.op_Multiply(DotNet3D.Math.Real,DotNet3D.Math.Quaternion)">
            <summary>
            Used when a Real value is multiplied by a Quaternion.
            </summary>
            <param name="scalar"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.op_Equality(DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.op_Inequality(DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Add(DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <summary>
            Used when a Quaternion is added to another Quaternion.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Negate(DotNet3D.Math.Quaternion)">
            <summary>
                Negates a Quaternion, which simply returns a new Quaternion
                with all components negated.
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Subtract(DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Multiply(DotNet3D.Math.Quaternion,DotNet3D.Math.Quaternion)">
            <summary>
            Used to multiply 2 Quaternions together.
            </summary>
            <remarks>
            	Quaternion multiplication is not communative in most cases.
            	i.e. p*q != q*p
            </remarks>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Multiply(DotNet3D.Math.Quaternion,DotNet3D.Math.Vector3)">
            <summary>
            
            </summary>
            <param name="quat"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Multiply(DotNet3D.Math.Quaternion,DotNet3D.Math.Real)">
            <summary>
            Used when a Quaternion is multiplied by a Real value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Multiply(DotNet3D.Math.Real,DotNet3D.Math.Quaternion)">
            <summary>
            Used when a Real value is multiplied by a Quaternion.
            </summary>
            <param name="scalar"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.DotProduct(DotNet3D.Math.Quaternion)">
            <summary>
            Performs a Dot Product operation on 2 Quaternions.
            </summary>
            <param name="quat"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Normalize">
            <summary>
            	Normalizes elements of this quaterion to the range [0,1].
            </summary>
            <returns>The previous length of the Quaternion</returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Inverse">
            <summary>
            Computes the inverse of a Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.UnitInverse">
            <summary>
            Computes the unit inverse of a Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Log">
            <summary>
            	Calculates the logarithm of a Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.Exp">
            <summary>
            	Calculates the Exponent of a Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.FromRotationMatrix(DotNet3D.Math.Matrix3)">
            <summary>
            
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.ToRotationMatrix">
            <summary>
            Gets a 3x3 rotation matrix from this Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.FromAngleAxis(DotNet3D.Math.Radian,DotNet3D.Math.Vector3)">
            <summary>
            Creates a Quaternion from a supplied angle and axis.
            </summary>
            <param name="angle">Value of an angle in radians.</param>
            <param name="axis">Arbitrary axis vector.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.ToAngleAxis(DotNet3D.Math.Radian@,DotNet3D.Math.Vector3@)">
            <summary>
               
            </summary>
            <param name="angle"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.FromAxes(DotNet3D.Math.Vector3[])">
            <summary>
            Initializes the Quaternion from a single Vector3
            </summary>
            <param name="axis">the Vector3</param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.FromAxes(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            
            </summary>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <param name="zAxis"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.ToAxes(DotNet3D.Math.Vector3[]@)">
            <summary>
            Initializes the Quaternion from a single Vector3
            </summary>
            <param name="axis">the Vector3</param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.ToAxes(DotNet3D.Math.Vector3@,DotNet3D.Math.Vector3@,DotNet3D.Math.Vector3@)">
            <summary>
            
            </summary>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <param name="zAxis"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization contructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DotNet3D.Math.Quaternion.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Method
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:DotNet3D.Math.Quaternion.Norm">
            <summary>
            	Squared 'length' of this quaternion.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Quaternion.XAxis">
            <summary>
               Local X-axis portion of this rotation.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Quaternion.YAxis">
            <summary>
               Local Y-axis portion of this rotation.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Quaternion.ZAxis">
            <summary>
               Local Z-axis portion of this rotation.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Quaternion.Roll">
            <summary>
            
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Quaternion.Pitch">
            <summary>
            
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Quaternion.Yaw">
            <summary>
            
            </summary>
        </member>
        <member name="T:DotNet3D.Math.Collections.QuaternionCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:RealmForge.DynamicInspectionException">
            <summary>
            The exception that is thrown when an error occurs during the dynamic inspection of assemblies for plugin discovery purposes.
            </summary>
        </member>
        <member name="T:RealmForge.StringUtil">
            <summary>
            A Utility class for parsing and string interpolation, replacement, and manipulation
            </summary>
        </member>
        <member name="M:RealmForge.StringUtil.FindGroups(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a collection of StringLocationPair objects that represent the matches
            </summary>
            <param name="target"></param>
            <param name="beforeGroup"></param>
            <param name="afterGroup"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.StringUtil.InterpolateForVariables(System.String,RealmForge.StringLookup)">
            <summary>
            Replaces ${var} statements in a string with the corresonding values as detirmined by the lookup delegate
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.StringUtil.InterpolateForFormatVariables(System.String,RealmForge.StringLookup)">
            <summary>
            Replaces {var} statements in a string with the corresonding values as detirmined by the lookup delegate
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.StringUtil.InterpolateForEnvironmentVariables(System.String)">
            <summary>
            Replaces ${var} statements in a string with the corresonding environment variable with name var
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:RealmForge.Log">
            <summary>
            A Log that writes to a log file and can listen in on Trace and Debug messages
            </summary>
        </member>
        <member name="F:RealmForge.Log.Verbose">
            <summary>
            If the log writes verbose statements, otherwise they are filtered out
            </summary>
        </member>
        <member name="F:RealmForge.Log.timedStatements">
            <summary>
            
            </summary>
            <remarks>Could also be implemented with a stack, but would be easily corrupted</remarks>
        </member>
        <member name="M:RealmForge.Log.Write(System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="showStackTrace"></param>
            <example>
            ERROR: System.ArugumentException
            Must be a good argument
            at .... at..... at.....
            ERROR: System.NullReferenceException
            Parameter can not be null
            at .... at..... at.....
            
            More Log...
            </example>
        </member>
        <member name="T:RealmForge.IIdentifiable">
            <summary>
            Represents a object which has a unique ID
            </summary>
            <remarks>For instance with all scene objects must have unique IDs respect to eachother
            regardless of whether they are Entities or Scene Nodes or another type></remarks>
        </member>
        <member name="P:RealmForge.IIdentifiable.ID">
            <summary>
            Gets or Sets the unique identifier which is also the key for IDictionary collections
            </summary>
        </member>
        <member name="T:RealmForge.FileSystem.Encrypter">
            <summary>
            A Utility class for encrypting and decrypting streams, bytes, and strings
            </summary>
        </member>
        <member name="M:RealmForge.FileSystem.Encrypter.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt a byte array into a byte array using a key and an iv 
            </summary>
            <param name="clearData"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.FileSystem.Encrypter.Encrypt(System.String,System.String)">
            <summary>
            Encrypt a string into a string using a password 
            </summary>
            <param name="clearText"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.FileSystem.Encrypter.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypt bytes into bytes using a password 
            </summary>
            <param name="clearData"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.FileSystem.Encrypter.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypt a file into another file using a password 
            </summary>
            <param name="fileIn"></param>
            <param name="fileOut"></param>
            <param name="password"></param>
        </member>
        <member name="M:RealmForge.FileSystem.Encrypter.Encrypt(System.IO.Stream,System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Encrypt a file into another file using a password 
            </summary>
            <param name="fsIn"></param>
            <param name="fileOut"></param>
            <param name="password"></param>
            <remarks>Be sure to move the stream position to 0 if wanted, closes fsOut</remarks>
        </member>
        <member name="M:RealmForge.FileSystem.Encrypter.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypt a byte array into a byte array using a key and an iv 
            </summary>
            <param name="cipherData"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.FileSystem.Encrypter.Decrypt(System.String,System.String)">
            <summary>
            Decrypt a string into a string using a password 
            </summary>
            <param name="cipherText"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.FileSystem.Encrypter.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypt bytes into bytes using a password 
            </summary>
            <param name="cipherData"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.FileSystem.Encrypter.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypt a file into another file using a password 
            </summary>
            <param name="fileIn"></param>
            <param name="fileOut"></param>
            <param name="password"></param>
        </member>
        <member name="M:RealmForge.FileSystem.Encrypter.Decrypt(System.IO.Stream,System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Decrypt a file into another file using a password 
            </summary>
            <param name="fileIn"></param>
            <param name="fileOut"></param>
            <param name="password"></param>
            <remarks>Be sure to move the stream position to 0 if wanted, closes fsOut</remarks>
        </member>
        <member name="T:RealmForge.NotFoundException">
            <summary>
            The exception that is thrown when a type or resource or object was not found, but expected to be
            </summary>
        </member>
        <member name="T:RealmForge.InvalidResourceException">
            <summary>
            That exception that is thrown when a resource that was read or inspected was not of a valid format or with valid data
            </summary>
        </member>
        <member name="T:DotNet3D.Math.Degree">
            <summary>
            Wrapper class which indicates a given angle value is in Radian.
            </summary>
            <remarks>
            Degree values are interchangeable with Radian values, and conversions
            will be done automatically between them.
            </remarks>
        </member>
        <member name="T:RealmForge.FileSystem.CompressionFormat">
            <summary>
            Represents the format used for the creation and reading of compressed streams and archives
            </summary>
        </member>
        <member name="T:RealmForge.FileSystem.Compressor">
            <summary>
            Compression and decompression singleton utility which is implemented using SharpZipLib
            </summary>
            <remarks>
            gzip is faster then Zip on Compression and is slightly smaller
            bzip2 is about 2.2x as slow, but produces about .8 the size for larger streams
            Though a lot of speed is lost with larger files, bzip likely wont make the stream that much smaller for small packets of XML, so the faster gzip should be used
            Output Streams Compress
            </remarks>
            TODO
        </member>
        <member name="T:RealmForge.CollectionUtil">
            <summary>
            Utility class of static methods for collection manipulation
            </summary>
            <remarks>Provides functionality such as creating dictionaries and lists from parameters arrays and finding an item from index for an ICollection</remarks>
        </member>
        <member name="M:RealmForge.CollectionUtil.CombineTables(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Copies over the addedData table into the baseData table replacing any existing entries,
            if baseData is null then returns addedData or a new Hashtable
            </summary>
            <param name="addedData"></param>
            <param name="baseData"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.CollectionUtil.CombineTables(System.Collections.IDictionary,System.Collections.IDictionary,RealmForge.DuplicateFoundAction)">
            <summary>
            Copies over the addedData table into the baseData table replacing any existing entries,
            if baseData is null then returns addedData or a new Hashtable
            </summary>
            <param name="addedData"></param>
            <param name="baseData"></param>
            <returns></returns>
        </member>
        <member name="T:RealmForge.Scripting.FieldEditableComponent">
            <summary>
            Represents the base class for components which provide their public fields as properties so that they can be edited by the ProperyGrid as well.
            </summary>
        </member>
        <member name="T:Axiom.MathLib.Ray">
            <summary>
            	Representation of a ray in space, ie a line with an origin and direction.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Ray.#ctor">
            <summary>
               Default constructor.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Ray.#ctor(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
               Constructor.
            </summary>
            <param name="origin">Starting point of the ray.</param>
            <param name="direction">Direction the ray is pointing.</param>
        </member>
        <member name="M:Axiom.MathLib.Ray.Intersects(Axiom.MathLib.AxisAlignedBox)">
            <summary>
               Tests whether this ray intersects the given box.
            </summary>
            <param name="box"></param>
            <returns>
            	Struct containing info on whether there was a hit, and the distance from the 
            	origin of this ray where the intersect happened.
            </returns>
        </member>
        <member name="M:Axiom.MathLib.Ray.Intersects(DotNet3D.Math.Plane)">
            <summary>
            	Tests whether this ray intersects the given plane. 
            </summary>
            <param name="plane"></param>
            <returns>
            	Struct containing info on whether there was a hit, and the distance from the 
            	origin of this ray where the intersect happened.
            </returns>
        </member>
        <member name="M:Axiom.MathLib.Ray.Intersects(Axiom.MathLib.Sphere)">
            <summary>
            	Tests whether this ray intersects the given sphere. 
            </summary>
            <param name="sphere"></param>
            <returns>
            	Struct containing info on whether there was a hit, and the distance from the 
            	origin of this ray where the intersect happened.
            </returns>
        </member>
        <member name="M:Axiom.MathLib.Ray.Intersects(Axiom.MathLib.PlaneBoundedVolume)">
            <summary>
            	Tests whether this ray intersects the given PlaneBoundedVolume. 
            </summary>
            <param name="volume"></param>
            <returns>
            	Struct containing info on whether there was a hit, and the distance from the 
            	origin of this ray where the intersect happened.
            </returns>
        </member>
        <member name="M:Axiom.MathLib.Ray.op_Multiply(Axiom.MathLib.Ray,System.Single)">
            <summary>
               Gets the position of a point t units along the ray.
            </summary>
            <param name="ray"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:Axiom.MathLib.Ray.Origin">
            <summary>
               Gets/Sets the origin of the ray.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Ray.Direction">
            <summary>
               Gets/Sets the direction this ray is pointing.
            </summary>
            <remarks>
               A ray has no length, so the direction goes to infinity.
            </remarks>
        </member>
        <member name="T:Axiom.MathLib.AxisAlignedBox">
            <summary>
            	A 3D box aligned with the x/y/z axes.
            </summary>
            <remarks>
            	This class represents a simple box which is aligned with the
                axes. Internally it only stores 2 points as the extremeties of
                the box, one which is the minima of all 3 axes, and the other
                which is the maxima of all 3 axes. This class is typically used
                for an axis-aligned bounding box (AABB) for collision and
                visibility determination.
            </remarks>
        </member>
        <member name="M:Axiom.MathLib.AxisAlignedBox.Transform(DotNet3D.Math.Matrix4)">
            <summary>
            
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Axiom.MathLib.AxisAlignedBox.UpdateCorners">
            <summary>
            
            </summary>
        </member>
        <member name="M:Axiom.MathLib.AxisAlignedBox.SetExtents(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Sets both Minimum and Maximum at once, so that UpdateCorners only
            	needs to be called once as well.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Axiom.MathLib.AxisAlignedBox.Scale(DotNet3D.Math.Vector3)">
            <summary>
               Scales the size of the box by the supplied factor.
            </summary>
            <param name="factor">Factor of scaling to apply to the box.</param>
        </member>
        <member name="M:Axiom.MathLib.AxisAlignedBox.Intersects(Axiom.MathLib.AxisAlignedBox)">
            <summary>
            	Returns whether or not this box intersects another.
            </summary>
            <param name="box2"></param>
            <returns>True if the 2 boxes intersect, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.AxisAlignedBox.Intersects(Axiom.MathLib.Sphere)">
            <summary>
            	Tests whether this box intersects a sphere.
            </summary>
            <param name="sphere"></param>
            <returns>True if the sphere intersects, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.AxisAlignedBox.Intersects(DotNet3D.Math.Plane)">
            <summary>
            
            </summary>
            <param name="plane"></param>
            <returns>True if the plane intersects, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.AxisAlignedBox.Intersects(DotNet3D.Math.Vector3)">
            <summary>
            	Tests whether the vector point is within this box.
            </summary>
            <param name="vector"></param>
            <returns>True if the vector is within this box, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.AxisAlignedBox.Merge(Axiom.MathLib.AxisAlignedBox)">
            <summary>
            	Allows for merging two boxes together (combining).
            </summary>
            <param name="box">Source box.</param>
        </member>
        <member name="P:Axiom.MathLib.AxisAlignedBox.Center">
            <summary>
               Gets the center point of this bounding box.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.AxisAlignedBox.Maximum">
            <summary>
            	Gets/Sets the maximum corner of the box.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.AxisAlignedBox.Minimum">
            <summary>
            	Gets/Sets the minimum corner of the box.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.AxisAlignedBox.Corners">
            <summary>
            	Returns an array of 8 corner points, useful for
            	collision vs. non-aligned objects.
             </summary>
             <remarks>
            	If the order of these corners is important, they are as
            	follows: The 4 points of the minimum Z face (note that
            	because we use right-handed coordinates, the minimum Z is
            	at the 'back' of the box) starting with the minimum point of
            	all, then anticlockwise around this face (if you are looking
            	onto the face from outside the box). Then the 4 points of the
            	maximum Z face, starting with maximum point of all, then
            	anticlockwise around this face (looking onto the face from
            	outside the box). Like this:
            	<pre>
            		 1-----2
            	    /|     /|
            	  /  |   /  |
            	5-----4   |
            	|   0-|--3
            	|  /   |  /
            	|/     |/
            	6-----7
            	</pre>
            </remarks>
        </member>
        <member name="P:Axiom.MathLib.AxisAlignedBox.IsNull">
            <summary>
            	Gets/Sets the value of whether this box is null (i.e. not dimensions, etc).
            </summary>
        </member>
        <member name="P:Axiom.MathLib.AxisAlignedBox.Null">
            <summary>
            	Returns a null box
            </summary>
        </member>
        <member name="T:RealmForge.SerializedClassAttribute">
             <summary>
             Allows custom version-supporting serialization with the XmlFormatter
             </summary>
             <remarks>If this attribute is applied to a class then it will be checked for SerializedAttribute's for custom serialization this will override and of the following default functionality
             For classes such as ArrayList which implement IList, the Add() and indexer are used
             For classes such as SortedList or hashtable, they items are serialized similiar to to an IList, but an additional reserved _keyProperty attribute is added to detirmine what will be used as the key
             For classes such as Queue, Stack, and others which have Serialized attribute applied, they are serialized using private members
             For classes which do not have SerializedAttribute applied to them, the public members are serialized
             
             This use of a collection of stored attribute values is much more efficient because attributes are created every time that they are inspected
            </remarks>
        </member>
        <member name="M:RealmForge.SerializedClassAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of this tag in collections and when is root tag</param>
        </member>
        <member name="M:RealmForge.SerializedClassAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of this tag in collections and when is root tag</param>
            <param name="keyXmlTagName">The name of the xml tag for the property used as a key when this is stored in an IDictionary collection, used to prevent repetitive XML data</param>
            NOTE: For better versioning support may want to use "params string[] oldTagNames"
        </member>
        <member name="T:RealmForge.Meshes">
            <summary>
            A static class that enumerates all the different meshes that come with the RealmForge Media Library
            </summary>
        </member>
        <member name="T:RealmForge.FileSystem.NamespaceDoc">
            <summary>
            The RealmForge.FileSystem namespace contains classes for compression, virtual file system managment, encrytion, and file searching.
            </summary>
        </member>
        <member name="T:RealmForge.Reflection.ClassSerializationInfo">
            <summary>
            Summary description for ClassSerializationInfo.
            </summary>
        </member>
        <member name="M:RealmForge.Reflection.ClassSerializationInfo.#ctor(System.Type,System.String,RealmForge.Reflection.SerializeType,RealmForge.Serialization.IObjectFactory,RealmForge.Serialization.IObjectParser,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="tagName"></param>
            <param name="mode"></param>
            <param name="factory"></param>
            <param name="parser"></param>
            <param name="keyPropertyName">Member name of the items in an IDictionary class used for the key in deserialization, this is used if there is none specified in the SerializedAttribute or if this is the root object in serialization</param>
        </member>
        <member name="M:RealmForge.Reflection.ClassSerializationInfo.GetSerializableData(System.Object)">
            <summary>
            Gets the data used to deserialize an instance of this class type
            </summary>
            <param name="instance">the object of this class type to be deserialized</param>
            <returns>IList for KeyedLists and Lists, string for Parsable and Parser, IDictionary for SelfDeserialized, Factory, Field, Public, and Custom</returns>
        </member>
        <member name="M:RealmForge.Reflection.ClassSerializationInfo.CreateObject(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.Reflection.ClassSerializationInfo.GetMemberValue(System.Object,System.String)">
            <summary>
            Gets the value of one of the members of an instance of this class
            </summary>
            <param name="instance"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:RealmForge.Reflection.ClassSerializationInfo.Factory">
            <summary>
            Gets or Sets the helper factory
            </summary>
        </member>
        <member name="T:RealmForge.Collections.IdentifiableTableBase">
            <summary>
            Provides the light-weight base class for strongly-typed tables of IIdentifiable's keyed to their ID's
            </summary>
            <remarks>The underlying collection is a SortedList so this is light-weight and geared towards smaller and infrequently modified collections.</remarks>
        </member>
        <member name="T:RealmForge.Scripting.IgnoredScriptAttribute">
            <summary>
            An attribute that when applied to an IScript class will not allow its instance to be edited with the property grid
            in the event set designer dialog or even included in the RF.Scripts list
            </summary>
            <remarks>This is used by wrapper classes like EventHandlerCaller.</remarks>
        </member>
        <member name="T:RealmForge.Reflection.NamespaceDoc">
            <summary>
            The RealmForge.Reflection namespace contains utility classes for reflection, type description, and the caching of reflection results for serialization purposes.
            </summary>
        </member>
        <member name="T:RealmForge.FlagCollection">
            <summary>
            Summary description for FlagCollection.
            </summary>
        </member>
        <member name="T:RealmForge.Serialization.New.IClassSerializer">
            <summary>
            Summary description for IClassSerializer.
            </summary>
        </member>
        <member name="T:RealmForge.Test">
            <summary>
            Summary description for Test.
            </summary>
        </member>
        <member name="T:RealmForge.Reflection.MemberSerializationInfo">
            <summary>
            Summary description for MemberSerializationInfo.
            </summary>
        </member>
        <member name="M:RealmForge.Reflection.MemberSerializationInfo.#ctor(System.Reflection.MemberInfo,System.String,System.Boolean,System.Boolean,System.Object,System.String[])">
            <summary>
            For use by Custom member serialization with the SerializedAttribute
            </summary>
            <param name="name"></param>
            <param name="xmlAttrib"></param>
            <param name="useDefaultVal"></param>
            <param name="defaultVal"></param>
            <param name="oldNames"></param>
        </member>
        <member name="T:RealmForge.Reflection.MemberAttributeInfo">
            <summary>
            Summary description for MemberAttributeInfo.
            </summary>
        </member>
        <member name="T:RealmForge.GeneralException">
            <summary>
            The generic exception that is thrown when an application level error occurs.
            </summary>
        </member>
        <member name="T:RealmForge.StandardResources">
            <summary>
            Static utility class providing a constant fields for the paths to the most common images, icons, and other resorces.
            </summary>
        </member>
        <member name="T:RealmForge.FileSearchInfo">
            <summary>
            Summary description for FileSearchInfo.
            </summary>
        </member>
        <member name="T:RealmForge.Serialization.XmlFormatter">
            <summary>
            Summary description for XMLFormatter.
            </summary>
        </member>
        <member name="F:RealmForge.Serialization.XmlFormatter.indent">
            <summary>
            May want to remove this latter on when all data is configured via an editor
            because it adds a lot of overhead
            </summary>
        </member>
        <member name="M:RealmForge.Serialization.XmlFormatter.SaveObject(RealmForge.Reflection.MemberSerializationInfo,System.Object,System.Boolean,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="obj"></param>
            <param name="isAttribOverride">used if info is null</param>
            <param name="nameOverride">used if info is null</param>
        </member>
        <member name="M:RealmForge.Serialization.XmlFormatter.ReadToData(System.Boolean)">
            <summary>
            Continue skipping XML fragments until the next significant xml fragment (text, attribute, the start tag of and element) or the end of file is reached
            </summary>
            <param name="checkCurrent">if true, then the current node will be checked to see if it is significant, otherwise it will always be skipped</param>
            <returns>Node Type of the first critical xml fragment found or None the end of file is encountered.</returns>
        </member>
        <member name="T:RealmForge.Serialization.ParsingData">
            <summary>
            Paremeter for IParsable constructors for creating an instance from parsable text
            </summary>
            <remarks>This is used as a wrapper for the data as a constructor that excepts a single string may already exist</remarks>
        </member>
        <member name="T:Axiom.MathLib.PlaneBoundedVolume">
            <summary>
            	Represents a convex volume bounded by planes.
            </summary>
        </member>
        <member name="F:Axiom.MathLib.PlaneBoundedVolume.planes">
            <summary>
            	Publicly accessible plane list, you can modify this direct.
            </summary>
        </member>
        <member name="F:Axiom.MathLib.PlaneBoundedVolume.outside">
            <summary>
            	Side of the plane to be considered 'outside'.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.PlaneBoundedVolume.#ctor">
            <summary>
            	Default constructor.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.PlaneBoundedVolume.#ctor(DotNet3D.Math.Plane.Side)">
            <summary>
            	Constructor.
            </summary>
            <param name="outside">Side of the plane to be considered 'outside'.</param>
        </member>
        <member name="M:Axiom.MathLib.PlaneBoundedVolume.Intersects(Axiom.MathLib.AxisAlignedBox)">
            <summary>
            	Intersection test with an <see cref="T:Axiom.MathLib.AxisAlignedBox"/>.
            </summary>
            <remarks>
            	May return false positives but will never miss an intersection.
            </remarks>
            <param name="box">Box to test.</param>
            <returns>True if interesecting, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.PlaneBoundedVolume.Intersects(Axiom.MathLib.Sphere)">
            <summary>
            	Intersection test with <see cref="T:Axiom.MathLib.Sphere"/>.
            </summary>
            <param name="sphere">Sphere to test.</param>
            <returns>True if the sphere intersects this volume, and false otherwise.</returns>
        </member>
        <member name="T:Axiom.MathLib.MathUtil">
            <summary>
            This is a class which exposes static methods for various common math functions.  Currently,
            the methods simply wrap the methods of the System.Math class (with the exception of a few added extras).
            This is in case the implementation needs to be swapped out with a faster C++ implementation, if
            deemed that the System.Math methods are not up to far speed wise.
            </summary>
            TODO Add overloads for all methods for all instrinsic data types (i.e. float, short, etc).
        </member>
        <member name="M:Axiom.MathLib.MathUtil.#ctor">
            <summary>
            	Empty private constructor.  This class has nothing but static methods/properties, so a public default
            	constructor should not be created by the compiler.  This prevents instance of this class from being
            	created.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.DegreesToRadians(System.Single)">
            <summary>
            	Converts degrees to radians.
            </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.RadiansToDegrees(System.Single)">
            <summary>
            	Converts radians to degrees.
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Sin(System.Single)">
            <summary>
            	Returns the sine of the angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.BuildReflectionMatrix(DotNet3D.Math.Plane)">
            <summary>
                Builds a reflection matrix for the specified plane.
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.CalculateFaceNormal(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Calculate a face normal, including the w component which is the offset from the origin.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.CalculateBasicFaceNormal(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,DotNet3D.Math.Vector3)">
            <summary>
            	Calculate a face normal, no w-information.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.CalculateTangentSpaceVector(DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,DotNet3D.Math.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
               Calculates the tangent space vector for a given set of positions / texture coords.
            </summary>
            <remarks>
               Adapted from bump mapping tutorials at:
               http://www.paulsprojects.net/tutorials/simplebump/simplebump.html
               author : paul.baker@univ.ox.ac.uk
            </remarks>
            <param name="position1"></param>
            <param name="position2"></param>
            <param name="position3"></param>
            <param name="u1"></param>
            <param name="v1"></param>
            <param name="u2"></param>
            <param name="v2"></param>
            <param name="u3"></param>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Cos(System.Single)">
            <summary>
            	Returns the cosine of the angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.ACos(System.Single)">
            <summary>
            	Returns the arc cosine of the angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.ASin(System.Single)">
            <summary>
            	Returns the arc sine of the angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.InvSqrt(System.Single)">
            <summary>
               Inverse square root.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Sqrt(System.Single)">
            <summary>
            	Returns the square root of a number.
            </summary>
            <remarks>This is one of the more expensive math operations.  Avoid when possible.</remarks>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Abs(System.Single)">
            <summary>
            	Returns the absolute value of the supplied number.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.FloatEqual(System.Single,System.Single,System.Single)">
            <summary>
                Compares float values for equality, taking into consideration
                that floating point values should never be directly compared using
                ==.  2 floats could be conceptually equal, but vary by a 
                .000001 which would fail in a direct comparison.  To circumvent that,
                a tolerance value is used to see if the difference between the 2 floats
                is less than the desired amount of accuracy.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Tan(System.Single)">
            <summary>
            	Returns the tangent of the angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Max(System.Single,System.Single)">
            <summary>
            	Used to quickly determine the greater value between two values.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Min(System.Single,System.Single)">
            <summary>
            	Used to quickly determine the lesser value between two values.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.RangeRandom(System.Single,System.Single)">
            <summary>
               Returns a random value between the specified min and max values.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>A random value in the range [min,max].</returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.UnitRandom">
            <summary>
               
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.SymmetricRandom">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.PointInTri2D(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            	Checks wether a given point is inside a triangle, in a
            	2-dimensional (Cartesian) space.
            </summary>
            <remarks>
            	The vertices of the triangle must be given in either
            	trigonometrical (anticlockwise) or inverse trigonometrical
            	(clockwise) order.
            </remarks>
            <param name="px">
               The X-coordinate of the point.
            </param>
            <param name="py">
               The Y-coordinate of the point.
            </param>
            <param name="ax">
               The X-coordinate of the triangle's first vertex.
            </param>
            <param name="ay">
               The Y-coordinate of the triangle's first vertex.
            </param>
            <param name="bx">
               The X-coordinate of the triangle's second vertex.
            </param>
            <param name="by">
               The Y-coordinate of the triangle's second vertex.
            </param>
            <param name="cx">
               The X-coordinate of the triangle's third vertex.
            </param>
            <param name="cy">
               The Y-coordinate of the triangle's third vertex.
            </param>
            <returns>
               <list type="bullet">
                   <item>
                       <description><b>true</b> - the point resides in the triangle.</description>
                   </item>
                   <item>
                       <description><b>false</b> - the point is outside the triangle</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Intersects(Axiom.MathLib.Ray,Axiom.MathLib.AxisAlignedBox)">
            <summary>
               Tests an intersection between a ray and a box.
            </summary>
            <param name="ray"></param>
            <param name="box"></param>
            <returns>A Pair object containing whether the intersection occurred, and the distance between the 2 objects.</returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Intersects(Axiom.MathLib.AxisAlignedBox,Axiom.MathLib.AxisAlignedBox)">
            <summary>
               Tests an intersection between two boxes.
            </summary>
            <param name="boxA">
               The primary box.
            </param>
            <param name="boxB">
               The box to test intersection with boxA.
            </param>
            <returns>
               <list type="bullet">
                   <item>
                       <description>None - There was no intersection between the 2 boxes.</description>
                   </item>
                   <item>
                       <description>Contained - boxA is fully within boxB.</description>
                    </item>
                   <item>
                       <description>Contains - boxB is fully within boxA.</description>
                    </item>
                   <item>
                       <description>Partial - boxA is partially intersecting with boxB.</description>
                    </item>
                </list>
            </returns>
            Submitted by: romout
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Intersects(Axiom.MathLib.Ray,Axiom.MathLib.Sphere,System.Boolean)">
            <summary>
            	Ray/Sphere intersection test.
            </summary>
            <param name="ray"></param>
            <param name="sphere"></param>
            <param name="discardInside"></param>
            <returns>Struct that contains a bool (hit?) and distance.</returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Intersects(Axiom.MathLib.Ray,DotNet3D.Math.Plane)">
            <summary>
            	Ray/Plane intersection test.
            </summary>
            <param name="ray"></param>
            <param name="plane"></param>
            <returns>Struct that contains a bool (hit?) and distance.</returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Intersects(Axiom.MathLib.Sphere,Axiom.MathLib.AxisAlignedBox)">
            <summary>
            	Sphere/Box intersection test.
            </summary>
            <param name="sphere"></param>
            <param name="box"></param>
            <returns>True if there was an intersection, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Intersects(DotNet3D.Math.Plane,Axiom.MathLib.AxisAlignedBox)">
            <summary>
            	Plane/Box intersection test.
            </summary>
            <param name="plane"></param>
            <param name="box"></param>
            <returns>True if there was an intersection, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Intersects(Axiom.MathLib.Sphere,DotNet3D.Math.Plane)">
            <summary>
            	Sphere/Plane intersection test.
            </summary>
            <param name="sphere"></param>
            <param name="plane"></param>
            <returns>True if there was an intersection, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Intersects(Axiom.MathLib.Ray,Axiom.MathLib.PlaneBoundedVolume)">
            <summary>
               Ray/PlaneBoundedVolume intersection test.
            </summary>
            <param name="ray"></param>
            <param name="volume"></param>
            <returns>Struct that contains a bool (hit?) and distance.</returns>
        </member>
        <member name="T:Axiom.MathLib.IntersectResult">
            <summary>
            	Simple struct to allow returning a complex intersection result.
            </summary>
        </member>
        <member name="F:Axiom.MathLib.IntersectResult.Hit">
            <summary>
            	Did the intersection test result in a hit?
            </summary>
        </member>
        <member name="F:Axiom.MathLib.IntersectResult.Distance">
            <summary>
            	If Hit was true, this will hold a query specific distance value.
            	i.e. for a Ray-Box test, the distance will be the distance from the start point
            	of the ray to the point of intersection.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.IntersectResult.#ctor(System.Boolean,System.Single)">
            <summary>
            	Constructor.
            </summary>
            <param name="hit"></param>
            <param name="distance"></param>
        </member>
        <member name="T:RealmForge.StandardAssemblies">
            <summary>
            When common assemblis are loaded they will set a reference to them here to prevent reliance upon loading by string names which may change
            </summary>
            <remarks>RealmForge plugins should register whatever factories, singletons, or plugins are needed with the Framework or other core assemblies
            and their availability may very depending upon installation or platform so they are not included here.</remarks>
        </member>
        <member name="T:RealmForge.SerializedAttribute">
            <summary>
            An attribute which described how a field or property member of a class will be serialized
            taking different versions of the class into account as well as different data formats
            </summary>
            TODO the member name that represents an ID in IDictionary collections
        </member>
        <member name="T:RealmForge.Serialization.New.MemberSerializer">
            <summary>
            Summary description for MemberSerializer.
            </summary>
        </member>
        <member name="F:RealmForge.Serialization.New.SerializedClassAttribute.KeyMemberAlias">
            <summary>
            The name of the member of this class (or its alias) that provides the key to be used for IDictionary's
            </summary>
        </member>
        <member name="F:RealmForge.Serialization.New.SerializedClassAttribute.UseFullTypeName">
            <summary>
            If this is true then the fully qualified class name is used for the alias, otherwise if any alias is specified it is used or the class name is used.
            </summary>
        </member>
        <member name="T:RealmForge.Serialization.New.ClassSerializer">
            <summary>
            Summary description for ClassSerializer.
            </summary>
        </member>
        <member name="F:RealmForge.Serialization.New.ClassSerializer.DefaultItemKeyAttribute">
            <summary>
            The name of the XML attribute which specifies the key to be used for items in an IDictionary collection that don't have a KeyMemberAlias
            </summary>
        </member>
        <member name="F:RealmForge.Serialization.New.ClassSerializer.DefaultToEmptyCollection">
            <summary>
            If this and IsCollection is true, then if the instance has a Count of 0, then no entry will be serialized for it.
            Also, if during deserialization no entry is encountered, an empty instance of this type will be created and set (regardless of whether the field was null initially before serialization)
            </summary>
        </member>
        <member name="F:RealmForge.Serialization.New.ClassSerializer.ProvidesParseStaticMethod">
            <summary>
            If true, then the ClassName.Parse(text) method will be used during deserialization instead of going member-by-member or using the IParsable constructor that accepts a ParsingData struct
            Generally this is true for standard value types (such as int or bool) which implement IConvertable though custom ones such as Vector3 may implement this.
            </summary>
        </member>
        <member name="T:RealmForge.Serialization.SerializerMemberData">
            <summary>
            Parameter for IParsable and ISelfDeserialized class constructors
            which contains the neccisary info for deserialization
            </summary>
            <remarks>This is used as a wrapper for the IDictionary class because there may already be a constructor with that parameter</remarks>
        </member>
        <member name="T:RealmForge.Scripting.ParsingExpandingTypeConverterBase">
            <summary>
            Represents the base class for Type Converters that when associated with a type or property using the TypeConverter attribute will allow
            it to be edited both as parsable text and a expandable/collapsable tree of properties just like the how Point and Size properties are edited using the PropertyGrid
            </summary>
            <remarks>You must override CreateInstance if there the TargetType is not a struct and there is no parameterless constructor</remarks>
        </member>
        <member name="T:RealmForge.StandardUrls">
            <summary>
            Static utility class providing constant fields for important urls relating to the project.
            </summary>
        </member>
        <member name="T:RealmForge.UI.StandardFonts">
            <summary>
            Static class enumerating all the standard font families and a few non-standard ones
            </summary>
            <remarks>This allows the use of intellisense when hard-coding GUI's to pick out a font instead of guessing at the name</remarks>
        </member>
        <member name="T:DotNet3D.Math.Radian">
            <summary>
            Wrapper class which indicates a given angle value is in Radians.
            </summary>
            <remarks>
            Radian values are interchangeable with Degree values, and conversions
            will be done automatically between them.
            </remarks>
        </member>
        <member name="T:RealmForge.Scripting.FieldPropertyDescriptor">
            <summary>
            Describes a field of a type to allow its use with the properties that are retrieved by TypeDescriptor for use by the PropertyGrid
            </summary>
            <remarks>This is used by the FieldAndPropertyProxyTypeDescriptor to which adds Fields to the list of described properties.</remarks>
        </member>
        <member name="T:Axiom.MathLib.Sphere">
            <summary>
            	A standard sphere, used mostly for bounds checking.
            </summary>
            <remarks>
            	A sphere in math texts is normally represented by the function
            	x^2 + y^2 + z^2 = r^2 (for sphere's centered on the origin). We store spheres
            	simply as a center point and a radius.
            </remarks>
        </member>
        <member name="M:Axiom.MathLib.Sphere.#ctor">
            <summary>
            	Creates a unit sphere centered at the origin.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Sphere.#ctor(DotNet3D.Math.Vector3,System.Single)">
            <summary>
            Creates an arbitrary spehere.
            </summary>
            <param name="center">Center point of the sphere.</param>
            <param name="radius">Radius of the sphere.</param>
        </member>
        <member name="M:Axiom.MathLib.Sphere.Intersects(Axiom.MathLib.Sphere)">
            <summary>
            	Tests for intersection between this sphere and another sphere.
            </summary>
            <param name="sphere">Other sphere.</param>
            <returns>True if the spheres intersect, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.Sphere.Intersects(Axiom.MathLib.AxisAlignedBox)">
            <summary>
            	Returns whether or not this sphere interects a box.
            </summary>
            <param name="box"></param>
            <returns>True if the box intersects, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.Sphere.Intersects(DotNet3D.Math.Plane)">
            <summary>
            	Returns whether or not this sphere interects a plane.
            </summary>
            <param name="plane"></param>
            <returns>True if the plane intersects, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.Sphere.Intersects(DotNet3D.Math.Vector3)">
            <summary>
            	Returns whether or not this sphere interects a Vector3.
            </summary>
            <param name="vector"></param>
            <returns>True if the vector intersects, false otherwise.</returns>
        </member>
        <member name="P:Axiom.MathLib.Sphere.Center">
            <summary>
            	Gets/Sets the center of the sphere.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Sphere.Radius">
            <summary>
            	Gets/Sets the radius of the sphere.
            </summary>
        </member>
        <member name="T:Axiom.MathLib.Collections.Pair">
            <summary>
            	A simple container class for returning a pair of objects from a method call 
            	(similar to std::pair, minus the templates).
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Axiom.MathLib.Collections.Pair`1">
            <summary>
            	A simple container class for returning a pair of objects from a method call 
            	(Generic version).
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:RealmForge.Serialization.BlockWriter">
            <summary>
            Summary description for BlockWriter.
            </summary>
        </member>
        <member name="T:RealmForge.Serialization.BlockReader">
            <summary>
            Reads blocks of a file as delimited a specified character
            Similiar to StreamReader.ReadLine() but using any character as the delimeter
            </summary>
        </member>
        <member name="T:RealmForge.Scripting.Script">
            <summary>
            Represents the method that executes a script to handle a script event
            </summary>
            <remarks>
            The owner is the IScriptable object which features the ScriptEvent which this script is a handler for.
            The target is an optional parameter specifying what target the script is supposed to modify or a critical peice of information
            such as the window ID for an IWindowManager WindowCreator
            The args is a custom data structure which can be used to hold more options, parameters, or setting for the script.
            Most of the parameters for a script, should be properties for it instance however so that they can be edited when the script instance
            is selected in the editor.  Most often target and args are null.
            </remarks>
        </member>
        <member name="T:RealmForge.Scripting.SimpleMethod">
            <summary>
            Represents a method that has no return type and no parameters and which can serve as a parameterless script
            </summary>
        </member>
        <member name="T:RealmForge.Scripting.IScript">
            <summary>
            Represents a unique script object which accepts a table of parameters and can be attached to an entity via a ScriptCall object which defines what paremters should be passed
            There is only 1 instance of every script and they are all cached in the Scripts singleton
            </summary>
            <remarks>
            Script names should be of the form [Product].[Package].[Target].[Action] where Package is optionally.
            Examples: DemoGame.PC.MoveLeft, DemoGame.UI.Window.Hide (where UI is the package or script group), and DemoGamePlugin.Combat.Target.InstantKill
            Since scripts are used often, it may be a good idea to use an acronym or terse alias for the product such as RSL for RealmForgeScriptLibrary or RF for RealmForge or Demo for DemoGame
            The scripts used in the DemoGames, Tutorials, and provided in the RealmForge Script Library, have a product name of RSL such as in RSL.UI.CreatedWindow
            </remarks>
        </member>
        <member name="M:RealmForge.Scripting.IScript.Execute(System.Object,System.Object)">
            <summary>
            The method with a Script signature that executes this script
            </summary>
            <param name="invoker">The entity to which this script is attached or the invoker that called this</param>
            <param name="target">The target which this script is to be performed on, null if there is none</param>
            <param name="args">The collection of parameter values keyed to their parameter names</param>
        </member>
        <member name="T:Axiom.MathLib.RotationalSpline">
            <summary>
            	A class used to interpolate orientations (rotations) along a spline using 
            	derivatives of quaternions.
            </summary>
            <remarks>
            	Like the PositionalSpline class, this class is about interpolating values 
            	smoothly over a spline. Whilst PositionalSpline deals with positions (the normal
            	sense we think about splines), this class interpolates orientations. The
            	theory is identical, except we're now in 4-dimensional space instead of 3.
            	<p/>
            	In positional splines, we use the points and tangents on those points to generate
            	control points for the spline. In this case, we use quaternions and derivatives
            	of the quaternions (i.e. the rate and direction of change at each point). This is the
            	same as PositionalSpline since a tangent is a derivative of a position. We effectively 
            	generate an extra quaternion in between each actual quaternion which when take with 
            	the original quaternion forms the 'tangent' of that quaternion.
            </remarks>
        </member>
        <member name="F:Axiom.MathLib.RotationalSpline.pointList">
            <summary>Collection of control points.</summary>
        </member>
        <member name="F:Axiom.MathLib.RotationalSpline.tangentList">
            <summary>Collection of generated tangents for the spline controls points.</summary>
        </member>
        <member name="F:Axiom.MathLib.RotationalSpline.autoCalculateTangents">
            <summary>Specifies whether or not to recalculate tangents as each control point is added.</summary>
        </member>
        <member name="M:Axiom.MathLib.RotationalSpline.#ctor">
            <summary>
            	Creates a new Rotational Spline.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.RotationalSpline.AddPoint(DotNet3D.Math.Quaternion)">
            <summary>
               Adds a control point to the end of the spline.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Axiom.MathLib.RotationalSpline.Clear">
            <summary>
               Removes all current control points from this spline.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.RotationalSpline.Interpolate(System.Single,System.Boolean)">
            <summary>
            	Returns an interpolated point based on a parametric value over the whole series.
            </summary>
            <remarks>
            	Given a t value between 0 and 1 representing the parametric distance along the
            	whole length of the spline, this method returns an interpolated point.
            </remarks>
            <param name="t">Parametric value.</param>
            <param name="useShortestPath">True forces rotations to use the shortest path.</param>
            <returns>An interpolated point along the spline.</returns>
        </member>
        <member name="M:Axiom.MathLib.RotationalSpline.Interpolate(System.Int32,System.Single,System.Boolean)">
            <summary>
            	Interpolates a single segment of the spline given a parametric value.
            </summary>
            <param name="index">The point index to treat as t=0. index + 1 is deemed to be t=1</param>
            <param name="t">Parametric value</param>
            <returns>An interpolated point along the spline.</returns>
        </member>
        <member name="M:Axiom.MathLib.RotationalSpline.RecalculateTangents">
            <summary>
            	Recalculates the tangents associated with this spline. 
            </summary>
            <remarks>
            	If you tell the spline not to update on demand by setting AutoCalculate to false,
            	then you must call this after completing your updates to the spline points.
            </remarks>
        </member>
        <member name="P:Axiom.MathLib.RotationalSpline.AutoCalculate">
            <summary>
            	Specifies whether or not to recalculate tangents as each control point is added.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.RotationalSpline.PointCount">
            <summary>
               Gets the number of control points in this spline.
            </summary>
        </member>
        <member name="T:DotNet3D.Math.Tuple`2">
            <summary>
            Represents two related values
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Tuple`2.first">
            <summary></summary>
        </member>
        <member name="F:DotNet3D.Math.Tuple`2.second">
            <summary></summary>
        </member>
        <member name="T:DotNet3D.Math.Tuple`3">
            <summary>
            
            </summary>
            <typeparam name="A"></typeparam>
            <typeparam name="B"></typeparam>
            <typeparam name="C"></typeparam>
        </member>
        <member name="F:DotNet3D.Math.Tuple`3.first">
            <summary></summary>
        </member>
        <member name="F:DotNet3D.Math.Tuple`3.second">
            <summary></summary>
        </member>
        <member name="F:DotNet3D.Math.Tuple`3.thrid">
            <summary></summary>
        </member>
        <member name="T:DotNet3D.Math.Tuple`4">
            <summary>
            
            </summary>
            <typeparam name="A"></typeparam>
            <typeparam name="B"></typeparam>
            <typeparam name="C"></typeparam>
            <typeparam name="D"></typeparam>
        </member>
        <member name="F:DotNet3D.Math.Tuple`4.first">
            <summary></summary>
        </member>
        <member name="F:DotNet3D.Math.Tuple`4.second">
            <summary></summary>
        </member>
        <member name="F:DotNet3D.Math.Tuple`4.thrid">
            <summary></summary>
        </member>
        <member name="F:DotNet3D.Math.Tuple`4.fourth">
            <summary></summary>
        </member>
        <member name="T:RealmForge.Serialization.SerializeFormat">
            <summary>
            The enum of diffrent formats that object can be serialized into
            </summary>
        </member>
        <member name="T:RealmForge.Serialization.Serializer">
            <summary>
            Allow serialization and deserailzation of diffrent types of object
            to and from diffrent formats (XML, Binary, Soap) as well as less verbose, 
            version aware Custom Binary and XML formats
            </summary>
            <remarks>
            For data types that can easily be converted to and from a string, implement IParsable
            or register a IParser class with the type
            For custom classes where there is access to the source, apply an Serailized attribute to each
            serialized property choose the overloaded constructor for classes with multple versions
            in which the older data formats should still be able to be deserailized
            </remarks>
        </member>
        <member name="F:RealmForge.Serialization.Serializer.UseBZip2">
            <summary>
            About 2.2x as slow while about .8x the size (for large 400mb files only)
            GZip is the default
            </summary>
        </member>
        <member name="M:RealmForge.Serialization.Serializer.SerializeData(System.Object,System.IO.Stream,RealmForge.Serialization.SerializeFormat,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="file"></param>
            <param name="format"></param>
        </member>
        <member name="M:RealmForge.Serialization.Serializer.DeserializeData(System.Type,System.IO.Stream,RealmForge.Serialization.SerializeFormat,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dataType"></param>
            <param name="file"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.Serialization.Serializer.RegisterClasses">
            <summary>Registers all Serializable classes listed in the Serializer Config File.</summary>
        </member>
        <member name="P:RealmForge.Serialization.Serializer.Instance">
            <summary>
            Gets the Singleton instance
            </summary>
        </member>
        <member name="T:RealmForge.Serialization.ISelfDeserialized">
            <summary>
            Provides functionality to serialize and deserialize an object manually
            This requires that the object can be formated as a string and parsed from one
            An error will be throw on deserailization if there is no constructor that accepts
            one parameter of type SerializedMemberData
            </summary>
            <remarks>if null is returned then run through member info retrieved through reflection
            Unless the type of this object was registered earlier under a Custom, Fields, or Public SerializeType's then there will be no member info
            Members names that start with '@' are used as XML attributes, this is not preserved when deserialized and the @ will not show up for the constructor()
            </remarks>
        </member>
        <member name="T:RealmForge.Serialization.ClassSerializerRegistration">
            <summary>
            Summary description for ClassSerializerRegistration.
            </summary>
        </member>
        <member name="T:RealmForge.Reflector">
            <summary>
            Utility class for .NET Reflection for dynamicly inspecting, modifing, and creating types
            as well as inspecting and querying assemblies
            </summary>
        </member>
        <member name="M:RealmForge.Reflector.CreateObjectsForTypesWith(System.Reflection.Assembly,System.Boolean,System.Boolean,RealmForge.Reflection.TypeInstanceList[])">
            <summary>
            This will create instances of all classes in an assembly that implement the interface
            Prints errors to log
            </summary>
            <param name="assembly"></param>
            <param name="classList"></param>
            <param name="interfaceName"></param>
        </member>
        <member name="M:RealmForge.Reflector.CreateObjectsWithInterface(System.String,System.Type,System.Collections.ArrayList)">
            <summary>
            This will create instances of all classes in an assembly that implement the interface
            </summary>
            <param name="assembly"></param>
            <param name="classList"></param>
            <param name="interfaceName"></param>
        </member>
        <member name="M:RealmForge.Reflector.CreateObjectsWithInterface(System.Reflection.Assembly,System.Type,System.Collections.ArrayList)">
            <summary>
            This will create instances of all classes in an assembly that implement the interface
            </summary>
            <param name="assembly"></param>
            <param name="classList"></param>
            <param name="interfaceName"></param>
        </member>
        <member name="M:RealmForge.Reflector.CreateObjectsWithInterfaces(System.String,RealmForge.Reflection.TypeInstanceList[])">
            <summary>
            This will create instances of all classes in an assembly that implement the interface
            </summary>
            <param name="assembly"></param>
            <param name="classList"></param>
            <param name="interfaceName"></param>
        </member>
        <member name="M:RealmForge.Reflector.CreateObjectsWithBaseClass(System.String,System.Boolean,System.Type,System.Collections.ArrayList)">
            <summary>
            This will create instances of all classes in an assembly that inherit directly
            </summary>
            <param name="assembly"></param>
            <param name="classList"></param>
            <param name="qualifiedBaseClassName">The full qualified (inlcudes namespace) name of the immediate base class (inherits directly)</param>
        </member>
        <member name="M:RealmForge.Reflector.CreateObjectsWithBaseClass(System.Reflection.Assembly,System.Boolean,System.Type,System.Collections.ArrayList)">
            <summary>
            This will create instances of all classes in an assembly that inherit directly
            </summary>
            <param name="assembly"></param>
            <param name="classList"></param>
            <param name="qualifiedBaseClassName">The full qualified (inlcudes namespace) name of the immediate base class (inherits directly)</param>
        </member>
        <member name="M:RealmForge.Reflector.RegisterSerializableClasses">
            <summary>
            Registers that class of the calling assembly that have the SerializedClass attribute
            </summary>
        </member>
        <member name="M:RealmForge.Reflector.GetTypesWithAttribute(System.Reflection.Assembly,System.Type,System.Collections.IDictionary)">
            <summary>
            Gets a table of attributes of the specified type keyed to their target class types
            </summary>
            <param name="assembly"></param>
            <param name="classList"></param>
            <param name="interfaceName"></param>
        </member>
        <member name="M:RealmForge.Reflector.GetTypesWithAttribute(System.String,System.Type,System.Collections.IDictionary)">
            <summary>
            Gets a table of attributes of the specified type keyed to their target class types
            </summary>
            <param name="assemblyPath"></param>
            <param name="classList"></param>
            <param name="interfaceName"></param>
        </member>
        <member name="M:RealmForge.Reflector.InvokeMember(System.Type,System.Object,System.String,System.Boolean,System.Boolean@,System.Object[])">
            <summary>
            Invoked a method or gets or sets a property or field
            Works for static or instance members on the local machine
            </summary>
            <remarks>
            This can be used by Console commands as well if they are not compiled
            This a better alternative to Type.InvokeMember() becuase it figures out the member type and
            Selects the appropriate BindingFlags and also signifies whether there was a return type
            </remarks>
            <param name="type"></param>
            <param name="obj"></param>
            <param name="memberName"></param>
            <param name="setMember"></param>
            <param name="hasReturnVal"></param>
            <param name="paramSet"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.Reflector.GetAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets a collection of MemberAttributeInfo objects for the all members with the specified attribute for the target type
            </summary>
            <param name="targetType"></param>
            <param name="attribType"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:RealmForge.Reflector.GetAttributes(System.Type,System.Type,System.Boolean,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Gets a collection of MemberAttributeInfo objects for the all members with the specified attribute for the target type
            </summary>
            <param name="targetType"></param>
            <param name="attribType"></param>
            <param name="readWriteOnly"></param>
            <param name="flags"></param>
            <param name="checkInherited"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet3D.Math.Matrix4">
            <summary>
            	Class encapsulating a standard 4x4 homogenous matrix.
            </summary>
            <remarks>
            	The engine uses column vectors when applying matrix multiplications,
            	This means a vector is represented as a single column, 4-row
            	matrix. This has the effect that the tranformations implemented
            	by the matrices happens right-to-left e.g. if vector V is to be
            	transformed by M1 then M2 then M3, the calculation would be
            	M3 * M2 * M1 * V. The order that matrices are concatenated is
            	vital since matrix multiplication is not cummatative, i.e. you
            	can get a different result if you concatenate in the wrong order.
            		<p/>
            	The use of column vectors and right-to-left ordering is the
            	standard in most mathematical texts, and is the same as used in
            	OpenGL. It is, however, the opposite of Direct3D, which has
            	inexplicably chosen to differ from the accepted standard and uses
            	row vectors and left-to-right matrix multiplication.
            	<p/>
            	The engine deals with the differences between D3D and OpenGL etc.
            	internally when operating through different render systems. The engine
            	users only need to conform to standard maths conventions, i.e.
            	right-to-left matrix multiplication, (The engine transposes matrices it
            	passes to D3D to compensate).
            	<p/>
            	The generic form M * V which shows the layout of the matrix 
            	entries is shown below:
            	<p/>
            	| m[0][0]  m[0][1]  m[0][2]  m[0][3] |   {x}
            	| m[1][0]  m[1][1]  m[1][2]  m[1][3] |   {y}
            	| m[2][0]  m[2][1]  m[2][2]  m[2][3] |   {z}
            	| m[3][0]  m[3][1]  m[3][2]  m[3][3] |   {1}
            </remarks>
            <ogre headerVersion="1.18" sourceVersion="1.8" />
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m00">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m01">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m02">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m03">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m10">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m11">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m12">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m13">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m20">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m21">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m22">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m23">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m30">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m31">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m32">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.m33">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.Zero">
            <summary>
            Returns a matrix with all elements set to 0.
            </summary>
        </member>
        <member name="F:DotNet3D.Math.Matrix4.Identity">
            <summary>
               Returns a matrix with the following form:
               | 1,0,0,0 |
               | 0,1,0,0 |
               | 0,0,1,0 |
               | 0,0,0,1 |
            </summary>        
        </member>
        <member name="F:DotNet3D.Math.Matrix4.ClipSpace2DToImageSpace">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.#ctor(DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            	Creates a new Matrix4 with all the specified parameters.
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.#ctor(DotNet3D.Math.Matrix4)">
            <summary>
            
            </summary>
            <param name="m4"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.#ctor(DotNet3D.Math.Matrix3)">
            <summary>
            Creates a standard 4x4 transformation matrix with a zero translation part from a rotation/scaling 3x3 matrix.
            </summary>
            <param name="m3x3"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.#ctor(DotNet3D.Math.Quaternion)">
            <summary>
            Creates a standard 4x4 transformation matrix with a zero translation part from a rotation/scaling Quaternion.
            </summary>
            <param name="rot"></param>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.ToString">
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Matrix4.
            </summary>
            <returns>A string representation of a Matrix4.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.GetHashCode">
            <summary>
            	Provides a unique hash code based on the member variables of this
            	class.  This should be done because the equality operators (==, !=)
            	have been overriden by this class.
            	<p/>
            	The standard implementation is a simple XOR operation between all local
            	member variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.Equals(System.Object)">
            <summary>
            	Compares this Matrix to another object.  This should be done because the 
            	equality operators (==, !=) have been overriden by this class.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.op_Addition(DotNet3D.Math.Matrix4,DotNet3D.Math.Matrix4)">
            <summary>
            	Used to add two matrices together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.op_Subtraction(DotNet3D.Math.Matrix4,DotNet3D.Math.Matrix4)">
            <summary>
            	Used to subtract two matrices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.op_Multiply(DotNet3D.Math.Matrix4,DotNet3D.Math.Matrix4)">
            <summary>
            	Used to multiply (concatenate) two 4x4 Matrices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.op_Multiply(DotNet3D.Math.Matrix4,DotNet3D.Math.Vector3)">
            <summary>
            	Transforms the given 3-D vector by the matrix, projecting the 
            	result back into <i>w</i> = 1.
            	<p/>
            	This means that the initial <i>w</i> is considered to be 1.0,
            	and then all the tree elements of the resulting 3-D vector are
            	divided by the resulting <i>w</i>.
            </summary>
            <param name="matrix">A Matrix4.</param>
            <param name="vector">A Vector3.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.op_Multiply(DotNet3D.Math.Matrix4,DotNet3D.Math.Vector4)">
            <summary>
            	Transforms the given 4-D vector by the matrix.
            </summary>
            <param name="matrix">A Matrix4.</param>
            <param name="vector">A Vector4.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.op_Multiply(DotNet3D.Math.Matrix4,DotNet3D.Math.Real)">
            <summary>
            	Used to multiply a Matrix4 object by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.op_Multiply(DotNet3D.Math.Matrix4,DotNet3D.Math.Plane)">
            <summary>
            	Used to multiply a transformation to a Plane.
            </summary>
            <param name="left"></param>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.op_Equality(DotNet3D.Math.Matrix4,DotNet3D.Math.Matrix4)">
            <summary>
            Compares two Matrix4 instances for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true if the Matrix 4 instances are equal, false otherwise.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.op_Inequality(DotNet3D.Math.Matrix4,DotNet3D.Math.Matrix4)">
            <summary>
            Compares two Matrix4 instances for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true if the Matrix 4 instances are not equal, false otherwise.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.op_Implicit(DotNet3D.Math.Matrix3)~DotNet3D.Math.Matrix4">
            <summary>
            	Used to allow assignment from a Matrix3 to a Matrix4 object.
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.Add(DotNet3D.Math.Matrix4,DotNet3D.Math.Matrix4)">
            <summary>
            	Used to add two matrices together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.Subtract(DotNet3D.Math.Matrix4,DotNet3D.Math.Matrix4)">
            <summary>
            	Used to subtract two matrices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.Multiply(DotNet3D.Math.Matrix4,DotNet3D.Math.Matrix4)">
            <summary>
            	Used to multiply (concatenate) two 4x4 Matrices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.Multiply(DotNet3D.Math.Matrix4,DotNet3D.Math.Vector3)">
            <summary>
            	Transforms the given 3-D vector by the matrix, projecting the 
            	result back into <i>w</i> = 1.
            	<p/>
            	This means that the initial <i>w</i> is considered to be 1.0,
            	and then all the tree elements of the resulting 3-D vector are
            	divided by the resulting <i>w</i>.
            </summary>
            <param name="matrix">A Matrix4.</param>
            <param name="vector">A Vector3.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.Multiply(DotNet3D.Math.Matrix4,DotNet3D.Math.Plane)">
            <summary>
            	Transforms a plane using the specified transform.
            </summary>
            <param name="matrix">Transformation matrix.</param>
            <param name="plane">Plane to transform.</param>
            <returns>A transformed plane.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.FromMatrix3(DotNet3D.Math.Matrix3)">
            <summary>
            	Used to allow assignment from a Matrix3 to a Matrix4 object.
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.GetMatrix3">
            <summary>
               Returns a 3x3 portion of this 4x4 matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.Inverse">
            <summary>
               Returns an inverted 4d matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.Transpose">
            <summary>
               Swap the rows of the matrix with the columns.
            </summary>
            <returns>A transposed Matrix.</returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.ToArray``1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Matrix4.Adjoint">
            <summary>
               Used to generate the adjoint of this matrix.  Used internally for <see cref="M:DotNet3D.Math.Matrix4.Inverse"/>.
            </summary>
            <returns>The adjoint matrix of the current instance.</returns>
        </member>
        <member name="P:DotNet3D.Math.Matrix4.Translation">
            <summary>
            	Gets/Sets the Translation portion of the matrix.
            	| 0 0 0 Tx|
            	| 0 0 0 Ty|
            	| 0 0 0 Tz|
            	| 0 0 0  1 |
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Matrix4.Scale">
            <summary>
            	Gets/Sets the Scale portion of the matrix.
            	|Sx 0  0  0 |
            	| 0 Sy 0  0 |
            	| 0  0 Sz 0 |
            	| 0  0  0  0 |
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Matrix4.Determinant">
            <summary>
               Gets the determinant of this matrix.
            </summary>
        </member>
        <member name="P:DotNet3D.Math.Matrix4.Item(System.Int32,System.Int32)">
            <summary>
               Allows the Matrix to be accessed like a 2d array (i.e. matrix[2,3])
            </summary>
            <remarks>
               This indexer is only provided as a convenience, and is <b>not</b> recommended for use in
               intensive applications.  
            </remarks>
        </member>
        <member name="P:DotNet3D.Math.Matrix4.Item(System.Int32)">
            <summary>
            	Allows the Matrix to be accessed linearly (m[0] -> m[15]).  
            </summary>
            <remarks>
               This indexer is only provided as a convenience, and is <b>not</b> recommended for use in
               intensive applications.  
            </remarks>
        </member>
        <member name="M:DotNet3D.Math.Utility.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Utility.Sin(DotNet3D.Math.Radian)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Utility.ASin(DotNet3D.Math.Real)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Utility.Cos(DotNet3D.Math.Radian)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Utility.ACos(DotNet3D.Math.Real)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Utility.Tan(DotNet3D.Math.Radian)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Utility.ATan(DotNet3D.Math.Real)">
            <summary>
            Return the angle whos tangent is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Utility.ATan(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            Returns the angle whose tangent is the quotient of the two specified numbers.
            </summary>
        </member>
        <member name="M:DotNet3D.Math.Utility.Sqrt(DotNet3D.Math.Real)">
            <summary>
            	Returns the square root of a number.
            </summary>
            <remarks>This is one of the more expensive math operations.  Avoid when possible.</remarks>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Utility.InvSqrt(DotNet3D.Math.Real)">
            <summary>
               Inverse square root.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Utility.Abs(DotNet3D.Math.Real)">
            <summary>
            	Returns the absolute value of the supplied number.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Utility.Max(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            Returns the maximum of the two supplied values.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Utility.Min(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
            Returns the minumum of the two supplied values.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Utility.RangeRandom(DotNet3D.Math.Real,DotNet3D.Math.Real)">
            <summary>
               Returns a random value between the specified min and max values.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>A random value in the range [min,max].</returns>
        </member>
        <member name="M:DotNet3D.Math.Utility.UnitRandom">
            <summary>
               
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet3D.Math.Utility.SymmetricRandom">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:RealmForge.Errors">
            <summary>
            The static utility class for throwing exceptions
            </summary>
            <remarks>This class provides static methods for constructing and throwing exception using different combinations of arguments.
            Its value lies in the ability to enumerate through all the different available exceptions very using using intellisense.</remarks>
        </member>
    </members>
</doc>
