	<!-- MATHOMS BELOW -->
	<!-- The targets below are NOT actively used - just moved here during 
	transition period while this build system is in active development -->


	<target name="userdoc" depends="build.all" description="Builds user documentation">
		<!-- build the documenter -->
		<csc target="library" define="${current.build.defines}" warnaserror="true" debug="${build.debug}" output="${build.dir}/bin/NDoc.Documenter.NAnt.dll">
			<nowarn>
				<!-- do not report deprecation warnings -->
				<warning number="0618" />
			</nowarn>
			<sources failonempty="true">
				<include name="src/NDoc.Documenter.NAnt/*.cs" />
				<!-- common assembly-level attributes -->
				<include name="src/CommonAssemblyInfo.cs" />
			</sources>
			<references failonempty="true">
				<include name="${build.dir}/bin/NAnt.Core.dll" />
				<include name="${lib.framework.dir}/NDoc.ExtendedUI.dll" />
				<include name="${lib.framework.dir}/NDoc.Core.dll" />
				<include name="System.Web.dll" />
			</references>
			<resources basedir="src/NDoc.Documenter.NAnt/Resources" prefix="Documenter.xslt.">
				<include name="**/*.xslt" />
			</resources>
			<resources>
				<include name="*.resx"/>
			</resources>
		</csc>
		<echo message="Creating task and type documentation from ${build.dir}/bin" />
		<exec program="${build.dir}/bin/${nant.console.name}.exe" useruntimeengine="true">
			<arg value="-indent:1" />
			<arg value="-buildfile:NAnt.build" />
			<arg value="-D:project.version=${project.version}" />
			<arg value="-D:project.release.type=${project.release.type}" />
			<arg value="-targetframework:${framework::get-target-framework()}" />
			<arg value="${project.config}" />
			<arg value="self-userdoc" />
		</exec>
	</target>

	<target name="self-userdoc" depends="init">
		<!-- use ndoc and NAnt.Documenter to build user doc if they need it -->
		<uptodate property="help.uptodate">
			<targetfiles>
				<include name="${build.dir}/doc/help/*.html" />
			</targetfiles>
			<sourcefiles basedir="${build.dir}/bin">
				<!-- make sure the tasks/types are not new -->
				<include name="NAnt.Core.dll" />
				<include name="*Tasks.dll" />
				<include name="NAnt.NUnit.dll" />
				<!-- make sure the documenter is not new -->
				<include name="NDoc.Documenter.*.dll" />
			</sourcefiles>
		</uptodate>
		<if test="${not(help.uptodate)}">
			<ndoc>
				<assemblies basedir="${build.dir}/bin">
					<include name="NAnt.Core.dll" />
					<include name="*Tasks.dll" />
					<include name="NAnt.NUnit.dll" />
					<!-- never document NAntContrib as part of NAnt -->
					<exclude name="NAnt.Contrib.Tasks.dll" />
				</assemblies>
				<documenters>
					<documenter name="NAnt">
						<property name="OutputDirectory" value="${build.dir}/doc/help" />
						<property name="SdkDocVersion" value="${link.sdkdoc.version}" />
						<property name="SdkLinksOnWeb" value="${link.sdkdoc.web}" />
						<!-- set base uri used for linking to other NAnt docs -->
						<property name="NAntBaseUri" value="../" />
						<!-- do not filter on namespace -->
						<property name="NamespaceFilter" value="" />
						<!-- set the name and version of the product for which docs are generated -->
						<property name="ProductName" value="NAnt" />
						<property name="ProductVersion" value="${project.version.full}" />
						<property name="ProductUrl" value="http://nant.sourceforge.net" />
						<property name="Preliminary" value="${not(project.release.type == 'release')}" />
						<property name="DocumentAttributes" value="True" />
						<property name="IncludeAssemblyVersion" value="True" />
						<property name="ShowMissingParams" value="True" />
						<property name="ShowMissingReturns" value="True" />
						<property name="ShowMissingValues" value="True" />
					</documenter>
				</documenters>
			</ndoc>
		</if>
		<!-- copy doc files from source-->
		<copy todir="${build.dir}">
			<fileset>
				<include name="doc/**" />
				<exclude name="**/obj/**" />
				<exclude name="**/bin/**" />
			</fileset>
		</copy>
		<echo message="User documentation: file://${build.dir}/doc/index.html" />
	</target>

	<target name="sdkdoc" depends="build.all" description="Builds SDK documentation">
		<echo message="Creating SDK Documentation for ${build.dir}/bin/${nant.console.name}.exe" />
		<exec program="${build.dir}/bin/${nant.console.name}.exe" useruntimeengine="true">
			<arg value="-indent:1" />
			<arg value="-buildfile:NAnt.build" />
			<arg value="-D:project.version=${project.version}" />
			<arg value="-D:project.release.type=${project.release.type}" />
			<arg value="-targetframework:${framework::get-target-framework()}" />
			<arg value="${project.config}" />
			<arg value="self-sdkdoc" />
		</exec>
	</target>

	<target name="self-sdkdoc" depends="init">
		<!-- use ndoc to build sdk doc if they are not uptodate-->
		<uptodate property="sdk.uptodate">
			<targetfiles>
				<include name="${build.dir}/doc/sdk/*.chm" />
			</targetfiles>
			<sourcefiles basedir="${build.dir}/bin">
				<include name="NAnt.Core.dll" />
				<include name="*Tasks.dll" />
				<include name="NAnt.NUnit.dll" />
				<!-- make sure the documenter is not new -->
				<include name="NDoc.Documenter.*.dll" />
			</sourcefiles>
		</uptodate>
		<if test="${not(sdk.uptodate)}">
			<ndoc>
				<assemblies basedir="${build.dir}/bin">
					<include name="NAnt.Core.dll" />
					<include name="NAnt.*Tasks.dll" />
					<include name="NAnt.NUnit.dll" />
				</assemblies>
				<documenters>
					<documenter name="MSDN">
						<property name="OutputDirectory" value="${build.dir}/doc/sdk" />
						<property name="OutputTarget" value="HtmlHelpAndWeb" />
						<property name="SdkDocVersion" value="${link.sdkdoc.version}" />
						<property name="SdkLinksOnWeb" value="${link.sdkdoc.web}" />
						<property name="HtmlHelpName" value="NAnt-SDK" />
						<property name="IncludeFavorites" value="False" />
						<property name="Title" value="NAnt SDK Documentation - v${project.version.full}" />
						<property name="SplitTOCs" value="False" />
						<property name="DefaulTOC" value="" />
						<property name="ShowVisualBasic" value="True" />
						<property name="Preliminary" value="${not(project.release.type == 'release')}" />
						<property name="ShowMissingSummaries" value="${build.debug}" />
						<property name="ShowMissingRemarks" value="${build.debug}" />
						<property name="ShowMissingParams" value="${build.debug}" />
						<property name="ShowMissingReturns" value="${build.debug}" />
						<property name="ShowMissingValues" value="${build.debug}" />
						<property name="DocumentAttributes" value="True" />
						<property name="ShowTypeIdInAttributes" value="False" />
						<property name="DocumentInternals" value="False" />
						<property name="DocumentPrivates" value="False" />
						<property name="DocumentProtected" value="True" />
						<property name="DocumentEmptyNamespaces" value="False" />
						<property name="IncludeAssemblyVersion" value="False" />
						<property name="CopyrightText" value="Copyright (C) 2001-${datetime::get-year(datetime::now())} Gerry Shaw" />
						<property name="CopyrightHref" value="http://nant.sourceforge.net" />
						<property name="EditorBrowsableFilter" value="Off" />
					</documenter>
				</documenters>
			</ndoc>
		</if>
		<!-- delete all intermediate build output -->
		<delete>
			<fileset basedir="${build.dir}/doc/sdk">
				<include name="NAnt-SDK.hhc" />
				<include name="NAnt-SDK.hhk" />
				<include name="NAnt-SDK.hhp" />
				<include name="NAnt-SDK.log" />
				<!-- temporary directory -->
				<include name="ndoc_msdn_temp" />
			</fileset>
		</delete>
	</target>

	<target name="self-schema" depends="init">
		<property name="schema.output" value="${build.dir}/schema/${project.name}.xsd" />
		<!-- ensure schema directory exists -->
		<mkdir dir="${build.dir}/schema" />
		<!-- determine target namespace -->
		<if test="${project.release.type == 'nightly'}">
			<property name="schema.ns" value="http://nant.sf.net/${project.release.type + '/' + build.date + '-' + project.version + '/nant.xsd'}" />
		</if>
		<if test="${project.release.type != 'nightly'}">
			<property name="schema.ns" value="http://nant.sf.net/release/${project.version.full}/nant.xsd" />
		</if>
		<!-- generate schema -->
		<nantschema output="${schema.output}" target-ns="${schema.ns}" />
	</target>

	<target name="schema" depends="build.all">
		<exec program="${build.dir}/bin/${nant.console.name}.exe" useruntimeengine="true">
			<arg value="-buildfile:NAnt.build" />
			<arg value="-D:project.version=${project.version}" />
			<arg value="-D:project.release.type=${project.release.type}" />
			<arg value="-targetframework:${framework::get-target-framework()}" />
			<arg value="${project.config}" />
			<arg value="self-schema" />
		</exec>
	</target>

	<target name="changelog" depends="init">
		<property name="start.date" value="2003/12/26"/>
		<property name="now" value="${datetime::now()}"/>
		<property name="end.date" value="${datetime::get-year(now)}/${datetime::get-month(now)}/${datetime::get-day(now)}"/>
		<property name="changes.name-without-extension" value="changelog_${string::replace(start.date, '/', '-')}_to_${string::replace(end.date, '/', '-')}"/>
		<cvs-changelog
				start="${start.date}"
				end="${end.date}"
				xmlfile="${build.dir}/${changes.name-without-extension}.xml"
				destination="${project::get-base-directory()}"
				module="nant"/>
		<style
				in="${build.dir}/${changes.name-without-extension}.xml"
				out="${build.dir}/${changes.name-without-extension}.html">
			<parameters>
				<parameter name="module" value="nant" />
				<parameter name="title" value="NAnt Changelog (${project.version.full})" />
				<parameter name="logo" value="doc/logo.gif" />
				<parameter name="cvsweb" value="http://cvs.sourceforge.net/viewcvs.py/nant/" />
				<parameter name="start-date" value="${start.date}" />
				<parameter name="end-date" value="${end.date}" />
			</parameters>
		</style>
		<delete file="${build.dir}/${changes.name-without-extension}.xml" />
	</target>

	<target name="deploy-schema" depends="schema" description="Deploys the Schema to VS.Net schemas dirs. For now it only copies to 7.0 and 7.1">
		<!-- retrieve location of VS.NET 2002 schema store -->
		<readregistry property="vs2002.xml.schemas" key="SOFTWARE\Microsoft\VisualStudio\7.0\InstallDir" hive="LocalMachine" failonerror="false" />
		<if test="${property::exists('vs2002.xml.schemas')}">
			<!-- deploy schema to VS.NET 2002 schema store -->
			<copy file="${schema.output}" todir="${vs2002.xml.schemas}..\\Packages\schemas\xml" />
		</if>

		<!-- retrieve location of VS.NET 2003 schema store -->
		<readregistry property="vs2003.xml.schemas" key="SOFTWARE\Microsoft\VisualStudio\7.1\InstallDir" hive="LocalMachine" failonerror="false" />
		<if test="${property::exists('vs2003.xml.schemas')}">
			<!-- deploy schema to VS.NET 2002 schema store -->
			<copy file="${schema.output}" todir="${vs2003.xml.schemas}..\\Packages\schemas\xml" />
		</if>
	</target>

	<target name="package-common" depends="userdoc, sdkdoc, schema">
		<!-- move config file -->
		<move file="${build.dir}/bin/NAnt.exe.config" tofile="${build.dir}/bin/${nant.console.name}.exe.config" />
		<!-- remove non-release files -->
		<delete>
			<fileset basedir="${build.dir}/bin">
				<include name="NAnt.Console.*" />
				<!-- remove test assemblies -->
				<include name="*.Tests.*" />
			</fileset>
		</delete>
		<!-- copy project files -->
		<copy todir="${build.dir}">
			<fileset>
				<include name="*" />
				<include name="doc/**" />
				<include name="src/**" />
				<include name="tests/**" />
				<include name="examples/**" />
				<include name="schema/**" />
				<!-- third party assemblies -->
				<include name="lib/**" />
				<!-- website -->
				<include name="web/**" />
				<!-- docs -->
				<include name="doc/**" />
				<!-- exclude static html pages as these will be filter-copied -->
				<exclude name="doc/**/*.html" />
				<!-- exclude nighlty build file -->
				<exclude name="nightly.xml" />
				<!-- exclude release build file -->
				<exclude name="release.xml" />
				<!--exclude VS.Net stuff -->
				<exclude name="**/*.suo" />
				<exclude name="**/*j.user" />
				<exclude name="**/bin/**" />
				<exclude name="**/obj/**" />
			</fileset>
		</copy>
		<!-- filter-copy static html pages -->
		<copy todir="${build.dir}" overwrite="true">
			<fileset>
				<include name="doc/**/*.html" />
			</fileset>
			<filterchain>
				<replacetokens>
					<token key="PRODUCT_VERSION" value="${project.version.full}" />
				</replacetokens>
				<!-- when NOT building a release package, add prelimary notice -->
				from="&lt;!-- @PRELIMINARY_NOTICE@ -->"
				to="&lt;p class=&quot;topicstatus&quot;>[This is preliminary documentation and subject to change.]&lt;/p>"
				unless="${project.release.type == 'release'}"/>
				<!-- when building a release package, remove the placeholder -->
				from="&lt;!-- @PRELIMINARY_NOTICE@ -->"
				to=""
				if="${project.release.type == 'release'}"/>
			</filterchain>
		</copy>
		<!-- determine the zip file prefix directory -->
		<property name="project.zip.prefix" value="${project.name}-${project.version.full}" />
	</target>

	<!-- creates tar for distributing the user manual and SDK to SourceForge -->
	<target name="package-doc" depends="package-common">
		<!-- determine name of temporary doc distribution -->
		<property name="project.gzip-path.doc" value="${project::get-base-directory()}/build/${project.name}-${project.version.full}-doc.tar.gz" />
		<!-- remove package gzip file if it already exists -->
		<delete file="${project.gzip-path.doc}" if="${file::exists(project.gzip-path.doc)}" />
		<!-- create package gzip file -->
		<tar destfile="${project.gzip-path.doc}" compression="GZip">
			<fileset basedir="${build.dir}/doc">
				<include name="help/**/*" />
				<include name="sdk/*" />
				<exclude name="sdk/NAnt-SDK.chm" />
			</fileset>
		</tar>
		<echo message="Created '${project.config}' doc package at file://${project::get-base-directory()}/build/" />
	</target>

	<target name="package-src" depends="package-common">
		<!-- determine name of source zip distribution -->
		<property name="project.zip-path.src" value="${project::get-base-directory()}/build/${project.name}-${project.version.full}-src.zip" />
		<!-- remove package zip file if it already exists -->
		<delete file="${project.zip-path.src}" if="${file::exists(project.zip-path.src)}" />
		<!-- create package zip file -->
		<zip zipfile="${project.zip-path.src}" ziplevel="9">
			<fileset basedir="${build.dir}" prefix="${project.zip.prefix}">
				<include name="Makefile" />
				<include name="Makefile.nmake" />
				<include name="NAnt.build" />
				<include name="NAnt.sln" />
				<include name="COPYING.txt" />
				<include name="README.txt" />
				<!-- third party assemblies -->
				<include name="lib/**/*" />
				<!-- license & release notes -->
				<include name="doc/*" />
				<!-- user manual (no SDK) -->
				<include name="doc/help/**" />
				<!-- examples -->
				<include name="examples/**/*" />
				<!-- sources -->
				<include name="src/**/*" />
				<!-- unit tests -->
				<include name="tests/**/*" />
			</fileset>
		</zip>
		<!-- determine name of source gzipped tar distribution -->
		<property name="project.gzip-path.src" value="${project::get-base-directory()}/build/${project.name}-${project.version.full}-src.tar.gz" />
		<!-- remove package gzip file if it already exists -->
		<delete file="${project.gzip-path.src}" if="${file::exists(project.gzip-path.src)}" />
		<!-- create package gzip file -->
		<tar destfile="${project.gzip-path.src}" compression="GZip">
			<fileset basedir="${build.dir}" prefix="${project.zip.prefix}">
				<include name="Makefile" />
				<include name="Makefile.nmake" />
				<include name="NAnt.build" />
				<include name="NAnt.sln" />
				<include name="COPYING.txt" />
				<include name="README.txt" />
				<!-- third party assemblies -->
				<include name="lib/**/*" />
				<!-- license & release notes -->
				<include name="doc/*" />
				<!-- user manual (no SDK) -->
				<include name="doc/help/**" />
				<!-- examples -->
				<include name="examples/**/*" />
				<!-- sources -->
				<include name="src/**/*" />
				<!-- unit tests -->
				<include name="tests/**/*" />
			</fileset>
		</tar>
		<echo message="Created '${project.config}' source packages at file://${project::get-base-directory()}/build/" />
	</target>

	<target name="package-bin" depends="package-common">
		<!-- determine name of binary zip distribution -->
		<property name="project.zip-path.bin" value="${project::get-base-directory()}/build/${project.name}-${project.version.full}-bin.zip" />
		<!-- remove package zip file if it already exists -->
		<delete file="${project.zip-path.bin}" if="${file::exists(project.zip-path.bin)}" />
		<!-- create package zip file -->
		<zip zipfile="${project.zip-path.bin}" ziplevel="9">
			<fileset basedir="${build.dir}" prefix="${project.zip.prefix}">
				<include name="COPYING.txt" />
				<include name="README.txt" />
				<include name="bin/**/*" />
				<!-- license & release notes -->
				<include name="doc/*" />
				<!-- user manual -->
				<include name="doc/help/**" />
				<!-- SDK (in HTML Help format) -->
				<include name="doc/sdk/NAnt-SDK.chm" />
				<!-- examples -->
				<include name="examples/**/*" />
				<!-- XML Schema -->
				<include name="schema/**/*" />
			</fileset>
		</zip>
		<!-- determine name of binary gzipped tar distribution -->
		<property name="project.gzip-path.bin" value="${project::get-base-directory()}/build/${project.name}-${project.version.full}-bin.tar.gz" />
		<!-- remove package gzip file if it already exists -->
		<delete file="${project.gzip-path.bin}" if="${file::exists(project.gzip-path.bin)}" />
		<!-- create package gzip file -->
		<tar destfile="${project.gzip-path.bin}" compression="GZip">
			<fileset basedir="${build.dir}" prefix="${project.zip.prefix}">
				<include name="COPYING.txt" />
				<include name="README.txt" />
				<include name="bin/**/*" />
				<!-- license & release notes -->
				<include name="doc/*" />
				<!-- user manual -->
				<include name="doc/help/**" />
				<!-- SDK (in plain HTML format) -->
				<include name="doc/sdk/*" />
				<exclude name="doc/sdk/NAnt-SDK.chm" />
				<!-- examples -->
				<include name="examples/**/*" />
				<!-- XML Schema -->
				<include name="schema/**/*" />
			</fileset>
		</tar>
		<echo message="Created '${project.config}' binary packages at file://${project.zip-path.bin}" />
	</target>

	<target name="package" depends="package-doc, package-src, package-bin" description="Creates a binary and source distribution package." />

	<!-- Copies files to the bin folder. -->
	<target name="UpdateBin" depends="build.all" description="Does a release build and copies them to the bin folder.">
		<delete if="false">
			<fileset basedir="bin">
				<include name="NAnt*" />
				<exclude name="${nant.console.name}.exe" />
			</fileset>
		</delete>
		<copy todir="bin" overwrite="true">
			<fileset basedir="${build.dir}/bin/">
				<include name="NAnt*" />
				<exclude name="*Test*" />
				<exclude name="${nant.console.name}.xml" />
				<exclude name="${nant.console.name}.exe" />
			</fileset>
		</copy>
	</target>


	<!-- install targets -->

	<target name="install" depends="install-windows, install-linux" />

	<!--depends="userdoc" -->
	<target name="install-windows" depends="build.all" if="${platform::is-win32()}">
		<!-- install to program files directory by default -->
		<property name="install.realprefix" value="${environment::get-folder-path('ProgramFiles')}" />
		<if test="${property::exists('install.prefix') and string::get-length(install.prefix) != 0}">
			<property name="install.realprefix" value="${install.prefix}" />
		</if>
		<property name="install.copylocation" value="${path::combine(install.realprefix, 'NAnt')}"/>
		<echo message="Installing NAnt to '${install.copylocation}' ..." />

		<copy todir="${install.copylocation}" overwrite="true">
			<fileset basedir="${build.dir}">
				<include name="bin/**/*" />
				<include name="doc/**/*" />

				<exclude name="bin/nant.tests.config" />
				<exclude name="bin/*.Tests.*" />
			</fileset>
		</copy>
	</target>

	<target name="install-linux" depends="build.all" if="${platform::is-unix()}">
		<property name="install.realprefix" value="/usr/local" />
		<if test="${property::exists('install.prefix') and string::get-length(install.prefix) != 0}">
			<property name="install.realprefix" value="${install.prefix}" />
		</if>
		<property name="install.bindir" value="${path::combine(install.realprefix, 'bin')}"/>
		<property name="install.share" value="${path::combine(install.realprefix, 'share')}"/>
		<property name="install.copylocation" value="${path::combine (install.share, 'NAnt')}"/>
		<property name="prefix" value="${pkg-config::get-variable('mono', 'prefix')}"/>
		<echo message="Installing NAnt to '${install.copylocation}' ..." />

		<copy todir="${install.copylocation}" overwrite="true">
			<fileset basedir="${build.dir}">
				<include name="bin/**/*" />
				<include name="doc/**/*" />

				<exclude name="bin/nant.tests.config" />
				<exclude name="bin/*.Tests.*" />
			</fileset>
		</copy>
		<echo message="Installing NAnt wrapper script to '${install.bindir}' ..." />
		<!-- store filename of wrapper script in property -->
		<property name="wrapper" value="${path::combine(install.bindir, 'nant')}" />
		<!-- 
		create wrapper file using separate echo tasks for each line to ensure
		the line endings of the generated file match the platform on which 
		the wrapper is created
		-->
		<echo file="${wrapper}" append="false">#!/bin/sh</echo>
		<echo file="${wrapper}" append="true">exec ${path::combine(prefix, 'bin')}/mono ${path::combine(install.copylocation, 'bin')}/NAnt.exe "$@"</echo>
		<exec program="chmod" commandline="a+x ${path::combine(install.bindir, 'nant')}"/>
	</target>

	<target name="rpm" depends="init, build.all">
		<echo message="Build dir: ${build.dir}"/>
		<copy todir="${build.dir}">
			<fileset>
				<include name="NAnt.spec" />
			</fileset>
		</copy>

		<nant buildfile="release.xml" target="prepare-rpm"/>
		<nant buildfile="release.xml" target="binary-rpm"/>
	</target>

	<!-- Example: build Microsoft.NET specific assemblies if we are on win32 and targeting a .NET Framework -->
	<!--
		<nant target="build" if="${platform::is-win32() and framework::get-family(framework::get-target-framework()) == 'net'}">
		<buildfiles refid="buildfile_ref_here"/>
		</nant>
		-->

	<!-- Example: build win32 specific assemblies if we are on win32 -->
	<!--
		<nant target="build" if="${platform::is-win32()}">
		<buildfiles refid="buildfile_ref_here" />
		</nant>
		-->

