//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Axiom.Framework.Configuration
{
	/// <summary>
	/// The AxiomConfigurationSection Configuration Section.
	/// </summary>
	public partial class AxiomConfigurationSection : global::System.Configuration.ConfigurationSection
	{
		#region Singleton Instance

		/// <summary>
		/// The XML name of the AxiomConfigurationSection Configuration Section.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string AxiomConfigurationSectionSectionName = "axiomConfigurationSection";

		/// <summary>
		/// Gets the AxiomConfigurationSection instance.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public static global::Axiom.Framework.Configuration.AxiomConfigurationSection Instance
		{
			get
			{
				return
					( (global::Axiom.Framework.Configuration.AxiomConfigurationSection)
					  ( global::System.Configuration.ConfigurationManager.GetSection(
					  	global::Axiom.Framework.Configuration.AxiomConfigurationSection.AxiomConfigurationSectionSectionName ) ) );
			}
		}

		#endregion

		#region Xmlns Property

		/// <summary>
		/// The XML name of the <see cref="Xmlns"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string XmlnsPropertyName = "xmlns";

		/// <summary>
		/// Gets the XML namespace of this Configuration Section.
		/// </summary>
		/// <remarks>
		/// This property makes sure that if the configuration file contains the XML namespace,
		/// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
		/// </remarks>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.AxiomConfigurationSection.XmlnsPropertyName, IsRequired = false, IsKey = false,
			IsDefaultCollection = false )]
		public string Xmlns
		{
			get
			{
				return ( (string)( base[ global::Axiom.Framework.Configuration.AxiomConfigurationSection.XmlnsPropertyName ] ) );
			}
		}

		#endregion

		#region IsReadOnly override

		/// <summary>
		/// Gets a value indicating whether the element is read-only.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override bool IsReadOnly()
		{
			return false;
		}

		#endregion

		#region LogFilename Property

		/// <summary>
		/// The XML name of the <see cref="LogFilename"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string LogFilenamePropertyName = "logFilename";

		/// <summary>
		/// Gets or sets the LogFilename.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The LogFilename." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.AxiomConfigurationSection.LogFilenamePropertyName, IsRequired = false,
			IsKey = false, IsDefaultCollection = false )]
		public string LogFilename
		{
			get
			{
				return
					( (string)( base[ global::Axiom.Framework.Configuration.AxiomConfigurationSection.LogFilenamePropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.AxiomConfigurationSection.LogFilenamePropertyName ] = value;
			}
		}

		#endregion

		#region Plugins Property

		/// <summary>
		/// The XML name of the <see cref="Plugins"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string PluginsPropertyName = "plugins";

		/// <summary>
		/// Gets or sets the Plugins.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Plugins." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.AxiomConfigurationSection.PluginsPropertyName, IsRequired = false,
			IsKey = false, IsDefaultCollection = false )]
		public global::Axiom.Framework.Configuration.PluginsElementCollection Plugins
		{
			get
			{
				return
					( (global::Axiom.Framework.Configuration.PluginsElementCollection)
					  ( base[ global::Axiom.Framework.Configuration.AxiomConfigurationSection.PluginsPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.AxiomConfigurationSection.PluginsPropertyName ] = value;
			}
		}

		#endregion

		#region ResourceLocations Property

		/// <summary>
		/// The XML name of the <see cref="ResourceLocations"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string ResourceLocationsPropertyName = "resourceLocations";

		/// <summary>
		/// Gets or sets the ResourceLocations.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The ResourceLocations." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.AxiomConfigurationSection.ResourceLocationsPropertyName, IsRequired = false,
			IsKey = false, IsDefaultCollection = false )]
		public global::Axiom.Framework.Configuration.ResourceLocationElementCollection ResourceLocations
		{
			get
			{
				return
					( (global::Axiom.Framework.Configuration.ResourceLocationElementCollection)
					  ( base[ global::Axiom.Framework.Configuration.AxiomConfigurationSection.ResourceLocationsPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.AxiomConfigurationSection.ResourceLocationsPropertyName ] = value;
			}
		}

		#endregion

		#region RenderSystems Property

		/// <summary>
		/// The XML name of the <see cref="RenderSystems"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string RenderSystemsPropertyName = "renderSystems";

		/// <summary>
		/// Gets or sets the RenderSystems.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The RenderSystems." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.AxiomConfigurationSection.RenderSystemsPropertyName, IsRequired = false,
			IsKey = false, IsDefaultCollection = false )]
		public global::Axiom.Framework.Configuration.RenderSystemElementCollection RenderSystems
		{
			get
			{
				return
					( (global::Axiom.Framework.Configuration.RenderSystemElementCollection)
					  ( base[ global::Axiom.Framework.Configuration.AxiomConfigurationSection.RenderSystemsPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.AxiomConfigurationSection.RenderSystemsPropertyName ] = value;
			}
		}

		#endregion
	}
}

namespace Axiom.Framework.Configuration
{
	/// <summary>
	/// The PluginElement Configuration Element.
	/// </summary>
	public partial class PluginElement : global::System.Configuration.ConfigurationElement
	{
		#region IsReadOnly override

		/// <summary>
		/// Gets a value indicating whether the element is read-only.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override bool IsReadOnly()
		{
			return false;
		}

		#endregion

		#region Path Property

		/// <summary>
		/// The XML name of the <see cref="Path"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string PathPropertyName = "path";

		/// <summary>
		/// Gets or sets the Path.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Path." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.PluginElement.PathPropertyName, IsRequired = true, IsKey = true,
			IsDefaultCollection = false )]
		public string Path
		{
			get
			{
				return ( (string)( base[ global::Axiom.Framework.Configuration.PluginElement.PathPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.PluginElement.PathPropertyName ] = value;
			}
		}

		#endregion

		#region Enabled Property

		/// <summary>
		/// The XML name of the <see cref="Enabled"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string EnabledPropertyName = "enabled";

		/// <summary>
		/// Gets or sets the Enabled.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Enabled." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.PluginElement.EnabledPropertyName, IsRequired = false, IsKey = false,
			IsDefaultCollection = false, DefaultValue = true )]
		public bool Enabled
		{
			get
			{
				return ( (bool)( base[ global::Axiom.Framework.Configuration.PluginElement.EnabledPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.PluginElement.EnabledPropertyName ] = value;
			}
		}

		#endregion
	}
}

namespace Axiom.Framework.Configuration
{
	/// <summary>
	/// A collection of PluginElement instances.
	/// </summary>
	[global::System.Configuration.ConfigurationCollectionAttribute(
		typeof ( global::Axiom.Framework.Configuration.PluginElement ),
		CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate,
		AddItemName = global::Axiom.Framework.Configuration.PluginsElementCollection.PluginElementPropertyName )]
	public partial class PluginsElementCollection : global::System.Configuration.ConfigurationElementCollection
	{
		#region Constants

		/// <summary>
		/// The XML name of the individual <see cref="global::Axiom.Framework.Configuration.PluginElement"/> instances in this collection.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string PluginElementPropertyName = "pluginElement";

		#endregion

		#region Overrides

		/// <summary>
		/// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
		{
			get
			{
				return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
			}
		}

		/// <summary>
		/// Gets the name used to identify this collection of elements
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override string ElementName
		{
			get
			{
				return global::Axiom.Framework.Configuration.PluginsElementCollection.PluginElementPropertyName;
			}
		}

		/// <summary>
		/// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="elementName">The name of the element to verify.</param>
		/// <returns>
		/// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override bool IsElementName( string elementName )
		{
			return ( elementName == global::Axiom.Framework.Configuration.PluginsElementCollection.PluginElementPropertyName );
		}

		/// <summary>
		/// Gets the element key for the specified configuration element.
		/// </summary>
		/// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
		/// <returns>
		/// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override object GetElementKey( global::System.Configuration.ConfigurationElement element )
		{
			return ( (global::Axiom.Framework.Configuration.PluginElement)( element ) ).Path;
		}

		/// <summary>
		/// Creates a new <see cref="global::Axiom.Framework.Configuration.PluginElement"/>.
		/// </summary>
		/// <returns>
		/// A new <see cref="global::Axiom.Framework.Configuration.PluginElement"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override global::System.Configuration.ConfigurationElement CreateNewElement()
		{
			return new global::Axiom.Framework.Configuration.PluginElement();
		}

		#endregion

		#region Indexer

		/// <summary>
		/// Gets the <see cref="global::Axiom.Framework.Configuration.PluginElement"/> at the specified index.
		/// </summary>
		/// <param name="index">The index of the <see cref="global::Axiom.Framework.Configuration.PluginElement"/> to retrieve.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public global::Axiom.Framework.Configuration.PluginElement this[ int index ]
		{
			get
			{
				return ( (global::Axiom.Framework.Configuration.PluginElement)( base.BaseGet( index ) ) );
			}
		}

		/// <summary>
		/// Gets the <see cref="global::Axiom.Framework.Configuration.PluginElement"/> with the specified key.
		/// </summary>
		/// <param name="path">The key of the <see cref="global::Axiom.Framework.Configuration.PluginElement"/> to retrieve.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public global::Axiom.Framework.Configuration.PluginElement this[ object path ]
		{
			get
			{
				return ( (global::Axiom.Framework.Configuration.PluginElement)( base.BaseGet( path ) ) );
			}
		}

		#endregion

		#region Add

		/// <summary>
		/// Adds the specified <see cref="global::Axiom.Framework.Configuration.PluginElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="pluginElement">The <see cref="global::Axiom.Framework.Configuration.PluginElement"/> to add.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public void Add( global::Axiom.Framework.Configuration.PluginElement pluginElement )
		{
			base.BaseAdd( pluginElement );
		}

		#endregion

		#region Remove

		/// <summary>
		/// Removes the specified <see cref="global::Axiom.Framework.Configuration.PluginElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="pluginElement">The <see cref="global::Axiom.Framework.Configuration.PluginElement"/> to remove.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public void Remove( global::Axiom.Framework.Configuration.PluginElement pluginElement )
		{
			base.BaseRemove( GetElementKey( pluginElement ) );
		}

		#endregion

		#region IsReadOnly override

		/// <summary>
		/// Gets a value indicating whether the element is read-only.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override bool IsReadOnly()
		{
			return false;
		}

		#endregion

		#region AutoScan Property

		/// <summary>
		/// The XML name of the <see cref="AutoScan"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string AutoScanPropertyName = "autoScan";

		/// <summary>
		/// Gets or sets the AutoScan.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The AutoScan." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.PluginsElementCollection.AutoScanPropertyName, IsRequired = false,
			IsKey = false, IsDefaultCollection = false, DefaultValue = true )]
		public bool AutoScan
		{
			get
			{
				return ( (bool)( base[ global::Axiom.Framework.Configuration.PluginsElementCollection.AutoScanPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.PluginsElementCollection.AutoScanPropertyName ] = value;
			}
		}

		#endregion

		#region Path Property

		/// <summary>
		/// The XML name of the <see cref="Path"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string PathPropertyName = "path";

		/// <summary>
		/// Gets or sets the Path.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Path." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.PluginsElementCollection.PathPropertyName, IsRequired = false, IsKey = false,
			IsDefaultCollection = false )]
		public string Path
		{
			get
			{
				return ( (string)( base[ global::Axiom.Framework.Configuration.PluginsElementCollection.PathPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.PluginsElementCollection.PathPropertyName ] = value;
			}
		}

		#endregion
	}
}

namespace Axiom.Framework.Configuration
{
	/// <summary>
	/// A collection of ResourceLocationElement instances.
	/// </summary>
	[global::System.Configuration.ConfigurationCollectionAttribute(
		typeof ( global::Axiom.Framework.Configuration.ResourceLocationElement ),
		CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate,
		AddItemName =
			global::Axiom.Framework.Configuration.ResourceLocationElementCollection.ResourceLocationElementPropertyName )]
	public partial class ResourceLocationElementCollection : global::System.Configuration.ConfigurationElementCollection
	{
		#region Constants

		/// <summary>
		/// The XML name of the individual <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/> instances in this collection.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string ResourceLocationElementPropertyName = "resourceLocation";

		#endregion

		#region Overrides

		/// <summary>
		/// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
		{
			get
			{
				return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
			}
		}

		/// <summary>
		/// Gets the name used to identify this collection of elements
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override string ElementName
		{
			get
			{
				return global::Axiom.Framework.Configuration.ResourceLocationElementCollection.ResourceLocationElementPropertyName;
			}
		}

		/// <summary>
		/// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="elementName">The name of the element to verify.</param>
		/// <returns>
		/// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override bool IsElementName( string elementName )
		{
			return ( elementName ==
			         global::Axiom.Framework.Configuration.ResourceLocationElementCollection.ResourceLocationElementPropertyName );
		}

		/// <summary>
		/// Gets the element key for the specified configuration element.
		/// </summary>
		/// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
		/// <returns>
		/// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override object GetElementKey( global::System.Configuration.ConfigurationElement element )
		{
			return ( (global::Axiom.Framework.Configuration.ResourceLocationElement)( element ) ).Path;
		}

		/// <summary>
		/// Creates a new <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/>.
		/// </summary>
		/// <returns>
		/// A new <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override global::System.Configuration.ConfigurationElement CreateNewElement()
		{
			return new global::Axiom.Framework.Configuration.ResourceLocationElement();
		}

		#endregion

		#region Indexer

		/// <summary>
		/// Gets the <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/> at the specified index.
		/// </summary>
		/// <param name="index">The index of the <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/> to retrieve.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public global::Axiom.Framework.Configuration.ResourceLocationElement this[ int index ]
		{
			get
			{
				return ( (global::Axiom.Framework.Configuration.ResourceLocationElement)( base.BaseGet( index ) ) );
			}
		}

		/// <summary>
		/// Gets the <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/> with the specified key.
		/// </summary>
		/// <param name="path">The key of the <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/> to retrieve.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public global::Axiom.Framework.Configuration.ResourceLocationElement this[ object path ]
		{
			get
			{
				return ( (global::Axiom.Framework.Configuration.ResourceLocationElement)( base.BaseGet( path ) ) );
			}
		}

		#endregion

		#region Add

		/// <summary>
		/// Adds the specified <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="resourceLocation">The <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/> to add.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public void Add( global::Axiom.Framework.Configuration.ResourceLocationElement resourceLocation )
		{
			base.BaseAdd( resourceLocation );
		}

		#endregion

		#region Remove

		/// <summary>
		/// Removes the specified <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="resourceLocation">The <see cref="global::Axiom.Framework.Configuration.ResourceLocationElement"/> to remove.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public void Remove( global::Axiom.Framework.Configuration.ResourceLocationElement resourceLocation )
		{
			base.BaseRemove( GetElementKey( resourceLocation ) );
		}

		#endregion

		#region IsReadOnly override

		/// <summary>
		/// Gets a value indicating whether the element is read-only.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override bool IsReadOnly()
		{
			return false;
		}

		#endregion
	}
}

namespace Axiom.Framework.Configuration
{
	/// <summary>
	/// A collection of RenderSystem instances.
	/// </summary>
	[global::System.Configuration.ConfigurationCollectionAttribute(
		typeof ( global::Axiom.Framework.Configuration.RenderSystem ),
		CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate,
		AddItemName = global::Axiom.Framework.Configuration.RenderSystemElementCollection.RenderSystemPropertyName )]
	public partial class RenderSystemElementCollection : global::System.Configuration.ConfigurationElementCollection
	{
		#region Constants

		/// <summary>
		/// The XML name of the individual <see cref="global::Axiom.Framework.Configuration.RenderSystem"/> instances in this collection.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string RenderSystemPropertyName = "renderSystem";

		#endregion

		#region Overrides

		/// <summary>
		/// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
		{
			get
			{
				return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
			}
		}

		/// <summary>
		/// Gets the name used to identify this collection of elements
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override string ElementName
		{
			get
			{
				return global::Axiom.Framework.Configuration.RenderSystemElementCollection.RenderSystemPropertyName;
			}
		}

		/// <summary>
		/// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="elementName">The name of the element to verify.</param>
		/// <returns>
		/// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override bool IsElementName( string elementName )
		{
			return ( elementName == global::Axiom.Framework.Configuration.RenderSystemElementCollection.RenderSystemPropertyName );
		}

		/// <summary>
		/// Gets the element key for the specified configuration element.
		/// </summary>
		/// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
		/// <returns>
		/// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override object GetElementKey( global::System.Configuration.ConfigurationElement element )
		{
			return ( (global::Axiom.Framework.Configuration.RenderSystem)( element ) ).Name;
		}

		/// <summary>
		/// Creates a new <see cref="global::Axiom.Framework.Configuration.RenderSystem"/>.
		/// </summary>
		/// <returns>
		/// A new <see cref="global::Axiom.Framework.Configuration.RenderSystem"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override global::System.Configuration.ConfigurationElement CreateNewElement()
		{
			return new global::Axiom.Framework.Configuration.RenderSystem();
		}

		#endregion

		#region Indexer

		/// <summary>
		/// Gets the <see cref="global::Axiom.Framework.Configuration.RenderSystem"/> at the specified index.
		/// </summary>
		/// <param name="index">The index of the <see cref="global::Axiom.Framework.Configuration.RenderSystem"/> to retrieve.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public global::Axiom.Framework.Configuration.RenderSystem this[ int index ]
		{
			get
			{
				return ( (global::Axiom.Framework.Configuration.RenderSystem)( base.BaseGet( index ) ) );
			}
		}

		/// <summary>
		/// Gets the <see cref="global::Axiom.Framework.Configuration.RenderSystem"/> with the specified key.
		/// </summary>
		/// <param name="name">The key of the <see cref="global::Axiom.Framework.Configuration.RenderSystem"/> to retrieve.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public global::Axiom.Framework.Configuration.RenderSystem this[ object name ]
		{
			get
			{
				return ( (global::Axiom.Framework.Configuration.RenderSystem)( base.BaseGet( name ) ) );
			}
		}

		#endregion

		#region Add

		/// <summary>
		/// Adds the specified <see cref="global::Axiom.Framework.Configuration.RenderSystem"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="renderSystem">The <see cref="global::Axiom.Framework.Configuration.RenderSystem"/> to add.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public void Add( global::Axiom.Framework.Configuration.RenderSystem renderSystem )
		{
			base.BaseAdd( renderSystem );
		}

		#endregion

		#region Remove

		/// <summary>
		/// Removes the specified <see cref="global::Axiom.Framework.Configuration.RenderSystem"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="renderSystem">The <see cref="global::Axiom.Framework.Configuration.RenderSystem"/> to remove.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public void Remove( global::Axiom.Framework.Configuration.RenderSystem renderSystem )
		{
			base.BaseRemove( GetElementKey( renderSystem ) );
		}

		#endregion

		#region IsReadOnly override

		/// <summary>
		/// Gets a value indicating whether the element is read-only.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override bool IsReadOnly()
		{
			return false;
		}

		#endregion

		#region DefaultRenderSystem Property

		/// <summary>
		/// The XML name of the <see cref="DefaultRenderSystem"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string DefaultRenderSystemPropertyName = "defaultRenderSystem";

		/// <summary>
		/// Gets or sets the DefaultRenderSystem.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The DefaultRenderSystem." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.RenderSystemElementCollection.DefaultRenderSystemPropertyName,
			IsRequired = false, IsKey = false, IsDefaultCollection = false )]
		public string DefaultRenderSystem
		{
			get
			{
				return
					( (string)
					  ( base[ global::Axiom.Framework.Configuration.RenderSystemElementCollection.DefaultRenderSystemPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.RenderSystemElementCollection.DefaultRenderSystemPropertyName ] = value;
			}
		}

		#endregion
	}
}

namespace Axiom.Framework.Configuration
{
	/// <summary>
	/// The ResourceLocationElement Configuration Element.
	/// </summary>
	public partial class ResourceLocationElement : global::System.Configuration.ConfigurationElement
	{
		#region IsReadOnly override

		/// <summary>
		/// Gets a value indicating whether the element is read-only.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override bool IsReadOnly()
		{
			return false;
		}

		#endregion

		#region Path Property

		/// <summary>
		/// The XML name of the <see cref="Path"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string PathPropertyName = "path";

		/// <summary>
		/// Gets or sets the Path.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Path." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.ResourceLocationElement.PathPropertyName, IsRequired = true, IsKey = true,
			IsDefaultCollection = false )]
		public string Path
		{
			get
			{
				return ( (string)( base[ global::Axiom.Framework.Configuration.ResourceLocationElement.PathPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.ResourceLocationElement.PathPropertyName ] = value;
			}
		}

		#endregion

		#region Type Property

		/// <summary>
		/// The XML name of the <see cref="Type"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string TypePropertyName = "type";

		/// <summary>
		/// Gets or sets the Type.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Type." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.ResourceLocationElement.TypePropertyName, IsRequired = false, IsKey = false,
			IsDefaultCollection = false )]
		public string Type
		{
			get
			{
				return ( (string)( base[ global::Axiom.Framework.Configuration.ResourceLocationElement.TypePropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.ResourceLocationElement.TypePropertyName ] = value;
			}
		}

		#endregion

		#region Recurse Property

		/// <summary>
		/// The XML name of the <see cref="Recurse"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string RecursePropertyName = "recurse";

		/// <summary>
		/// Gets or sets the Recurse.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Recurse." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.ResourceLocationElement.RecursePropertyName, IsRequired = false, IsKey = false,
			IsDefaultCollection = false )]
		public string Recurse
		{
			get
			{
				return ( (string)( base[ global::Axiom.Framework.Configuration.ResourceLocationElement.RecursePropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.ResourceLocationElement.RecursePropertyName ] = value;
			}
		}

		#endregion

		#region Group Property

		/// <summary>
		/// The XML name of the <see cref="Group"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string GroupPropertyName = "group";

		/// <summary>
		/// Gets or sets the Group.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Group." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.ResourceLocationElement.GroupPropertyName, IsRequired = false, IsKey = false,
			IsDefaultCollection = false )]
		public string Group
		{
			get
			{
				return ( (string)( base[ global::Axiom.Framework.Configuration.ResourceLocationElement.GroupPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.ResourceLocationElement.GroupPropertyName ] = value;
			}
		}

		#endregion
	}
}

namespace Axiom.Framework.Configuration
{
	/// <summary>
	/// The RenderSystem Configuration Element.
	/// </summary>
	public partial class RenderSystem : global::System.Configuration.ConfigurationElement
	{
		#region IsReadOnly override

		/// <summary>
		/// Gets a value indicating whether the element is read-only.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override bool IsReadOnly()
		{
			return false;
		}

		#endregion

		#region Name Property

		/// <summary>
		/// The XML name of the <see cref="Name"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string NamePropertyName = "name";

		/// <summary>
		/// Gets or sets the Name.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Name." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.RenderSystem.NamePropertyName, IsRequired = true, IsKey = true,
			IsDefaultCollection = false )]
		public string Name
		{
			get
			{
				return ( (string)( base[ global::Axiom.Framework.Configuration.RenderSystem.NamePropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.RenderSystem.NamePropertyName ] = value;
			}
		}

		#endregion

		#region Options Property

		/// <summary>
		/// The XML name of the <see cref="Options"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string OptionsPropertyName = "options";

		/// <summary>
		/// Gets or sets the Options.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Options." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.RenderSystem.OptionsPropertyName, IsRequired = false, IsKey = false,
			IsDefaultCollection = true )]
		public global::Axiom.Framework.Configuration.RenderSystemOptionElementCollection Options
		{
			get
			{
				return
					( (global::Axiom.Framework.Configuration.RenderSystemOptionElementCollection)
					  ( base[ global::Axiom.Framework.Configuration.RenderSystem.OptionsPropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.RenderSystem.OptionsPropertyName ] = value;
			}
		}

		#endregion
	}
}

namespace Axiom.Framework.Configuration
{
	/// <summary>
	/// A collection of RenderSystemOption instances.
	/// </summary>
	[global::System.Configuration.ConfigurationCollectionAttribute(
		typeof ( global::Axiom.Framework.Configuration.RenderSystemOption ),
		CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate,
		AddItemName = global::Axiom.Framework.Configuration.RenderSystemOptionElementCollection.RenderSystemOptionPropertyName
		)]
	public partial class RenderSystemOptionElementCollection : global::System.Configuration.ConfigurationElementCollection
	{
		#region Constants

		/// <summary>
		/// The XML name of the individual <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/> instances in this collection.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string RenderSystemOptionPropertyName = "option";

		#endregion

		#region Overrides

		/// <summary>
		/// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
		{
			get
			{
				return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
			}
		}

		/// <summary>
		/// Gets the name used to identify this collection of elements
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override string ElementName
		{
			get
			{
				return global::Axiom.Framework.Configuration.RenderSystemOptionElementCollection.RenderSystemOptionPropertyName;
			}
		}

		/// <summary>
		/// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="elementName">The name of the element to verify.</param>
		/// <returns>
		/// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override bool IsElementName( string elementName )
		{
			return ( elementName ==
			         global::Axiom.Framework.Configuration.RenderSystemOptionElementCollection.RenderSystemOptionPropertyName );
		}

		/// <summary>
		/// Gets the element key for the specified configuration element.
		/// </summary>
		/// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
		/// <returns>
		/// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override object GetElementKey( global::System.Configuration.ConfigurationElement element )
		{
			return ( (global::Axiom.Framework.Configuration.RenderSystemOption)( element ) ).Name;
		}

		/// <summary>
		/// Creates a new <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/>.
		/// </summary>
		/// <returns>
		/// A new <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/>.
		/// </returns>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		protected override global::System.Configuration.ConfigurationElement CreateNewElement()
		{
			return new global::Axiom.Framework.Configuration.RenderSystemOption();
		}

		#endregion

		#region Indexer

		/// <summary>
		/// Gets the <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/> at the specified index.
		/// </summary>
		/// <param name="index">The index of the <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/> to retrieve.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public global::Axiom.Framework.Configuration.RenderSystemOption this[ int index ]
		{
			get
			{
				return ( (global::Axiom.Framework.Configuration.RenderSystemOption)( base.BaseGet( index ) ) );
			}
		}

		/// <summary>
		/// Gets the <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/> with the specified key.
		/// </summary>
		/// <param name="name">The key of the <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/> to retrieve.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public global::Axiom.Framework.Configuration.RenderSystemOption this[ object name ]
		{
			get
			{
				return ( (global::Axiom.Framework.Configuration.RenderSystemOption)( base.BaseGet( name ) ) );
			}
		}

		#endregion

		#region Add

		/// <summary>
		/// Adds the specified <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="option">The <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/> to add.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public void Add( global::Axiom.Framework.Configuration.RenderSystemOption option )
		{
			base.BaseAdd( option );
		}

		#endregion

		#region Remove

		/// <summary>
		/// Removes the specified <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="option">The <see cref="global::Axiom.Framework.Configuration.RenderSystemOption"/> to remove.</param>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public void Remove( global::Axiom.Framework.Configuration.RenderSystemOption option )
		{
			base.BaseRemove( GetElementKey( option ) );
		}

		#endregion

		#region IsReadOnly override

		/// <summary>
		/// Gets a value indicating whether the element is read-only.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override bool IsReadOnly()
		{
			return false;
		}

		#endregion
	}
}

namespace Axiom.Framework.Configuration
{
	/// <summary>
	/// The RenderSystemOption Configuration Element.
	/// </summary>
	public partial class RenderSystemOption : global::System.Configuration.ConfigurationElement
	{
		#region IsReadOnly override

		/// <summary>
		/// Gets a value indicating whether the element is read-only.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		public override bool IsReadOnly()
		{
			return false;
		}

		#endregion

		#region Name Property

		/// <summary>
		/// The XML name of the <see cref="Name"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string NamePropertyName = "name";

		/// <summary>
		/// Gets or sets the Name.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Name." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.RenderSystemOption.NamePropertyName, IsRequired = true, IsKey = true,
			IsDefaultCollection = false )]
		public string Name
		{
			get
			{
				return ( (string)( base[ global::Axiom.Framework.Configuration.RenderSystemOption.NamePropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.RenderSystemOption.NamePropertyName ] = value;
			}
		}

		#endregion

		#region Value Property

		/// <summary>
		/// The XML name of the <see cref="Value"/> property.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )] internal const string ValuePropertyName = "value";

		/// <summary>
		/// Gets or sets the Value.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute( "ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0" )]
		[global::System.ComponentModel.DescriptionAttribute( "The Value." )]
		[global::System.Configuration.ConfigurationPropertyAttribute(
			global::Axiom.Framework.Configuration.RenderSystemOption.ValuePropertyName, IsRequired = false, IsKey = false,
			IsDefaultCollection = false )]
		public string Value
		{
			get
			{
				return ( (string)( base[ global::Axiom.Framework.Configuration.RenderSystemOption.ValuePropertyName ] ) );
			}
			set
			{
				base[ global::Axiom.Framework.Configuration.RenderSystemOption.ValuePropertyName ] = value;
			}
		}

		#endregion
	}
}