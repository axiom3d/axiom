<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nunit.framework</name>
    </assembly>
    <members>
        <member name="T:NUnit.Framework.TestFixtureAttribute">
            <summary>
            TestFixtureAttribute
            </summary> 
            <example>
            [TestFixture]
            public class ExampleClass 
            {}
            </example>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Description">
            <summary>
            Descriptive text for this fixture
            </summary>
        </member>
        <member name="T:NUnit.Framework.AssertionFailureMessage">
            <summary>
            Summary description for AssertionFailureMessage.
            </summary>
        </member>
        <member name="F:NUnit.Framework.AssertionFailureMessage.PreClipLength">
            <summary>
            Number of characters before a highlighted position before
            clipping will occur.  Clipped text is replaced with an
            elipsis "..."
            </summary>
        </member>
        <member name="F:NUnit.Framework.AssertionFailureMessage.PostClipLength">
            <summary>
            Number of characters after a highlighted position before
            clipping will occur.  Clipped text is replaced with an
            elipsis "..."
            </summary>
        </member>
        <member name="F:NUnit.Framework.AssertionFailureMessage.expectedPrefix">
            <summary>
            Prefix used to start an expected value line.
            Must be same length as actualPrefix.
            </summary>
        </member>
        <member name="F:NUnit.Framework.AssertionFailureMessage.actualPrefix">
            <summary>
            Prefix used to start an actual value line.
            Must be same length as expectedPrefix.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.#ctor(System.String,System.Object[])">
            <summary>
            Construct an AssertionFailureMessage with a message
            and optional arguments.
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.#ctor">
            <summary>
            Construct an empty AssertionFailureMessage
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.AddLine(System.String)">
            <summary>
            Add text to the message as a new line.
            </summary>
            <param name="text">The text to add</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.AddLine(System.String,System.Object[])">
            <summary>
            Add formatted text and arguments to the message as a new line.
            </summary>
            <param name="fmt">Format string</param>
            <param name="args">Arguments to use with the format</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.AddExpectedLine(System.String)">
            <summary>
            Add an expected value line to the message containing
            the text provided as an argument.
            </summary>
            <param name="text">Text describing what was expected.</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.AddActualLine(System.String)">
            <summary>
            Add an actual value line to the message containing
            the text provided as an argument.
            </summary>
            <param name="text">Text describing the actual value.</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayExpectedValue(System.Object)">
            <summary>
            Add an expected value line to the message containing
            a string representation of the object provided.
            </summary>
            <param name="expected">An object representing the expected value</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayActualValue(System.Object)">
            <summary>
            Add an actual value limne to the message containing
            a string representation of the object provided.
            </summary>
            <param name="actual">An object representing what was actually found</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayExpectedAndActual(System.Object,System.Object)">
            <summary>
            Display two lines that communicate the expected value, and the actual value
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value found</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayPositionMarker(System.Int32)">
            <summary>
            Draws a marker under the expected/actual strings that highlights
            where in the string a mismatch occurred.
            </summary>
            <param name="iPosition">The position of the mismatch</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.BuildStringLengthReport(System.String,System.String)">
            <summary>
            Reports whether the string lengths are the same or different, and
            what the string lengths are.
            </summary>
            <param name="sExpected">The expected string</param>
            <param name="sActual">The actual string value</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayDifferences(System.Object,System.Object,System.Boolean)">
            <summary>
            Called to create additional message lines when two objects have been 
            found to be unequal.  If the inputs are strings, a special message is
            rendered that can help track down where the strings are different,
            based on differences in length, or differences in content.
            
            If the inputs are not strings, the ToString method of the objects
            is used to show what is different about them.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="caseInsensitive">True if a case-insensitive comparison is being performed</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayStringDifferences(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a message that can be displayed when the content of two
            strings are different, but the string lengths are the same.  The
            message will clip the strings to a reasonable length, centered
            around the first position where they are mismatched, and draw 
            a line marking the position of the difference to make comparison
            quicker.
            </summary>
            <param name="sExpected">The expected string value</param>
            <param name="sActual">The actual string value</param>
            <param name="caseInsensitive">True if a case-insensitive comparison is being performed</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayArrayDifferences(System.Array,System.Array,System.Int32)">
            <summary>
            Display a standard message showing the differences found between 
            two arrays that were expected to be equal.
            </summary>
            <param name="expected">The expected array value</param>
            <param name="actual">The actual array value</param>
            <param name="index">The index at which a difference was found</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayListElements(System.String,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Displays elements from a list on a line
            </summary>
            <param name="label">Text to prefix the line with</param>
            <param name="list">The list of items to display</param>
            <param name="index">The index in the list of the first element to display</param>
            <param name="max">The maximum number of elements to display</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.FormatObjectForDisplay(System.Object)">
            <summary>
            Formats an object for display in a message line
            </summary>
            <param name="obj">The object to be displayed</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.InputsAreStrings(System.Object,System.Object)">
            <summary>
            Tests two objects to determine if they are strings.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.CreateStringBuilder(System.String,System.Object[])">
            <summary>
            Used to create a StringBuilder that is used for constructing
            the output message when text is different.  Handles initialization
            when a message is provided.  If message is null, an empty
            StringBuilder is returned.
            </summary>
            <param name="message"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.ClipAroundPosition(System.String,System.Int32)">
            <summary>
            Renders up to M characters before, and up to N characters after
            the specified index position.  If leading or trailing text is
            clipped, and elipses "..." is added where the missing text would
            be.
            
            Clips strings to limit previous or post newline characters,
            since these mess up the comparison
            </summary>
            <param name="sString"></param>
            <param name="iPosition"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.FindMismatchPosition(System.String,System.String,System.Int32)">
            <summary>
            Shows the position two strings start to differ.  Comparison 
            starts at the start index.
            </summary>
            <param name="sExpected"></param>
            <param name="sActual"></param>
            <param name="iStart"></param>
            <returns>-1 if no mismatch found, or the index where mismatch found</returns>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.ConvertWhitespace(System.String)">
            <summary>
            Turns CR, LF, or TAB into visual indicator to preserve visual marker 
            position.   This is done by replacing the '\r' into '\\' and 'r' 
            characters, and the '\n' into '\\' and 'n' characters, and '\t' into
            '\\' and 't' characters.  
            
            Thus the single character becomes two characters for display.
            </summary>
            <param name="sInput"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.StringAssert">
            <summary>
            Basic Asserts on strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String)">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String)">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="T:NUnit.Framework.Assertion">
            <summary>A set of Assert methods.</summary>
            
        </member>
        <member name="M:NUnit.Framework.Assertion.Assert(System.String,System.Boolean)">
            <summary>
            Asserts that a condition is true. If it isn't it throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="message">The message to display is the condition
            is false</param>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assertion.Assert(System.Boolean)">
            <summary>
            Asserts that a condition is true. If it isn't it throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.Double,System.Double,System.Double)">
            <summary>
            /// Asserts that two doubles are equal concerning a delta. If the
            expected value is infinity then the delta value is ignored.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.Single,System.Single,System.Single)">
            <summary>
            /// Asserts that two singles are equal concerning a delta. If the
            expected value is infinity then the delta value is ignored.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.Object,System.Object)">
            <summary>Asserts that two objects are equal. If they are not
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.Int32,System.Int32)">
            <summary>Asserts that two ints are equal. If they are not
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.String,System.Int32,System.Int32)">
            <summary>Asserts that two ints are equal. If they are not
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.String,System.Double,System.Double,System.Double)">
            <summary>Asserts that two doubles are equal concerning a delta.
            If the expected value is infinity then the delta value is ignored.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.String,System.Single,System.Single,System.Single)">
            <summary>Asserts that two floats are equal concerning a delta.
            If the expected value is infinity then the delta value is ignored.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.String,System.Object,System.Object)">
            <summary>
            Asserts that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  Numeric
            types are compared via string comparision on their contents to
            avoid problems comparing values between different types.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertNotNull(System.Object)">
            <summary>Asserts that an object isn't null.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertNotNull(System.String,System.Object)">
            <summary>Asserts that an object isn't null.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertNull(System.Object)">
            <summary>Asserts that an object is null.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertNull(System.String,System.Object)">
            <summary>Asserts that an object is null.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertSame(System.Object,System.Object)">
            <summary>Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertSame(System.String,System.Object,System.Object)">
            <summary>Asserts that two objects refer to the same object. 
            If they are not an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.Fail">
            <summary>Fails a test with no message.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.Fail(System.String)">
            <summary>Fails a test with the given message.</summary>
        </member>
        <member name="T:NUnit.Framework.IAsserter">
            <summary>
            The interface implemented by an asserter. Asserters
            encapsulate a condition test and generation of an
            AssertionException with a tailored message. They
            are used by the Assert class as helper objects.
            
            User-defined asserters may be passed to the
            Assert.DoAssert method in order to implement
            extended asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IAsserter.Test">
            <summary>
            Test the condition for the assertion.
            </summary>
            <returns>True if the test succeeds</returns>
        </member>
        <member name="P:NUnit.Framework.IAsserter.Message">
            <summary>
            Return the message giving the failure reason.
            The return value is unspecified if no failure
            has occured.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Description">
            <summary>
            Descriptive text for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.NotSameAsserter">
            <summary>
            Asserter that verifies two objects are different.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ComparisonAsserter">
            <summary>
            Abstract class used as a base for asserters that compare
            expected and an actual values in some way or another.
            </summary>
        </member>
        <member name="T:NUnit.Framework.AbstractAsserter">
            <summary>
            AbstractAsserter is the base class for all asserters.
            Asserters encapsulate a condition test and generation 
            of an AssertionException with a tailored message. They
            are used by the Assert class as helper objects.
            
            User-defined asserters may be passed to the 
            Assert.DoAssert method in order to implement 
            extended asserts.
            </summary>
        </member>
        <member name="F:NUnit.Framework.AbstractAsserter.userMessage">
            <summary>
            The user-defined message for this asserter.
            </summary>
        </member>
        <member name="F:NUnit.Framework.AbstractAsserter.args">
            <summary>
            Arguments to use in formatting the user-defined message.
            </summary>
        </member>
        <member name="F:NUnit.Framework.AbstractAsserter.failureMessage">
            <summary>
            Our failure message object, initialized as needed
            </summary>
        </member>
        <member name="M:NUnit.Framework.AbstractAsserter.#ctor(System.String,System.Object[])">
            <summary>
            Constructs an AbstractAsserter
            </summary>
            <param name="message">The message issued upon failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AbstractAsserter.Test">
            <summary>
            Test method to be implemented by derived types.
            Default always succeeds.
            </summary>
            <returns>True if the test succeeds</returns>
        </member>
        <member name="P:NUnit.Framework.AbstractAsserter.FailureMessage">
            <summary>
            AssertionFailureMessage object used internally
            </summary>
        </member>
        <member name="P:NUnit.Framework.AbstractAsserter.Message">
            <summary>
            Message related to a failure. If no failure has
            occured, the result is unspecified.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ComparisonAsserter.expected">
            <summary>
            The expected value, used as the basis for comparison.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ComparisonAsserter.actual">
            <summary>
            The actual value to be compared.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ComparisonAsserter.#ctor(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Constructs a ComparisonAsserter for two objects
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.NotSameAsserter.#ctor(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Construct a NotSameAsserter object
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">A user-defined message for use in reporting errors</param>
            <param name="args">Arguments to be used in formatting the user-defined message</param>
        </member>
        <member name="M:NUnit.Framework.NotSameAsserter.Test">
            <summary>
            Tests that the objects are not the same
            </summary>
        </member>
        <member name="P:NUnit.Framework.NotSameAsserter.Message">
            <summary>
            Provides a message in case of failure
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreAttribute">
            <summary>
            IgnoreAttribute.
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Constructor with a reason
            </summary>
            <param name="reason">The reason for ignoring the test</param>
        </member>
        <member name="P:NUnit.Framework.IgnoreAttribute.Reason">
            <summary>
            The reason for ignoring a test
            </summary>
        </member>
        <member name="T:NUnit.Framework.ExplicitAttribute">
            <summary>
            ExplicitAttribute marks a test or test fixture so that it will
            only be run if explicitly executed from the gui or command line
            or if it is included by use of a filter. The test will not be
            run simply because an enclosing suite is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.ExpectedExceptionAttribute">
            <summary>
            ExpectedExceptionAttribute
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Constructor for a given type of exception
            </summary>
            <param name="exceptionType">The type of the expected exception</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.String)">
            <summary>
            Constructor for a given exception name
            </summary>
            <param name="exceptionName">The full name of the expected exception</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Constructor for a given type of exception and expected message text
            </summary>
            <param name="exceptionType">The type of the expected exception</param>
            <param name="expectedMessage">The expected message text</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor for a given exception name and expected message text
            </summary>
            <param name="exceptionName">The full name of the expected exception</param>
            <param name="expectedMessage">The expected messge text</param>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExceptionType">
            <summary>
            The expected exception type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExceptionName">
            <summary>
            The full Type name of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedMessage">
            <summary>
            The expected message
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureSetUpAttribute">
            <summary>
            TestFixtureSetUpAttribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpAttribute">
            <summary>
            SetUpAttribute.
            </summary>
            
        </member>
        <member name="T:NUnit.Framework.Assert">
            <summary>
            A set of Assert methods
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is true</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is true</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is null</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is null</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is not null</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is not null</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not null <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to be displayed when the object is not null</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double,System.String)">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is not null</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double)">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String,System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String,System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The messge to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The messge to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
            <param name="args">An array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
            <param name="args">An array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that two ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that two ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that two ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that two decimals are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that two decimal are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that two decimals are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that two floats are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message displayed upon failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that two floats are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message displayed upon failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Verifies that two floats are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            Arrays are compared by comparing each element using the same rules.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display if objects are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32)">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal)">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String)">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single)">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String)">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double)">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are not the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the object is null</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32)">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double)">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single)">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the actual value is greater than the expected
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. For this method
            expected and actual are reversed from their normal order to 
            more closely fit the way this operation would read in english.
            For instance 5 &gt; 4 would be written Assert.Greater(5,4).
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32)">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double)">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single)">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the expected value is less than the actual
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.IList,System.String,System.Object[])">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.IList,System.String)">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.IList)">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message and arguments 
            that are passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message that is 
            passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/>. 
            This is used by the other Assert functions. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message and arguments 
            that are passed in.  This causes the test to be reported as ignored.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message that is 
            passed in. This causes the test to be reported as ignored. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/>. 
            This causes the test to be reported as ignored. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.DoAssert(NUnit.Framework.IAsserter)">
            <summary>
            Test the condition asserted by an asserter and throw
            an assertion exception using provided message on failure.
            </summary>
            <param name="asserter">An object that implements IAsserter</param>
        </member>
        <member name="P:NUnit.Framework.Assert.Counter">
            <summary>
            Gets the number of assertions executed so far and 
            resets the counter to zero.
            </summary>
        </member>
        <member name="T:NUnit.Framework.GreaterAsserter">
            <summary>
            Class to assert that the actual value is greater than the expected value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.GreaterAsserter.#ctor(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Constructs a GreaterAsserter for two objects implementing IComparable
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.GreaterAsserter.Test">
            <summary>
            Test whether the actual is greater than the expected, building up
            the failure message for later use if they are not.
            </summary>
            <returns>True if actual is greater than expected</returns>
        </member>
        <member name="T:NUnit.Framework.EqualityAsserter">
            <summary>
            Abstract base class for EqualsAsserter and NotEqualsAsserter
            </summary>
        </member>
        <member name="M:NUnit.Framework.EqualityAsserter.#ctor(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Constructor taking expected and actual values and a user message with arguments.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.EqualityAsserter.#ctor(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Constructor taking expected and actual values, a tolerance
            and a user message and arguments.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="delta"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.EqualityAsserter.ObjectsEqual(System.Object,System.Object)">
            <summary>
            Used to compare two objects.  Two nulls are equal and null
            is not equal to non-null. Comparisons between the same
            numeric types are fine (Int32 to Int32, or Int64 to Int64),
            but the Equals method fails across different types so we
            use <c>ToString</c> and compare the results.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.EqualityAsserter.IsNumericType(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.EqualityAsserter.ArraysEqual(System.Array,System.Array)">
            <summary>
            Helper method to compare two arrays
            </summary>
        </member>
        <member name="T:NUnit.Framework.CategoryAttribute">
            <summary>
            Summary description for CategoryAttribute.
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor(System.String)">
            <summary>
            Construct attribute for a given category
            </summary>
            <param name="name">The name of the category</param>
        </member>
        <member name="P:NUnit.Framework.CategoryAttribute.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="T:NUnit.Framework.ListContentsAsserter">
            <summary>
            ListContentsAsserter implements an assertion that a given
            item is found in an array or other List.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ListContentsAsserter.#ctor(System.Object,System.Collections.IList,System.String,System.Object[])">
            <summary>
            Constructs a ListContentsAsserter for a particular list and object.
            </summary>
            <param name="expected">The expected object</param>
            <param name="list">The list to be examined</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.ListContentsAsserter.Test">
            <summary>
            Test that the object is contained in the list
            </summary>
            <returns>True if the object is found</returns>
        </member>
        <member name="P:NUnit.Framework.ListContentsAsserter.Message">
            <summary>
            Error message to display after a failure.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ConditionAsserter">
            <summary>
            ConditionAsserter class represents an asssertion
            that tests a particular condition, which is passed
            to it in the constructor. The failure message is
            not specialized in this class, but derived classes
            are free to do so.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ConditionAsserter.condition">
            <summary>
            The condition we are testing
            </summary>
        </member>
        <member name="F:NUnit.Framework.ConditionAsserter.expectation">
            <summary>
            Phrase indicating what we expected to find
            Ignored unless set by derived class
            </summary>
        </member>
        <member name="M:NUnit.Framework.ConditionAsserter.#ctor(System.Boolean,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="condition">The condition to be tested</param>
            <param name="message">The message issued upon failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.ConditionAsserter.Test">
            <summary>
            Test the condition being asserted directly
            </summary>
        </member>
        <member name="T:NUnit.Framework.TrueAsserter">
            <summary>
            Class to assert that a condition is true
            </summary>
        </member>
        <member name="M:NUnit.Framework.TrueAsserter.#ctor(System.Boolean,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="condition">The condition to assert</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="T:NUnit.Framework.FalseAsserter">
            <summary>
            Class to assert that a condition is false
            </summary>
        </member>
        <member name="M:NUnit.Framework.FalseAsserter.#ctor(System.Boolean,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="condition">The condition to assert</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="T:NUnit.Framework.NullAsserter">
            <summary>
            Class to assert that an object is null
            </summary>
        </member>
        <member name="M:NUnit.Framework.NullAsserter.#ctor(System.Object,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="anObject">The object to test</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="T:NUnit.Framework.NotNullAsserter">
            <summary>
            Class to assert that an object is not null
            </summary>
        </member>
        <member name="M:NUnit.Framework.NotNullAsserter.#ctor(System.Object,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="anObject">The object to test</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="T:NUnit.Framework.NaNAsserter">
            <summary>
            Class to assert that a double is an NaN
            </summary>
        </member>
        <member name="M:NUnit.Framework.NaNAsserter.#ctor(System.Double,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="aDouble">The value to test</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="T:NUnit.Framework.EmptyAsserter">
            <summary>
            Class to Assert that a string or collection is empty
            </summary>
        </member>
        <member name="M:NUnit.Framework.EmptyAsserter.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Construct an EmptyAsserter for a string
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display if the string is not empty</param>
            <param name="args">Arguements to use in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.EmptyAsserter.#ctor(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Construct an EmptyAsserter for a collection
            </summary>
            <param name="collection">The collection to be tested</param>
            <param name="message">The message to display if the collection is not empty</param>
            <param name="args">Arguements to use in formatting the message</param>
        </member>
        <member name="T:NUnit.Framework.NotEmptyAsserter">
            <summary>
            Class to Assert that a string or collection is not empty
            </summary>
        </member>
        <member name="M:NUnit.Framework.NotEmptyAsserter.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Construct a NotEmptyAsserter for a string
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display if the string is empty</param>
            <param name="args">Arguements to use in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.NotEmptyAsserter.#ctor(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Construct a NotEmptyAsserter for a collection
            </summary>
            <param name="collection">The collection to be tested</param>
            <param name="message">The message to display if the collection is empty</param>
            <param name="args">Arguements to use in formatting the message</param>
        </member>
        <member name="T:NUnit.Framework.TypeAsserter">
            <summary>
            The abstract asserter from which all specific type asserters
            will inherit from in order to limit code-reproduction.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TypeAsserter.expected">
            <summary>
            The expected Type
            </summary>
        </member>
        <member name="F:NUnit.Framework.TypeAsserter.actual">
            <summary>
            The actual object to be compared
            </summary>
        </member>
        <member name="M:NUnit.Framework.TypeAsserter.#ctor(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Construct a TypeAsserter
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object to be examined</param>
            <param name="message">A message to display on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="P:NUnit.Framework.TypeAsserter.Message">
            <summary>
            The complete message text in case of a failure.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TypeAsserter.Expectation">
            <summary>
            A string representing what was expected. Used as a part of the message text.
            </summary>
        </member>
        <member name="T:NUnit.Framework.AssignableFromAsserter">
            <summary>
            Class to Assert that an object may be assigned from a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssignableFromAsserter.#ctor(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Construct an AssignableFromAsserter
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
            <param name="args">Arguments for use in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssignableFromAsserter.Test">
            <summary>
            Test the object to determine if it can be assigned from the expected Type
            </summary>
            <returns>True if the object is assignable</returns>
        </member>
        <member name="P:NUnit.Framework.AssignableFromAsserter.Expectation">
            <summary>
            A string representing what was expected. Used as a part of the message text.
            </summary>
        </member>
        <member name="T:NUnit.Framework.NotAssignableFromAsserter">
            <summary>
            Class to Assert that an object may not be assigned from a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.NotAssignableFromAsserter.#ctor(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Construct a NotAssignableFromAsserter
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments to use in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.NotAssignableFromAsserter.Test">
            <summary>
            Test the object to determine if it can be assigned from the expected Type
            </summary>
            <returns>True if the object is not assignable</returns>
        </member>
        <member name="P:NUnit.Framework.NotAssignableFromAsserter.Expectation">
            <summary>
            A string representing what was expected. Used as a part of the message text.
            </summary>
        </member>
        <member name="T:NUnit.Framework.InstanceOfTypeAsserter">
            <summary>
            Class to Assert that an object is an instance of a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.InstanceOfTypeAsserter.#ctor(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Construct an InstanceOfTypeAsserter
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments to use in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.InstanceOfTypeAsserter.Test">
            <summary>
            Test the object to determine if it is an instance of the expected Type
            </summary>
            <returns>True if the object is an instance of the expected Type</returns>
        </member>
        <member name="P:NUnit.Framework.InstanceOfTypeAsserter.Expectation">
            <summary>
            A string representing what was expected. Used as a part of the message text.
            </summary>
        </member>
        <member name="T:NUnit.Framework.NotInstanceOfTypeAsserter">
            <summary>
            Class to Assert that an object is not an instance of a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.NotInstanceOfTypeAsserter.#ctor(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Construct a NotInstanceOfTypeAsserter
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments to use in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.NotInstanceOfTypeAsserter.Test">
            <summary>
            Test the object to determine if it is an instance of the expected Type
            </summary>
            <returns>True if the object is not an instance of the expected Type</returns>
        </member>
        <member name="P:NUnit.Framework.NotInstanceOfTypeAsserter.Expectation">
            <summary>
            A string representing what was expected. Used as a part of the message text.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TearDownAttribute">
            <summary>
            TearDownAttribute.
            </summary>
            
        </member>
        <member name="T:NUnit.Framework.TestCase">
            <summary>
            TestFixture
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.TestCase.SetUp">
            <summary>
            SetUp method
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCase.TearDown">
            <summary>
            TearDown method
            </summary>
        </member>
        <member name="T:NUnit.Framework.LessAsserter">
            <summary>
            Class to assert that the actual value is greater than the expected value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.LessAsserter.#ctor(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Constructs a GreaterAsserter for two objects implementing IComparable
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.LessAsserter.Test">
            <summary>
            Test whether the actual is greater than the expected, building up
            the failure message for later use if they are not.
            </summary>
            <returns>True if actual is greater than expected</returns>
        </member>
        <member name="T:NUnit.Framework.AssertionException">
            <summary>
            Thrown when an assertion failed.
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreException">
            <summary>
            Thrown when an assertion failed.
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.EqualAsserter">
            <summary>
            Class to assert that two objects are equal 
            </summary>
        </member>
        <member name="M:NUnit.Framework.EqualAsserter.#ctor(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Constructs an EqualAsserter for two objects
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.EqualAsserter.#ctor(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Constructs an EqualAsserter for two doubles and a tolerance
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="tolerance">The tolerance used in making the comparison</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.EqualAsserter.Test">
            <summary>
            Test whether the objects are equal, building up
            the failure message for later use if they are not.
            </summary>
            <returns>True if the objects are equal</returns>
        </member>
        <member name="T:NUnit.Framework.TestFixtureTearDownAttribute">
            <summary>
            TestFixtureTearDownAttribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.StringAsserter">
            <summary>
            Abstract class used as a base for asserters that compare
            expected and an actual string values in some way or another.
            </summary>
        </member>
        <member name="F:NUnit.Framework.StringAsserter.expected">
            <summary>
            The expected value, used as the basis for comparison.
            </summary>
        </member>
        <member name="F:NUnit.Framework.StringAsserter.actual">
            <summary>
            The actual value to be compared.
            </summary>
        </member>
        <member name="M:NUnit.Framework.StringAsserter.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            Constructs a StringAsserter for two strings
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="P:NUnit.Framework.StringAsserter.Message">
            <summary>
            Message related to a failure. If no failure has
            occured, the result is unspecified.
            </summary>
        </member>
        <member name="P:NUnit.Framework.StringAsserter.Expectation">
            <summary>
            String value that represents what the asserter expected
            to find. Defaults to the expected value itself.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ContainsAsserter">
            <summary>
            Summary description for ContainsAsserter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ContainsAsserter.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            Constructs a ContainsAsserter for two strings
            </summary>
            <param name="expected">The expected substring</param>
            <param name="actual">The actual string to be examined</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.ContainsAsserter.Test">
            <summary>
            Test the assertion.
            </summary>
            <returns>True if the test succeeds</returns>
        </member>
        <member name="P:NUnit.Framework.ContainsAsserter.Expectation">
            <summary>
            String value that represents what the asserter expected
            </summary>
        </member>
        <member name="T:NUnit.Framework.StartsWithAsserter">
            <summary>
            Summary description for StartsWithAsserter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.StartsWithAsserter.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            Constructs a StartsWithAsserter for two strings
            </summary>
            <param name="expected">The expected substring</param>
            <param name="actual">The actual string to be examined</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StartsWithAsserter.Test">
            <summary>
            Test the assertion.
            </summary>
            <returns>True if the test succeeds</returns>
        </member>
        <member name="P:NUnit.Framework.StartsWithAsserter.Expectation">
            <summary>
            String value that represents what the asserter expected
            </summary>
        </member>
        <member name="T:NUnit.Framework.EndsWithAsserter">
            <summary>
            Summary description for EndsWithAsserter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.EndsWithAsserter.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            Constructs a EndsWithAsserter for two strings
            </summary>
            <param name="expected">The expected substring</param>
            <param name="actual">The actual string to be examined</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.EndsWithAsserter.Test">
            <summary>
            Test the assertion.
            </summary>
            <returns>True if the test succeeds</returns>
        </member>
        <member name="P:NUnit.Framework.EndsWithAsserter.Expectation">
            <summary>
            String value that represents what the asserter expected
            </summary>
        </member>
        <member name="T:NUnit.Framework.EqualIgnoringCaseAsserter">
            <summary>
            Asserter that implements AreEqualIgnoringCase
            </summary>
        </member>
        <member name="M:NUnit.Framework.EqualIgnoringCaseAsserter.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            Constructs an EqualIgnoringCaseAsserter for two strings
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to issue on failure</param>
            <param name="args">Arguments to apply in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.EqualIgnoringCaseAsserter.Test">
            <summary>
            Test the assertion.
            </summary>
            <returns>True if the test succeeds</returns>
        </member>
        <member name="P:NUnit.Framework.EqualIgnoringCaseAsserter.Message">
            <summary>
            String value that represents what the asserter expected
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpFixtureAttribute">
            <summary>
            SetUpFixtureAttribute is used to identify a SetUpFixture
            </summary>
        </member>
        <member name="T:NUnit.Framework.SameAsserter">
            <summary>
            Asserter that verifies two objects are the same.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SameAsserter.#ctor(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Construct a SameAsserter object
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">A user-defined message for use in reporting errors</param>
            <param name="args">Arguments to be used in formatting the user-defined message</param>
        </member>
        <member name="M:NUnit.Framework.SameAsserter.Test">
            <summary>
            Test that actual and expected reference the same object
            </summary>
        </member>
        <member name="P:NUnit.Framework.SameAsserter.Message">
            <summary>
            Provide error message when the objects are different.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SuiteAttribute">
            <summary>
            SuiteAttribute.
            </summary>
            
        </member>
        <member name="T:NUnit.Framework.PlatformAttribute">
            <summary>
            PlatformAttribute is used to mark a test fixture or an
            individual method as applying to a particular platform only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor">
            <summary>
            Constructor with no platforms specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more platforms
            </summary>
            <param name="platforms">Comma-deliminted list of platforms</param>
        </member>
        <member name="P:NUnit.Framework.PlatformAttribute.Include">
            <summary>
            Name of the platform that is needed in order for
            a test to run. Multiple platforms may be given,
            separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.PlatformAttribute.Exclude">
            <summary>
            Name of the platform to be excluded. Multiple platforms
            may be given, separated by a comma.
            </summary>
        </member>
        <member name="T:NUnit.Framework.NotEqualAsserter">
            <summary>
            NotEqualAsserter is the asserter class that handles 
            inequality assertions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.NotEqualAsserter.#ctor(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Constructor for NotEqualAsserter
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be printed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.NotEqualAsserter.Test">
            <summary>
            Test that the objects are not equal
            </summary>
        </member>
    </members>
</doc>
