<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/home/terry/devel/csharp_oss/Axiom/branches/hobbiton/Source/Related_Projects/Plugins/SceneManagers/PagingLandscape/build/debug/PagingLandscape/Axiom.SceneManagers.PagingLandscape</name>
    </assembly>
    <members>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.Data2DPages">
            <summary>
            		A strongly-typed collection of <see cref="!:Page" /> objects.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.Data2DPages.#ctor">
            <summary>
            		Default constructor.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.Data2DPages.Item(System.Int32)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.Data2DPages.Item(System.Int64)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.Data2DPages.Add(Axiom.SceneManagers.PagingLandscape.Collections.Data2DRow)">
            <summary>
            		Adds an object to the collection.
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.Data2DRow">
            <summary>
            		A strongly-typed collection of <see cref="!:Page" /> objects.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.Data2DRow.#ctor">
            <summary>
            		Default constructor.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.Data2DRow.Item(System.Int32)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.Data2DRow.Item(System.Int64)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.Data2DRow.Add(Axiom.SceneManagers.PagingLandscape.Data2D.Data2D)">
            <summary>
            		Adds an object to the collection.
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.PageQueue">
            <summary>
            Summary description for TileQueue.
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.PageRow">
            <summary>
            		A strongly-typed collection of <see cref="!:Page" /> objects.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.PageRow.#ctor">
            <summary>
            		Default constructor.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.PageRow.Item(System.Int32)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.PageRow.Item(System.Int64)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.PageRow.Add(Axiom.SceneManagers.PagingLandscape.Page.Page)">
            <summary>
            		Adds an object to the collection.
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.Pages">
            <summary>
            		A strongly-typed collection of <see cref="!:Page" /> objects.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.Pages.#ctor">
            <summary>
            		Default constructor.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.Pages.Item(System.Int32)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.Pages.Item(System.Int64)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.Pages.Add(Axiom.SceneManagers.PagingLandscape.Collections.PageRow)">
            <summary>
            		Adds an object to the collection.
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.RenderableQueue">
            <summary>
            Summary description for TileQueue.
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.TexturePages">
            <summary>
            		A strongly-typed collection of <see cref="!:Page" /> objects.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.TexturePages.#ctor">
            <summary>
            		Default constructor.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.TexturePages.Item(System.Int32)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.TexturePages.Item(System.Int64)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.TexturePages.Add(Axiom.SceneManagers.PagingLandscape.Collections.TextureRow)">
            <summary>
            		Adds an object to the collection.
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.TextureRow">
            <summary>
            		A strongly-typed collection of <see cref="!:Page" /> objects.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.TextureRow.#ctor">
            <summary>
            		Default constructor.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.TextureRow.Item(System.Int32)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.TextureRow.Item(System.Int64)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.TextureRow.Add(Axiom.SceneManagers.PagingLandscape.Texture.Texture)">
            <summary>
            		Adds an object to the collection.
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.TileQueue">
            <summary>
            Summary description for TileQueue.
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.TileRow">
            <summary>
            		A strongly-typed collection of <see cref="!:Page" /> objects.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.TileRow.#ctor">
            <summary>
            		Default constructor.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.TileRow.Item(System.Int32)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.TileRow.Item(System.Int64)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.TileRow.Add(Axiom.SceneManagers.PagingLandscape.Tile.Tile)">
            <summary>
            		Adds an object to the collection.
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.Tiles">
            <summary>
            		A strongly-typed collection of <see cref="!:Page" /> objects.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.Tiles.#ctor">
            <summary>
            		Default constructor.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.Tiles.Item(System.Int32)">
            <summary>
            		Constructor that takes a parent object to, and calls the base class constructor to
            </summary>
            <param name="entity">
            </param>
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.Tiles.Item(System.Int64)">
            <summary>
            		Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.Tiles.Add(Axiom.SceneManagers.PagingLandscape.Collections.TileRow)">
            <summary>
            		Adds an object to the collection.
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection">
            <summary>
            		Serves as a basis for strongly typed collections in the engine.
            </summary>
            <remarks>
            		Can't wait for Generics in .Net Framework 2.0!
            </remarks>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.#ctor(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.#ctor(System.Object)">
            <summary>
            </summary>
            <param name="parent">
            </param>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.#ctor(System.Object,System.Int32)">
            <summary>
            </summary>
            <param name="parent">
            </param>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.Enumerator.Current">
            <summary>
            		Returns the current object in the enumeration.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.Enumerator.Reset">
            <summary>
            		Resets the in progress enumerator.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.Enumerator.MoveNext">
            <summary>
            		Moves to the next item in the enumeration if there is one.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.objectList">
            <summary>
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.parent">
            <summary>
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.Item(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.Add(System.Object)">
            <summary>
            		Accepts an unnamed object and names it manually.
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.Clear">
            <summary>
            		Clears all objects from the collection.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Collections.UnsortedCollection.RemoveAt(System.Int32)">
            <summary>
            		Removes an item at the specified index.
            </summary>
            <param name="index">
            </param>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Data2D.Data2D">
            <summary>
            Summary description for Data2D.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:Axiom.SceneManagers.PagingLandscape.Data2D.Data2D.DeformHeight(Axiom.Math.Vector3,System.Single,Axiom.SceneManagers.PagingLandscape.Tile.TileInfo)-->
        <!--FIXME: Invalid documentation markup was found for member M:Axiom.SceneManagers.PagingLandscape.Data2D.Data2D.DeformHeight(System.Int64,System.Int64,System.Single)-->
        <member name="T:Axiom.SceneManagers.PagingLandscape.Data2D.Data2DManager">
            <summary>
            Summary description for Data2DManager.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Data2D.Data2DManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Data2D.Data2DManager.GetRealWorldHeight(System.Single,System.Single)">
             Get the real world height at a particular position
            			@remarks
            			Method is used to get the terrain height at a world position based on x and z.
            			This method just figures out what page the position is on and then asks the page node
            			to do the dirty work of getting the height.
            			@par
            			the float returned is the real world height based on the scale of the world.  If the height could
            			not be determined then -1 is returned and this would only occur if the page was not preloaded or loaded
            			@param x  x world position
            			@param z  z world position</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Data2D.Data2DManager.GetPageIndices(Axiom.Math.Vector3,System.Int64@,System.Int64@)">
             Get the Page indices from a world position vector
            			@remarks
            			Method is used to find the Page indices using a world position vector.
            			Beats having to iterate through the Page list to find a page at a particular
            			position in the world.
            			@param pos the world position vector. Only components x and z are used
            			@param x	result placed in reference to the x index of the page
            			@param z	result placed in reference to the z index of the page</member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Data2D.Data2D_ClientGen">
            <summary>
            A specialized class for loading 2D Data from a HeightField file.
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Data2D.Data2D_HeightField">
            <summary>
            A specialized class for loading 2D Data from a HeightField file.
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Page.Page">
            <summary>
            Summary description for Page.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Page.Page.SetNeighbor(Axiom.SceneManagers.PagingLandscape.Neighbor,Axiom.SceneManagers.PagingLandscape.Page.Page)">
             Sets the appropriate neighbor for this TerrainRenderable.  Neighbors are necessary
            	to know when to bridge between LODs.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Page.Page.GetNeighbor(Axiom.SceneManagers.PagingLandscape.Neighbor)">
             Returns the neighbor TerrainRenderable.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Page.Page.Preload">
             Pre-loads the landscape using parameters in the given in the constructor.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Page.Page.Load(Axiom.Core.SceneNode@)">
             Loads the landscape using parameters in the given in the constructor.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Page.Page.Unload">
             Unloads the landscape data, but doesnt destroy the landscape page.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Page.Page.PostUnload">
             Post Unloads the landscape data, but doesnt destroy the landscape page.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Page.Page.IsCameraIn(Axiom.Math.Vector3)">
             Returns if the camera is over this landscape page.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Page.Page.GetRenderOpsInBox(Axiom.Math.AxisAlignedBox,System.Collections.ArrayList)">
            Gets all the patches within an AABB in world coordinates as GeometryData structs</member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Page.PageManager">
            <summary>
            Summary description for PageManager.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Page.PageManager.#ctor(Axiom.Core.SceneNode)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Page.PageManager.sceneRoot">
            Root scene node</member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Page.PageManager.pages">
             LandScape pages for the terrain.</member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Page.PageManager.pageLoadQueue">
             Queues to batch the process of loading and unloading Pages.
            			This avoid the plugin to load a lot of Pages in a single Frame, droping the FPS.</member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Page.PageManager.currentCameraPageX">
             LandScapePage index where the camera is.</member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Page.PageManager.lastCameraPageState">
             The last estate for the camera.</member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Query.IntersectionSceneQuery">
            <summary>
            Summary description for IPLIntersectionSceneQuery.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Query.IntersectionSceneQuery.#ctor(Axiom.SceneManagers.PagingLandscape.SceneManager)">
            <summary>
            		Constructor
            </summary>
            <param name="creator">SceneManage that created this query</param>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Query.IntersectionSceneQuery.Execute(Axiom.Core.IIntersectionSceneQueryListener)">
            <summary>
                <see cref="T:Axiom.SceneManagers.PagingLandscape.Query.IntersectionSceneQuery" />
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Query.RaySceneQuery">
            <summary>
            	IPL's specialisation of RaySceneQuery.
            	if RSQ_Height bit mask is set, RSQ_Terrain and RSQ_Entity bits will be ignored
            	Otherwise data will be returned based on the mask
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Query.RaySceneQuery.#ctor(Axiom.SceneManagers.PagingLandscape.SceneManager)">
            <summary>
            		Constructor
            </summary>
            <param name="creator">SceneManager that creates this query</param>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Query.RaySceneQuery.Execute(Axiom.Core.IRaySceneQueryListener)">
            <summary>
                <see cref="T:Axiom.SceneManagers.PagingLandscape.Query.RaySceneQuery" />
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Query.RaySceneQuery.getHeightAt(Axiom.Math.Vector3)">
            <summary>
            </summary>
            <param name="origin">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Query.RaySceneQuery.clearFragmentList">
            <summary>
            		Removes Cached fragments from last query
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Renderable.IndexBuffer">
            <summary>
            Summary description for IndexBuffer.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.IndexBuffer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Renderable.IndexBuffer.levelIndex">
            Shared array of IndexData (reuse indexes across tiles)</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.IndexBuffer.StitchEdge(Axiom.SceneManagers.PagingLandscape.Neighbor,System.Int64,System.Int64,System.Boolean,System.Boolean,System.IntPtr,System.Int64@)">
             Utility method to generate stitching indexes on the edge of a tile
            		@param neighbor The neighbor direction to stitch
            		@param hiLOD The LOD of this tile
            		@param loLOD The LOD of the neighbor
            		@param omitFirstTri Whether the first tri of the stitch (always clockwise
            		relative to the centre of this tile) is to be omitted because an
            		adjoining edge is also being stitched
            		@param omitLastTri Whether the last tri of the stitch (always clockwise
            		relative to the centre of this tile) is to be omitted because an
            		adjoining edge is also being stitched
            		@param pIdx Pointer to a pointer to the index buffer to push the results
            		into (this pointer will be updated)
            		@returns The number of indexes added</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.IndexBuffer.GetIndexData(System.Int64,System.Int64,Axiom.SceneManagers.PagingLandscape.Renderable.Renderable[])">
            Gets the index data for this tile based on current settings</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.IndexBuffer.GenerateTriListIndexes(System.Int64,System.Int64,Axiom.SceneManagers.PagingLandscape.Renderable.Renderable[])">
            Internal method for generating triangle list terrain indexes</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.IndexBuffer.index(System.Int32,System.Int32)">
             Returns the index into the height array for the given coordinates.</member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Renderable.Renderable">
            <summary>
            Summary description for Renderable.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.Renderable.#ctor">
            	Initializes the LandScapeRenderable with the given options and the starting coordinates of this block.</member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Renderable.Renderable.renderOp">
            Connection to tiles four neighbours</member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Renderable.Renderable.RenderLevel">
            The current LOD level</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.Renderable.SetNeighbor(Axiom.SceneManagers.PagingLandscape.Neighbor,Axiom.SceneManagers.PagingLandscape.Renderable.Renderable)">
             Sets the appropriate neighbor for this TerrainRenderable.  Neighbors are necessary
            		to know when to bridge between LODs.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.Renderable.GetNeighbor(Axiom.SceneManagers.PagingLandscape.Neighbor)">
             Returns the neighbor TerrainRenderable.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.Renderable.GetSquaredViewDepth(Axiom.Core.Camera)">
             Overridden, see Renderable</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.Renderable.getIndexData">
            Gets the index data for this tile based on current settings</member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Renderable.RenderableManager">
            <summary>
            Summary description for RenderableManager.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.RenderableManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Renderable.RenderableManager.renderablesLoadQueue">
             Queue to batch the process of loading the Renderables.
            			This avoid the plug-in to load a lot of renderables in a single Frame,
            			droping the FPS.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.RenderableManager.FreeRenderable(Axiom.SceneManagers.PagingLandscape.Renderable.Renderable)">
             Make a renderable free.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.RenderableManager.QueueRenderableLoading(Axiom.SceneManagers.PagingLandscape.Renderable.Renderable,Axiom.SceneManagers.PagingLandscape.Tile.Tile)">
             Set this renderable to be loaded</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Renderable.RenderableManager.ExecuteRenderableLoading">
             Load a set of renderables</member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Texture.Texture">
            <summary>
            Summary description for Texture.
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Texture.TextureManager">
            <summary>
            Summary description for TextureManager.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Texture.TextureManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Texture.Texture_Image">
            <summary>
            Summary description for Texture_Image.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Texture.Texture_Image.CreateMaterial(System.String)">
            <summary>
            		Creates a new (blank) material with the specified name.
            </summary>
            <param name="name">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Texture.Texture_Splatting5">
            <summary>
            Summary description for Texture_Image.
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Tile.Tile">
            <summary>
            Summary description for Tile.
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Tile.Tile.BoundingBox">
             Returns the bounding box of this LandScapeRenderable</member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.Tile.Tile.BoundingRadius">
             Overridden from SceneObject</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Tile.Tile.SetNeighbor(Axiom.SceneManagers.PagingLandscape.Neighbor,Axiom.SceneManagers.PagingLandscape.Tile.Tile)">
             Sets the appropriate neighbor for this TerrainRenderable.  Neighbors are necessary
            		to know when to bridge between LODs.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Tile.Tile.GetNeighbor(Axiom.SceneManagers.PagingLandscape.Neighbor)">
             Returns the neighbor TerrainRenderable.</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Tile.Tile.IntersectSegment(Axiom.Math.Vector3,Axiom.Math.Vector3,Axiom.Math.Vector3)">
            <summary>
            Intersects Mainly with Landscape
            </summary>
            <param name="start">begining of the segment</param>
            <param name="dir">direction of the secment</param>
            <param name="result">where the segment intersects with the terrain</param>
            <returns>
            </returns>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Tile.Tile.UpdateTerrain">
            <summary>
            Make the Tile reload its vertices and normals (upon a modification of the height data)
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Tile.Tile.NotifyCurrentCamera(Axiom.Core.Camera)">
             Updates the level of detail to be used for rendering this PagingLandScapeRenderable based on the passed in Camera</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Tile.Tile.GetRenderOpsInBox(Axiom.Math.AxisAlignedBox,System.Collections.ArrayList)">
            Gets all the patches within an AABB in world coordinates as GeometryData structs</member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Tile.TileInfo">
            <summary>
            This class holds the Tile info
            </summary>
            <remarks>
            This will avoid to pass a lot of data to the Renderable class.
            </remarks>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Tile.TileManager">
            <summary>
            Summary description for TileManager.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Tile.TileManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Tile.TileManager.GetTile">
            <summary>
            Retrieve a free Tile
            </summary>
            <returns>free tile</returns>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Tile.TileManager.FreeTile(Axiom.SceneManagers.PagingLandscape.Tile.Tile)">
            <summary>
            Marks a tile as free
            </summary>
            <param name="tile">Tile to free</param>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Camera">
            <summary>
            Summary description for Camera.
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Camera.Visibility">
             Visibility types</member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Camera.GetVisibility(Axiom.Math.AxisAlignedBox)">
             Returns the visibility of the box</member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.Options">
            <summary>
            Summary description for IPLOptions.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.Options.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.Options.optionData">
            <summary>
            Contain option data loaded during the Load method
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.LandscapeSceneManagerPlugin">
            <summary>
            Summary description for IPLSMPlugin.
            </summary>
        </member>
        <member name="T:Axiom.SceneManagers.PagingLandscape.SceneManager">
            <summary>
            		This is a basic SceneManager for organizing LandscapeRenderables into a total Landscape.
            		It loads a Landscape from a .cfg file that specifices what textures/scale/virtual window/etc to use.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.SceneManager.options">
            <summary>
            All the plugin options are handle here.
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.SceneManager.data2DManager">
            <summary>
            Landscape 2D Data manager.
            This class encapsulate the 2d data loading and unloading
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.SceneManager.textureManager">
            <summary>
            Landscape Texture manager.
            This class encapsulate the texture loading and unloading
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.SceneManager.tileManager">
            <summary>
            Landscape tiles manager to avoid creating and deleting terrain tiles.
            They are created at the plugin start and destroyed at the plugin unload.
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.SceneManager.renderableManager">
            <summary>
            Landscape Renderable manager to avoid creating and deleting renderables.
            They are created at the plugin start and destroyed at the plugin unload.
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.SceneManager.pageManager">
            <summary>
            Landscape pages for the terrain.
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PagingLandscape.SceneManager.worldGeomIsSetup">
            <summary>
            flag to indicate if the world geometry was setup
            </summary>
        </member>
        <member name="P:Axiom.SceneManagers.PagingLandscape.SceneManager.Entities">
            <summary>
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.CreateCamera(System.String)">
            <summary>
            Creates a specialized Camera
            </summary>
            <param name="name">Camera name</param>
            <returns>camera</returns>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.LoadWorldGeometry(System.String)">
            <summary>
            Loads the LandScape using parameters in the given config file.
            </summary>
            <param name="filename">
            </param>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.ClearScene">
            <summary>
            Empties the entire scene, inluding all SceneNodes, Cameras, Entities and Lights etc.
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.SetOption(System.String,System.Object)">
            <summary>
            Method for setting a specific option of the Scene Manager. These options are usually
            specific for a certain implemntation of the Scene Manager class, and may (and probably
            will) not exist across different implementations.
            </summary>
            <param name="strKey">The name of the option to set</param>
            <param name="pValue">A pointer to the value - the size should be calculated by the scene manager based on the key</param>
            <returns>On success, true is returned. On failure, false is returned.</returns>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.GetOption(System.String,System.Object@)">
            <summary>
            Method for getting the value of an implementation-specific Scene Manager option.
            </summary>
            <param name="strKey">The name of the option</param>
            <param name="pDestValue">A pointer to a memory location where the value will	be copied. Currently, the memory will be allocated by the scene manager, but this may change</param>
            <returns>
            On success, true is returned and pDestValue points to the value of the given
            option.
            On failure, false is returned and pDestValue is set to NULL.
            </returns>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.HasOption(System.String)">
            <summary>
            Method for verifying weather the scene manager has an implementation-specific option.
            </summary>
            <param name="strKey">The name of the option to check for.</param>
            <returns>If the scene manager contains the given option, true is returned.</returns>
            <remarks>If it does not, false is returned.</remarks>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.GetOptionValues(System.String,System.Collections.ArrayList)">
            <summary>
            Method for getting all possible values for a specific option. When this list is too large
            (i.e. the option expects, for example, a float), the return value will be true, but the
            list will contain just one element whose size will be set to 0.
            Otherwise, the list will be filled with all the possible values the option can
            accept.
            </summary>
            <param name="strKey">The name of the option to get the values for.</param>
            <param name="refValueList">A reference to a list that will be filled with the available values.</param>
            <returns>On success (the option exists), true is returned.On failure, false is returned.</returns>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.GetOptionKeys(System.Collections.ArrayList)">
            <summary>
            Method for getting all the implementation-specific options of the scene manager.
            </summary>
            <param name="refKeys">A reference to a list that will be filled with all the available options.</param>
            <returns>On success, true is returned. On failiure, false is returned.</returns>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.UpdateSceneGraph(Axiom.Core.Camera)">
            <summary>
            Internal method for updating the scene graph ie the tree of SceneNode instances managed by this class.
            </summary>
            <param name="cam">
            </param>
            <remarks>
            	This must be done before issuing objects to the rendering pipeline, since derived transformations from
            	parent nodes are not updated until required. This SceneManager is a basic implementation which simply
            	updates all nodes from the root. This ensures the scene is up to date but requires all the nodes
            	to be updated even if they are not visible. Subclasses could trim this such that only potentially visible
            	nodes are updated.
            </remarks>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.CreateRayQuery(Axiom.Math.Ray,System.UInt64)">
            <summary>
            Creates a RaySceneQuery for this scene manager.
            </summary>
            <param name="ray">Details of the ray which describes the region for this query.</param>
            <param name="mask">The query mask to apply to this query; can be used to filter out certain objects; see SceneQuery for details.</param>
            <returns>
            	The instance returned from this method must be destroyed by calling
            	SceneManager::destroyQuery when it is no longer required.
            </returns>
            <remarks>
            	This method creates a new instance of a query object for this scene manager,
            	looking for objects which fall along a ray. See SceneQuery and RaySceneQuery
            	for full details.
            </remarks>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.CreateIntersectionQuery(System.UInt64)">
            <summary>
            Creates an IntersectionSceneQuery for this scene manager.
            </summary>
            <param name="mask">The query mask to apply to this query; can be used to filter out
            	certain objects; see SceneQuery for details.
            	</param>
            <returns>
            	The instance returned from this method must be destroyed by calling
            	SceneManager::destroyQuery when it is no longer required.
            </returns>
            <remarks>
            	This method creates a new instance of a query object for locating
            	intersecting objects. See SceneQuery and IntersectionSceneQuery
            	for full details.
            </remarks>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.IntersectSegment(Axiom.Math.Vector3,Axiom.Math.Vector3,Axiom.Math.Vector3@)">
            <summary>
            </summary>
            <param name="start">begining of the segment </param>
            <param name="end">where it ends</param>
            <param name="result">where it intersects with terrain</param>
            <returns>
            </returns>
            <remarks>Intersect mainly with Landscape</remarks>
        </member>
        <member name="M:Axiom.SceneManagers.PagingLandscape.SceneManager.IntersectSegment(Axiom.Math.Vector3,Axiom.Math.Vector3,Axiom.Math.Vector3@,System.Boolean)">
            <summary>
            </summary>
            <param name="start">begining of the segment </param>
            <param name="end">where it ends</param>
            <param name="result">where it intersects with terrain</param>
            <param name="modif">If it does modify the terrain</param>
            <returns>
            </returns>
            <remarks>Intersect mainly with Landscape</remarks>
        </member>
    </members>
</doc>
