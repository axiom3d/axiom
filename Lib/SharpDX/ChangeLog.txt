SharpDX Change Log
==================

--------------------------
Release Notes (2012-04-??)
--------------------------
SharpDX 2.1.0 

- Add full support for Windows 8 Consumer Preview / Beta. SharpDX assemblies are passing certification successfully.
- Add DirectX/XAML interop for Windows 8 Metro App by supporting interfaces ISurfaceImageSourceNative, IVirtualSurfaceImageSourceNative, IVirtualSurfaceUpdatesCallbackNative and ISwapChainBackgroundPanelNative.
- Add full support for Direct2D1 Effects and Custom user Effects for DirectX11.1/Win8 Metro
- Add several Win8 Metro Samples (Direct3D11.1 and Direct2D1), thanks to Jose Fajardo for his great contributions.
- SharpDX binaries are now splitted into 4 distributions:
  - Normal, available for desktop application, based on DirectX SDK/Runtime June 2010
  - Signed, signed normal assemblies
  - DirectX11.1, available for desktop application, based on Windows 8 Consumer Preview
  - Win8Metro, available for metro application, based on Windows 8 Consumer Preview
- SharpDX.XAPO is now integrated into SharpDX.XAudio2 assembly.
- SharpDX.Diagnostics is now integrated into SharpDX assembly.
- Lots of improvements and bug fixes, check the following details

****************
*** Core API ***
****************

- Add ComObject As<T> and Dispose<T> static methods
- Add ComObject.QueryInterface static method for Win8
- Add Int3 struct
- Add NativeFile.ReadAllBytes and ReadAllText methods
- Add method MathUtil.Clamp
- Fix issue #139 Check IsDisposed in Disposable finalizer
- Fix issue #158. Initblk should use unaligned and an int for the size under x64 as well as x86.
- Fix issue #164. Minor breaking changes: SharpDX.Diagnostics is removed. Description message for COM/HRESULT errors is now natively integrated into SharpDX. SharpDX.DXGI.DXGIError is renamed to ResultCode in order to be consistent with other APIs
- Improves error diagnostics under Win8, in ResultDescriptor, full description is now used from Win32 FormatMessageW as well as SharpDX knownledge of Api code.
- Major refactoring of COM callback internals (aka in SharpDX as Shadow classes) in order to support multiple COM inheritance
- Use common function to map Exception to HResult code. Modify SharpDXException to set Exception.HResult property
- Use custom TagAttribute as ObfuscationAttribute is not available under overstripped 4.5 Core profile Win8 (!)
- Use optimized code for CppObjectShadow.Dispose/ToShadow methods

- Remove internal usage of try/catch SharpDXException in favor of Result.Failure check
- Remove System.GC usage for Win8

********************
*** Graphics API ***
********************

[All DXGI/Direct3D]
- Fix issue #136 Remove invalid call to Marshal.Release in all DebugName property setters

[D3DCompiler]
- Add CompilationResult for ShaderBytecode.Compile in order to be able to return warnings, as well as errors if Configuration.ThrowOnShaderCompilationError is setup to false
- Fix loading using LoadLibrary/GetProcessAddress under Win8
- Use Result instead of HasErrors for shader CompilationResult

[DXGI] 
- Add new methods for DXGI 1.2 Win8
- Add support for DirectX/XAML Win8 Interop with ISurfaceImageSourceNative, IVirtualSurfaceImageSourceNative, IVirtualSurfaceUpdatesCallbackNative and ISwapChainBackgroundPanelNative
- Fix PresentParameters to appear only in Win8 build
- Fix issue #162. Use SwapChainFlags enum for last parameter
- Fix issue #163. Check for null before disposing an adapter in DXGI.Factory(1).GetAdapterCount(1)
- Remove CheckError on EnumAdapters. Add convenience method for gettings adapters from factories
- Start to use new ResultDescriptor

[Direct2D1]
- Add Effect.SetInputEffect method
- Add TranformNode / Transform callbacks for Win8
- Add all builtin effects for Win8
- Add constructor for InputDescription. Change PropertyBindingAttribute to use string for min,max,default
- Add constructor for VertexRange
- Add missing factory.Create and deviceContext.Create object constructors for Direct2D Win8 Metro
- Add support for ComputeTransform, DrawTransform, SourceTransform
- Add support for Direct2D1.1 custom effects
- Add support for DrawingPointF, DrawingRectangleF, RectangleF for custom effect property bindings
- Add support for TransformGraph, ComputeInformation, DrawInformation, CommandList, CommandSink for Direct3D11.1 / Win8Metro
- Fix compilation errors introduce- by previous commit
- Fix #define for non-Win8 metro compilation
- Fix a bug in TransformShadow and add several convenience methods
- Fix build issue for SharpDX standard introduced by Win8 build
- Improved mapping for Win8 API, not finished
- Set some CustomEffect attributes parameter mandatory
- Start to add CustomEffect support under Win8
- XXXTransformShadow must inherit from other shadows

[Dircet3D10] 
- Add bufferSize = 0 for Sprite constructor
- Fix issue #153. Effects is now providing an agnostic math API

[Direct3D11 / Direct3D11.1]
- Add new methods for Direct3D11.1 Win8
- Add reference to native Direct3D11.1 effects dll for x86/x64 platform
- Add dlls for Effects11 under Direct3D11.1 for x86, x64 and ARM
- Fix issue #152. Add Texture2D.SHProjectCubeMap  function
- Fix issue #153. Effects is now providing an agnostic math API
- Fix issue #134. Add method EffectVariable.AsInterface()
- Fix issue #138. Add additional methods InvertTransform and ForwardTransform to FastFourrierTransform class
- Fix issue #165. Add support for uint sampleMask. Add default value to -1
- Make CompilationResultBase abstract
- Remove dependency to D3DCompiler under Win8 Metro
- Update doc for DeviceContext.UpdateSubresource
- Disable Effects framework in Win8 as d3dcompiler won't be allowed at runtime anyway

[Direct3D9]
- Add CompilationResult to ShaderBytecode
- Add support for Line
- Add SpriteFlags to Sprite.Begin
- Fix issue #143. Device.SetClipPlane is now using a Vector4 for the plane definition
- Fix issue #156. Reset is now accepting an array of PresentationParameters
- Fix issue #157. Add LoadVolumeFromMemory on Volume object

[Direct3D]
- Revert back old version of PixHelper as Color parameter seems to be used by NSight profiler (but not by PIX)

[WIC]
- Add constructor for ImagingFactory2 Win8

*****************
*** Input API ***
*****************

[DirectInput]
- Add Keyboard sample

******************
*** Sounds API ***
******************

[DirectSound]
- Fix issue #137. Fix typo for property DirectSound.IsCertified

[XAPO]
- Add SharpDX.XAPO to XAudio2. XAPO is no longer an individual assembly but is now part of SharpDX.XAudio2 assembly.
- Fix certification issue for XAPO on Win8 Metro

***************
*** Samples ***
***************

- Add simple sample with texture mapping on a rotating cube
- Add Direct2D MiniShape sample for Win8 Metro, unifinished.
- Add Direct2D sample for Win8. Integrate Direct2D in XAML interop samples.
- Add MiniCubeBrushXaml Win8 samples. Not finished yet.
- Add XAML-DirectX interop MiniCubeXaml sample for Win8 Metro. Refactor code to use DirectXBase as in C++ samples
- Remove all references to D3DCompiler in Win8
- Remove fxc.bat
- Remove old SharpDX.Diagnostics from all samples. Add missing D3D9 samples. Clean Win 8 samples
- Rename CustomPixelShader sample to D2DCustomPixelShaderEffect
- Change Win8 samples to use a common infrastructure
- Fix Dispose in MiniCube program
- Fix D2DCustomPixelShader
- Fix D2DCustomPixelShaderEffect RippleEffect sample for Win8 Metro \o/
- Fix Direct2D1 Custom Vertex Shader for Win8
- Fix Win8 samples with changes from DXGIError renamed to ResultCode
- Fix solution for Win8 samples
- Update Direct2D1 RippleEffect sample.
- Update samples for Win8 Metro. Add Direct3D11 CubeTexture sample

*****************
*** Internals ***
*****************

[Build] 
- Fix build for all versions: Normal, Signed, Win8Beta and DirectX11.1 Desktop
- Fix build for configurations D3D11_1Debug/D3D11_1Release Direct3D11.1 without Metro
- Fix build for nuget-publish to continue even if symbolsource.org returns errors
- Fix problem after merge from master. Add back hidusage.h file
- Make distinction between Win8Metro (Net4.5 Core + Win8 Metro app certification restrictions) and Direct3D11.1 by using respective #define during build
- Add DisableFastUpToDateCheck to allow SharpGen to be called at each build. Fix VS2011 build issue
- Update build to support Direct3D11.1 assemblies outside Win8 Metro

[SharpCLI]
- Remove usage of MsBuild custom task for assembly patching, as MsBuild lock SharpCLI task and cannot be updated for each build. Projects are now using directly the SharpCLI command line which is mush safer.

[SharpGen] 
- Fix xml preprocessor that was not working with nested ifdef/ifndef. Now preprocess run on deepest rules first
- Add support for parameter default values
- Handle C# params qualifier for array in code generator

--------------------------
Release Notes (2012-02-06)
--------------------------

SharpDX 2.0.4

 * Build
    - Add build infrastructure for nightly-builds
 * SharpDX
    - Bugfix #111, add proper handling of BlockAlign, SamplerPerBlock, AverageBytesPerSecond  for WaveFormatAdpcm
    - Bugfix #115, Add Disposing, Disposed events to DisposeBase. Change IsDisposed to public.
    - Bugfix RenderLoop.Run is not running after FormClosed event in order to enable clean Dispose on Form
    - Bugfix issue #131. Remove setters for Width/Height in Rectangle/RectangleF. Add X,Y properties. Improve RectangleF equals method.
    - Bugfix issue #132. Provides a IStream implementation and a proxy to System.IO.Stream
    - Fix Win8 build
    - Fix issue #128. RenderLoop is using default Application.DoEvents in order to support Application.AddMessageFilter (use by RawInput). Old custom windows event message handler is available by setting RenderLoop.UseCustomDoEvents. RenderLoop is still compatible with Mono.
    - Remove dependency to System.Drawing to improve Win8 certification
 * D3DCompiler
    - Bugfix issue #122. Integrate ShaderBytecode.Decompress methods from Fadi Alsamman
 * Direct3D11
    - Bugfix issue #122. Integrate ShaderBytecode.Decompress methods from Fadi Alsamman
    - Bugfix issue #130. Add standard error codes to  SharpDX.Direct3D11.ResultCode
    - Integrate patch from issue #133. New methods FromXXX to load resources without using generics.
    - Bugfix issue #129. Add FilterTexture method to Resource.
 * Direct3D9
    - Bugfix #116, Remove D3DXCheckVersion call from Direct3D(Ex) constructors in order to remove dependency to D3DX runtime
    - Bugfix issue #123. Add Font and Sprite support. Add Direct3D9 DisplayFontApp sample.
    - Bugfix issue #127. Set DataStream CanRead/CanWrite according to LockFlags.ReadOnly
 * DirectWrite
    - Bugfix #113 Handle empty indices/offsets/advances marshaling in GlyphRun
 * SharpGen
    - Fix issue #120, add better support for union with fixed arrays
    - Use DllImport for all interop functions because Win8 Certification doesn't allow usage of custom LoadLibrary/GetProcAddress

--------------------------
Release Notes (2011-11-22)
--------------------------
SharpDX beta3 (2.0.3)

 * Build 
    - Bugfix for Win8 Build under VS2011
    - Add signed assembly build
 * Core
    - Add new Utilities.ClearMemory method using initblk opcode 
    - Bugfix issue #101, with DataStream.Create<T> method for creating DataStream from array
 * Direct2D
    - Add Factory1 for Win8
    - Add Bitmap1, BitmapProperties1, CommandList, DeviceContext, Effect classes and constructors for Win8. 
 * Direct3D(9/10/11)
    - Bugfix for issue #94, by removing release of allocated string
 * Direct3D10/11
    - Bugfix on Resource.FromFile<T> and FromMemory<T> methods to avoid premature dispose
 * Direct3D9
    - Bugfix issue #99, Suppress check for Device.TestCooperativeLevel. Add ResultCode D3D HRESULT error codes 
    - Bugfix issue #105, DrawUserPrimitives/DrawIndexedUserPrimitives by using correct size of vertex 
 * Direct3D10
    - Bugfix issue #108, Correct typo for method Resource.CalculateSubResourceIndex 
 * Direct3D11    
    - Add faster specialized methods for InputAssemblerStage, RasterizerStage 
    - Bugfix issue #95, Add constant D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT to Device.MultisampleCountMaximum 
 * DirectSound 
    - Bugfix issue #109, Add None to LockFlags 
    - Bugfix issue #110, SoundBuffer.Write should use data.Length instead of 0 
 * XAudio2/DirectSound
    - Bugfix WaveFormatExtensible marshalling     
 * XAudio2
     - Add new constants for XAudio2 class (XAUDIO2_MAX_BUFFER_BYTES, XAUDIO2_MAX_QUEUED_BUFFERS... etc.)
    - Bugfix issue #100, Rename field VoiceDetails.InputChannelCount. Rename correctly VoiceFlags and add type VoiceFlags to VoiceDetails.CreationFlags 
 * X3DAudio
    - Bugfix issue #96, Remove FreeHGlobal from Emitter.
 * WIC
    - Bugfix Add better handling of MetadataQueryReader metadatas
    - Bugfix issue #104, with sample RenderToWicApp by disposing the encoder.
    
SharpDX beta2 (2.0.2)

* This version is including several bug fixes, performance enhancement, Win8 certification for Metro style App and generated XML for API documentation.
 * Win8 Certification Support 
    - SharpDX on Win8 is now compiled with .NET 4.5 Core profile and is passing successfully Windows Metro Style App certification. 
 * Build 
    - Improve build system to support cross .NET framework compilation from 2.0 to 4.5.
    - In order to compile SharpDX for Win8, you need to have Visual Studio 2011, but you can compile from Visual Studio 2010 under Win7 and Win8.
    - Fix build for path containing spaces.
    - Turn-on by default generated XML documentation from MSDN
 * Core
    - Breaking changes in the API for Color4. Using more natural (red,green,blue,alpha) constructor instead of (alpha,red,green,blue). All usages are fixed. Add new Colors class to list predefined colors in the same way System.Drawing.Color
    - Add SharpDX.IO.NativeFileStream to allow direct FileStream access from Win8
    - Bugfix for methods using out array of com objects
    - Rename SharpDX.Size to SharpDX.PointerSize
    - Add new ComArray<T> class to support faster marshalling of array of ComObject for several methods in the API (mainly Direct3D11)
 * Direct3D
    - Add explicit DebugName property on all Device, DeviceChild for DXGI, Direct3D9, Direct3D10, and Direct3D11.
    - Add new SharpDX.Direct3D.PIXHelper class and methods begin-end/marker providing usefull information under PIX debugger.
 * Direct3D9 
    - Add support for all main APIs (Only XFile/Mesh loading is not supported)
 * Direct3D10/11
    - Add Equals method to InputElement
    - Remove result check from Device.CheckFormatSupport. Add None value to FormatSupport. 
 * Direct3D11
    - Add optimized methods for DeviceContext.CommonShaderStage.SetSampler(s)/SetShaderResource(s)/SetConstantBuffer(s)
    - Add MultiCube sample for multithreading and deferred context benchmark. See http://code4k.blogspot.com/2011/11/direct3d11-multithreading-micro.html
    - Use a common pattern for Texture1D, Texture2D, Texture3D constructors 
    - Add DeviceContext.IsAvailableData for Begin/End Query statistics. Add new GetData method.
    - Add method DeviceContext.OutputMerger.ResetTargets to unset all binded Targets
 * Direct2D1
    - Move Matrix3x2 from Direct2D to SharpDX core assembly
 * DirectInput
    - ForceFeedback is now enabled.
    - Sliders are now using correct flags
    - Keyboard state is now properly returned.
 * DXGI
    - Change DXGIError to class using SharpDX.Result fields 
 * RawInput 
    - Fix wrong layout of RawMouse structure
    - Add RawInput access from non-winform application like WPF
    - Fix invalid values for WheelData/Buttons in MouseInfoInputEventArgs
 * XAudio2
    - Fix error for XAudio2 dll loading under Win8 
 * XInput
    - Add XGamePadApp sample
    - Fix UserIndex enumeration and Controller.IsConnected method.

--------------------------
Release Notes (2011-09-24)
--------------------------
SharpDX goes 2.0 beta

* Adding missing DirectX APIs including Direct3D9 (not finished yet for Beta but WPF Interop is working), DirectInput, RawInput, XInput, X3DAudio, XACT3, WIC (integrated with Direct2D1).
* API Support for upcomming Win8/DirectX11.1 (D3DCompiler 44, DXGI 1.2, Direct3D11.1, Direct2D1.1) and including support for DirectX Metro application in C#/.Net!
* New Samples (Direct3D10 WPF Interop, Direct3D11 MiniCube, WIC RenderToTarget, WIC EncodeDecode, XAudio2 play XWMA,ADPCM,WAV)
* New 2 Samples for Win8/Metro Preview (MiniCube and port of Win8 C++ DirectX Tutorial)
* NuGet Package available for all SharpDX 2.0 assemblies with symbols (enabling "source step into" debugging)
* Lots of bugfixes, apis simplification and helpers.
* Interop performance slightly improved for method calls.
* Full rewrite of SharpGen, the core technology of SharpDX, a genuine C# code generator directly from C++ Headers using now gccxml. SharpGen is now able to parse all Windows headers!

--------------------------
Release Notes (2011-02-17)
--------------------------
Release SharpDX 1.3
* Bugfix #17 [D3D10] Texture2D.Map and Texture3D.Map were mapping incorrectly texture into memory
* Bugfix #18 [D3D10] Device and Device1 constructors were overriding any DriverType argument with DriverType.Hardware 
* Bugfix #19 [D3D11] Some methods in ComputeShader.SetUnorderedAccessView were not handling correctly last parameter uavInitialCounts (must be filled of -1)
* Bugfix in Mono [Core] Mono sizeof<T> IL instruction was not working preventing all DataStream class and other marshal scenarios to work. The bugfix is now available in Mono 2.10 version!
* Enhancement [Core] MessagePump was renamed to RenderLoop class and rewritten in order to run under Mono.

--------------------------
Release Notes (2011-02-05)
--------------------------
Release SharpDX 1.2.2
* Bugfix [Core] MessagePump.Run was unstable while adding Mono support. Revert to previous code.
* Bugfix #16 [D3D10/D3D11] SetShaderResource/SetConstantBuffer/SetSampler didn't handle null correctly
* Bugfix #15 [DirectWrite] Constructor StrokeStyle(Factory factory, StrokeStyleProperties properties) was not working (need to pass null for dashes instead of float[0]) 
* Bugfix #12 [Core] TypeConverters are now working with Vector3,Vector4 

--------------------------
Release Notes (2011-01-27)
--------------------------
Release SharpDX 1.2.1
* Bugfix #14 [Core] Interop.Read/Write was broken on 32bit system

--------------------------
Release Notes (2011-01-26)
--------------------------
Release SharpDX 1.2 - Happy new year!
* New [Core] SharpDX is now compatible with Mono! (Although, there is a bug in Mono that prevents to use directly Application.Idle and Winform for Direct3D rendering but could be addressed with another solution)
* Fix [Generator] Less verbose warning when documentation plugin is not available
* New [Generator] New native interop system without using any dynamic assembly. SharpDX interop is faster than previous version, easier to integrate with MonoLinker and Obfuscator.
* New [DirectWrite] New backport from Windows 7.0 SDK of the DirectWrite Custom Layout sample
* New [DirectWrite] ShapingGlyphProperties.Justification is now using enum ScriptJustify
* Issue#10 [Direct3D11 / Direct3D10 ]  Bugfix on missing ImageInformation.FromFile() / FromMemory method.
* Issue#9 [DirectWrite] Various bugfix : TextAnalysisSource methods, GlyphRun marshalling, bitfields support.
* New [DirectWrite] Simplify interfaces TextAnalysisSource/TextAnalyzer. 
* Fix [DirectWrite] Bugfix on DrawGlyphRun, ClientDrawingEffect, easier support for ClientDrawingContext. 
* New [DirectWrite] Added new DirectWrite Color Drawing Effect sample based on Fadi Alsamman initial port. 
* Fix [DirectSound] Bugfix on DirectSound.GetDevices() / DirectSoundCapture.GetDevice() to retrurn all elements
* New [DirectWrite] Added missing method FontFace.GetGlyphRunOutline
* New [DirectWrite] Added FontFace missing property on GlyphRun

--------------------------
Release Notes (2010-12-19)
--------------------------
Release SharpDX 1.1
* [Core] Upgrade SharpDX to support .Net Frameworks 2.0 / 3.5 / 4.0
* [Core] Add DataBuffer for read/write random access to unmanaged memory
* [Core] Add DataStream specialized typed Read and Write methods for faster access
* [Core] Bugfix on method DataStream.Read(byte[] buffer, int offset, int count)
* [Core] Add Component class for next Framework infrastructure. Cleanup AssemblyInfo.cs for all SharpDX assemblies. 
* [D3DCompiler] Bugfix on D3D_COMPILE_ENABLE_.* flags that were missing
* [Direct3D10/11] Bugfix mapping correction for Direct3D11/Direct3D10.1 RenderBlendDescription.RenderTargetWriteMask is now using ColorWriteMaskFlags 
* [Direct3D10/11] Bugfix D3D10/11_FILTER enums with correct naming (MIN abbreviation for Minification was wrongly automatically translated to Minimum)
* [Direct3D11] Make Direct3D11.Device.ImmediateContext released when Device is released. 
* [DXGI] Bugfix on DXGI.Output.GetDisplayModeList, failed if no display mode exist for a given mode 
* [DXGI] Bugfix  enum DXGI.Usage to use [Flags]. 

* [Generator] Use a lightweight T4 engine implementation to remove T4 engine dependency
* [Generator] Refactoring of various class in order to prepare next Generator version

--------------------------
Release Notes (2010-11-30)
--------------------------
Release SharpDX 1.0
* Initial version. 
* Supports for Direct3D10, Direct3D10.1, Direct3D11, Direct2D1, DirectWrite, D3DCompiler, DXGI 1.0, DXGI 1.1, DirectSound, XAudio2, XAPO. 