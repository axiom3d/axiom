<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTK</name>
    </assembly>
    <members>
        <member name="T:OpenTK.Platform.X11.X11GLContext">
            <summary>
            Provides methods to create and control an opengl context on the X11 platform.
            This class supports OpenTK, and is not intended for use by OpenTK programs.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.IGraphicsContext">
            <summary>
            Provides methods for creating and interacting with an OpenGL context.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContext.SwapBuffers">
            <summary>Swaps buffers, presenting the rendered scene to the user.</summary>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContext.MakeCurrent(OpenTK.Platform.IWindowInfo)">
            <summary>Makes the GraphicsContext current in the calling thread.</summary>
            <param name="window">An OpenTK.Platform.IWindowInfo structure that points to a valid window.</param>
            <remarks>
            <para>OpenGL commands in one thread, affect the GraphicsContext which is current in that thread.</para>
            <para>It is an error to issue an OpenGL command in a thread without a current GraphicsContext.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContext.Update(OpenTK.Platform.IWindowInfo)">
            <summary>
            Updates the graphics context.  This must be called when the region the graphics context
            is drawn to is resized.
            </summary>
            <param name="window"></param>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContext.IsCurrent">
            <summary>
            Gets or sets a System.Boolean indicating whether the GraphicsContext is current in the calling thread.
            </summary>
        </member>
        <member name="E:OpenTK.Graphics.IGraphicsContext.Destroy">
            <summary>
            Raised when a Context is destroyed.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContext.VSync">
            <summary>
            Gets or sets a value indicating whether VSyncing is enabled.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContext.GraphicsMode">
            <summary>Gets the GraphicsMode of this instance.</summary>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContext.ErrorChecking">
            <summary>
            Gets or sets a System.Boolean, indicating whether automatic error checking should be performed.
            Influences the debug version of OpenTK.dll, only.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.IGraphicsContextInternal">
            <summary>
            Provides methods to create new GraphicsContexts. Should only be used for extending OpenTK.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContextInternal.LoadAll">
            <summary>Prepares the entry points for OpenGL.</summary>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContextInternal.RegisterForDisposal(System.IDisposable)">
            <summary>
            Registers an OpenGL resource for disposal.
            </summary>
            <param name="resource">The OpenGL resource to dispose.</param>
            <remarks>
            You may not destroy OpenGL resources in finalizers, since they run in
            a different thread. To avoid this problem, use this method to register
            a resource for disposal during the finalizer call, and call DisposeResources()
            from the main thread to dispose it.
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContextInternal.DisposeResources">
            <summary>
            Disposes all registered OpenGL resources.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContextInternal.GetAddress(System.String)">
            <summary>
            Gets the address of an OpenGL extension function.
            </summary>
            <param name="function">The name of the OpenGL function (e.g. "glGetString")</param>
            <returns>
            A pointer to the specified function or IntPtr.Zero if the function isn't
            available in the current opengl context.
            </returns>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContextInternal.Context">
            <summary>
            Gets a handle to the OpenGL rendering context.
            </summary>
        </member>
        <member name="T:OpenTK.PlatformException">
            <summary>Defines a plaftorm specific exception.</summary>
        </member>
        <member name="M:OpenTK.PlatformException.#ctor(System.String)">
            <summary>Constructs a new PlatformException.</summary>
        </member>
        <member name="T:OpenTK.Platform.IWindowInfo">
            <summary>Descibes an OS window.</summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsMode">
            <summary>Defines the format for graphics operations.</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor">
            <summary>Constructs a new GraphicsMode with sensible default parameters.</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32,System.Int32)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
            <param name="samples">The number of samples for FSAA.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.ColorFormat)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
            <param name="samples">The number of samples for FSAA.</param>
            <param name="accum">The ColorFormat of the accumilliary buffer.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.ColorFormat,System.Int32)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
            <param name="samples">The number of samples for FSAA.</param>
            <param name="accum">The ColorFormat of the accumilliary buffer.</param>
            <param name="buffers">The number of render buffers. Typical values include one (single-), two (double-) or three (triple-buffering).</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.ColorFormat,System.Int32,System.Boolean)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
            <param name="samples">The number of samples for FSAA.</param>
            <param name="accum">The ColorFormat of the accumilliary buffer.</param>
            <param name="stereo">Set to true for a GraphicsMode with stereographic capabilities.</param>
            <param name="buffers">The number of render buffers. Typical values include one (single-), two (double-) or three (triple-buffering).</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.ToString">
            <summary>Returns a System.String describing the current GraphicsFormat.</summary>
            <returns>! System.String describing the current GraphicsFormat.</returns>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.ColorFormat">
            <summary>
            Gets an OpenTK.Graphics.ColorFormat that describes the color format for this GraphicsFormat.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.AccumulatorFormat">
            <summary>
            Gets an OpenTK.Graphics.ColorFormat that describes the accumulator format for this GraphicsFormat.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Depth">
            <summary>
            Gets a System.Int32 that contains the bits per pixel for the depth buffer
            for this GraphicsFormat.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Stencil">
            <summary>
            Gets a System.Int32 that contains the bits per pixel for the stencil buffer
            of this GraphicsFormat.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Samples">
            <summary>
            Gets a System.Int32 that contains the number of FSAA samples per pixel for this GraphicsFormat.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Stereo">
            <summary>
            Gets a System.Boolean indicating whether this DisplayMode is stereoscopic.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Buffers">
            <summary>
            Gets a System.Int32 containing the number of buffers associated with this
            DisplayMode.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Default">
            <summary>Returns an OpenTK.GraphicsFormat compatible with the underlying platform.</summary>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.BindEffect(System.UInt32,OpenTK.Audio.EfxEffectType)">
            <summary>(Helper) Selects the Effect type used by this Effect handle.</summary>
            <param name="eid">Effect id returned from a successful call to GenEffects.</param>
            <param name="type">Effect type.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.BindEffect(System.Int32,OpenTK.Audio.EfxEffectType)">
            <summary>(Helper) Selects the Effect type used by this Effect handle.</summary>
            <param name="eid">Effect id returned from a successful call to GenEffects.</param>
            <param name="type">Effect type.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.BindFilterToSource(System.UInt32,System.UInt32)">
            <summary>(Helper) reroutes the output of a Source through a Filter.</summary>
            <param name="source">A valid Source handle.</param>
            <param name="filter">A valid Filter handle.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.BindFilterToSource(System.Int32,System.Int32)">
            <summary>(Helper) reroutes the output of a Source through a Filter.</summary>
            <param name="source">A valid Source handle.</param>
            <param name="filter">A valid Filter handle.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.BindEffectToAuxiliarySlot(System.UInt32,System.UInt32)">
            <summary>(Helper) Attaches an Effect to an Auxiliary Effect Slot.</summary>
            <param name="auxiliaryeffectslot">The slot handle to attach the Effect to.</param>
            <param name="effect">The Effect handle that is being attached.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.BindEffectToAuxiliarySlot(System.Int32,System.Int32)">
            <summary>(Helper) Attaches an Effect to an Auxiliary Effect Slot.</summary>
            <param name="auxiliaryeffectslot">The slot handle to attach the Effect to.</param>
            <param name="effect">The Effect handle that is being attached.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.BindSourceToAuxiliarySlot(System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>(Helper) Reroutes a Source's output into an Auxiliary Effect Slot.</summary>
            <param name="source">The Source handle who's output is forwarded.</param>
            <param name="slot">The Auxiliary Effect Slot handle that receives input from the Source.</param>
            <param name="slotnumber">Every Source has only a limited number of slots it can feed buffer to. The number must stay below AlcContextAttributes.EfxMaxAuxiliarySends</param>
            <param name="filter">Filter handle to be attached between Source ouput and Auxiliary Slot input. Use 0 or EfxFilterType.FilterNull for no filter. </param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.BindSourceToAuxiliarySlot(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>(Helper) Reroutes a Source's output into an Auxiliary Effect Slot.</summary>
            <param name="source">The Source handle who's output is forwarded.</param>
            <param name="slot">The Auxiliary Effect Slot handle that receives input from the Source.</param>
            <param name="slotnumber">Every Source has only a limited number of slots it can feed buffer to. The number must stay below AlcContextAttributes.EfxMaxAuxiliarySends</param>
            <param name="filter">Filter handle to be attached between Source ouput and Auxiliary Slot input. Use 0 or EfxFilterType.FilterNull for no filter. </param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenEffects(System.Int32,System.UInt32@)">
            <summary>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object</summary>
            <remarks>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</remarks>
            <param name="n">Number of Effects to be created.</param>
            <param name="effects">Pointer addressing sufficient memory to store n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenEffects(System.Int32,System.Int32@)">
            <summary>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object</summary>
            <remarks>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</remarks>
            <param name="n">Number of Effects to be created.</param>
            <param name="effects">Pointer addressing sufficient memory to store n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenEffects(System.Int32)">
            <summary>Generates one or more effect objects.</summary>
            <param name="n">Number of Effect object identifiers to generate.</param>
            <remarks>
            <para>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object.</para>
            <para>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenEffect">
            <summary>Generates a single effect object.</summary>
            <returns>A handle to the generated effect object.</returns>
            <remarks>
            <para>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object.</para>
            <para>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenEffect(System.UInt32@)">
            <summary>Generates a single effect object.</summary>
            <param name="effect">A handle to the generated effect object.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteEffects(System.Int32,System.UInt32@)">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="n">Number of Effects to be deleted.</param>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteEffects(System.Int32,System.Int32@)">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="n">Number of Effects to be deleted.</param>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteEffects(System.Int32[])">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteEffects(System.UInt32[])">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteEffect(System.Int32)">
            <summary>This function deletes one Effect only.</summary>
            <param name="effect">Pointer to an effect name/handle identifying the Effect Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteEffect(System.UInt32@)">
            <summary>This function deletes one Effect only.</summary>
            <param name="effect">Pointer to an effect name/handle identifying the Effect Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.IsEffect(System.UInt32)">
            <summary>The IsEffect function is used to determine if an object identifier is a valid Effect object.</summary>
            <param name="eid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Effect, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.IsEffect(System.Int32)">
            <summary>The IsEffect function is used to determine if an object identifier is a valid Effect object.</summary>
            <param name="eid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Effect, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.Effect(System.UInt32,OpenTK.Audio.EfxEffecti,System.Int32)">
            <summary>This function is used to set integer properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.Effect(System.Int32,OpenTK.Audio.EfxEffecti,System.Int32)">
            <summary>This function is used to set integer properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.Effect(System.UInt32,OpenTK.Audio.EfxEffectf,System.Single)">
            <summary>This function is used to set floating point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating point value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.Effect(System.Int32,OpenTK.Audio.EfxEffectf,System.Single)">
            <summary>This function is used to set floating point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating point value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.Effect(System.UInt32,OpenTK.Audio.EfxEffect3f,OpenTK.Math.Vector3@)">
            <summary>This function is used to set 3 floating point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="values">Pointer to Math.Vector3.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.Effect(System.Int32,OpenTK.Audio.EfxEffect3f,OpenTK.Math.Vector3@)">
            <summary>This function is used to set 3 floating point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="values">Pointer to Math.Vector3.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetEffect(System.UInt32,OpenTK.Audio.EfxEffecti,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetEffect(System.Int32,OpenTK.Audio.EfxEffecti,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetEffect(System.UInt32,OpenTK.Audio.EfxEffectf,System.Single@)">
            <summary>This function is used to retrieve floating point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating point value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetEffect(System.Int32,OpenTK.Audio.EfxEffectf,System.Single@)">
            <summary>This function is used to retrieve floating point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating point value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetEffect(System.UInt32,OpenTK.Audio.EfxEffect3f,OpenTK.Math.Vector3@)">
            <summary>This function is used to retrieve 3 floating point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to retrieve.</param>
            <param name="values">A Math.Vector3 to hold the values.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetEffect(System.Int32,OpenTK.Audio.EfxEffect3f,OpenTK.Math.Vector3@)">
            <summary>This function is used to retrieve 3 floating point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to retrieve.</param>
            <param name="values">A Math.Vector3 to hold the values.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenFilters(System.Int32,System.UInt32@)">
            <summary>The GenFilters function is used to create one or more Filter objects. A Filter object stores a filter type and a set of parameter values to control that Filter. Filter objects can be attached to Sources as Direct Filters or Auxiliary Send Filters.</summary>
            <remarks>After creation a Filter has no type (EfxFilterType.Null), so before it can be used to store a set of parameters, the application must specify what type of filter should be stored in the object, using Filter() with EfxFilteri.</remarks>
            <param name="n">Number of Filters to be created.</param>
            <param name="filters">Pointer addressing sufficient memory to store n Filter object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenFilters(System.Int32,System.Int32@)">
            <summary>The GenFilters function is used to create one or more Filter objects. A Filter object stores a filter type and a set of parameter values to control that Filter. Filter objects can be attached to Sources as Direct Filters or Auxiliary Send Filters.</summary>
            <remarks>After creation a Filter has no type (EfxFilterType.Null), so before it can be used to store a set of parameters, the application must specify what type of filter should be stored in the object, using Filter() with EfxFilteri.</remarks>
            <param name="n">Number of Filters to be created.</param>
            <param name="filters">Pointer addressing sufficient memory to store n Filter object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenFilters(System.Int32)">
            <summary>The GenFilters function is used to create one or more Filter objects. A Filter object stores a filter type and a set of parameter values to control that Filter. Filter objects can be attached to Sources as Direct Filters or Auxiliary Send Filters.</summary>
            <remarks>After creation a Filter has no type (EfxFilterType.Null), so before it can be used to store a set of parameters, the application must specify what type of filter should be stored in the object, using Filter() with EfxFilteri.</remarks>
            <param name="n">Number of Filters to be created.</param>
            <returns>Pointer addressing sufficient memory to store n Filter object identifiers.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenFilter">
            <summary>This function generates only one Filter.</summary>
            <returns>Storage Int32 for the new filter name/handle.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenFilter(System.UInt32@)">
            <summary>This function generates only one Filter.</summary>
            <param name="filter">Storage UInt32 for the new filter name/handle.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteFilters(System.Int32,System.UInt32@)">
            <summary>The DeleteFilters function is used to delete and free resources for Filter objects previously created with GenFilters.</summary>
            <param name="n">Number of Filters to be deleted.</param>
            <param name="filters">Pointer to n Filter object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteFilters(System.Int32,System.Int32@)">
            <summary>The DeleteFilters function is used to delete and free resources for Filter objects previously created with GenFilters.</summary>
            <param name="n">Number of Filters to be deleted.</param>
            <param name="filters">Pointer to n Filter object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteFilters(System.UInt32[])">
            <summary>This function deletes one Filter only.</summary>
            <param name="filters">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteFilters(System.Int32[])">
            <summary>This function deletes one Filter only.</summary>
            <param name="filters">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteFilter(System.Int32)">
            <summary>This function deletes one Filter only.</summary>
            <param name="filter">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteFilter(System.UInt32@)">
            <summary>This function deletes one Filter only.</summary>
            <param name="filter">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.IsFilter(System.UInt32)">
            <summary>The IsFilter function is used to determine if an object identifier is a valid Filter object.</summary>
            <param name="fid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Filter, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.IsFilter(System.Int32)">
            <summary>The IsFilter function is used to determine if an object identifier is a valid Filter object.</summary>
            <param name="fid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Filter, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.Filter(System.UInt32,OpenTK.Audio.EfxFilteri,System.Int32)">
            <summary>This function is used to set integer properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.Filter(System.Int32,OpenTK.Audio.EfxFilteri,System.Int32)">
            <summary>This function is used to set integer properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.Filter(System.UInt32,OpenTK.Audio.EfxFilterf,System.Single)">
            <summary>This function is used to set floating point properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating point value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.Filter(System.Int32,OpenTK.Audio.EfxFilterf,System.Single)">
            <summary>This function is used to set floating point properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating point value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetFilter(System.UInt32,OpenTK.Audio.EfxFilteri,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetFilter(System.Int32,OpenTK.Audio.EfxFilteri,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetFilter(System.UInt32,OpenTK.Audio.EfxFilterf,System.Single@)">
            <summary>This function is used to retrieve floating point properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating point value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetFilter(System.Int32,OpenTK.Audio.EfxFilterf,System.Single@)">
            <summary>This function is used to retrieve floating point properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating point value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenAuxiliaryEffectSlots(System.Int32,System.UInt32@)">
            <summary>The GenAuxiliaryEffectSlots function is used to create one or more Auxiliary Effect Slots. The number of slots that can be created will be dependant upon the Open AL device used.</summary>
            <remarks>An application should check the OpenAL error state after making this call to determine if the Effect Slot was successfully created. If the function call fails then none of the requested Effect Slots are created. A good strategy for creating any OpenAL object is to use a for-loop and generate one object each loop iteration and then check for an error condition. If an error is set then the loop can be broken and the application can determine if sufficient resources are available.</remarks>
            <param name="n">Number of Auxiliary Effect Slots to be created.</param>
            <param name="slots">Pointer addressing sufficient memory to store n Effect Slot object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)">
            <summary>The GenAuxiliaryEffectSlots function is used to create one or more Auxiliary Effect Slots. The number of slots that can be created will be dependant upon the Open AL device used.</summary>
            <remarks>An application should check the OpenAL error state after making this call to determine if the Effect Slot was successfully created. If the function call fails then none of the requested Effect Slots are created. A good strategy for creating any OpenAL object is to use a for-loop and generate one object each loop iteration and then check for an error condition. If an error is set then the loop can be broken and the application can determine if sufficient resources are available.</remarks>
            <param name="n">Number of Auxiliary Effect Slots to be created.</param>
            <param name="slots">Pointer addressing sufficient memory to store n Effect Slot object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenAuxiliaryEffectSlots(System.Int32)">
            <summary>The GenAuxiliaryEffectSlots function is used to create one or more Auxiliary Effect Slots. The number of slots that can be created will be dependant upon the Open AL device used.</summary>
            <remarks>An application should check the OpenAL error state after making this call to determine if the Effect Slot was successfully created. If the function call fails then none of the requested Effect Slots are created. A good strategy for creating any OpenAL object is to use a for-loop and generate one object each loop iteration and then check for an error condition. If an error is set then the loop can be broken and the application can determine if sufficient resources are available.</remarks>
            <param name="n">Number of Auxiliary Effect Slots to be created.</param>
            <returns>Pointer addressing sufficient memory to store n Effect Slot object identifiers.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenAuxiliaryEffectSlot">
            <summary>This function generates only one Auxiliary Effect Slot.</summary>
            <returns>Storage Int32 for the new auxiliary effect slot name/handle.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GenAuxiliaryEffectSlot(System.UInt32@)">
            <summary>This function generates only one Auxiliary Effect Slot.</summary>
            <returns>Storage UInt32 for the new auxiliary effect slot name/handle.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteAuxiliaryEffectSlots(System.Int32,System.UInt32@)">
            <summary>The DeleteAuxiliaryEffectSlots function is used to delete and free resources for Auxiliary Effect Slots previously created with GenAuxiliaryEffectSlots.</summary>
            <param name="n">Number of Auxiliary Effect Slots to be deleted.</param>
            <param name="slots">Pointer to n Effect Slot object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)">
            <summary>The DeleteAuxiliaryEffectSlots function is used to delete and free resources for Auxiliary Effect Slots previously created with GenAuxiliaryEffectSlots.</summary>
            <param name="n">Number of Auxiliary Effect Slots to be deleted.</param>
            <param name="slots">Pointer to n Effect Slot object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteAuxiliaryEffectSlots(System.Int32[])">
            <summary>The DeleteAuxiliaryEffectSlots function is used to delete and free resources for Auxiliary Effect Slots previously created with GenAuxiliaryEffectSlots.</summary>
            <param name="slots">Pointer to n Effect Slot object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteAuxiliaryEffectSlots(System.UInt32[])">
            <summary>This function deletes one AuxiliaryEffectSlot only.</summary>
            <param name="slots">Pointer to an auxiliary effect slot name/handle identifying the Auxiliary Effect Slot Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteAuxiliaryEffectSlot(System.Int32)">
            <summary>This function deletes one AuxiliaryEffectSlot only.</summary>
            <param name="slot">Pointer to an auxiliary effect slot name/handle identifying the Auxiliary Effect Slot Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.DeleteAuxiliaryEffectSlot(System.UInt32@)">
            <summary>This function deletes one AuxiliaryEffectSlot only.</summary>
            <param name="slot">Pointer to an auxiliary effect slot name/handle identifying the Auxiliary Effect Slot Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.IsAuxiliaryEffectSlot(System.UInt32)">
            <summary>The IsAuxiliaryEffectSlot function is used to determine if an object identifier is a valid Auxiliary Effect Slot object.</summary>
            <param name="slot">Effect Slot object identifier to validate.</param>
            <returns>True if the identifier is a valid Auxiliary Effect Slot, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.IsAuxiliaryEffectSlot(System.Int32)">
            <summary>The IsAuxiliaryEffectSlot function is used to determine if an object identifier is a valid Auxiliary Effect Slot object.</summary>
            <param name="slot">Effect Slot object identifier to validate.</param>
            <returns>True if the identifier is a valid Auxiliary Effect Slot, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.AuxiliaryEffectSlot(System.UInt32,OpenTK.Audio.EfxAuxiliaryi,System.Int32)">
            <summary>This function is used to set integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.EfxAuxiliaryi,System.Int32)">
            <summary>This function is used to set integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.AuxiliaryEffectSlot(System.UInt32,OpenTK.Audio.EfxAuxiliaryf,System.Single)">
            <summary>This function is used to set floating point properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Floating point value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.EfxAuxiliaryf,System.Single)">
            <summary>This function is used to set floating point properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Floating point value.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetAuxiliaryEffectSlot(System.UInt32,OpenTK.Audio.EfxAuxiliaryi,System.Int32@)">
            <summary>This function is used to retrieve integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.EfxAuxiliaryi,System.Int32@)">
            <summary>This function is used to retrieve integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetAuxiliaryEffectSlot(System.UInt32,OpenTK.Audio.EfxAuxiliaryf,System.Single@)">
            <summary>This function is used to retrieve floating properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where floating point value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.EffectsExtension.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.EfxAuxiliaryf,System.Single@)">
            <summary>This function is used to retrieve floating properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where floating point value will be stored.</param>
        </member>
        <member name="P:OpenTK.Audio.EffectsExtension.IsInitialized">
            <summary>Returns True if the EFX Extension has been found and could be initialized.</summary>
        </member>
        <member name="T:OpenTK.Audio.EffectsExtension.ReverbPresets">
            <summary>EAX Reverb Presets in legacy format - use ConvertReverbParameters() to convert to EFX EAX Reverb Presets for use with the OpenAL Effects Extension.</summary>
        </member>
        <member name="T:OpenTK.Input.IJoystickDriver">
            <summary>
            Defines the interface for JoystickDevice drivers.
            </summary>
        </member>
        <member name="P:OpenTK.Input.IJoystickDriver.Joysticks">
            <summary>
            Gets the list of available JoystickDevices.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.WinGLNative">
            <summary>
            Drives GameWindow on Windows.
            This class supports OpenTK, and is not intended for use by OpenTK programs.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WinGLNative.myGoodMsg">
            <summary>
            For use in PeekMessage.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinGLNative.#ctor">
            <internal />
            <summary>
            Constructs a new WinGLNative class. Call CreateWindow to create the
            actual render window.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinGLNative.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes incoming WM_* messages.
            </summary>
            <param name="m">Reference to the incoming Windows Message.</param>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinGLNative.DestroyWindow">
            <summary>
            Starts the teardown sequence for the current window.
            </summary>
        </member>
        <member name="P:OpenTK.Platform.Windows.WinGLNative.Exists">
            <summary>
            Returns true if a render window/context exists.
            </summary>
        </member>
        <member name="P:OpenTK.Platform.Windows.WinGLNative.Visible">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:OpenTK.Platform.Windows.WinGLNative.Width">
            <summary>Gets a System.Int32 containing the Width of this GameWindow.</summary>
        </member>
        <member name="P:OpenTK.Platform.Windows.WinGLNative.Height">
            <summary>Gets a System.Int32 containing the Heights of this GameWindow.</summary>
        </member>
        <member name="T:OpenTK.Math.Quaternion">
            <summary>
            Represents a Quaternion.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Quaternion.#ctor(OpenTK.Math.Vector3,System.Single)">
            <summary>
            Construct a new Quaternion from vector and w components
            </summary>
            <param name="v">The vector part</param>
            <param name="w">The w part</param>
        </member>
        <member name="M:OpenTK.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a new Quaternion
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="M:OpenTK.Math.Quaternion.ToAxisAngle(OpenTK.Math.Vector3@,System.Single@)">
            <summary>
            Convert the current quaternion to axis angle representation
            </summary>
            <param name="axis">The resultant axis</param>
            <param name="angle">The resultant angle</param>
        </member>
        <member name="M:OpenTK.Math.Quaternion.ToAxisAngle">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Normalize">
            <summary>
            Scales the Quaternion to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Conjugate">
            <summary>
            Convert this quaternion to its conjugate
            </summary>
        </member>
        <member name="F:OpenTK.Math.Quaternion.Identity">
            <summary>
            Defines the identity quaternion.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Add(OpenTK.Math.Quaternion,OpenTK.Math.Quaternion)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <returns>The result of the addition</returns>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Add(OpenTK.Math.Quaternion@,OpenTK.Math.Quaternion@,OpenTK.Math.Quaternion@)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <param name="result">The result of the addition</param>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Conjugate(OpenTK.Math.Quaternion)">
            <summary>
            Get the conjugate of the given quaternion
            </summary>
            <param name="q">The quaternion</param>
            <returns>The conjugate of the given quaternion</returns>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Conjugate(OpenTK.Math.Quaternion@,OpenTK.Math.Quaternion@)">
            <summary>
            Get the conjugate of the given quaternion
            </summary>
            <param name="q">The quaternion</param>
            <param name="result">The conjugate of the given quaternion</param>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Invert(OpenTK.Math.Quaternion)">
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <param name="q">The quaternion to invert</param>
            <returns>The inverse of the given quaternion</returns>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Invert(OpenTK.Math.Quaternion@,OpenTK.Math.Quaternion@)">
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <param name="q">The quaternion to invert</param>
            <param name="result">The inverse of the given quaternion</param>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Normalize(OpenTK.Math.Quaternion)">
            <summary>
            Scale the given quaternion to unit length
            </summary>
            <param name="q">The quaternion to normalize</param>
            <returns>The normalized quaternion</returns>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Normalize(OpenTK.Math.Quaternion@,OpenTK.Math.Quaternion@)">
            <summary>
            Scale the given quaternion to unit length
            </summary>
            <param name="q">The quaternion to normalize</param>
            <param name="result">The normalized quaternion</param>
        </member>
        <member name="M:OpenTK.Math.Quaternion.FromAxisAngle(OpenTK.Math.Vector3,System.Single)">
            <summary>
            Build a quaternion from the given axis and angle
            </summary>
            <param name="axis">The axis to rotate about</param>
            <param name="angle">The rotation angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Slerp(OpenTK.Math.Quaternion,OpenTK.Math.Quaternion,System.Single)">
            <summary>
            Do Spherical linear interpolation between two quaternions 
            </summary>
            <param name="q1">The first quaternion</param>
            <param name="q2">The second quaternion</param>
            <param name="blend">The blend factor</param>
            <returns>A smooth blend between the given quaternions</returns>
        </member>
        <member name="M:OpenTK.Math.Quaternion.ToString">
            <summary>
            Returns a System.String that represents the current Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Equals(System.Object)">
            <summary>
            Compares this object instance to another object for equality. 
            </summary>
            <param name="other">The other object to be used in the comparison.</param>
            <returns>True if both objects are Quaternions of equal value. Otherwise it returns false.</returns>
        </member>
        <member name="M:OpenTK.Math.Quaternion.GetHashCode">
            <summary>
            Provides the hash code for this object. 
            </summary>
            <returns>A hash code formed from the bitwise XOR of this objects members.</returns>
        </member>
        <member name="M:OpenTK.Math.Quaternion.Equals(OpenTK.Math.Quaternion)">
            <summary>
            Compares this Quaternion instance to another Quaternion for equality. 
            </summary>
            <param name="other">The other Quaternion to be used in the comparison.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Math.Quaternion.XYZ">
            <summary>
            Gets or sets an OpenTK.Math.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaternion.Xyz">
            <summary>
            Gets or sets an OpenTK.Math.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaternion.X">
            <summary>
            Gets or sets the X component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaternion.Y">
            <summary>
            Gets or sets the Y component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaternion.Z">
            <summary>
            Gets or sets the Z component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaternion.W">
            <summary>
            Gets or sets the W component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaternion.Length">
            <summary>
            Gets the length (magnitude) of the quaternion.
            </summary>
            <seealso cref="P:OpenTK.Math.Quaternion.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Quaternion.LengthSquared">
            <summary>
            Gets the square of the quaternion length (magnitude).
            </summary>
        </member>
        <member name="T:OpenTK.Input.IKeyboardDriver">
            <summary>
            Defines the interface for KeyboardDevice drivers.
            </summary>
        </member>
        <member name="P:OpenTK.Input.IKeyboardDriver.Keyboard">
            <summary>
            Gets the list of available KeyboardDevices.
            </summary>
        </member>
        <member name="T:OpenTK.Input.IMouseDriver">
            <summary>
            Defines the interface for MouseDevice drivers.
            </summary>
        </member>
        <member name="P:OpenTK.Input.IMouseDriver.Mouse">
            <summary>
            Gets the list of available MouseDevices.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.Glu.LoadDelegate(System.String,System.Type)">
            <summary>
            Creates a System.Delegate that can be used to call a GLU function, core or extension.
            </summary>
            <param name="name">The name of the GLU function (eg. "gluBuild2DMipmaps")</param>
            <param name="signature">The signature of the GLU function.</param>
            <returns>
            A System.Delegate that can be used to call this GLU function, or null if the specified
            function name did not correspond to an GLU function.
            </returns>
        </member>
        <member name="M:OpenTK.Graphics.Glu.LoadAll">
            <summary>
            Loads all GLU functions (core and extensions).
            </summary>
            <remarks>
            <para>
            Call this function manually whenever you need to update GLU entry points.
            This need will never arise under normal usage patterns.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.Glu.Load(System.String)">
            <summary>
            Tries to reload the given GLU function (core or extension).
            </summary>
            <param name="function">The name of the GLU function.</param>
            <returns>True if the function was found and reloaded, false otherwise.</returns>
            <remarks>
            <para>
            While the automatic initialisation will load all GLU entry points, in some cases
            the initialization can take place before a render context has been established.
            In this case, use this function to load the entry points for the GLU functions
            you will need, or use LoadAll() to load all available entry points.
            </para>
            <para>
            This function returns true if the given GLU function is supported, false otherwise.
            </para>
            <para>
            To query for supported extensions use the IsExtensionSupported() function instead.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.Glu.SupportsExtension(System.String)">
            <summary>
            Determines whether the specified GLU extension is available in
            the current GLU context.
            </summary>
            <param name="name">The string for the GLU extension.</param>
            <returns>True if the specified extension is available, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Glu.BuildExtensionList">
            <summary>
            Builds a cache of the supported extensions to speed up searches.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.AutoGeneratedAttribute">
            <summary>
            Indicates that this function is generated automatically by a tool.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.AutoGeneratedAttribute.Category">
            <summary>
            Specifies the category of this OpenGL function.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.AutoGeneratedAttribute.Version">
            <summary>
            Specifies the version of this OpenGL function.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.AutoGeneratedAttribute.EntryPoint">
            <summary>
            Specifies the entry point of the OpenGL function.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.AutoGeneratedAttribute.#ctor">
            <summary>
            Constructs a new AutoGeneratedAttribute instance.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.AlcContextAttributes.Frequency">
            <summary>Followed by System.Int32 Hz</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcContextAttributes.Refresh">
            <summary>Followed by System.Int32 Hz</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcContextAttributes.Sync">
            <summary>Followed by AlBoolean.True, or AlBoolean.False</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcContextAttributes.MonoSources">
            <summary>Followed by System.Int32 Num of requested Mono (3D) Sources</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcContextAttributes.StereoSources">
            <summary>Followed by System.Int32 Num of requested Stereo Sources</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcContextAttributes.EfxMaxAuxiliarySends">
            <summary>(EFX Extension) This Context property can be passed to OpenAL during Context creation (alcCreateContext) to request a maximum number of Auxiliary Sends desired on each Source. It is not guaranteed that the desired number of sends will be available, so an application should query this property after creating the context using alcGetIntergerv. Default: 2</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcError.NoError">
            <summary>There is no current error.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcError.InvalidDevice">
            <summary>No Device. The device handle or specifier names an inaccessible driver/server.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcError.InvalidContext">
            <summary>Invalid context ID. The Context argument does not name a valid context.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcError.InvalidEnum">
            <summary>Bad enum. A token used is not valid, or not applicable.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcError.InvalidValue">
            <summary>Bad value. A value (e.g. Attribute) is not valid, or not applicable.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcError.OutOfMemory">
            <summary>Out of memory. Unable to allocate memory.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetString.DefaultDeviceSpecifier">
            <summary>The specifier string for the default device.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetString.Extensions">
            <summary>A list of available context extensions separated by spaces.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetString.CaptureDefaultDeviceSpecifier">
            <summary>The name of the default capture device</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetString.DefaultAllDevicesSpecifier">
            <summary>a list of the default devices.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetString.CaptureDeviceSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.CaptureDeviceSpecifier. ALC_EXT_CAPTURE_EXT </summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetString.DeviceSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.DeviceSpecifier</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetString.AllDevicesSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.AllDevicesSpecifier</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetStringList.CaptureDeviceSpecifier">
            <summary>The name of the specified capture device, or a list of all available capture devices if no capture device is specified. ALC_EXT_CAPTURE_EXT </summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetStringList.DeviceSpecifier">
            <summary>The specifier strings for all available devices. ALC_ENUMERATION_EXT</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetStringList.AllDevicesSpecifier">
            <summary>The specifier strings for all available devices. ALC_ENUMERATE_ALL_EXT</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetInteger.MajorVersion">
            <summary>The specification revision for this implementation (major version). NULL is an acceptable device.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetInteger.MinorVersion">
            <summary>The specification revision for this implementation (minor version). NULL is an acceptable device.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetInteger.AttributesSize">
            <summary>The size (number of ALCint values) required for a zero-terminated attributes list, for the current context. NULL is an invalid device.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetInteger.AllAttributes">
            <summary>Expects a destination of ALC_ATTRIBUTES_SIZE, and provides an attribute list for the current context of the specified device. NULL is an invalid device.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetInteger.CaptureSamples">
            <summary>The number of capture samples available. NULL is an invalid device.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetInteger.EfxMajorVersion">
            <summary>(EFX Extension) This property can be used by the application to retrieve the Major version number of the Effects Extension supported by this OpenAL implementation. As this is a Context property is should be retrieved using alcGetIntegerv.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetInteger.EfxMinorVersion">
            <summary>(EFX Extension) This property can be used by the application to retrieve the Minor version number of the Effects Extension supported by this OpenAL implementation. As this is a Context property is should be retrieved using alcGetIntegerv.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlcGetInteger.EfxMaxAuxiliarySends">
            <summary>(EFX Extension) This Context property can be passed to OpenAL during Context creation (alcCreateContext) to request a maximum number of Auxiliary Sends desired on each Source. It is not guaranteed that the desired number of sends will be available, so an application should query this property after creating the context using alcGetIntergerv. Default: 2</summary>
        </member>
        <member name="T:OpenTK.Audio.Alc">
            <summary>Alc = Audio Library Context</summary>
        </member>
        <member name="M:OpenTK.Audio.Alc.CreateContext(System.IntPtr,System.Int32*)">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">a pointer to a device</param>
            <param name="attrlist">a pointer to a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC</param>
            <returns>Returns a pointer to the new context (NULL on failure). The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.CreateContext(System.IntPtr,System.Int32[])">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">a pointer to a device</param>
            <param name="attriblist">an array of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC</param>
            <returns>Returns a pointer to the new context (NULL on failure).</returns>
            <remarks>The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</remarks>
        </member>
        <member name="M:OpenTK.Audio.Alc.MakeContextCurrent(OpenTK.ContextHandle)">
            <summary>This function makes a specified context the current context.</summary>
            <param name="context">A pointer to the new context.</param>
            <returns>Returns True on success, or False on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.ProcessContext(OpenTK.ContextHandle)">
            <summary>This function tells a context to begin processing. When a context is suspended, changes in OpenAL state will be accepted but will not be processed. alcSuspendContext can be used to suspend a context, and then all the OpenAL state changes can be applied at once, followed by a call to alcProcessContext to apply all the state changes immediately. In some cases, this procedure may be more efficient than application of properties in a non-suspended state. In some implementations, process and suspend calls are each a NOP.</summary>
            <param name="context">a pointer to the new context</param>
        </member>
        <member name="M:OpenTK.Audio.Alc.SuspendContext(OpenTK.ContextHandle)">
            <summary>This function suspends processing on a specified context. When a context is suspended, changes in OpenAL state will be accepted but will not be processed. A typical use of alcSuspendContext would be to suspend a context, apply all the OpenAL state changes at once, and then call alcProcessContext to apply all the state changes at once. In some cases, this procedure may be more efficient than application of properties in a non-suspended state. In some implementations, process and suspend calls are each a NOP.</summary>
            <param name="context">a pointer to the context to be suspended.</param>
        </member>
        <member name="M:OpenTK.Audio.Alc.DestroyContext(OpenTK.ContextHandle)">
            <summary>This function destroys a context.</summary>
            <param name="context">a pointer to the new context.</param>
        </member>
        <member name="M:OpenTK.Audio.Alc.GetCurrentContext">
            <summary>This function retrieves the current context.</summary>
            <returns>Returns a pointer to the current context.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.GetContextsDevice(OpenTK.ContextHandle)">
            <summary>This function retrieves a context's device pointer.</summary>
            <param name="context">a pointer to a context.</param>
            <returns>Returns a pointer to the specified context's device.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.OpenDevice(System.String)">
            <summary>This function opens a device by name.</summary>
            <param name="devicename">a null-terminated string describing a device.</param>
            <returns>Returns a pointer to the opened device. The return value will be NULL if there is an error.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.CloseDevice(System.IntPtr)">
            <summary>This function closes a device by name.</summary>
            <param name="device">a pointer to an opened device</param>
            <returns>True will be returned on success or False on failure. Closing a device will fail if the device contains any contexts or buffers.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.GetError(System.IntPtr)">
            <summary>This function retrieves the current context error state.</summary>
            <param name="device">a pointer to the device to retrieve the error state from</param>
            <returns>Errorcode Int32.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.IsExtensionPresent(System.IntPtr,System.String)">
            <summary>This function queries if a specified context extension is available.</summary>
            <param name="device">a pointer to the device to be queried for an extension.</param>
            <param name="extname">a null-terminated string describing the extension.</param>
            <returns>Returns True if the extension is available, False if the extension is not available.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.GetProcAddress(System.IntPtr,System.String)">
            <summary>This function retrieves the address of a specified context extension function.</summary>
            <param name="device">a pointer to the device to be queried for the function.</param>
            <param name="funcname">a null-terminated string describing the function.</param>
            <returns>Returns the address of the function, or NULL if it is not found.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.GetEnumValue(System.IntPtr,System.String)">
            <summary>This function retrieves the enum value for a specified enumeration name.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="enumname">a null terminated string describing the enum value.</param>
            <returns>Returns the enum value described by the enumName string. This is most often used for querying an enum value for an ALC extension.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.GetString(System.IntPtr,OpenTK.Audio.AlcGetString)">
            <summary>This function returns pointers to strings related to the context.</summary>
            <remarks>
            ALC_DEFAULT_DEVICE_SPECIFIER will return the name of the default output device.
            ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER will return the name of the default capture device.
            ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.
            ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.
            ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
            </remarks>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_DEFAULT_DEVICE_SPECIFIER, ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER, ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_EXTENSIONS</param>
            <returns>A string containing the name of the Device.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.GetString(System.IntPtr,OpenTK.Audio.AlcGetStringList)">
            <summary>This function returns a List of strings related to the context.</summary>
            <remarks>
            ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.
            ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.
            ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
            </remarks>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_ALL_DEVICES_SPECIFIER</param>
            <returns>A List of strings containing the names of the Devices.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.GetInteger(System.IntPtr,OpenTK.Audio.AlcGetInteger,System.Int32,System.Int32@)">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES</param>
            <param name="size">the size of the destination buffer provided. In bytes.</param>
            <param name="data">a pointer to the buffer to be returned</param>
        </member>
        <member name="M:OpenTK.Audio.Alc.CaptureOpenDevice(System.String,System.UInt32,OpenTK.Audio.ALFormat,System.Int32)">
            <summary>This function opens a capture device by name. </summary>
            <param name="devicename">a pointer to a device name string</param>
            <param name="frequency">the frequency that the buffer should be captured at</param>
            <param name="format">the requested capture buffer format</param>
            <param name="buffersize">the size of the capture buffer in bytes</param>
            <returns>Returns the capture device pointer, or NULL on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.CaptureCloseDevice(System.IntPtr)">
            <summary>This function closes the specified capture device.</summary>
            <param name="device">a pointer to a capture device.</param>
            <returns>Returns True if the close operation was successful, False on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alc.CaptureStart(System.IntPtr)">
            <summary>This function begins a capture operation.</summary>
            <remarks>alcCaptureStart will begin recording to an internal ring buffer of the size specified when opening the capture device. The application can then retrieve the number of samples currently available using the ALC_CAPTURE_SAPMPLES token with alcGetIntegerv. When the application determines that enough samples are available for processing, then it can obtain them with a call to alcCaptureSamples.</remarks>
            <param name="device">a pointer to a capture device.</param>
        </member>
        <member name="M:OpenTK.Audio.Alc.CaptureStop(System.IntPtr)">
            <summary>This function stops a capture operation.</summary>
            <param name="device">a pointer to a capture device.</param>
        </member>
        <member name="M:OpenTK.Audio.Alc.CaptureSamples(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a pointer to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.Alc.CaptureSamples``1(System.IntPtr,``0@,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a reference to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.Alc.CaptureSamples``1(System.IntPtr,``0[],System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.Alc.CaptureSamples``1(System.IntPtr,``0[0:,0:],System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.Alc.CaptureSamples``1(System.IntPtr,``0[0:,0:,0:],System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="T:OpenTK.Audio.XRamExtension">
            <summary>The X-Ram Extension is provided on the top-end Sound Blaster X-Fi solutions (Sound Blaster X-Fi Fatal1ty, Sound Blaster X-Fi Elite Pro, or later). These products feature 64MB of X-Ram that can only be used for audio purposes, which can be controlled by this Extension.</summary>
        </member>
        <member name="M:OpenTK.Audio.XRamExtension.GetRamSize">
            <summary>Query total amount of X-RAM in bytes.</summary>
        </member>
        <member name="M:OpenTK.Audio.XRamExtension.GetRamFree">
            <summary>Query free X-RAM available in bytes.</summary>
        </member>
        <member name="M:OpenTK.Audio.XRamExtension.SetBufferMode(System.Int32,System.UInt32@,OpenTK.Audio.XRamExtension.XRamStorage)">
            <summary>This function is used to set the storage Mode of an array of OpenAL Buffers.</summary>
            <param name="n">The number of OpenAL Buffers pointed to by buffer.</param>
            <param name="buffer">An array of OpenAL Buffer handles.</param>
            <param name="mode">The storage mode that should be used for all the given buffers. Should be the value of one of the following enum names: XRamStorage.Automatic, XRamStorage.Hardware, XRamStorage.Accessible</param>
            <returns>True if all the Buffers were successfully set to the requested storage mode, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.XRamExtension.SetBufferMode(System.Int32,System.Int32@,OpenTK.Audio.XRamExtension.XRamStorage)">
            <summary>This function is used to set the storage Mode of an array of OpenAL Buffers.</summary>
            <param name="n">The number of OpenAL Buffers pointed to by buffer.</param>
            <param name="buffer">An array of OpenAL Buffer handles.</param>
            <param name="mode">The storage mode that should be used for all the given buffers. Should be the value of one of the following enum names: XRamStorage.Automatic, XRamStorage.Hardware, XRamStorage.Accessible</param>
            <returns>True if all the Buffers were successfully set to the requested storage mode, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.XRamExtension.GetBufferMode(System.UInt32@)">
            <summary>This function is used to retrieve the storage Mode of a single OpenAL Buffer.</summary>
            <param name="buffer">The handle of an OpenAL Buffer.</param>
            <returns>The current Mode of the Buffer.</returns>
        </member>
        <member name="M:OpenTK.Audio.XRamExtension.GetBufferMode(System.Int32@)">
            <summary>This function is used to retrieve the storage Mode of a single OpenAL Buffer.</summary>
            <param name="buffer">The handle of an OpenAL Buffer.</param>
            <returns>The current Mode of the Buffer.</returns>
        </member>
        <member name="P:OpenTK.Audio.XRamExtension.IsInitialized">
            <summary>Returns True if the X-Ram Extension has been found and could be initialized.</summary>
        </member>
        <member name="T:OpenTK.Audio.XRamExtension.XRamStorage">
            <summary>This enum is used to abstract the need of using AL.GetEnumValue() with the Extension. The values do NOT correspond to AL_STORAGE_* tokens!</summary>
        </member>
        <member name="F:OpenTK.Audio.XRamExtension.XRamStorage.Automatic">
            <summary>Put an Open AL Buffer into X-RAM if memory is available, otherwise use host RAM.  This is the default mode.</summary>
        </member>
        <member name="F:OpenTK.Audio.XRamExtension.XRamStorage.Hardware">
            <summary>Force an Open AL Buffer into X-RAM, good for non-streaming buffers.</summary>
        </member>
        <member name="F:OpenTK.Audio.XRamExtension.XRamStorage.Accessible">
            <summary>Force an Open AL Buffer into 'accessible' (currently host) RAM, good for streaming buffers.</summary>
        </member>
        <member name="T:OpenTK.WindowBorder">
            <summary>
            Enumerates available window borders.
            </summary>
        </member>
        <member name="F:OpenTK.WindowBorder.Resizable">
            <summary>
            The window has a resizable border. A window with a resizable border can be resized by the user or programmatically.
            </summary>
        </member>
        <member name="F:OpenTK.WindowBorder.Fixed">
            <summary>
            The window has a fixed border. A window with a fixed border can only be resized programmatically.
            </summary>
        </member>
        <member name="F:OpenTK.WindowBorder.Hidden">
            <summary>
            The window does not have a border. A window with a hidden border can only be resized programmatically.
            </summary>
        </member>
        <member name="T:OpenTK.DisplayMode">
            <summary>Defines the display mode for a render window.</summary>
        </member>
        <member name="M:OpenTK.DisplayMode.#ctor(System.Int32,System.Int32,OpenTK.ColorMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Constructs a new DisplayMode from the specified parameters.
            </summary>
            <param name="width">The Width of the DisplayMode, in pixels.</param>
            <param name="height">The Height of the DisplayMode, in pixels.</param>
            <param name="color">The ColorMode of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
            <param name="aux">The number of bits in the auxilliary buffer.</param>
            <param name="fullscreen">Set to true for a fullscreen DisplayMode.</param>
            <param name="stereo">Set to true for a DisplayMode with stereographic capabilities.</param>
            <param name="buffers">The number of render buffers. Typical values include one (single-), two (double-) or three (triple-buffering).</param>
            <param name="vsync">Set to true to sync the updates to the screen refresh rate.</param>
            <param name="refresh">The desired RefreshRate. Taken into account only for Fullscreen DisplayModes.</param>
        </member>
        <member name="M:OpenTK.DisplayMode.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new DisplayMode.
            </summary>
            <param name="width">The Width of the DisplayMode in pixels.</param>
            <param name="height">The Height of the DisplayMode in pixels.</param>
        </member>
        <member name="M:OpenTK.DisplayMode.#ctor(System.Int32,System.Int32,OpenTK.ColorMode)">
            <summary>
            Constructs a new DisplayMode.
            </summary>
            <param name="width">The Width of the DisplayMode in pixels.</param>
            <param name="height">The Height of the DisplayMode in pixels.</param>
            <param name="color">The ColorMode of the color buffer.</param>
        </member>
        <member name="M:OpenTK.DisplayMode.#ctor(System.Int32,System.Int32,OpenTK.ColorMode,System.Int32)">
            <summary>
            Constructs a new DisplayMode.
            </summary>
            <param name="width">The Width of the DisplayMode in pixels.</param>
            <param name="height">The Height of the DisplayMode in pixels.</param>
            <param name="color">The ColorMode of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
        </member>
        <member name="M:OpenTK.DisplayMode.#ctor(System.Int32,System.Int32,OpenTK.ColorMode,System.Int32,System.Boolean)">
            <summary>
            Constructs a new DisplayMode.
            </summary>
            <param name="width">The Width of the DisplayMode in pixels.</param>
            <param name="height">The Height of the DisplayMode in pixels.</param>
            <param name="color">The ColorMode of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="fullscreen">True for a fullscreen DisplayMode, false otherwise.</param>
        </member>
        <member name="M:OpenTK.DisplayMode.ToString">
            <summary>
            Describes this DisplayMode instance.
            </summary>
            <returns>Returns a System.String that describes this DisplayMode instance.</returns>
        </member>
        <member name="P:OpenTK.DisplayMode.Stereo">
            <summary>
            Gets a System.Boolean indicating whether this DisplayMode is stereoscopic.
            </summary>
        </member>
        <member name="P:OpenTK.DisplayMode.Buffers">
            <summary>
            Gets a System.Int32 containing the number of buffers associated with this
            DisplayMode.
            </summary>
        </member>
        <member name="P:OpenTK.DisplayMode.Height">
            <summary>
            Gets or sets the Height of the DisplayMode. Height is the vertical span measured in pixels.
            </summary>
        </member>
        <member name="P:OpenTK.DisplayMode.Width">
            <summary>
            Gets or sets the Width of the DisplayMode. Width is the horizontal span measured in pixels.
            </summary>
        </member>
        <member name="T:OpenTK.Math.Half">
            <summary>
            The name Half is derived from half-precision floating-point number.
            It occupies only 16 Bits, which are split into 1 Sign bit, 5 Exponent bits and 10 Mantissa bits.
            </summary>
            <remarks>
            Quote from ARB_half_float_pixel specification:
            Any representable 16-bit floating-point value is legal as input to a GL command that accepts 16-bit floating-point data.  The
            result of providing a value that is not a floating-point number (such as infinity or NaN) to such a command is unspecified,
            but must not lead to GL interruption or termination. Providing a denormalized number or negative zero to GL must yield
            predictable results.
            </remarks>
        </member>
        <member name="M:OpenTK.Math.Half.#ctor(System.Single)">
            <summary>
            The new Half instance will convert the parameter into 16-Bit Half precision floating point.
            </summary>
            <param name="f">32-Bit Single precision floating point number.</param>
        </member>
        <member name="M:OpenTK.Math.Half.#ctor(System.Single,System.Boolean)">
            <summary>
            The new Half instance will convert the parameter into 16-Bit Half precision floating point.
            </summary>
            <param name="f">32-Bit Single precision floating point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Half.#ctor(System.Double)">
            <summary>
            The new Half instance will convert the parameter into 16-Bit Half precision floating point.
            </summary>
            <param name="d">64-Bit Double precision floating point number.</param>
        </member>
        <member name="M:OpenTK.Math.Half.#ctor(System.Double,System.Boolean)">
            <summary>
            The new Half instance will convert the parameter into 16-Bit Half precision floating point.
            </summary>
            <param name="d">64-Bit Double precision floating point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Half.SingleToHalf(System.Int32)">
            <summary>Ported from OpenEXR's IlmBase 1.0.1</summary>
        </member>
        <member name="M:OpenTK.Math.Half.ToSingle">
            <summary>Converts the 16-Bit half to 32-Bit floating point.</summary>
            <returns>A Single precision floating point Number.</returns>
        </member>
        <member name="M:OpenTK.Math.Half.HalfToFloat(System.UInt16)">
            <summary>Ported from OpenEXR's IlmBase 1.0.1</summary>
        </member>
        <member name="M:OpenTK.Math.Half.op_Explicit(System.Single)~OpenTK.Math.Half">
            <summary>
            Converts a System.Single to a OpenTK.Math.Half.
            </summary>
            <param name="f">The value to convert.
            A <see cref="T:System.Single"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:OpenTK.Math.Half"/>
            </returns>
        </member>
        <member name="M:OpenTK.Math.Half.op_Explicit(System.Double)~OpenTK.Math.Half">
            <summary>
            Converts a System.Double to a OpenTK.Math.Half.
            </summary>
            <param name="d">The value to convert.
            A <see cref="T:System.Double"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:OpenTK.Math.Half"/>
            </returns>
        </member>
        <member name="M:OpenTK.Math.Half.op_Implicit(OpenTK.Math.Half)~System.Single">
            <summary>
            Converts a OpenTK.Math.Half to a System.Single.
            </summary>
            <param name="h">The value to convert.
            A <see cref="T:OpenTK.Math.Half"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:System.Single"/>
            </returns>
        </member>
        <member name="M:OpenTK.Math.Half.op_Implicit(OpenTK.Math.Half)~System.Double">
            <summary>
            Converts a OpenTK.Math.Half to a System.Double.
            </summary>
            <param name="h">The value to convert.
            A <see cref="T:OpenTK.Math.Half"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:System.Double"/>
            </returns>
        </member>
        <member name="F:OpenTK.Math.Half.SizeInBytes">
            <summary>The size in bytes for an instance of the Half struct.</summary>
        </member>
        <member name="F:OpenTK.Math.Half.MinValue">
            <summary>Smallest positive half</summary>
        </member>
        <member name="F:OpenTK.Math.Half.MinNormalizedValue">
            <summary>Smallest positive normalized half</summary>
        </member>
        <member name="F:OpenTK.Math.Half.MaxValue">
            <summary>Largest positive half</summary>
        </member>
        <member name="F:OpenTK.Math.Half.Epsilon">
            <summary>Smallest positive e for which half (1.0 + e) != half (1.0)</summary>
        </member>
        <member name="M:OpenTK.Math.Half.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor used by ISerializable to deserialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Math.Half.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used by ISerialize to serialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Math.Half.FromBinaryStream(System.IO.BinaryReader)">
            <summary>Updates the Half by reading from a Stream.</summary>
            <param name="bin">A BinaryReader instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Math.Half.ToBinaryStream(System.IO.BinaryWriter)">
            <summary>Writes the Half into a Stream.</summary>
            <param name="bin">A BinaryWriter instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Math.Half.Equals(OpenTK.Math.Half)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified OpenTK.Math.Half value.
            </summary>
            <param name="other">OpenTK.Math.Half object to compare to this instance..</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Half.CompareTo(OpenTK.Math.Half)">
            <summary>
            Compares this instance to a specified half-precision floating-point number
            and returns an integer that indicates whether the value of this instance
            is less than, equal to, or greater than the value of the specified half-precision
            floating-point number. 
            </summary>
            <param name="other">A half-precision floating-point number to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. If the number is:
            <para>Less than zero, then this instance is less than other, or this instance is not a number
            (OpenTK.Math.Half.NaN) and other is a number.</para>
            <para>Zero: this instance is equal to value, or both this instance and other
            are not a number (OpenTK.Math.Half.NaN), OpenTK.Math.Half.PositiveInfinity, or
            OpenTK.Math.Half.NegativeInfinity.</para>
            <para>Greater than zero: this instance is greater than othrs, or this instance is a number
            and other is not a number (OpenTK.Math.Half.NaN).</para>
            </returns>
        </member>
        <member name="M:OpenTK.Math.Half.ToString">
            <summary>Converts this Half into a human-legible string representation.</summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Half.ToString(System.String,System.IFormatProvider)">
            <summary>Converts this Half into a human-legible string representation.</summary>
            <param name="format">formatting for the output string.</param>
            <param name="formatProvider">Culture-specific formatting information.</param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Half.Parse(System.String)">
            <summary>Converts the string representation of a number to a Half precision floating point equivalent.</summary>
            <param name="s">string representation of the number to convert.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Half.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>Converts the string representation of a number to a Half precision floating point equivalent.</summary>
            <param name="s">string representation of the number to convert.</param>
            <param name="style">specifies the format of s.</param>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Half.TryParse(System.String,OpenTK.Math.Half@)">
            <summary>Converts the string representation of a number to a Half precision floating point equivalent. Returns success.</summary>
            <param name="s">string representation of the number to convert.</param>
            <param name="result">The Half instance to write to.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Math.Half.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,OpenTK.Math.Half@)">
            <summary>Converts the string representation of a number to a Half precision floating point equivalent. Returns success.</summary>
            <param name="s">string representation of the number to convert.</param>
            <param name="style">specifies the format of s.</param>
            <param name="provider">Culture-specific formatting information.</param>
            <param name="result">The Half instance to write to.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Math.Half.GetBytes(OpenTK.Math.Half)">
            <summary>Returns the Half as an array of bytes.</summary>
            <param name="h">The Half to convert.</param>
            <returns>The input as byte array.</returns>
        </member>
        <member name="M:OpenTK.Math.Half.FromBytes(System.Byte[],System.Int32)">
            <summary>Converts an array of bytes into Half.</summary>
            <param name="value">A Half in it's byte[] representation.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="P:OpenTK.Math.Half.IsZero">
            <summary>Returns true if the Half is zero.</summary>
        </member>
        <member name="P:OpenTK.Math.Half.IsNaN">
            <summary>Returns true if the Half represents Not A Number (NaN)</summary>
        </member>
        <member name="P:OpenTK.Math.Half.IsPositiveInfinity">
            <summary>Returns true if the Half represents positive infinity.</summary>
        </member>
        <member name="P:OpenTK.Math.Half.IsNegativeInfinity">
            <summary>Returns true if the Half represents negative infinity.</summary>
        </member>
        <member name="T:OpenTK.Input.MouseButton">
            <summary>
            Enumerates all possible mouse buttons.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button1">
            <summary>
            The first extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button2">
            <summary>
            The second extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button3">
            <summary>
            The third extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button4">
            <summary>
            The fourth extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button5">
            <summary>
            The fifth extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button6">
            <summary>
            The sixth extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button7">
            <summary>
            The seventh extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button8">
            <summary>
            The eigth extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button9">
            <summary>
            The ninth extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.LastButton">
            <summary>
            Indicates the last available mouse button.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GL">
            <summary>
            OpenGL bindings for .NET, implementing OpenGL 3.1, plus extensions.
            </summary>
            <remarks>
            <para>
            This class contains all OpenGL enums and functions defined in the 3.1 specification.
            The official .spec files can be found at: http://opengl.org/registry/.
            </para>
            <para> A valid OpenGL context must be created before calling any OpenGL function.</para>
            <para>
            Use the GL.Load and GL.LoadAll methods to prepare function entry points prior to use. To maintain
            cross-platform compatibility, this must be done for both core and extension functions. The GameWindow
            and the GLControl class will take care of this automatically.
            </para>
            <para>
            You can use the GL.SupportsExtension method to check whether any given category of extension functions
            exists in the current OpenGL context. Keep in mind that different OpenGL contexts may support different
            extensions, and under different entry points. Always check if all required extensions are still supported
            when changing visuals or pixel formats.
            </para>
            <para>
            You may retrieve the entry point for an OpenGL function using the GL.GetDelegate method.
            </para>
            </remarks>
            <see href="http://opengl.org/registry/"/>
            <seealso cref="M:OpenTK.Graphics.GL.SupportsExtension(System.String)"/>
            <seealso cref="M:OpenTK.Graphics.GL.GetDelegate(System.String)"/>
            <seealso cref="M:OpenTK.Graphics.GL.LoadAll"/>
            <seealso cref="M:OpenTK.Graphics.GL.Load(System.String)"/>
        </member>
        <member name="M:OpenTK.Graphics.GL.Accum(OpenTK.Graphics.AccumOp,System.Single)">
            <summary>
            Operate on the accumulation buffer
            </summary>
            <param name="op">
            <para>
            Specifies the accumulation buffer operation. Symbolic constants GL_ACCUM, GL_LOAD, GL_ADD, GL_MULT, and GL_RETURN are accepted.
            </para>
            </param>
            <param name="value">
            <para>
            Specifies a floating-point value used in the accumulation buffer operation. op determines how value is used.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ActiveTexture(OpenTK.Graphics.TextureUnit)">
            <summary>
            Select active texture unit
            </summary>
            <param name="texture">
            <para>
            Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTURE, where i ranges from 0 to the larger of (GL_MAX_TEXTURE_COORDS - 1) and (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1). The initial value is GL_TEXTURE0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.AlphaFunc(OpenTK.Graphics.AlphaFunction,System.Single)">
            <summary>
            Specify the alpha test function
            </summary>
            <param name="func">
            <para>
            Specifies the alpha comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_ALWAYS.
            </para>
            </param>
            <param name="ref">
            <para>
            Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.AreTexturesResident(System.Int32,System.UInt32*,System.Boolean*)">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.AreTexturesResident(System.Int32,System.Int32*,System.Boolean*)">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.AreTexturesResident(System.Int32,System.UInt32@,System.Boolean@)">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.AreTexturesResident(System.Int32,System.Int32@,System.Boolean@)">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.AreTexturesResident(System.Int32,System.UInt32[],System.Boolean[])">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.AreTexturesResident(System.Int32,System.Int32[],System.Boolean[])">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ArrayElement(System.Int32)">
            <summary>
            Render a vertex using the specified vertex array element
            </summary>
            <param name="i">
            <para>
            Specifies an index into the enabled vertex data arrays.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.AttachShader(System.UInt32,System.UInt32)">
            <summary>
            Attaches a shader object to a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to which a shader object will be attached.
            </para>
            </param>
            <param name="shader">
            <para>
            Specifies the shader object that is to be attached.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.AttachShader(System.Int32,System.Int32)">
            <summary>
            Attaches a shader object to a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to which a shader object will be attached.
            </para>
            </param>
            <param name="shader">
            <para>
            Specifies the shader object that is to be attached.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Begin(OpenTK.Graphics.BeginMode)">
            <summary>
            Delimit the vertices of a primitive or a group of like primitives
            </summary>
            <param name="mode">
            <para>
            Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd. Ten symbolic constants are accepted: GL_POINTS, GL_LINES, GL_LINE_STRIP, GL_LINE_LOOP, GL_TRIANGLES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_QUADS, GL_QUAD_STRIP, and GL_POLYGON.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BeginQuery(OpenTK.Graphics.QueryTarget,System.UInt32)">
            <summary>
            Delimit the boundaries of a query object
            </summary>
            <param name="target">
            <para>
            Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be GL_SAMPLES_PASSED.
            </para>
            </param>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BeginQuery(OpenTK.Graphics.QueryTarget,System.Int32)">
            <summary>
            Delimit the boundaries of a query object
            </summary>
            <param name="target">
            <para>
            Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be GL_SAMPLES_PASSED.
            </para>
            </param>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BindAttribLocation(System.Int32,System.Int32,System.String)">
            <summary>
            Associates a generic vertex attribute index with a named attribute variable
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object in which the association is to be made.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be bound.
            </para>
            </param>
            <param name="name">
            <para>
            Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BindAttribLocation(System.UInt32,System.UInt32,System.String)">
            <summary>
            Associates a generic vertex attribute index with a named attribute variable
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object in which the association is to be made.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be bound.
            </para>
            </param>
            <param name="name">
            <para>
            Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BindBuffer(OpenTK.Graphics.BufferTarget,System.UInt32)">
            <summary>
            Bind a named buffer object
            </summary>
            <param name="target">
            <para>
            Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="buffer">
            <para>
            Specifies the name of a buffer object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BindBuffer(OpenTK.Graphics.BufferTarget,System.Int32)">
            <summary>
            Bind a named buffer object
            </summary>
            <param name="target">
            <para>
            Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="buffer">
            <para>
            Specifies the name of a buffer object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BindTexture(OpenTK.Graphics.TextureTarget,System.Int32)">
            <summary>
            Bind a named texture to a texturing target
            </summary>
            <param name="target">
            <para>
            Specifies the target to which the texture is bound. Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="texture">
            <para>
            Specifies the name of a texture.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BindTexture(OpenTK.Graphics.TextureTarget,System.UInt32)">
            <summary>
            Bind a named texture to a texturing target
            </summary>
            <param name="target">
            <para>
            Specifies the target to which the texture is bound. Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="texture">
            <para>
            Specifies the name of a texture.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Bitmap(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Byte*)">
            <summary>
            Draw a bitmap
            </summary>
            <param name="width">
            <para>
            Specify the pixel width and height of the bitmap image.
            </para>
            </param>
            <param name="xorig">
            <para>
            Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
            </para>
            </param>
            <param name="xmove">
            <para>
            Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
            </para>
            </param>
            <param name="bitmap">
            <para>
            Specifies the address of the bitmap image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Bitmap(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Byte[])">
            <summary>
            Draw a bitmap
            </summary>
            <param name="width">
            <para>
            Specify the pixel width and height of the bitmap image.
            </para>
            </param>
            <param name="xorig">
            <para>
            Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
            </para>
            </param>
            <param name="xmove">
            <para>
            Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
            </para>
            </param>
            <param name="bitmap">
            <para>
            Specifies the address of the bitmap image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Bitmap(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Byte@)">
            <summary>
            Draw a bitmap
            </summary>
            <param name="width">
            <para>
            Specify the pixel width and height of the bitmap image.
            </para>
            </param>
            <param name="xorig">
            <para>
            Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
            </para>
            </param>
            <param name="xmove">
            <para>
            Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
            </para>
            </param>
            <param name="bitmap">
            <para>
            Specifies the address of the bitmap image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BlendColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the blend color
            </summary>
            <param name="red">
            <para>
            specify the components of GL_BLEND_COLOR
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BlendEquation(OpenTK.Graphics.BlendEquationMode)">
            <summary>
            Specify the equation used for both the RGB blend equation and the Alpha blend equation
            </summary>
            <param name="mode">
            <para>
            specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BlendEquationSeparate(OpenTK.Graphics.BlendEquationMode,OpenTK.Graphics.BlendEquationMode)">
            <summary>
            Set the RGB blend equation and the alpha blend equation separately
            </summary>
            <param name="modeRGB">
            <para>
            specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            </para>
            </param>
            <param name="modeAlpha">
            <para>
            specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BlendFunc(OpenTK.Graphics.BlendingFactorSrc,OpenTK.Graphics.BlendingFactorDest)">
            <summary>
            Specify pixel arithmetic
            </summary>
            <param name="sfactor">
            <para>
            Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.
            </para>
            </param>
            <param name="dfactor">
            <para>
            Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BlendFuncSeparate(OpenTK.Graphics.BlendingFactorSrc,OpenTK.Graphics.BlendingFactorDest,OpenTK.Graphics.BlendingFactorSrc,OpenTK.Graphics.BlendingFactorDest)">
            <summary>
            Specify pixel arithmetic for RGB and alpha components separately
            </summary>
            <param name="srcRGB">
            <para>
            Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.
            </para>
            </param>
            <param name="dstRGB">
            <para>
            Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
            </para>
            </param>
            <param name="srcAlpha">
            <para>
            Specified how the alpha source blending factor is computed. The same symbolic constants are accepted as for srcRGB. The initial value is GL_ONE.
            </para>
            </param>
            <param name="dstAlpha">
            <para>
            Specified how the alpha destination blending factor is computed. The same symbolic constants are accepted as for dstRGB. The initial value is GL_ZERO.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BufferData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,``0@,OpenTK.Graphics.BufferUsageHint)">
            <summary>
            Creates and initializes a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the buffer object's new data store.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </para>
            </param>
            <param name="usage">
            <para>
            Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BufferData(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,OpenTK.Graphics.BufferUsageHint)">
            <summary>
            Creates and initializes a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the buffer object's new data store.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </para>
            </param>
            <param name="usage">
            <para>
            Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BufferData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,``0[],OpenTK.Graphics.BufferUsageHint)">
            <summary>
            Creates and initializes a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the buffer object's new data store.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </para>
            </param>
            <param name="usage">
            <para>
            Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BufferData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,``0[0:,0:,0:],OpenTK.Graphics.BufferUsageHint)">
            <summary>
            Creates and initializes a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the buffer object's new data store.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </para>
            </param>
            <param name="usage">
            <para>
            Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BufferData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,``0[0:,0:],OpenTK.Graphics.BufferUsageHint)">
            <summary>
            Creates and initializes a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the buffer object's new data store.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </para>
            </param>
            <param name="usage">
            <para>
            Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BufferSubData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,``0[])">
            <summary>
            Updates a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being replaced.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the new data that will be copied into the data store.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BufferSubData(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Updates a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being replaced.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the new data that will be copied into the data store.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BufferSubData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,``0[0:,0:])">
            <summary>
            Updates a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being replaced.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the new data that will be copied into the data store.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BufferSubData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,``0[0:,0:,0:])">
            <summary>
            Updates a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being replaced.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the new data that will be copied into the data store.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.BufferSubData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,``0@)">
            <summary>
            Updates a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being replaced.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the new data that will be copied into the data store.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CallList(System.UInt32)">
            <summary>
            Execute a display list
            </summary>
            <param name="list">
            <para>
            Specifies the integer name of the display list to be executed.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CallList(System.Int32)">
            <summary>
            Execute a display list
            </summary>
            <param name="list">
            <para>
            Specifies the integer name of the display list to be executed.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CallLists``1(System.Int32,OpenTK.Graphics.ListNameType,``0@)">
            <summary>
            Execute a list of display lists
            </summary>
            <param name="n">
            <para>
            Specifies the number of display lists to be executed.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of values in lists. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, GL_2_BYTES, GL_3_BYTES, and GL_4_BYTES are accepted.
            </para>
            </param>
            <param name="lists">
            <para>
            Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CallLists(System.Int32,OpenTK.Graphics.ListNameType,System.IntPtr)">
            <summary>
            Execute a list of display lists
            </summary>
            <param name="n">
            <para>
            Specifies the number of display lists to be executed.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of values in lists. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, GL_2_BYTES, GL_3_BYTES, and GL_4_BYTES are accepted.
            </para>
            </param>
            <param name="lists">
            <para>
            Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CallLists``1(System.Int32,OpenTK.Graphics.ListNameType,``0[])">
            <summary>
            Execute a list of display lists
            </summary>
            <param name="n">
            <para>
            Specifies the number of display lists to be executed.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of values in lists. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, GL_2_BYTES, GL_3_BYTES, and GL_4_BYTES are accepted.
            </para>
            </param>
            <param name="lists">
            <para>
            Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CallLists``1(System.Int32,OpenTK.Graphics.ListNameType,``0[0:,0:])">
            <summary>
            Execute a list of display lists
            </summary>
            <param name="n">
            <para>
            Specifies the number of display lists to be executed.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of values in lists. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, GL_2_BYTES, GL_3_BYTES, and GL_4_BYTES are accepted.
            </para>
            </param>
            <param name="lists">
            <para>
            Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CallLists``1(System.Int32,OpenTK.Graphics.ListNameType,``0[0:,0:,0:])">
            <summary>
            Execute a list of display lists
            </summary>
            <param name="n">
            <para>
            Specifies the number of display lists to be executed.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of values in lists. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, GL_2_BYTES, GL_3_BYTES, and GL_4_BYTES are accepted.
            </para>
            </param>
            <param name="lists">
            <para>
            Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Clear(OpenTK.Graphics.ClearBufferMask)">
            <summary>
            Clear buffers to preset values
            </summary>
            <param name="mask">
            <para>
            Bitwise OR of masks that indicate the buffers to be cleared. The four masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_ACCUM_BUFFER_BIT, and GL_STENCIL_BUFFER_BIT.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ClearAccum(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify clear values for the accumulation buffer
            </summary>
            <param name="red">
            <para>
            Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ClearColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify clear values for the color buffers
            </summary>
            <param name="red">
            <para>
            Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ClearDepth(System.Double)">
            <summary>
            Specify the clear value for the depth buffer
            </summary>
            <param name="depth">
            <para>
            Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ClearIndex(System.Single)">
            <summary>
            Specify the clear value for the color index buffers
            </summary>
            <param name="c">
            <para>
            Specifies the index used when the color index buffers are cleared. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ClearStencil(System.Int32)">
            <summary>
            Specify the clear value for the stencil buffer
            </summary>
            <param name="s">
            <para>
            Specifies the index used when the stencil buffer is cleared. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ClientActiveTexture(OpenTK.Graphics.TextureUnit)">
            <summary>
            Select active texture unit
            </summary>
            <param name="texture">
            <para>
            Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTURE, where i ranges from 0 to the value of GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value. The initial value is GL_TEXTURE0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ClipPlane(OpenTK.Graphics.ClipPlaneName,System.Double[])">
            <summary>
            Specify a plane against which all geometry is clipped
            </summary>
            <param name="plane">
            <para>
            Specifies which clipping plane is being positioned. Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES - 1, are accepted.
            </para>
            </param>
            <param name="equation">
            <para>
            Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ClipPlane(OpenTK.Graphics.ClipPlaneName,System.Double*)">
            <summary>
            Specify a plane against which all geometry is clipped
            </summary>
            <param name="plane">
            <para>
            Specifies which clipping plane is being positioned. Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES - 1, are accepted.
            </para>
            </param>
            <param name="equation">
            <para>
            Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ClipPlane(OpenTK.Graphics.ClipPlaneName,System.Double@)">
            <summary>
            Specify a plane against which all geometry is clipped
            </summary>
            <param name="plane">
            <para>
            Specifies which clipping plane is being positioned. Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES - 1, are accepted.
            </para>
            </param>
            <param name="equation">
            <para>
            Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.SByte,System.SByte,System.SByte)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.SByte*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.SByte@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.SByte[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Double,System.Double,System.Double)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Double[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Double*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Double@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Single,System.Single,System.Single)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Single[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Single*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Single@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Int32@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Int32*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Int32[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Int16[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Int16*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Int16@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Byte*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Byte[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.Byte@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.UInt32@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.UInt32[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.UInt32*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.UInt16*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.UInt16@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color3(System.UInt16[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.SByte*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.SByte@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.SByte[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Double[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Double@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Double*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Single@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Single*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Single[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Int32[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Int32*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Int32@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Int16[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Int16*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Int16@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Byte@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Byte*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.Byte[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.UInt32@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.UInt32*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.UInt32[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.UInt16@)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.UInt16*)">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Color4(System.UInt16[])">
            <summary>
            Set the current color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current color.
            </para>
            </param>
            <param name="alpha">
            <para>
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorMask(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable and disable writing of frame buffer color components
            </summary>
            <param name="red">
            <para>
            Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components can be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorMask(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable and disable writing of frame buffer color components
            </summary>
            <param name="red">
            <para>
            Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components can be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorMask(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable and disable writing of frame buffer color components
            </summary>
            <param name="red">
            <para>
            Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components can be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorMaterial(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.ColorMaterialParameter)">
            <summary>
            Cause a material color to track the current color
            </summary>
            <param name="face">
            <para>
            Specifies whether front, back, or both front and back material parameters should track the current color. Accepted values are GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. The initial value is GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="mode">
            <para>
            Specifies which of several material parameters track the current color. Accepted values are GL_EMISSION, GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, and GL_AMBIENT_AND_DIFFUSE. The initial value is GL_AMBIENT_AND_DIFFUSE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0@)">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorPointer(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,System.IntPtr)">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0[])">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorSubTable``1(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            The number of table entries to replace.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorSubTable(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            The number of table entries to replace.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorSubTable``1(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            The number of table entries to replace.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorSubTable``1(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            The number of table entries to replace.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorSubTable``1(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            The number of table entries to replace.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTable(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.ColorTableParameterPName,System.Single*)">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.ColorTableParameterPName,System.Single@)">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.ColorTableParameterPName,System.Single[])">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.ColorTableParameterPName,System.Int32*)">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.ColorTableParameterPName,System.Int32@)">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.ColorTableParameterPName,System.Int32[])">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompileShader(System.UInt32)">
            <summary>
            Compiles a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be compiled.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompileShader(System.Int32)">
            <summary>
            Compiles a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be compiled.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage1D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a one-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Specify a one-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Specify a one-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a one-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,``0[])">
            <summary>
            Specify a one-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage2D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,``0[])">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage3D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Specify a three-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a three-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Specify a three-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[])">
            <summary>
            Specify a three-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0@)">
            <summary>
            Specify a one-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage1D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,System.IntPtr)">
            <summary>
            Specify a one-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[])">
            <summary>
            Specify a one-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a one-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:])">
            <summary>
            Specify a one-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[])">
            <summary>
            Specify a two-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage2D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,System.IntPtr)">
            <summary>
            Specify a two-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a two-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0@)">
            <summary>
            Specify a two-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:])">
            <summary>
            Specify a two-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0@)">
            <summary>
            Specify a three-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage3D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[])">
            <summary>
            Specify a three-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a three-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CompressedTexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:])">
            <summary>
            Specify a three-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionFilter1D``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Define a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionFilter1D``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Define a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionFilter1D(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Define a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionFilter1D``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Define a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionFilter1D``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Define a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionFilter2D``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Define a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionFilter2D``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Define a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionFilter2D``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Define a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionFilter2D``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Define a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionFilter2D(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Define a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.ConvolutionParameter,System.Single)">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.ConvolutionParameter,System.Single[])">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.ConvolutionParameter,System.Single*)">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.ConvolutionParameter,System.Int32)">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.ConvolutionParameter,System.Int32*)">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.ConvolutionParameter,System.Int32[])">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CopyColorSubTable(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="x">
            <para>
            The window coordinates of the left corner of the row of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            The number of table entries to replace.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CopyColorTable(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a color table
            </summary>
            <param name="target">
            <para>
            The color table target. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal storage format of the texture image. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="x">
            <para>
            The x coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
            </para>
            </param>
            <param name="y">
            <para>
            The y coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CopyConvolutionFilter1D(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="x">
            <para>
            The window space coordinates of the lower-left coordinate of the pixel array to copy.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array to copy.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CopyConvolutionFilter2D(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="x">
            <para>
            The window space coordinates of the lower-left coordinate of the pixel array to copy.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array to copy.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array to copy.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CopyPixels(System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelCopyType)">
            <summary>
            Copy pixels in the frame buffer
            </summary>
            <param name="x">
            <para>
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies whether color values, depth values, or stencil values are to be copied. Symbolic constants GL_COLOR, GL_DEPTH, and GL_STENCIL are accepted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CopyTexImage1D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a 1D texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the window coordinates of the left corner of the row of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image. Must be 0 or 2 sup n + 2 ( border ) for some integer . The height of the texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CopyTexImage2D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a 2D texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image. Must be 0 or 2 sup n + 2 ( border ) for some integer .
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image. Must be 0 or 2 sup m + 2 ( border ) for some integer .
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CopyTexSubImage1D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies the texel offset within the texture array.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the window coordinates of the left corner of the row of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CopyTexSubImage2D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CopyTexSubImage3D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CreateProgram">
            <summary>
            Creates a program object
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GL.CreateShader(OpenTK.Graphics.ShaderType)">
            <summary>
            Creates a shader object
            </summary>
            <param name="shaderType">
            <para>
            Specifies the type of shader to be created. Must be either GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.CullFace(OpenTK.Graphics.CullFaceMode)">
            <summary>
            Specify whether front- or back-facing facets can be culled
            </summary>
            <param name="mode">
            <para>
            Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. The initial value is GL_BACK.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteBuffers(System.Int32,System.Int32[])">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteBuffers(System.Int32,System.UInt32[])">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteBuffers(System.Int32,System.Int32*)">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteBuffers(System.Int32,System.UInt32*)">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteBuffers(System.Int32,System.Int32@)">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteBuffers(System.Int32,System.UInt32@)">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteLists(System.Int32,System.Int32)">
            <summary>
            Delete a contiguous group of display lists
            </summary>
            <param name="list">
            <para>
            Specifies the integer name of the first display list to delete.
            </para>
            </param>
            <param name="range">
            <para>
            Specifies the number of display lists to delete.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteLists(System.UInt32,System.Int32)">
            <summary>
            Delete a contiguous group of display lists
            </summary>
            <param name="list">
            <para>
            Specifies the integer name of the first display list to delete.
            </para>
            </param>
            <param name="range">
            <para>
            Specifies the number of display lists to delete.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteProgram(System.UInt32)">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteProgram(System.Int32)">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteQueries(System.Int32,System.UInt32@)">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteQueries(System.Int32,System.Int32[])">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteQueries(System.Int32,System.Int32@)">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteQueries(System.Int32,System.UInt32*)">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteQueries(System.Int32,System.UInt32[])">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteQueries(System.Int32,System.Int32*)">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteShader(System.Int32)">
            <summary>
            Deletes a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteShader(System.UInt32)">
            <summary>
            Deletes a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteTextures(System.Int32,System.Int32[])">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteTextures(System.Int32,System.UInt32[])">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteTextures(System.Int32,System.Int32@)">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteTextures(System.Int32,System.UInt32*)">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteTextures(System.Int32,System.Int32*)">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DeleteTextures(System.Int32,System.UInt32@)">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DepthFunc(OpenTK.Graphics.DepthFunction)">
            <summary>
            Specify the value used for depth buffer comparisons
            </summary>
            <param name="func">
            <para>
            Specifies the depth comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_LESS.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DepthMask(System.Boolean)">
            <summary>
            Enable or disable writing into the depth buffer
            </summary>
            <param name="flag">
            <para>
            Specifies whether the depth buffer is enabled for writing. If flag is GL_FALSE, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DepthRange(System.Double,System.Double)">
            <summary>
            Specify mapping of depth values from normalized device coordinates to window coordinates
            </summary>
            <param name="nearVal">
            <para>
            Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
            </para>
            </param>
            <param name="farVal">
            <para>
            Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DetachShader(System.UInt32,System.UInt32)">
            <summary>
            Detaches a shader object from a program object to which it is attached
            </summary>
            <param name="program">
            <para>
            Specifies the program object from which to detach the shader object.
            </para>
            </param>
            <param name="shader">
            <para>
            Specifies the shader object to be detached.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DetachShader(System.Int32,System.Int32)">
            <summary>
            Detaches a shader object from a program object to which it is attached
            </summary>
            <param name="program">
            <para>
            Specifies the program object from which to detach the shader object.
            </para>
            </param>
            <param name="shader">
            <para>
            Specifies the shader object to be detached.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawArrays(OpenTK.Graphics.BeginMode,System.Int32,System.Int32)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="first">
            <para>
            Specifies the starting index in the enabled arrays.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of indices to be rendered.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawBuffer(OpenTK.Graphics.DrawBufferMode)">
            <summary>
            Specify which color buffers are to be drawn into
            </summary>
            <param name="mode">
            <para>
            Specifies up to four color buffers to be drawn into. Symbolic constants GL_NONE, GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, GL_FRONT_AND_BACK, and GL_AUXi, where i is between 0 and the value of GL_AUX_BUFFERS minus 1, are accepted. (GL_AUX_BUFFERS is not the upper limit; use glGet to query the number of available aux buffers.) The initial value is GL_FRONT for single-buffered contexts, and GL_BACK for double-buffered contexts.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawBuffers(System.Int32,OpenTK.Graphics.DrawBuffersEnum*)">
            <summary>
            Specifies a list of color buffers to be drawn into
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffers in bufs.
            </para>
            </param>
            <param name="bufs">
            <para>
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawBuffers(System.Int32,OpenTK.Graphics.DrawBuffersEnum@)">
            <summary>
            Specifies a list of color buffers to be drawn into
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffers in bufs.
            </para>
            </param>
            <param name="bufs">
            <para>
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawBuffers(System.Int32,OpenTK.Graphics.DrawBuffersEnum[])">
            <summary>
            Specifies a list of color buffers to be drawn into
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffers in bufs.
            </para>
            </param>
            <param name="bufs">
            <para>
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawElements(OpenTK.Graphics.BeginMode,System.Int32,OpenTK.Graphics.DrawElementsType,System.IntPtr)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawElements``1(OpenTK.Graphics.BeginMode,System.Int32,OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawElements``1(OpenTK.Graphics.BeginMode,System.Int32,OpenTK.Graphics.DrawElementsType,``0@)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawElements``1(OpenTK.Graphics.BeginMode,System.Int32,OpenTK.Graphics.DrawElementsType,``0[0:,0:])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawElements``1(OpenTK.Graphics.BeginMode,System.Int32,OpenTK.Graphics.DrawElementsType,``0[])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawPixels``1(System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Write a block of pixels to the frame buffer
            </summary>
            <param name="width">
            <para>
            Specify the dimensions of the pixel rectangle to be written into the frame buffer.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. Symbolic constants GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA are accepted.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type for data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the pixel data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawPixels``1(System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Write a block of pixels to the frame buffer
            </summary>
            <param name="width">
            <para>
            Specify the dimensions of the pixel rectangle to be written into the frame buffer.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. Symbolic constants GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA are accepted.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type for data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the pixel data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawPixels``1(System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Write a block of pixels to the frame buffer
            </summary>
            <param name="width">
            <para>
            Specify the dimensions of the pixel rectangle to be written into the frame buffer.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. Symbolic constants GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA are accepted.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type for data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the pixel data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawPixels``1(System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Write a block of pixels to the frame buffer
            </summary>
            <param name="width">
            <para>
            Specify the dimensions of the pixel rectangle to be written into the frame buffer.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. Symbolic constants GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA are accepted.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type for data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the pixel data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawPixels(System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Write a block of pixels to the frame buffer
            </summary>
            <param name="width">
            <para>
            Specify the dimensions of the pixel rectangle to be written into the frame buffer.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. Symbolic constants GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA are accepted.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type for data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the pixel data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawRangeElements(OpenTK.Graphics.BeginMode,System.UInt32,System.UInt32,System.Int32,OpenTK.Graphics.DrawElementsType,System.IntPtr)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.UInt32,System.UInt32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[0:,0:])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.DrawElementsType,``0@)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.UInt32,System.UInt32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawRangeElements(OpenTK.Graphics.BeginMode,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.DrawElementsType,System.IntPtr)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.UInt32,System.UInt32,System.Int32,OpenTK.Graphics.DrawElementsType,``0@)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.UInt32,System.UInt32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[0:,0:])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EdgeFlag(System.Boolean)">
            <summary>
            Flag edges as either boundary or nonboundary
            </summary>
            <param name="flag">
            <para>
            Specifies the current edge flag value, either GL_TRUE or GL_FALSE. The initial value is GL_TRUE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EdgeFlagPointer``1(System.Int32,``0@)">
            <summary>
            Define an array of edge flags
            </summary>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first edge flag in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EdgeFlagPointer(System.Int32,System.IntPtr)">
            <summary>
            Define an array of edge flags
            </summary>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first edge flag in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EdgeFlagPointer``1(System.Int32,``0[])">
            <summary>
            Define an array of edge flags
            </summary>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first edge flag in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EdgeFlagPointer``1(System.Int32,``0[0:,0:])">
            <summary>
            Define an array of edge flags
            </summary>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first edge flag in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EdgeFlagPointer``1(System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of edge flags
            </summary>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first edge flag in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Enable(OpenTK.Graphics.EnableCap)">
            <summary>
            Enable or disable server-side GL capabilities
            </summary>
            <param name="cap">
            <para>
            Specifies a symbolic constant indicating a GL capability.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EnableClientState(OpenTK.Graphics.EnableCap)">
            <summary>
            Enable or disable client-side capability
            </summary>
            <param name="cap">
            <para>
            Specifies the capability to enable. Symbolic constants GL_COLOR_ARRAY, GL_EDGE_FLAG_ARRAY, GL_FOG_COORD_ARRAY, GL_INDEX_ARRAY, GL_NORMAL_ARRAY, GL_SECONDARY_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY, and GL_VERTEX_ARRAY are accepted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Enable(OpenTK.Graphics.IndexedEnableCap,System.UInt32)">
            <summary>
            Enable or disable server-side GL capabilities
            </summary>
            <param name="cap">
            <para>
            Specifies a symbolic constant indicating a GL capability.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Enable(OpenTK.Graphics.IndexedEnableCap,System.Int32)">
            <summary>
            Enable or disable server-side GL capabilities
            </summary>
            <param name="cap">
            <para>
            Specifies a symbolic constant indicating a GL capability.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EnableVertexAttribArray(System.Int32)">
            <summary>
            Enable or disable a generic vertex attribute array
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be enabled or disabled.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EnableVertexAttribArray(System.UInt32)">
            <summary>
            Enable or disable a generic vertex attribute array
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be enabled or disabled.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord1(System.Double)">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord1(System.Double*)">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord1(System.Single)">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord1(System.Single*)">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord2(System.Double,System.Double)">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord2(System.Double*)">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord2(System.Double@)">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord2(System.Double[])">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord2(System.Single,System.Single)">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord2(System.Single*)">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord2(System.Single[])">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalCoord2(System.Single@)">
            <summary>
            Evaluate enabled one- and two-dimensional maps
            </summary>
            <param name="u">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap1 or glMap2 command.
            </para>
            </param>
            <param name="v">
            <para>
            Specifies a value that is the domain coordinate to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalMesh1(OpenTK.Graphics.MeshMode1,System.Int32,System.Int32)">
            <summary>
            Compute a one- or two-dimensional grid of points or lines
            </summary>
            <param name="mode">
            <para>
            In glEvalMesh1, specifies whether to compute a one-dimensional mesh of points or lines. Symbolic constants GL_POINT and GL_LINE are accepted.
            </para>
            </param>
            <param name="i1">
            <para>
            Specify the first and last integer values for grid domain variable .
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalMesh2(OpenTK.Graphics.MeshMode2,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Compute a one- or two-dimensional grid of points or lines
            </summary>
            <param name="mode">
            <para>
            In glEvalMesh1, specifies whether to compute a one-dimensional mesh of points or lines. Symbolic constants GL_POINT and GL_LINE are accepted.
            </para>
            </param>
            <param name="i1">
            <para>
            Specify the first and last integer values for grid domain variable .
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalPoint1(System.Int32)">
            <summary>
            Generate and evaluate a single point in a mesh
            </summary>
            <param name="i">
            <para>
            Specifies the integer value for grid domain variable .
            </para>
            </param>
            <param name="j">
            <para>
            Specifies the integer value for grid domain variable (glEvalPoint2 only).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.EvalPoint2(System.Int32,System.Int32)">
            <summary>
            Generate and evaluate a single point in a mesh
            </summary>
            <param name="i">
            <para>
            Specifies the integer value for grid domain variable .
            </para>
            </param>
            <param name="j">
            <para>
            Specifies the integer value for grid domain variable (glEvalPoint2 only).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FeedbackBuffer(System.Int32,OpenTK.Graphics.FeedbackType,System.Single[])">
            <summary>
            Controls feedback mode
            </summary>
            <param name="size">
            <para>
            Specifies the maximum number of values that can be written into buffer.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies a symbolic constant that describes the information that will be returned for each vertex. GL_2D, GL_3D, GL_3D_COLOR, GL_3D_COLOR_TEXTURE, and GL_4D_COLOR_TEXTURE are accepted.
            </para>
            </param>
            <param name="buffer">
            <para>
            Returns the feedback data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FeedbackBuffer(System.Int32,OpenTK.Graphics.FeedbackType,System.Single*)">
            <summary>
            Controls feedback mode
            </summary>
            <param name="size">
            <para>
            Specifies the maximum number of values that can be written into buffer.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies a symbolic constant that describes the information that will be returned for each vertex. GL_2D, GL_3D, GL_3D_COLOR, GL_3D_COLOR_TEXTURE, and GL_4D_COLOR_TEXTURE are accepted.
            </para>
            </param>
            <param name="buffer">
            <para>
            Returns the feedback data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FeedbackBuffer(System.Int32,OpenTK.Graphics.FeedbackType,System.Single@)">
            <summary>
            Controls feedback mode
            </summary>
            <param name="size">
            <para>
            Specifies the maximum number of values that can be written into buffer.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies a symbolic constant that describes the information that will be returned for each vertex. GL_2D, GL_3D, GL_3D_COLOR, GL_3D_COLOR_TEXTURE, and GL_4D_COLOR_TEXTURE are accepted.
            </para>
            </param>
            <param name="buffer">
            <para>
            Returns the feedback data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Finish">
            <summary>
            Block until all GL execution is complete
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GL.Flush">
            <summary>
            Force execution of GL commands in finite time
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GL.FogCoord(System.Double)">
            <summary>
            Set the current fog coordinates
            </summary>
            <param name="coord">
            <para>
            Specify the fog distance.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FogCoord(System.Double*)">
            <summary>
            Set the current fog coordinates
            </summary>
            <param name="coord">
            <para>
            Specify the fog distance.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FogCoord(System.Single)">
            <summary>
            Set the current fog coordinates
            </summary>
            <param name="coord">
            <para>
            Specify the fog distance.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FogCoord(System.Single*)">
            <summary>
            Set the current fog coordinates
            </summary>
            <param name="coord">
            <para>
            Specify the fog distance.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FogCoordPointer``1(OpenTK.Graphics.FogPointerType,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of fog coordinates
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FogCoordPointer``1(OpenTK.Graphics.FogPointerType,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of fog coordinates
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FogCoordPointer``1(OpenTK.Graphics.FogPointerType,System.Int32,``0@)">
            <summary>
            Define an array of fog coordinates
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FogCoordPointer``1(OpenTK.Graphics.FogPointerType,System.Int32,``0[])">
            <summary>
            Define an array of fog coordinates
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FogCoordPointer(OpenTK.Graphics.FogPointerType,System.Int32,System.IntPtr)">
            <summary>
            Define an array of fog coordinates
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Fog(OpenTK.Graphics.FogParameter,System.Single)">
            <summary>
            Specify fog parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued fog parameter. GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Fog(OpenTK.Graphics.FogParameter,System.Single[])">
            <summary>
            Specify fog parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued fog parameter. GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Fog(OpenTK.Graphics.FogParameter,System.Single*)">
            <summary>
            Specify fog parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued fog parameter. GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Fog(OpenTK.Graphics.FogParameter,System.Int32)">
            <summary>
            Specify fog parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued fog parameter. GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Fog(OpenTK.Graphics.FogParameter,System.Int32[])">
            <summary>
            Specify fog parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued fog parameter. GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Fog(OpenTK.Graphics.FogParameter,System.Int32*)">
            <summary>
            Specify fog parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued fog parameter. GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.FrontFace(OpenTK.Graphics.FrontFaceDirection)">
            <summary>
            Define front- and back-facing polygons
            </summary>
            <param name="mode">
            <para>
            Specifies the orientation of front-facing polygons. GL_CW and GL_CCW are accepted. The initial value is GL_CCW.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Frustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Multiply the current matrix by a perspective matrix
            </summary>
            <param name="left">
            <para>
            Specify the coordinates for the left and right vertical clipping planes.
            </para>
            </param>
            <param name="bottom">
            <para>
            Specify the coordinates for the bottom and top horizontal clipping planes.
            </para>
            </param>
            <param name="nearVal">
            <para>
            Specify the distances to the near and far depth clipping planes. Both distances must be positive.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenBuffers(System.Int32,System.Int32*)">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenBuffers(System.Int32,System.UInt32*)">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenBuffers(System.Int32,System.Int32@)">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenBuffers(System.Int32,System.Int32[])">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenBuffers(System.Int32,System.UInt32[])">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenBuffers(System.Int32,System.UInt32@)">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenLists(System.Int32)">
            <summary>
            Generate a contiguous set of empty display lists
            </summary>
            <param name="range">
            <para>
            Specifies the number of contiguous empty display lists to be generated.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenQueries(System.Int32,System.UInt32@)">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenQueries(System.Int32,System.UInt32[])">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenQueries(System.Int32,System.Int32@)">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenQueries(System.Int32,System.Int32*)">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenQueries(System.Int32,System.Int32[])">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenQueries(System.Int32,System.UInt32*)">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenTextures(System.Int32,System.UInt32@)">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenTextures(System.Int32,System.Int32[])">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenTextures(System.Int32,System.UInt32[])">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenTextures(System.Int32,System.Int32*)">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenTextures(System.Int32,System.UInt32*)">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GenTextures(System.Int32,System.Int32@)">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetActiveAttrib(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,OpenTK.Graphics.ActiveAttribType@,System.Text.StringBuilder)">
            <summary>
            Returns information about an active attribute variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the attribute variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the attribute variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the attribute variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the attribute variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetActiveAttrib(System.Int32,System.Int32,System.Int32,System.Int32*,System.Int32*,OpenTK.Graphics.ActiveAttribType*,System.Text.StringBuilder)">
            <summary>
            Returns information about an active attribute variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the attribute variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the attribute variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the attribute variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the attribute variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetActiveAttrib(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,OpenTK.Graphics.ActiveAttribType*,System.Text.StringBuilder)">
            <summary>
            Returns information about an active attribute variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the attribute variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the attribute variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the attribute variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the attribute variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetActiveAttrib(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,OpenTK.Graphics.ActiveAttribType@,System.Text.StringBuilder)">
            <summary>
            Returns information about an active attribute variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the attribute variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the attribute variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the attribute variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the attribute variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetActiveUniform(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,OpenTK.Graphics.ActiveUniformType@,System.Text.StringBuilder)">
            <summary>
            Returns information about an active uniform variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the uniform variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the uniform variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the uniform variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetActiveUniform(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,OpenTK.Graphics.ActiveUniformType@,System.Text.StringBuilder)">
            <summary>
            Returns information about an active uniform variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the uniform variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the uniform variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the uniform variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetActiveUniform(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,OpenTK.Graphics.ActiveUniformType*,System.Text.StringBuilder)">
            <summary>
            Returns information about an active uniform variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the uniform variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the uniform variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the uniform variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetActiveUniform(System.Int32,System.Int32,System.Int32,System.Int32*,System.Int32*,OpenTK.Graphics.ActiveUniformType*,System.Text.StringBuilder)">
            <summary>
            Returns information about an active uniform variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the uniform variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the uniform variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the uniform variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetAttachedShaders(System.UInt32,System.Int32,System.Int32*,System.UInt32[])">
            <summary>
            Returns the handles of the shader objects attached to a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="maxCount">
            <para>
            Specifies the size of the array for storing the returned object names.
            </para>
            </param>
            <param name="count">
            <para>
            Returns the number of names actually returned in objects.
            </para>
            </param>
            <param name="shaders">
            <para>
            Specifies an array that is used to return the names of attached shader objects.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetAttachedShaders(System.Int32,System.Int32,System.Int32*,System.Int32*)">
            <summary>
            Returns the handles of the shader objects attached to a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="maxCount">
            <para>
            Specifies the size of the array for storing the returned object names.
            </para>
            </param>
            <param name="count">
            <para>
            Returns the number of names actually returned in objects.
            </para>
            </param>
            <param name="shaders">
            <para>
            Specifies an array that is used to return the names of attached shader objects.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetAttachedShaders(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the handles of the shader objects attached to a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="maxCount">
            <para>
            Specifies the size of the array for storing the returned object names.
            </para>
            </param>
            <param name="count">
            <para>
            Returns the number of names actually returned in objects.
            </para>
            </param>
            <param name="shaders">
            <para>
            Specifies an array that is used to return the names of attached shader objects.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetAttachedShaders(System.UInt32,System.Int32,System.Int32@,System.UInt32@)">
            <summary>
            Returns the handles of the shader objects attached to a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="maxCount">
            <para>
            Specifies the size of the array for storing the returned object names.
            </para>
            </param>
            <param name="count">
            <para>
            Returns the number of names actually returned in objects.
            </para>
            </param>
            <param name="shaders">
            <para>
            Specifies an array that is used to return the names of attached shader objects.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetAttachedShaders(System.UInt32,System.Int32,System.Int32*,System.UInt32*)">
            <summary>
            Returns the handles of the shader objects attached to a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="maxCount">
            <para>
            Specifies the size of the array for storing the returned object names.
            </para>
            </param>
            <param name="count">
            <para>
            Returns the number of names actually returned in objects.
            </para>
            </param>
            <param name="shaders">
            <para>
            Specifies an array that is used to return the names of attached shader objects.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetAttachedShaders(System.Int32,System.Int32,System.Int32*,System.Int32[])">
            <summary>
            Returns the handles of the shader objects attached to a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="maxCount">
            <para>
            Specifies the size of the array for storing the returned object names.
            </para>
            </param>
            <param name="count">
            <para>
            Returns the number of names actually returned in objects.
            </para>
            </param>
            <param name="shaders">
            <para>
            Specifies an array that is used to return the names of attached shader objects.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetAttribLocation(System.Int32,System.String)">
            <summary>
            Returns the location of an attribute variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="name">
            <para>
            Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetAttribLocation(System.UInt32,System.String)">
            <summary>
            Returns the location of an attribute variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="name">
            <para>
            Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferParameter(OpenTK.Graphics.BufferTarget,OpenTK.Graphics.BufferParameterName,System.Int32[])">
            <summary>
            Return parameters of a buffer object
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="value">
            <para>
            Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the requested parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferParameter(OpenTK.Graphics.BufferTarget,OpenTK.Graphics.BufferParameterName,System.Int32*)">
            <summary>
            Return parameters of a buffer object
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="value">
            <para>
            Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the requested parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferParameter(OpenTK.Graphics.BufferTarget,OpenTK.Graphics.BufferParameterName,System.Int32@)">
            <summary>
            Return parameters of a buffer object
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="value">
            <para>
            Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the requested parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferPointer``1(OpenTK.Graphics.BufferTarget,OpenTK.Graphics.BufferPointer,``0[])">
            <summary>
            Return the pointer to a mapped buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the pointer value specified by pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferPointer``1(OpenTK.Graphics.BufferTarget,OpenTK.Graphics.BufferPointer,``0@)">
            <summary>
            Return the pointer to a mapped buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the pointer value specified by pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferPointer``1(OpenTK.Graphics.BufferTarget,OpenTK.Graphics.BufferPointer,``0[0:,0:])">
            <summary>
            Return the pointer to a mapped buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the pointer value specified by pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferPointer``1(OpenTK.Graphics.BufferTarget,OpenTK.Graphics.BufferPointer,``0[0:,0:,0:])">
            <summary>
            Return the pointer to a mapped buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the pointer value specified by pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferPointer(OpenTK.Graphics.BufferTarget,OpenTK.Graphics.BufferPointer,System.IntPtr)">
            <summary>
            Return the pointer to a mapped buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the pointer value specified by pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferSubData(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Returns a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being returned.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the location where buffer object data is returned.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferSubData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,``0@)">
            <summary>
            Returns a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being returned.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the location where buffer object data is returned.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferSubData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,``0[0:,0:])">
            <summary>
            Returns a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being returned.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the location where buffer object data is returned.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferSubData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,``0[])">
            <summary>
            Returns a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being returned.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the location where buffer object data is returned.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetBufferSubData``1(OpenTK.Graphics.BufferTarget,System.IntPtr,System.IntPtr,``0[0:,0:,0:])">
            <summary>
            Returns a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being returned.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the location where buffer object data is returned.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetClipPlane(OpenTK.Graphics.ClipPlaneName,System.Double[])">
            <summary>
            Return the coefficients of the specified clipping plane
            </summary>
            <param name="plane">
            <para>
            Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form GL_CLIP_PLANE where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.
            </para>
            </param>
            <param name="equation">
            <para>
            Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetClipPlane(OpenTK.Graphics.ClipPlaneName,System.Double*)">
            <summary>
            Return the coefficients of the specified clipping plane
            </summary>
            <param name="plane">
            <para>
            Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form GL_CLIP_PLANE where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.
            </para>
            </param>
            <param name="equation">
            <para>
            Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetClipPlane(OpenTK.Graphics.ClipPlaneName,System.Double@)">
            <summary>
            Return the coefficients of the specified clipping plane
            </summary>
            <param name="plane">
            <para>
            Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form GL_CLIP_PLANE where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.
            </para>
            </param>
            <param name="equation">
            <para>
            Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTable(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Single*)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Single@)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Single[])">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Int32[])">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Int32*)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Int32@)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetCompressedTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,``0@)">
            <summary>
            Return a compressed texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="lod">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the compressed texture image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetCompressedTexImage(OpenTK.Graphics.TextureTarget,System.Int32,System.IntPtr)">
            <summary>
            Return a compressed texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="lod">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the compressed texture image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetCompressedTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,``0[])">
            <summary>
            Return a compressed texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="lod">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the compressed texture image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetCompressedTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,``0[0:,0:])">
            <summary>
            Return a compressed texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="lod">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the compressed texture image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetCompressedTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,``0[0:,0:,0:])">
            <summary>
            Return a compressed texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="lod">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the compressed texture image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionFilter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Get current 1D or 2D convolution filter kernel
            </summary>
            <param name="target">
            <para>
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="image">
            <para>
            Pointer to storage for the output image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionFilter``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Get current 1D or 2D convolution filter kernel
            </summary>
            <param name="target">
            <para>
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="image">
            <para>
            Pointer to storage for the output image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionFilter``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Get current 1D or 2D convolution filter kernel
            </summary>
            <param name="target">
            <para>
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="image">
            <para>
            Pointer to storage for the output image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionFilter``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Get current 1D or 2D convolution filter kernel
            </summary>
            <param name="target">
            <para>
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="image">
            <para>
            Pointer to storage for the output image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionFilter``1(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Get current 1D or 2D convolution filter kernel
            </summary>
            <param name="target">
            <para>
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="image">
            <para>
            Pointer to storage for the output image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.Version12Deprecated,System.Single*)">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.Version12Deprecated,System.Single@)">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.Version12Deprecated,System.Single[])">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.Version12Deprecated,System.Int32@)">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.Version12Deprecated,System.Int32[])">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetConvolutionParameter(OpenTK.Graphics.ConvolutionTarget,OpenTK.Graphics.Version12Deprecated,System.Int32*)">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetError">
            <summary>
            Return error information
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogram``1(OpenTK.Graphics.Version12Deprecated,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Get histogram table
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
            </para>
            </param>
            <param name="format">
            <para>
            The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned histogram table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogram``1(OpenTK.Graphics.Version12Deprecated,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Get histogram table
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
            </para>
            </param>
            <param name="format">
            <para>
            The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned histogram table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogram``1(OpenTK.Graphics.Version12Deprecated,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Get histogram table
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
            </para>
            </param>
            <param name="format">
            <para>
            The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned histogram table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogram``1(OpenTK.Graphics.Version12Deprecated,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Get histogram table
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
            </para>
            </param>
            <param name="format">
            <para>
            The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned histogram table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogram(OpenTK.Graphics.Version12Deprecated,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Get histogram table
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
            </para>
            </param>
            <param name="format">
            <para>
            The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned histogram table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogramParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Single@)">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogramParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Single*)">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogramParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Single[])">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogramParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Int32[])">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogramParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Int32*)">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetHistogramParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Int32@)">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetLight(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Single*)">
            <summary>
            Return light source parameter values
            </summary>
            <param name="light">
            <para>
            Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT where ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a light source parameter for light. Accepted symbolic names are GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetLight(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Single@)">
            <summary>
            Return light source parameter values
            </summary>
            <param name="light">
            <para>
            Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT where ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a light source parameter for light. Accepted symbolic names are GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetLight(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Single[])">
            <summary>
            Return light source parameter values
            </summary>
            <param name="light">
            <para>
            Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT where ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a light source parameter for light. Accepted symbolic names are GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetLight(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Int32*)">
            <summary>
            Return light source parameter values
            </summary>
            <param name="light">
            <para>
            Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT where ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a light source parameter for light. Accepted symbolic names are GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetLight(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Int32@)">
            <summary>
            Return light source parameter values
            </summary>
            <param name="light">
            <para>
            Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT where ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a light source parameter for light. Accepted symbolic names are GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetLight(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Int32[])">
            <summary>
            Return light source parameter values
            </summary>
            <param name="light">
            <para>
            Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT where ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a light source parameter for light. Accepted symbolic names are GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMap(OpenTK.Graphics.MapTarget,OpenTK.Graphics.GetMapQuery,System.Double*)">
            <summary>
            Return evaluator parameters
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of a map. Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.
            </para>
            </param>
            <param name="query">
            <para>
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted.
            </para>
            </param>
            <param name="v">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMap(OpenTK.Graphics.MapTarget,OpenTK.Graphics.GetMapQuery,System.Double@)">
            <summary>
            Return evaluator parameters
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of a map. Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.
            </para>
            </param>
            <param name="query">
            <para>
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted.
            </para>
            </param>
            <param name="v">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMap(OpenTK.Graphics.MapTarget,OpenTK.Graphics.GetMapQuery,System.Double[])">
            <summary>
            Return evaluator parameters
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of a map. Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.
            </para>
            </param>
            <param name="query">
            <para>
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted.
            </para>
            </param>
            <param name="v">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMap(OpenTK.Graphics.MapTarget,OpenTK.Graphics.GetMapQuery,System.Single*)">
            <summary>
            Return evaluator parameters
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of a map. Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.
            </para>
            </param>
            <param name="query">
            <para>
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted.
            </para>
            </param>
            <param name="v">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMap(OpenTK.Graphics.MapTarget,OpenTK.Graphics.GetMapQuery,System.Single@)">
            <summary>
            Return evaluator parameters
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of a map. Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.
            </para>
            </param>
            <param name="query">
            <para>
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted.
            </para>
            </param>
            <param name="v">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMap(OpenTK.Graphics.MapTarget,OpenTK.Graphics.GetMapQuery,System.Single[])">
            <summary>
            Return evaluator parameters
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of a map. Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.
            </para>
            </param>
            <param name="query">
            <para>
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted.
            </para>
            </param>
            <param name="v">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMap(OpenTK.Graphics.MapTarget,OpenTK.Graphics.GetMapQuery,System.Int32*)">
            <summary>
            Return evaluator parameters
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of a map. Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.
            </para>
            </param>
            <param name="query">
            <para>
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted.
            </para>
            </param>
            <param name="v">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMap(OpenTK.Graphics.MapTarget,OpenTK.Graphics.GetMapQuery,System.Int32[])">
            <summary>
            Return evaluator parameters
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of a map. Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.
            </para>
            </param>
            <param name="query">
            <para>
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted.
            </para>
            </param>
            <param name="v">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMap(OpenTK.Graphics.MapTarget,OpenTK.Graphics.GetMapQuery,System.Int32@)">
            <summary>
            Return evaluator parameters
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of a map. Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.
            </para>
            </param>
            <param name="query">
            <para>
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted.
            </para>
            </param>
            <param name="v">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMaterial(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Single*)">
            <summary>
            Return material parameters
            </summary>
            <param name="face">
            <para>
            Specifies which of the two materials is being queried. GL_FRONT or GL_BACK are accepted, representing the front and back materials, respectively.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the material parameter to return. GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, and GL_COLOR_INDEXES are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMaterial(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Single@)">
            <summary>
            Return material parameters
            </summary>
            <param name="face">
            <para>
            Specifies which of the two materials is being queried. GL_FRONT or GL_BACK are accepted, representing the front and back materials, respectively.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the material parameter to return. GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, and GL_COLOR_INDEXES are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMaterial(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Single[])">
            <summary>
            Return material parameters
            </summary>
            <param name="face">
            <para>
            Specifies which of the two materials is being queried. GL_FRONT or GL_BACK are accepted, representing the front and back materials, respectively.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the material parameter to return. GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, and GL_COLOR_INDEXES are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMaterial(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Int32*)">
            <summary>
            Return material parameters
            </summary>
            <param name="face">
            <para>
            Specifies which of the two materials is being queried. GL_FRONT or GL_BACK are accepted, representing the front and back materials, respectively.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the material parameter to return. GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, and GL_COLOR_INDEXES are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMaterial(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Int32@)">
            <summary>
            Return material parameters
            </summary>
            <param name="face">
            <para>
            Specifies which of the two materials is being queried. GL_FRONT or GL_BACK are accepted, representing the front and back materials, respectively.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the material parameter to return. GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, and GL_COLOR_INDEXES are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMaterial(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Int32[])">
            <summary>
            Return material parameters
            </summary>
            <param name="face">
            <para>
            Specifies which of the two materials is being queried. GL_FRONT or GL_BACK are accepted, representing the front and back materials, respectively.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the material parameter to return. GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, and GL_COLOR_INDEXES are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmax``1(OpenTK.Graphics.Version12Deprecated,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Get minimum and maximum pixel values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="types">
            <para>
            The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmax(OpenTK.Graphics.Version12Deprecated,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Get minimum and maximum pixel values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="types">
            <para>
            The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmax``1(OpenTK.Graphics.Version12Deprecated,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Get minimum and maximum pixel values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="types">
            <para>
            The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmax``1(OpenTK.Graphics.Version12Deprecated,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Get minimum and maximum pixel values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="types">
            <para>
            The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmax``1(OpenTK.Graphics.Version12Deprecated,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Get minimum and maximum pixel values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="types">
            <para>
            The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmaxParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Single[])">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmaxParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Single*)">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmaxParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Single@)">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmaxParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Int32[])">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmaxParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Int32@)">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetMinmaxParameter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.Version12Deprecated,System.Int32*)">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.Single@)">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.Single[])">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.Single*)">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.UInt32[])">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.UInt32*)">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.Int32[])">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.Int32*)">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.Int32@)">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.UInt32@)">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.UInt16*)">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.Int16*)">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.UInt16[])">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.Int16@)">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.Int16[])">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPixelMap(OpenTK.Graphics.PixelMap,System.UInt16@)">
            <summary>
            Return the specified pixel map
            </summary>
            <param name="map">
            <para>
            Specifies the name of the pixel map to return. Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel map contents.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPointer``1(OpenTK.Graphics.GetPointervPName,``0[0:,0:,0:])">
            <summary>
            Return the address of the specified pointer
            </summary>
            <param name="pname">
            <para>
            Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the pointer value specified by pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPointer``1(OpenTK.Graphics.GetPointervPName,``0[])">
            <summary>
            Return the address of the specified pointer
            </summary>
            <param name="pname">
            <para>
            Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the pointer value specified by pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPointer``1(OpenTK.Graphics.GetPointervPName,``0[0:,0:])">
            <summary>
            Return the address of the specified pointer
            </summary>
            <param name="pname">
            <para>
            Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the pointer value specified by pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPointer``1(OpenTK.Graphics.GetPointervPName,``0@)">
            <summary>
            Return the address of the specified pointer
            </summary>
            <param name="pname">
            <para>
            Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the pointer value specified by pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPointer(OpenTK.Graphics.GetPointervPName,System.IntPtr)">
            <summary>
            Return the address of the specified pointer
            </summary>
            <param name="pname">
            <para>
            Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the pointer value specified by pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPolygonStipple(System.Byte[])">
            <summary>
            Return the polygon stipple pattern
            </summary>
            <param name="pattern">
            <para>
            Returns the stipple pattern. The initial value is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPolygonStipple(System.Byte*)">
            <summary>
            Return the polygon stipple pattern
            </summary>
            <param name="pattern">
            <para>
            Returns the stipple pattern. The initial value is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetPolygonStipple(System.Byte@)">
            <summary>
            Return the polygon stipple pattern
            </summary>
            <param name="pattern">
            <para>
            Returns the stipple pattern. The initial value is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetProgramInfoLog(System.Int32,System.Int32,System.Int32@,System.Text.StringBuilder)">
            <summary>
            Returns the information log for a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object whose information log is to be queried.
            </para>
            </param>
            <param name="maxLength">
            <para>
            Specifies the size of the character buffer for storing the returned information log.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </para>
            </param>
            <param name="infoLog">
            <para>
            Specifies an array of characters that is used to return the information log.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetProgramInfoLog(System.Int32,System.Int32,System.Int32*,System.Text.StringBuilder)">
            <summary>
            Returns the information log for a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object whose information log is to be queried.
            </para>
            </param>
            <param name="maxLength">
            <para>
            Specifies the size of the character buffer for storing the returned information log.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </para>
            </param>
            <param name="infoLog">
            <para>
            Specifies an array of characters that is used to return the information log.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetProgramInfoLog(System.UInt32,System.Int32,System.Int32@,System.Text.StringBuilder)">
            <summary>
            Returns the information log for a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object whose information log is to be queried.
            </para>
            </param>
            <param name="maxLength">
            <para>
            Specifies the size of the character buffer for storing the returned information log.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </para>
            </param>
            <param name="infoLog">
            <para>
            Specifies an array of characters that is used to return the information log.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetProgramInfoLog(System.UInt32,System.Int32,System.Int32*,System.Text.StringBuilder)">
            <summary>
            Returns the information log for a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object whose information log is to be queried.
            </para>
            </param>
            <param name="maxLength">
            <para>
            Specifies the size of the character buffer for storing the returned information log.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </para>
            </param>
            <param name="infoLog">
            <para>
            Specifies an array of characters that is used to return the information log.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetProgram(System.UInt32,OpenTK.Graphics.ProgramParameter,System.Int32@)">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetProgram(System.Int32,OpenTK.Graphics.ProgramParameter,System.Int32@)">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetProgram(System.UInt32,OpenTK.Graphics.ProgramParameter,System.Int32*)">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetProgram(System.Int32,OpenTK.Graphics.ProgramParameter,System.Int32*)">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetProgram(System.Int32,OpenTK.Graphics.ProgramParameter,System.Int32[])">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetProgram(System.UInt32,OpenTK.Graphics.ProgramParameter,System.Int32[])">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQuery(OpenTK.Graphics.QueryTarget,OpenTK.Graphics.GetQueryParam,System.Int32*)">
            <summary>
            Return parameters of a query object target
            </summary>
            <param name="target">
            <para>
            Specifies a query object target. Must be GL_SAMPLES_PASSED.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQuery(OpenTK.Graphics.QueryTarget,OpenTK.Graphics.GetQueryParam,System.Int32[])">
            <summary>
            Return parameters of a query object target
            </summary>
            <param name="target">
            <para>
            Specifies a query object target. Must be GL_SAMPLES_PASSED.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQuery(OpenTK.Graphics.QueryTarget,OpenTK.Graphics.GetQueryParam,System.Int32@)">
            <summary>
            Return parameters of a query object target
            </summary>
            <param name="target">
            <para>
            Specifies a query object target. Must be GL_SAMPLES_PASSED.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQueryObject(System.UInt32,OpenTK.Graphics.GetQueryObjectParam,System.Int32*)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQueryObject(System.UInt32,OpenTK.Graphics.GetQueryObjectParam,System.Int32[])">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQueryObject(System.UInt32,OpenTK.Graphics.GetQueryObjectParam,System.Int32@)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQueryObject(System.Int32,OpenTK.Graphics.GetQueryObjectParam,System.Int32@)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQueryObject(System.Int32,OpenTK.Graphics.GetQueryObjectParam,System.Int32*)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQueryObject(System.Int32,OpenTK.Graphics.GetQueryObjectParam,System.Int32[])">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQueryObject(System.UInt32,OpenTK.Graphics.GetQueryObjectParam,System.UInt32*)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQueryObject(System.UInt32,OpenTK.Graphics.GetQueryObjectParam,System.UInt32@)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetQueryObject(System.UInt32,OpenTK.Graphics.GetQueryObjectParam,System.UInt32[])">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``2(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[0:,0:],``1[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``2(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[0:,0:,0:],``1[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``2(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[],``1[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``2(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0@,``1[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``3(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:],``1[0:,0:,0:],``2[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``1(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr,``0@)">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``3(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:],``1[0:,0:,0:],``2[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``3(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@,``1[0:,0:,0:],``2[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``3(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[],``1[0:,0:,0:],``2[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``1(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr,``0[0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``1(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr,``0[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetSeparableFilter``1(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr,``0[])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShaderInfoLog(System.Int32,System.Int32,System.Int32@,System.Text.StringBuilder)">
            <summary>
            Returns the information log for a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object whose information log is to be queried.
            </para>
            </param>
            <param name="maxLength">
            <para>
            Specifies the size of the character buffer for storing the returned information log.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </para>
            </param>
            <param name="infoLog">
            <para>
            Specifies an array of characters that is used to return the information log.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShaderInfoLog(System.UInt32,System.Int32,System.Int32@,System.Text.StringBuilder)">
            <summary>
            Returns the information log for a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object whose information log is to be queried.
            </para>
            </param>
            <param name="maxLength">
            <para>
            Specifies the size of the character buffer for storing the returned information log.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </para>
            </param>
            <param name="infoLog">
            <para>
            Specifies an array of characters that is used to return the information log.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShaderInfoLog(System.UInt32,System.Int32,System.Int32*,System.Text.StringBuilder)">
            <summary>
            Returns the information log for a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object whose information log is to be queried.
            </para>
            </param>
            <param name="maxLength">
            <para>
            Specifies the size of the character buffer for storing the returned information log.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </para>
            </param>
            <param name="infoLog">
            <para>
            Specifies an array of characters that is used to return the information log.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShaderInfoLog(System.Int32,System.Int32,System.Int32*,System.Text.StringBuilder)">
            <summary>
            Returns the information log for a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object whose information log is to be queried.
            </para>
            </param>
            <param name="maxLength">
            <para>
            Specifies the size of the character buffer for storing the returned information log.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </para>
            </param>
            <param name="infoLog">
            <para>
            Specifies an array of characters that is used to return the information log.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShader(System.UInt32,OpenTK.Graphics.ShaderParameter,System.Int32@)">
            <summary>
            Returns a parameter from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShader(System.Int32,OpenTK.Graphics.ShaderParameter,System.Int32@)">
            <summary>
            Returns a parameter from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShader(System.UInt32,OpenTK.Graphics.ShaderParameter,System.Int32[])">
            <summary>
            Returns a parameter from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShader(System.Int32,OpenTK.Graphics.ShaderParameter,System.Int32[])">
            <summary>
            Returns a parameter from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShader(System.Int32,OpenTK.Graphics.ShaderParameter,System.Int32*)">
            <summary>
            Returns a parameter from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShader(System.UInt32,OpenTK.Graphics.ShaderParameter,System.Int32*)">
            <summary>
            Returns a parameter from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShaderSource(System.UInt32,System.Int32,System.Int32@,System.Text.StringBuilder[])">
            <summary>
            Returns the source code string from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the size of the character buffer for storing the returned source code string.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in source (excluding the null terminator).
            </para>
            </param>
            <param name="source">
            <para>
            Specifies an array of characters that is used to return the source code string.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShaderSource(System.Int32,System.Int32,System.Int32@,System.Text.StringBuilder[])">
            <summary>
            Returns the source code string from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the size of the character buffer for storing the returned source code string.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in source (excluding the null terminator).
            </para>
            </param>
            <param name="source">
            <para>
            Specifies an array of characters that is used to return the source code string.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShaderSource(System.UInt32,System.Int32,System.Int32*,System.Text.StringBuilder[])">
            <summary>
            Returns the source code string from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the size of the character buffer for storing the returned source code string.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in source (excluding the null terminator).
            </para>
            </param>
            <param name="source">
            <para>
            Specifies an array of characters that is used to return the source code string.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetShaderSource(System.Int32,System.Int32,System.Int32*,System.Text.StringBuilder[])">
            <summary>
            Returns the source code string from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the size of the character buffer for storing the returned source code string.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in source (excluding the null terminator).
            </para>
            </param>
            <param name="source">
            <para>
            Specifies an array of characters that is used to return the source code string.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetString(OpenTK.Graphics.StringName)">
            <summary>
            Return a string describing the current GL connection
            </summary>
            <param name="name">
            <para>
            Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, GL_SHADING_LANGUAGE_VERSION, or GL_EXTENSIONS.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetString(OpenTK.Graphics.StringName,System.Int32)">
            <summary>
            Return a string describing the current GL connection
            </summary>
            <param name="name">
            <para>
            Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, GL_SHADING_LANGUAGE_VERSION, or GL_EXTENSIONS.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetString(OpenTK.Graphics.StringName,System.UInt32)">
            <summary>
            Return a string describing the current GL connection
            </summary>
            <param name="name">
            <para>
            Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, GL_SHADING_LANGUAGE_VERSION, or GL_EXTENSIONS.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Single[])">
            <summary>
            Return texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL, or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture environment parameter. Accepted values are GL_TEXTURE_ENV_MODE, GL_TEXTURE_ENV_COLOR, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Single@)">
            <summary>
            Return texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL, or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture environment parameter. Accepted values are GL_TEXTURE_ENV_MODE, GL_TEXTURE_ENV_COLOR, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Single*)">
            <summary>
            Return texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL, or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture environment parameter. Accepted values are GL_TEXTURE_ENV_MODE, GL_TEXTURE_ENV_COLOR, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Int32@)">
            <summary>
            Return texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL, or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture environment parameter. Accepted values are GL_TEXTURE_ENV_MODE, GL_TEXTURE_ENV_COLOR, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Int32[])">
            <summary>
            Return texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL, or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture environment parameter. Accepted values are GL_TEXTURE_ENV_MODE, GL_TEXTURE_ENV_COLOR, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Int32*)">
            <summary>
            Return texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL, or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture environment parameter. Accepted values are GL_TEXTURE_ENV_MODE, GL_TEXTURE_ENV_COLOR, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Double*)">
            <summary>
            Return texture coordinate generation parameters
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the value(s) to be returned. Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: GL_OBJECT_PLANE or GL_EYE_PLANE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Double[])">
            <summary>
            Return texture coordinate generation parameters
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the value(s) to be returned. Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: GL_OBJECT_PLANE or GL_EYE_PLANE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Double@)">
            <summary>
            Return texture coordinate generation parameters
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the value(s) to be returned. Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: GL_OBJECT_PLANE or GL_EYE_PLANE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Single@)">
            <summary>
            Return texture coordinate generation parameters
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the value(s) to be returned. Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: GL_OBJECT_PLANE or GL_EYE_PLANE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Single*)">
            <summary>
            Return texture coordinate generation parameters
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the value(s) to be returned. Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: GL_OBJECT_PLANE or GL_EYE_PLANE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Single[])">
            <summary>
            Return texture coordinate generation parameters
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the value(s) to be returned. Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: GL_OBJECT_PLANE or GL_EYE_PLANE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Int32[])">
            <summary>
            Return texture coordinate generation parameters
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the value(s) to be returned. Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: GL_OBJECT_PLANE or GL_EYE_PLANE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Int32@)">
            <summary>
            Return texture coordinate generation parameters
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the value(s) to be returned. Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: GL_OBJECT_PLANE or GL_EYE_PLANE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Int32*)">
            <summary>
            Return texture coordinate generation parameters
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the value(s) to be returned. Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: GL_OBJECT_PLANE or GL_EYE_PLANE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexImage(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Return a texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies a pixel format for the returned data. The supported formats are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Return a texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies a pixel format for the returned data. The supported formats are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Return a texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies a pixel format for the returned data. The supported formats are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Return a texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies a pixel format for the returned data. The supported formats are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Return a texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies a pixel format for the returned data. The supported formats are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexLevelParameter(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.GetTextureParameter,System.Single[])">
            <summary>
            Return texture parameter values for a specific level of detail
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture, either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_BORDER, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_LUMINANCE_SIZE, GL_TEXTURE_INTENSITY_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, and GL_TEXTURE_COMPRESSED_IMAGE_SIZE are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexLevelParameter(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.GetTextureParameter,System.Single@)">
            <summary>
            Return texture parameter values for a specific level of detail
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture, either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_BORDER, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_LUMINANCE_SIZE, GL_TEXTURE_INTENSITY_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, and GL_TEXTURE_COMPRESSED_IMAGE_SIZE are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexLevelParameter(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.GetTextureParameter,System.Single*)">
            <summary>
            Return texture parameter values for a specific level of detail
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture, either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_BORDER, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_LUMINANCE_SIZE, GL_TEXTURE_INTENSITY_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, and GL_TEXTURE_COMPRESSED_IMAGE_SIZE are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexLevelParameter(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.GetTextureParameter,System.Int32[])">
            <summary>
            Return texture parameter values for a specific level of detail
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture, either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_BORDER, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_LUMINANCE_SIZE, GL_TEXTURE_INTENSITY_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, and GL_TEXTURE_COMPRESSED_IMAGE_SIZE are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexLevelParameter(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.GetTextureParameter,System.Int32*)">
            <summary>
            Return texture parameter values for a specific level of detail
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture, either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_BORDER, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_LUMINANCE_SIZE, GL_TEXTURE_INTENSITY_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, and GL_TEXTURE_COMPRESSED_IMAGE_SIZE are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexLevelParameter(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.GetTextureParameter,System.Int32@)">
            <summary>
            Return texture parameter values for a specific level of detail
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture, either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_BORDER, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_LUMINANCE_SIZE, GL_TEXTURE_INTENSITY_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, and GL_TEXTURE_COMPRESSED_IMAGE_SIZE are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.GetTextureParameter,System.Single*)">
            <summary>
            Return texture parameter values
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the texture parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.GetTextureParameter,System.Single@)">
            <summary>
            Return texture parameter values
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the texture parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.GetTextureParameter,System.Single[])">
            <summary>
            Return texture parameter values
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the texture parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.GetTextureParameter,System.Int32@)">
            <summary>
            Return texture parameter values
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the texture parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.GetTextureParameter,System.Int32*)">
            <summary>
            Return texture parameter values
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the texture parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetTexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.GetTextureParameter,System.Int32[])">
            <summary>
            Return texture parameter values
            </summary>
            <param name="target">
            <para>
            Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the texture parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.Int32,System.Int32,System.Single@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.UInt32,System.Int32,System.Single@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.UInt32,System.Int32,System.Single[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.UInt32,System.Int32,System.Single*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.Int32,System.Int32,System.Single*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.UInt32,System.Int32,System.Int32@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.UInt32,System.Int32,System.Int32[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.UInt32,System.Int32,System.Int32*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniformLocation(System.UInt32,System.String)">
            <summary>
            Returns the location of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="name">
            <para>
            Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniformLocation(System.Int32,System.String)">
            <summary>
            Returns the location of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="name">
            <para>
            Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.UInt32,System.Int32,System.UInt32*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.UInt32,System.Int32,System.UInt32@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetUniform(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameter,System.Double*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameter,System.Double[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameter,System.Double@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameter,System.Double*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameter,System.Double[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameter,System.Double@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameter,System.Single*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameter,System.Single[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameter,System.Single[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameter,System.Single*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameter,System.Single@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameter,System.Single@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameter,System.Int32*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameter,System.Int32*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameter,System.Int32@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameter,System.Int32[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameter,System.Int32[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameter,System.Int32@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttribPointer``1(System.Int32,OpenTK.Graphics.VertexAttribPointerType,``0[0:,0:])">
            <summary>
            Return the address of the specified generic vertex attribute pointer
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be returned.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </para>
            </param>
            <param name="pointer">
            <para>
            Returns the pointer value.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttribPointer``1(System.UInt32,OpenTK.Graphics.VertexAttribPointerType,``0[0:,0:])">
            <summary>
            Return the address of the specified generic vertex attribute pointer
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be returned.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </para>
            </param>
            <param name="pointer">
            <para>
            Returns the pointer value.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttribPointer``1(System.Int32,OpenTK.Graphics.VertexAttribPointerType,``0[0:,0:,0:])">
            <summary>
            Return the address of the specified generic vertex attribute pointer
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be returned.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </para>
            </param>
            <param name="pointer">
            <para>
            Returns the pointer value.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttribPointer``1(System.UInt32,OpenTK.Graphics.VertexAttribPointerType,``0[0:,0:,0:])">
            <summary>
            Return the address of the specified generic vertex attribute pointer
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be returned.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </para>
            </param>
            <param name="pointer">
            <para>
            Returns the pointer value.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttribPointer``1(System.Int32,OpenTK.Graphics.VertexAttribPointerType,``0[])">
            <summary>
            Return the address of the specified generic vertex attribute pointer
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be returned.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </para>
            </param>
            <param name="pointer">
            <para>
            Returns the pointer value.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttribPointer(System.UInt32,OpenTK.Graphics.VertexAttribPointerType,System.IntPtr)">
            <summary>
            Return the address of the specified generic vertex attribute pointer
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be returned.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </para>
            </param>
            <param name="pointer">
            <para>
            Returns the pointer value.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttribPointer(System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.IntPtr)">
            <summary>
            Return the address of the specified generic vertex attribute pointer
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be returned.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </para>
            </param>
            <param name="pointer">
            <para>
            Returns the pointer value.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttribPointer``1(System.UInt32,OpenTK.Graphics.VertexAttribPointerType,``0@)">
            <summary>
            Return the address of the specified generic vertex attribute pointer
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be returned.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </para>
            </param>
            <param name="pointer">
            <para>
            Returns the pointer value.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttribPointer``1(System.UInt32,OpenTK.Graphics.VertexAttribPointerType,``0[])">
            <summary>
            Return the address of the specified generic vertex attribute pointer
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be returned.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </para>
            </param>
            <param name="pointer">
            <para>
            Returns the pointer value.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetVertexAttribPointer``1(System.Int32,OpenTK.Graphics.VertexAttribPointerType,``0@)">
            <summary>
            Return the address of the specified generic vertex attribute pointer
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be returned.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </para>
            </param>
            <param name="pointer">
            <para>
            Returns the pointer value.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Hint(OpenTK.Graphics.HintTarget,OpenTK.Graphics.HintMode)">
            <summary>
            Specify implementation-specific hints
            </summary>
            <param name="target">
            <para>
            Specifies a symbolic constant indicating the behavior to be controlled. GL_FOG_HINT, GL_GENERATE_MIPMAP_HINT, GL_LINE_SMOOTH_HINT, GL_PERSPECTIVE_CORRECTION_HINT, GL_POINT_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT, and GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted.
            </para>
            </param>
            <param name="mode">
            <para>
            Specifies a symbolic constant indicating the desired behavior. GL_FASTEST, GL_NICEST, and GL_DONT_CARE are accepted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Histogram(OpenTK.Graphics.Version12Deprecated,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Boolean)">
            <summary>
            Define histogram table
            </summary>
            <param name="target">
            <para>
            The histogram whose parameters are to be set. Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the histogram table. Must be a power of 2.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The format of entries in the histogram table. Must be one of GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="sink">
            <para>
            If GL_TRUE, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If GL_FALSE, pixels will proceed to the minmax process after histogramming.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Index(System.Double)">
            <summary>
            Set the current color index
            </summary>
            <param name="c">
            <para>
            Specifies the new value for the current color index.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Index(System.Double*)">
            <summary>
            Set the current color index
            </summary>
            <param name="c">
            <para>
            Specifies the new value for the current color index.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Index(System.Single)">
            <summary>
            Set the current color index
            </summary>
            <param name="c">
            <para>
            Specifies the new value for the current color index.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Index(System.Single*)">
            <summary>
            Set the current color index
            </summary>
            <param name="c">
            <para>
            Specifies the new value for the current color index.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Index(System.Int32)">
            <summary>
            Set the current color index
            </summary>
            <param name="c">
            <para>
            Specifies the new value for the current color index.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Index(System.Int32*)">
            <summary>
            Set the current color index
            </summary>
            <param name="c">
            <para>
            Specifies the new value for the current color index.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IndexMask(System.UInt32)">
            <summary>
            Control the writing of individual bits in the color index buffers
            </summary>
            <param name="mask">
            <para>
            Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers. Initially, the mask is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IndexMask(System.Int32)">
            <summary>
            Control the writing of individual bits in the color index buffers
            </summary>
            <param name="mask">
            <para>
            Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers. Initially, the mask is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IndexPointer``1(OpenTK.Graphics.IndexPointerType,System.Int32,``0@)">
            <summary>
            Define an array of color indexes
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first index in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IndexPointer(OpenTK.Graphics.IndexPointerType,System.Int32,System.IntPtr)">
            <summary>
            Define an array of color indexes
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first index in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IndexPointer``1(OpenTK.Graphics.IndexPointerType,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of color indexes
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first index in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IndexPointer``1(OpenTK.Graphics.IndexPointerType,System.Int32,``0[])">
            <summary>
            Define an array of color indexes
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first index in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IndexPointer``1(OpenTK.Graphics.IndexPointerType,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of color indexes
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first index in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Index(System.Int16)">
            <summary>
            Set the current color index
            </summary>
            <param name="c">
            <para>
            Specifies the new value for the current color index.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Index(System.Int16*)">
            <summary>
            Set the current color index
            </summary>
            <param name="c">
            <para>
            Specifies the new value for the current color index.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Index(System.Byte)">
            <summary>
            Set the current color index
            </summary>
            <param name="c">
            <para>
            Specifies the new value for the current color index.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Index(System.Byte*)">
            <summary>
            Set the current color index
            </summary>
            <param name="c">
            <para>
            Specifies the new value for the current color index.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.InitNames">
            <summary>
            Initialize the name stack
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GL.InterleavedArrays``1(OpenTK.Graphics.InterleavedArrayFormat,System.Int32,``0[0:,0:])">
            <summary>
            Simultaneously specify and enable several interleaved arrays
            </summary>
            <param name="format">
            <para>
            Specifies the type of array to enable. Symbolic constants GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, GL_T2F_C4F_N3F_V3F, and GL_T4F_C4F_N3F_V4F are accepted.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the offset in bytes between each aggregate array element.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.InterleavedArrays``1(OpenTK.Graphics.InterleavedArrayFormat,System.Int32,``0[0:,0:,0:])">
            <summary>
            Simultaneously specify and enable several interleaved arrays
            </summary>
            <param name="format">
            <para>
            Specifies the type of array to enable. Symbolic constants GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, GL_T2F_C4F_N3F_V3F, and GL_T4F_C4F_N3F_V4F are accepted.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the offset in bytes between each aggregate array element.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.InterleavedArrays``1(OpenTK.Graphics.InterleavedArrayFormat,System.Int32,``0@)">
            <summary>
            Simultaneously specify and enable several interleaved arrays
            </summary>
            <param name="format">
            <para>
            Specifies the type of array to enable. Symbolic constants GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, GL_T2F_C4F_N3F_V3F, and GL_T4F_C4F_N3F_V4F are accepted.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the offset in bytes between each aggregate array element.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.InterleavedArrays``1(OpenTK.Graphics.InterleavedArrayFormat,System.Int32,``0[])">
            <summary>
            Simultaneously specify and enable several interleaved arrays
            </summary>
            <param name="format">
            <para>
            Specifies the type of array to enable. Symbolic constants GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, GL_T2F_C4F_N3F_V3F, and GL_T4F_C4F_N3F_V4F are accepted.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the offset in bytes between each aggregate array element.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.InterleavedArrays(OpenTK.Graphics.InterleavedArrayFormat,System.Int32,System.IntPtr)">
            <summary>
            Simultaneously specify and enable several interleaved arrays
            </summary>
            <param name="format">
            <para>
            Specifies the type of array to enable. Symbolic constants GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, GL_T2F_C4F_N3F_V3F, and GL_T4F_C4F_N3F_V4F are accepted.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the offset in bytes between each aggregate array element.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsBuffer(System.UInt32)">
            <summary>
            Determine if a name corresponds to a buffer object
            </summary>
            <param name="buffer">
            <para>
            Specifies a value that may be the name of a buffer object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsBuffer(System.Int32)">
            <summary>
            Determine if a name corresponds to a buffer object
            </summary>
            <param name="buffer">
            <para>
            Specifies a value that may be the name of a buffer object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsEnabled(OpenTK.Graphics.EnableCap)">
            <summary>
            Test whether a capability is enabled
            </summary>
            <param name="cap">
            <para>
            Specifies a symbolic constant indicating a GL capability.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsEnabled(OpenTK.Graphics.IndexedEnableCap,System.UInt32)">
            <summary>
            Test whether a capability is enabled
            </summary>
            <param name="cap">
            <para>
            Specifies a symbolic constant indicating a GL capability.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsEnabled(OpenTK.Graphics.IndexedEnableCap,System.Int32)">
            <summary>
            Test whether a capability is enabled
            </summary>
            <param name="cap">
            <para>
            Specifies a symbolic constant indicating a GL capability.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsList(System.Int32)">
            <summary>
            Determine if a name corresponds to a display list
            </summary>
            <param name="list">
            <para>
            Specifies a potential display list name.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsList(System.UInt32)">
            <summary>
            Determine if a name corresponds to a display list
            </summary>
            <param name="list">
            <para>
            Specifies a potential display list name.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsProgram(System.Int32)">
            <summary>
            Determines if a name corresponds to a program object
            </summary>
            <param name="program">
            <para>
            Specifies a potential program object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsProgram(System.UInt32)">
            <summary>
            Determines if a name corresponds to a program object
            </summary>
            <param name="program">
            <para>
            Specifies a potential program object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsQuery(System.UInt32)">
            <summary>
            Determine if a name corresponds to a query object
            </summary>
            <param name="id">
            <para>
            Specifies a value that may be the name of a query object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsQuery(System.Int32)">
            <summary>
            Determine if a name corresponds to a query object
            </summary>
            <param name="id">
            <para>
            Specifies a value that may be the name of a query object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsShader(System.UInt32)">
            <summary>
            Determines if a name corresponds to a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies a potential shader object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsShader(System.Int32)">
            <summary>
            Determines if a name corresponds to a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies a potential shader object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsTexture(System.UInt32)">
            <summary>
            Determine if a name corresponds to a texture
            </summary>
            <param name="texture">
            <para>
            Specifies a value that may be the name of a texture.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.IsTexture(System.Int32)">
            <summary>
            Determine if a name corresponds to a texture
            </summary>
            <param name="texture">
            <para>
            Specifies a value that may be the name of a texture.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Light(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Single)">
            <summary>
            Set light source parameters
            </summary>
            <param name="light">
            <para>
            Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT , where i ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a single-valued light source parameter for light. GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter pname of light source light will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Light(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Single*)">
            <summary>
            Set light source parameters
            </summary>
            <param name="light">
            <para>
            Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT , where i ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a single-valued light source parameter for light. GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter pname of light source light will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Light(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Single[])">
            <summary>
            Set light source parameters
            </summary>
            <param name="light">
            <para>
            Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT , where i ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a single-valued light source parameter for light. GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter pname of light source light will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Light(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Int32)">
            <summary>
            Set light source parameters
            </summary>
            <param name="light">
            <para>
            Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT , where i ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a single-valued light source parameter for light. GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter pname of light source light will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Light(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Int32[])">
            <summary>
            Set light source parameters
            </summary>
            <param name="light">
            <para>
            Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT , where i ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a single-valued light source parameter for light. GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter pname of light source light will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Light(OpenTK.Graphics.LightName,OpenTK.Graphics.LightParameter,System.Int32*)">
            <summary>
            Set light source parameters
            </summary>
            <param name="light">
            <para>
            Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT , where i ranges from 0 to the value of GL_MAX_LIGHTS - 1.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies a single-valued light source parameter for light. GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter pname of light source light will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LightModel(OpenTK.Graphics.LightModelParameter,System.Single)">
            <summary>
            Set the lighting model parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued lighting model parameter. GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that param will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LightModel(OpenTK.Graphics.LightModelParameter,System.Single*)">
            <summary>
            Set the lighting model parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued lighting model parameter. GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that param will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LightModel(OpenTK.Graphics.LightModelParameter,System.Single[])">
            <summary>
            Set the lighting model parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued lighting model parameter. GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that param will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LightModel(OpenTK.Graphics.LightModelParameter,System.Int32)">
            <summary>
            Set the lighting model parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued lighting model parameter. GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that param will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LightModel(OpenTK.Graphics.LightModelParameter,System.Int32*)">
            <summary>
            Set the lighting model parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued lighting model parameter. GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that param will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LightModel(OpenTK.Graphics.LightModelParameter,System.Int32[])">
            <summary>
            Set the lighting model parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued lighting model parameter. GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that param will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LineStipple(System.Int32,System.UInt16)">
            <summary>
            Specify the line stipple pattern
            </summary>
            <param name="factor">
            <para>
            Specifies a multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. factor is clamped to the range [1, 256] and defaults to 1.
            </para>
            </param>
            <param name="pattern">
            <para>
            Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LineStipple(System.Int32,System.Int16)">
            <summary>
            Specify the line stipple pattern
            </summary>
            <param name="factor">
            <para>
            Specifies a multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. factor is clamped to the range [1, 256] and defaults to 1.
            </para>
            </param>
            <param name="pattern">
            <para>
            Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LineWidth(System.Single)">
            <summary>
            Specify the width of rasterized lines
            </summary>
            <param name="width">
            <para>
            Specifies the width of rasterized lines. The initial value is 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LinkProgram(System.UInt32)">
            <summary>
            Links a program object
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object to be linked.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LinkProgram(System.Int32)">
            <summary>
            Links a program object
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object to be linked.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ListBase(System.Int32)">
            <summary>
            Set the display-list base for glCallLists
            </summary>
            <param name="base">
            <para>
            Specifies an integer offset that will be added to glCallLists offsets to generate display-list names. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ListBase(System.UInt32)">
            <summary>
            Set the display-list base for glCallLists
            </summary>
            <param name="base">
            <para>
            Specifies an integer offset that will be added to glCallLists offsets to generate display-list names. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadIdentity">
            <summary>
            Replace the current matrix with the identity matrix
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadMatrix(System.Double@)">
            <summary>
            Replace the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadMatrix(System.Double*)">
            <summary>
            Replace the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadMatrix(System.Double[])">
            <summary>
            Replace the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadMatrix(System.Single*)">
            <summary>
            Replace the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadMatrix(System.Single@)">
            <summary>
            Replace the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadMatrix(System.Single[])">
            <summary>
            Replace the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadName(System.UInt32)">
            <summary>
            Load a name onto the name stack
            </summary>
            <param name="name">
            <para>
            Specifies a name that will replace the top value on the name stack.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadName(System.Int32)">
            <summary>
            Load a name onto the name stack
            </summary>
            <param name="name">
            <para>
            Specifies a name that will replace the top value on the name stack.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadTransposeMatrix(System.Double@)">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadTransposeMatrix(System.Double*)">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadTransposeMatrix(System.Double[])">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadTransposeMatrix(System.Single@)">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadTransposeMatrix(System.Single[])">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadTransposeMatrix(System.Single*)">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.LogicOp(OpenTK.Graphics.LogicOp)">
            <summary>
            Specify a logical pixel operation for color index rendering
            </summary>
            <param name="opcode">
            <para>
            Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: GL_CLEAR, GL_SET, GL_COPY, GL_COPY_INVERTED, GL_NOOP, GL_INVERT, GL_AND, GL_NAND, GL_OR, GL_NOR, GL_XOR, GL_EQUIV, GL_AND_REVERSE, GL_AND_INVERTED, GL_OR_REVERSE, and GL_OR_INVERTED. The initial value is GL_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map1(OpenTK.Graphics.MapTarget,System.Double,System.Double,System.Int32,System.Int32,System.Double*)">
            <summary>
            Define a one-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP1_INDEX, GL_MAP1_COLOR_4, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, and GL_MAP1_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
            </para>
            </param>
            <param name="order">
            <para>
            Specifies the number of control points. Must be positive.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map1(OpenTK.Graphics.MapTarget,System.Double,System.Double,System.Int32,System.Int32,System.Double[])">
            <summary>
            Define a one-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP1_INDEX, GL_MAP1_COLOR_4, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, and GL_MAP1_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
            </para>
            </param>
            <param name="order">
            <para>
            Specifies the number of control points. Must be positive.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map1(OpenTK.Graphics.MapTarget,System.Double,System.Double,System.Int32,System.Int32,System.Double@)">
            <summary>
            Define a one-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP1_INDEX, GL_MAP1_COLOR_4, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, and GL_MAP1_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
            </para>
            </param>
            <param name="order">
            <para>
            Specifies the number of control points. Must be positive.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map1(OpenTK.Graphics.MapTarget,System.Single,System.Single,System.Int32,System.Int32,System.Single*)">
            <summary>
            Define a one-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP1_INDEX, GL_MAP1_COLOR_4, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, and GL_MAP1_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
            </para>
            </param>
            <param name="order">
            <para>
            Specifies the number of control points. Must be positive.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map1(OpenTK.Graphics.MapTarget,System.Single,System.Single,System.Int32,System.Int32,System.Single@)">
            <summary>
            Define a one-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP1_INDEX, GL_MAP1_COLOR_4, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, and GL_MAP1_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
            </para>
            </param>
            <param name="order">
            <para>
            Specifies the number of control points. Must be positive.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map1(OpenTK.Graphics.MapTarget,System.Single,System.Single,System.Int32,System.Int32,System.Single[])">
            <summary>
            Define a one-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP1_INDEX, GL_MAP1_COLOR_4, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, and GL_MAP1_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
            </para>
            </param>
            <param name="order">
            <para>
            Specifies the number of control points. Must be positive.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map2(OpenTK.Graphics.MapTarget,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*)">
            <summary>
            Define a two-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP2_VERTEX_3, GL_MAP2_VERTEX_4, GL_MAP2_INDEX, GL_MAP2_COLOR_4, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, and GL_MAP2_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
            </para>
            </param>
            <param name="ustride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
            </para>
            </param>
            <param name="uorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="v1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
            </para>
            </param>
            <param name="vstride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
            </para>
            </param>
            <param name="vorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map2(OpenTK.Graphics.MapTarget,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double[])">
            <summary>
            Define a two-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP2_VERTEX_3, GL_MAP2_VERTEX_4, GL_MAP2_INDEX, GL_MAP2_COLOR_4, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, and GL_MAP2_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
            </para>
            </param>
            <param name="ustride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
            </para>
            </param>
            <param name="uorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="v1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
            </para>
            </param>
            <param name="vstride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
            </para>
            </param>
            <param name="vorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map2(OpenTK.Graphics.MapTarget,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double@)">
            <summary>
            Define a two-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP2_VERTEX_3, GL_MAP2_VERTEX_4, GL_MAP2_INDEX, GL_MAP2_COLOR_4, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, and GL_MAP2_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
            </para>
            </param>
            <param name="ustride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
            </para>
            </param>
            <param name="uorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="v1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
            </para>
            </param>
            <param name="vstride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
            </para>
            </param>
            <param name="vorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map2(OpenTK.Graphics.MapTarget,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single[])">
            <summary>
            Define a two-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP2_VERTEX_3, GL_MAP2_VERTEX_4, GL_MAP2_INDEX, GL_MAP2_COLOR_4, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, and GL_MAP2_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
            </para>
            </param>
            <param name="ustride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
            </para>
            </param>
            <param name="uorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="v1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
            </para>
            </param>
            <param name="vstride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
            </para>
            </param>
            <param name="vorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map2(OpenTK.Graphics.MapTarget,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single@)">
            <summary>
            Define a two-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP2_VERTEX_3, GL_MAP2_VERTEX_4, GL_MAP2_INDEX, GL_MAP2_COLOR_4, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, and GL_MAP2_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
            </para>
            </param>
            <param name="ustride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
            </para>
            </param>
            <param name="uorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="v1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
            </para>
            </param>
            <param name="vstride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
            </para>
            </param>
            <param name="vorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Map2(OpenTK.Graphics.MapTarget,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*)">
            <summary>
            Define a two-dimensional evaluator
            </summary>
            <param name="target">
            <para>
            Specifies the kind of values that are generated by the evaluator. Symbolic constants GL_MAP2_VERTEX_3, GL_MAP2_VERTEX_4, GL_MAP2_INDEX, GL_MAP2_COLOR_4, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, and GL_MAP2_TEXTURE_COORD_4 are accepted.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
            </para>
            </param>
            <param name="ustride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
            </para>
            </param>
            <param name="uorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="v1">
            <para>
            Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
            </para>
            </param>
            <param name="vstride">
            <para>
            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where and are the and control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
            </para>
            </param>
            <param name="vorder">
            <para>
            Specifies the dimension of the control point array in the axis. Must be positive. The initial value is 1.
            </para>
            </param>
            <param name="points">
            <para>
            Specifies a pointer to the array of control points.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MapBuffer(OpenTK.Graphics.BufferTarget,OpenTK.Graphics.BufferAccess)">
            <summary>
            Map a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object being mapped. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="access">
            <para>
            Specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MapGrid1(System.Int32,System.Double,System.Double)">
            <summary>
            Define a one- or two-dimensional mesh
            </summary>
            <param name="un">
            <para>
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify the mappings for integer grid domain values i = 0 and i = un.
            </para>
            </param>
            <param name="vn">
            <para>
            Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only).
            </para>
            </param>
            <param name="v1">
            <para>
            Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MapGrid1(System.Int32,System.Single,System.Single)">
            <summary>
            Define a one- or two-dimensional mesh
            </summary>
            <param name="un">
            <para>
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify the mappings for integer grid domain values i = 0 and i = un.
            </para>
            </param>
            <param name="vn">
            <para>
            Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only).
            </para>
            </param>
            <param name="v1">
            <para>
            Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MapGrid2(System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Define a one- or two-dimensional mesh
            </summary>
            <param name="un">
            <para>
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify the mappings for integer grid domain values i = 0 and i = un.
            </para>
            </param>
            <param name="vn">
            <para>
            Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only).
            </para>
            </param>
            <param name="v1">
            <para>
            Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MapGrid2(System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Define a one- or two-dimensional mesh
            </summary>
            <param name="un">
            <para>
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </para>
            </param>
            <param name="u1">
            <para>
            Specify the mappings for integer grid domain values i = 0 and i = un.
            </para>
            </param>
            <param name="vn">
            <para>
            Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only).
            </para>
            </param>
            <param name="v1">
            <para>
            Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Material(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Single)">
            <summary>
            Specify material parameters for the lighting model
            </summary>
            <param name="face">
            <para>
            Specifies which face or faces are being updated. Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the single-valued material parameter of the face or faces that is being updated. Must be GL_SHININESS.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter GL_SHININESS will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Material(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Single[])">
            <summary>
            Specify material parameters for the lighting model
            </summary>
            <param name="face">
            <para>
            Specifies which face or faces are being updated. Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the single-valued material parameter of the face or faces that is being updated. Must be GL_SHININESS.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter GL_SHININESS will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Material(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Single*)">
            <summary>
            Specify material parameters for the lighting model
            </summary>
            <param name="face">
            <para>
            Specifies which face or faces are being updated. Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the single-valued material parameter of the face or faces that is being updated. Must be GL_SHININESS.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter GL_SHININESS will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Material(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Int32)">
            <summary>
            Specify material parameters for the lighting model
            </summary>
            <param name="face">
            <para>
            Specifies which face or faces are being updated. Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the single-valued material parameter of the face or faces that is being updated. Must be GL_SHININESS.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter GL_SHININESS will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Material(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Int32[])">
            <summary>
            Specify material parameters for the lighting model
            </summary>
            <param name="face">
            <para>
            Specifies which face or faces are being updated. Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the single-valued material parameter of the face or faces that is being updated. Must be GL_SHININESS.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter GL_SHININESS will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Material(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.MaterialParameter,System.Int32*)">
            <summary>
            Specify material parameters for the lighting model
            </summary>
            <param name="face">
            <para>
            Specifies which face or faces are being updated. Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the single-valued material parameter of the face or faces that is being updated. Must be GL_SHININESS.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that parameter GL_SHININESS will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MatrixMode(OpenTK.Graphics.MatrixMode)">
            <summary>
            Specify which matrix is the current matrix
            </summary>
            <param name="mode">
            <para>
            Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE. The initial value is GL_MODELVIEW. Additionally, if the ARB_imaging extension is supported, GL_COLOR is also accepted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Minmax(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelInternalFormat,System.Boolean)">
            <summary>
            Define minmax table
            </summary>
            <param name="target">
            <para>
            The minmax table whose parameters are to be set. Must be GL_MINMAX.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The format of entries in the minmax table. Must be one of GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="sink">
            <para>
            If GL_TRUE, pixels will be consumed by the minmax process and no drawing or texture loading will take place. If GL_FALSE, pixels will proceed to the final conversion process after minmax.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawArrays(OpenTK.Graphics.BeginMode,System.Int32*,System.Int32*,System.Int32)">
            <summary>
            Render multiple sets of primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="first">
            <para>
            Points to an array of starting indices in the enabled arrays.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the number of indices to be rendered.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the first and count
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawArrays(OpenTK.Graphics.BeginMode,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Render multiple sets of primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="first">
            <para>
            Points to an array of starting indices in the enabled arrays.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the number of indices to be rendered.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the first and count
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawArrays(OpenTK.Graphics.BeginMode,System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Render multiple sets of primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="first">
            <para>
            Points to an array of starting indices in the enabled arrays.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the number of indices to be rendered.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the first and count
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32@,OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements(OpenTK.Graphics.BeginMode,System.Int32*,OpenTK.Graphics.DrawElementsType,System.IntPtr,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32@,OpenTK.Graphics.DrawElementsType,``0[],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32@,OpenTK.Graphics.DrawElementsType,``0[0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32*,OpenTK.Graphics.DrawElementsType,``0[0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32*,OpenTK.Graphics.DrawElementsType,``0[],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32*,OpenTK.Graphics.DrawElementsType,``0@,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32*,OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32@,OpenTK.Graphics.DrawElementsType,``0@,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32[],OpenTK.Graphics.DrawElementsType,``0[],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32[],OpenTK.Graphics.DrawElementsType,``0@,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32[],OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements(OpenTK.Graphics.BeginMode,System.Int32@,OpenTK.Graphics.DrawElementsType,System.IntPtr,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements(OpenTK.Graphics.BeginMode,System.Int32[],OpenTK.Graphics.DrawElementsType,System.IntPtr,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32[],OpenTK.Graphics.DrawElementsType,``0[0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Double,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Double@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Double[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Single,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Single[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Single@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int32,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int32@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int32[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int16,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int16@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int16[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Double,System.Double,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Double@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Double[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Single,System.Single,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Single[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Single@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int32[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int32@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int16@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int16[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Double@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Double[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Single@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Single[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int32[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int32@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int16@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int16[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultMatrix(System.Double@)">
            <summary>
            Multiply the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultMatrix(System.Double*)">
            <summary>
            Multiply the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultMatrix(System.Double[])">
            <summary>
            Multiply the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultMatrix(System.Single[])">
            <summary>
            Multiply the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultMatrix(System.Single@)">
            <summary>
            Multiply the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultMatrix(System.Single*)">
            <summary>
            Multiply the current matrix with the specified matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 column-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultTransposeMatrix(System.Double[])">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultTransposeMatrix(System.Double@)">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultTransposeMatrix(System.Double*)">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultTransposeMatrix(System.Single[])">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultTransposeMatrix(System.Single@)">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.MultTransposeMatrix(System.Single*)">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NewList(System.UInt32,OpenTK.Graphics.ListMode)">
            <summary>
            Create or replace a display list
            </summary>
            <param name="list">
            <para>
            Specifies the display-list name.
            </para>
            </param>
            <param name="mode">
            <para>
            Specifies the compilation mode, which can be GL_COMPILE or GL_COMPILE_AND_EXECUTE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NewList(System.Int32,OpenTK.Graphics.ListMode)">
            <summary>
            Create or replace a display list
            </summary>
            <param name="list">
            <para>
            Specifies the display-list name.
            </para>
            </param>
            <param name="mode">
            <para>
            Specifies the compilation mode, which can be GL_COMPILE or GL_COMPILE_AND_EXECUTE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.SByte,System.SByte,System.SByte)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.SByte@)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Byte*)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.SByte*)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Byte@)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.SByte[])">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Byte[])">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Double,System.Double,System.Double)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Double@)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Double[])">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Double*)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Single,System.Single,System.Single)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Single*)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Single[])">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Single@)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Int32[])">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Int32@)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Int32*)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Int16[])">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Int16@)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Normal3(System.Int16*)">
            <summary>
            Set the current normal vector
            </summary>
            <param name="nx">
            <para>
            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NormalPointer``1(OpenTK.Graphics.NormalPointerType,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NormalPointer``1(OpenTK.Graphics.NormalPointerType,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NormalPointer(OpenTK.Graphics.NormalPointerType,System.Int32,System.IntPtr)">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NormalPointer``1(OpenTK.Graphics.NormalPointerType,System.Int32,``0@)">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NormalPointer``1(OpenTK.Graphics.NormalPointerType,System.Int32,``0[])">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ortho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Multiply the current matrix with an orthographic matrix
            </summary>
            <param name="left">
            <para>
            Specify the coordinates for the left and right vertical clipping planes.
            </para>
            </param>
            <param name="bottom">
            <para>
            Specify the coordinates for the bottom and top horizontal clipping planes.
            </para>
            </param>
            <param name="nearVal">
            <para>
            Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PassThrough(System.Single)">
            <summary>
            Place a marker in the feedback buffer
            </summary>
            <param name="token">
            <para>
            Specifies a marker value to be placed in the feedback buffer following a GL_PASS_THROUGH_TOKEN.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.Single*)">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.Single@)">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.Single[])">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.Int32@)">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.UInt32*)">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.Int32*)">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.UInt32[])">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.Int32[])">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.UInt32@)">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.UInt16@)">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.Int16@)">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.UInt16[])">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.Int16[])">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.UInt16*)">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelMap(OpenTK.Graphics.PixelMap,System.Int32,System.Int16*)">
            <summary>
            Set up pixel transfer maps
            </summary>
            <param name="map">
            <para>
            Specifies a symbolic map name. Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A.
            </para>
            </param>
            <param name="mapsize">
            <para>
            Specifies the size of the map being defined.
            </para>
            </param>
            <param name="values">
            <para>
            Specifies an array of mapsize values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelStore(OpenTK.Graphics.PixelStoreParameter,System.Single)">
            <summary>
            Set pixel storage modes
            </summary>
            <param name="pname">
            <para>
            Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST, GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES, and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES, GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS, GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname is set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelStore(OpenTK.Graphics.PixelStoreParameter,System.Int32)">
            <summary>
            Set pixel storage modes
            </summary>
            <param name="pname">
            <para>
            Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST, GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES, and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES, GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS, GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname is set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelTransfer(OpenTK.Graphics.PixelTransferParameter,System.Single)">
            <summary>
            Set pixel transfer modes
            </summary>
            <param name="pname">
            <para>
            Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following: GL_MAP_COLOR, GL_MAP_STENCIL, GL_INDEX_SHIFT, GL_INDEX_OFFSET, GL_RED_SCALE, GL_RED_BIAS, GL_GREEN_SCALE, GL_GREEN_BIAS, GL_BLUE_SCALE, GL_BLUE_BIAS, GL_ALPHA_SCALE, GL_ALPHA_BIAS, GL_DEPTH_SCALE, or GL_DEPTH_BIAS.
            </para>
            <para>
            Additionally, if the ARB_imaging extension is supported, the following symbolic names are accepted: GL_POST_COLOR_MATRIX_RED_SCALE, GL_POST_COLOR_MATRIX_GREEN_SCALE, GL_POST_COLOR_MATRIX_BLUE_SCALE, GL_POST_COLOR_MATRIX_ALPHA_SCALE, GL_POST_COLOR_MATRIX_RED_BIAS, GL_POST_COLOR_MATRIX_GREEN_BIAS, GL_POST_COLOR_MATRIX_BLUE_BIAS, GL_POST_COLOR_MATRIX_ALPHA_BIAS, GL_POST_CONVOLUTION_RED_SCALE, GL_POST_CONVOLUTION_GREEN_SCALE, GL_POST_CONVOLUTION_BLUE_SCALE, GL_POST_CONVOLUTION_ALPHA_SCALE, GL_POST_CONVOLUTION_RED_BIAS, GL_POST_CONVOLUTION_GREEN_BIAS, GL_POST_CONVOLUTION_BLUE_BIAS, and GL_POST_CONVOLUTION_ALPHA_BIAS.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname is set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelTransfer(OpenTK.Graphics.PixelTransferParameter,System.Int32)">
            <summary>
            Set pixel transfer modes
            </summary>
            <param name="pname">
            <para>
            Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following: GL_MAP_COLOR, GL_MAP_STENCIL, GL_INDEX_SHIFT, GL_INDEX_OFFSET, GL_RED_SCALE, GL_RED_BIAS, GL_GREEN_SCALE, GL_GREEN_BIAS, GL_BLUE_SCALE, GL_BLUE_BIAS, GL_ALPHA_SCALE, GL_ALPHA_BIAS, GL_DEPTH_SCALE, or GL_DEPTH_BIAS.
            </para>
            <para>
            Additionally, if the ARB_imaging extension is supported, the following symbolic names are accepted: GL_POST_COLOR_MATRIX_RED_SCALE, GL_POST_COLOR_MATRIX_GREEN_SCALE, GL_POST_COLOR_MATRIX_BLUE_SCALE, GL_POST_COLOR_MATRIX_ALPHA_SCALE, GL_POST_COLOR_MATRIX_RED_BIAS, GL_POST_COLOR_MATRIX_GREEN_BIAS, GL_POST_COLOR_MATRIX_BLUE_BIAS, GL_POST_COLOR_MATRIX_ALPHA_BIAS, GL_POST_CONVOLUTION_RED_SCALE, GL_POST_CONVOLUTION_GREEN_SCALE, GL_POST_CONVOLUTION_BLUE_SCALE, GL_POST_CONVOLUTION_ALPHA_SCALE, GL_POST_CONVOLUTION_RED_BIAS, GL_POST_CONVOLUTION_GREEN_BIAS, GL_POST_CONVOLUTION_BLUE_BIAS, and GL_POST_CONVOLUTION_ALPHA_BIAS.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname is set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PixelZoom(System.Single,System.Single)">
            <summary>
            Specify the pixel zoom factors
            </summary>
            <param name="xfactor">
            <para>
            Specify the and zoom factors for pixel write operations.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PointParameter(OpenTK.Graphics.PointParameterName,System.Single)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PointParameter(OpenTK.Graphics.PointParameterName,System.Single*)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PointParameter(OpenTK.Graphics.PointParameterName,System.Single[])">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PointParameter(OpenTK.Graphics.PointParameterName,System.Int32)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PointParameter(OpenTK.Graphics.PointParameterName,System.Int32[])">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PointParameter(OpenTK.Graphics.PointParameterName,System.Int32*)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PointSize(System.Single)">
            <summary>
            Specify the diameter of rasterized points
            </summary>
            <param name="size">
            <para>
            Specifies the diameter of rasterized points. The initial value is 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PolygonMode(OpenTK.Graphics.MaterialFace,OpenTK.Graphics.PolygonMode)">
            <summary>
            Select a polygon rasterization mode
            </summary>
            <param name="face">
            <para>
            Specifies the polygons that mode applies to. Must be GL_FRONT for front-facing polygons, GL_BACK for back-facing polygons, or GL_FRONT_AND_BACK for front- and back-facing polygons.
            </para>
            </param>
            <param name="mode">
            <para>
            Specifies how polygons will be rasterized. Accepted values are GL_POINT, GL_LINE, and GL_FILL. The initial value is GL_FILL for both front- and back-facing polygons.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PolygonOffset(System.Single,System.Single)">
            <summary>
            Set the scale and units used to calculate depth values
            </summary>
            <param name="factor">
            <para>
            Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
            </para>
            </param>
            <param name="units">
            <para>
            Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PolygonStipple(System.Byte*)">
            <summary>
            Set the polygon stippling pattern
            </summary>
            <param name="pattern">
            <para>
            Specifies a pointer to a 32 times 32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PolygonStipple(System.Byte@)">
            <summary>
            Set the polygon stippling pattern
            </summary>
            <param name="pattern">
            <para>
            Specifies a pointer to a 32 times 32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PolygonStipple(System.Byte[])">
            <summary>
            Set the polygon stippling pattern
            </summary>
            <param name="pattern">
            <para>
            Specifies a pointer to a 32 times 32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PrioritizeTextures(System.Int32,System.UInt32@,System.Single@)">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PrioritizeTextures(System.Int32,System.Int32[],System.Single[])">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PrioritizeTextures(System.Int32,System.UInt32[],System.Single[])">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PrioritizeTextures(System.Int32,System.Int32*,System.Single*)">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PrioritizeTextures(System.Int32,System.UInt32*,System.Single*)">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PrioritizeTextures(System.Int32,System.Int32@,System.Single@)">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PushAttrib(OpenTK.Graphics.AttribMask)">
            <summary>
            Push and pop the server attribute stack
            </summary>
            <param name="mask">
            <para>
            Specifies a mask that indicates which attributes to save. Values for mask are listed below.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PushClientAttrib(OpenTK.Graphics.ClientAttribMask)">
            <summary>
            Push and pop the client attribute stack
            </summary>
            <param name="mask">
            <para>
            Specifies a mask that indicates which attributes to save. Values for mask are listed below.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PushMatrix">
            <summary>
            Push and pop the current matrix stack
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GL.PushName(System.Int32)">
            <summary>
            Push and pop the name stack
            </summary>
            <param name="name">
            <para>
            Specifies a name that will be pushed onto the name stack.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.PushName(System.UInt32)">
            <summary>
            Push and pop the name stack
            </summary>
            <param name="name">
            <para>
            Specifies a name that will be pushed onto the name stack.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Double,System.Double)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Double*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Double[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Double@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Single,System.Single)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Single[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Single*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Single@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Int32,System.Int32)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Int32*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Int32@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Int32[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Int16,System.Int16)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Int16@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Int16[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos2(System.Int16*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Double,System.Double,System.Double)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Double*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Double@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Double[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Single,System.Single,System.Single)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Single*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Single@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Single[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Int32*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Int32[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Int32@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Int16,System.Int16,System.Int16)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Int16*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Int16@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos3(System.Int16[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Double@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Double*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Double[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Single[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Single@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Single*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Int32@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Int32*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Int32[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Int16[])">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Int16*)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RasterPos4(System.Int16@)">
            <summary>
            Specify the raster position for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , , and object coordinates (if present) for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ReadBuffer(OpenTK.Graphics.ReadBufferMode)">
            <summary>
            Select a color buffer source for pixels
            </summary>
            <param name="mode">
            <para>
            Specifies a color buffer. Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, and GL_AUXi, where i is between 0 and the value of GL_AUX_BUFFERS minus 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ReadPixels``1(System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Read a block of pixels from the frame buffer
            </summary>
            <param name="x">
            <para>
            Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
            </para>
            </param>
            <param name="width">
            <para>
            Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ReadPixels``1(System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Read a block of pixels from the frame buffer
            </summary>
            <param name="x">
            <para>
            Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
            </para>
            </param>
            <param name="width">
            <para>
            Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ReadPixels(System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Read a block of pixels from the frame buffer
            </summary>
            <param name="x">
            <para>
            Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
            </para>
            </param>
            <param name="width">
            <para>
            Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ReadPixels``1(System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Read a block of pixels from the frame buffer
            </summary>
            <param name="x">
            <para>
            Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
            </para>
            </param>
            <param name="width">
            <para>
            Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ReadPixels``1(System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Read a block of pixels from the frame buffer
            </summary>
            <param name="x">
            <para>
            Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
            </para>
            </param>
            <param name="width">
            <para>
            Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Returns the pixel data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Double@,System.Double@)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Double[],System.Double[])">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Double*,System.Double*)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Single[],System.Single[])">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Single*,System.Single*)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Single@,System.Single@)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Int32[],System.Int32[])">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Int32*,System.Int32*)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Int32@,System.Int32@)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Int16*,System.Int16*)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Int16@,System.Int16@)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rect(System.Int16[],System.Int16[])">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x1">
            <para>
            Specify one vertex of a rectangle.
            </para>
            </param>
            <param name="x2">
            <para>
            Specify the opposite vertex of the rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.RenderMode(OpenTK.Graphics.RenderingMode)">
            <summary>
            Set rasterization mode
            </summary>
            <param name="mode">
            <para>
            Specifies the rasterization mode. Three values are accepted: GL_RENDER, GL_SELECT, and GL_FEEDBACK. The initial value is GL_RENDER.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ResetHistogram(OpenTK.Graphics.Version12Deprecated)">
            <summary>
            Reset histogram table entries to zero
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ResetMinmax(OpenTK.Graphics.Version12Deprecated)">
            <summary>
            Reset minmax table entries to initial values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rotate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Multiply the current matrix by a rotation matrix
            </summary>
            <param name="angle">
            <para>
            Specifies the angle of rotation, in degrees.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the x, y, and z coordinates of a vector, respectively.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Rotate(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Multiply the current matrix by a rotation matrix
            </summary>
            <param name="angle">
            <para>
            Specifies the angle of rotation, in degrees.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the x, y, and z coordinates of a vector, respectively.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SampleCoverage(System.Single,System.Boolean)">
            <summary>
            Specify multisample coverage parameters
            </summary>
            <param name="value">
            <para>
            Specify a single floating-point sample coverage value. The value is clamped to the range [0 ,1]. The initial value is 1.0.
            </para>
            </param>
            <param name="invert">
            <para>
            Specify a single boolean value representing if the coverage masks should be inverted. GL_TRUE and GL_FALSE are accepted. The initial value is GL_FALSE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Multiply the current matrix by a general scaling matrix
            </summary>
            <param name="x">
            <para>
            Specify scale factors along the x, y, and z axes, respectively.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Multiply the current matrix by a general scaling matrix
            </summary>
            <param name="x">
            <para>
            Specify scale factors along the x, y, and z axes, respectively.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Scissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Define the scissor box
            </summary>
            <param name="x">
            <para>
            Specify the lower left corner of the scissor box. Initially (0, 0).
            </para>
            </param>
            <param name="width">
            <para>
            Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.SByte,System.SByte,System.SByte)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.SByte@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.SByte[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.SByte*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Double,System.Double,System.Double)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Double@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Double[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Double*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Single,System.Single,System.Single)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Single[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Single*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Single@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Int32[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Int32*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Int32@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Int16@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Int16[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Int16*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Byte*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Byte[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.Byte@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.UInt32*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.UInt32@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.UInt32[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.UInt16*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.UInt16@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColor3(System.UInt16[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of secondary colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of secondary colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0[])">
            <summary>
            Define an array of secondary colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColorPointer(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,System.IntPtr)">
            <summary>
            Define an array of secondary colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SecondaryColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0@)">
            <summary>
            Define an array of secondary colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SelectBuffer(System.Int32,System.UInt32@)">
            <summary>
            Establish a buffer for selection mode values
            </summary>
            <param name="size">
            <para>
            Specifies the size of buffer.
            </para>
            </param>
            <param name="buffer">
            <para>
            Returns the selection data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SelectBuffer(System.Int32,System.Int32*)">
            <summary>
            Establish a buffer for selection mode values
            </summary>
            <param name="size">
            <para>
            Specifies the size of buffer.
            </para>
            </param>
            <param name="buffer">
            <para>
            Returns the selection data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SelectBuffer(System.Int32,System.UInt32*)">
            <summary>
            Establish a buffer for selection mode values
            </summary>
            <param name="size">
            <para>
            Specifies the size of buffer.
            </para>
            </param>
            <param name="buffer">
            <para>
            Returns the selection data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SelectBuffer(System.Int32,System.Int32@)">
            <summary>
            Establish a buffer for selection mode values
            </summary>
            <param name="size">
            <para>
            Specifies the size of buffer.
            </para>
            </param>
            <param name="buffer">
            <para>
            Returns the selection data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SelectBuffer(System.Int32,System.Int32[])">
            <summary>
            Establish a buffer for selection mode values
            </summary>
            <param name="size">
            <para>
            Specifies the size of buffer.
            </para>
            </param>
            <param name="buffer">
            <para>
            Returns the selection data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SelectBuffer(System.Int32,System.UInt32[])">
            <summary>
            Establish a buffer for selection mode values
            </summary>
            <param name="size">
            <para>
            Specifies the size of buffer.
            </para>
            </param>
            <param name="buffer">
            <para>
            Returns the selection data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SeparableFilter2D``2(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:],``1[0:,0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SeparableFilter2D``2(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:],``1[0:,0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SeparableFilter2D``2(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@,``1[0:,0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SeparableFilter2D``2(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[],``1[0:,0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SeparableFilter2D``1(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[0:,0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SeparableFilter2D(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr)">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SeparableFilter2D``1(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0@)">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SeparableFilter2D``1(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SeparableFilter2D``1(OpenTK.Graphics.Version12Deprecated,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ShadeModel(OpenTK.Graphics.ShadingModel)">
            <summary>
            Select flat or smooth shading
            </summary>
            <param name="mode">
            <para>
            Specifies a symbolic value representing a shading technique. Accepted values are GL_FLAT and GL_SMOOTH. The initial value is GL_SMOOTH.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ShaderSource(System.UInt32,System.Int32,System.String[],System.Int32@)">
            <summary>
            Replaces the source code in a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the handle of the shader object whose source code is to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements in the string and length arrays.
            </para>
            </param>
            <param name="string">
            <para>
            Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            </para>
            </param>
            <param name="length">
            <para>
            Specifies an array of string lengths.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ShaderSource(System.UInt32,System.Int32,System.String[],System.Int32*)">
            <summary>
            Replaces the source code in a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the handle of the shader object whose source code is to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements in the string and length arrays.
            </para>
            </param>
            <param name="string">
            <para>
            Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            </para>
            </param>
            <param name="length">
            <para>
            Specifies an array of string lengths.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ShaderSource(System.Int32,System.Int32,System.String[],System.Int32*)">
            <summary>
            Replaces the source code in a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the handle of the shader object whose source code is to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements in the string and length arrays.
            </para>
            </param>
            <param name="string">
            <para>
            Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            </para>
            </param>
            <param name="length">
            <para>
            Specifies an array of string lengths.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ShaderSource(System.Int32,System.Int32,System.String[],System.Int32@)">
            <summary>
            Replaces the source code in a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the handle of the shader object whose source code is to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements in the string and length arrays.
            </para>
            </param>
            <param name="string">
            <para>
            Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            </para>
            </param>
            <param name="length">
            <para>
            Specifies an array of string lengths.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.StencilFunc(OpenTK.Graphics.StencilFunction,System.Int32,System.Int32)">
            <summary>
            Set front and back function and reference value for stencil testing
            </summary>
            <param name="func">
            <para>
            Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
            </para>
            </param>
            <param name="ref">
            <para>
            Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
            </para>
            </param>
            <param name="mask">
            <para>
            Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.StencilFunc(OpenTK.Graphics.StencilFunction,System.Int32,System.UInt32)">
            <summary>
            Set front and back function and reference value for stencil testing
            </summary>
            <param name="func">
            <para>
            Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
            </para>
            </param>
            <param name="ref">
            <para>
            Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
            </para>
            </param>
            <param name="mask">
            <para>
            Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.StencilFuncSeparate(OpenTK.Graphics.StencilFace,OpenTK.Graphics.StencilFunction,System.Int32,System.Int32)">
            <summary>
            Set front and/or back function and reference value for stencil testing
            </summary>
            <param name="face">
            <para>
            Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="func">
            <para>
            Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
            </para>
            </param>
            <param name="ref">
            <para>
            Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
            </para>
            </param>
            <param name="mask">
            <para>
            Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.StencilFuncSeparate(OpenTK.Graphics.StencilFace,OpenTK.Graphics.StencilFunction,System.Int32,System.UInt32)">
            <summary>
            Set front and/or back function and reference value for stencil testing
            </summary>
            <param name="face">
            <para>
            Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="func">
            <para>
            Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
            </para>
            </param>
            <param name="ref">
            <para>
            Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
            </para>
            </param>
            <param name="mask">
            <para>
            Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.StencilMask(System.Int32)">
            <summary>
            Control the front and back writing of individual bits in the stencil planes
            </summary>
            <param name="mask">
            <para>
            Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.StencilMask(System.UInt32)">
            <summary>
            Control the front and back writing of individual bits in the stencil planes
            </summary>
            <param name="mask">
            <para>
            Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.StencilMaskSeparate(OpenTK.Graphics.StencilFace,System.UInt32)">
            <summary>
            Control the front and/or back writing of individual bits in the stencil planes
            </summary>
            <param name="face">
            <para>
            Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="mask">
            <para>
            Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.StencilMaskSeparate(OpenTK.Graphics.StencilFace,System.Int32)">
            <summary>
            Control the front and/or back writing of individual bits in the stencil planes
            </summary>
            <param name="face">
            <para>
            Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="mask">
            <para>
            Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.StencilOp(OpenTK.Graphics.StencilOp,OpenTK.Graphics.StencilOp,OpenTK.Graphics.StencilOp)">
            <summary>
            Set front and back stencil test actions
            </summary>
            <param name="sfail">
            <para>
            Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
            </para>
            </param>
            <param name="dpfail">
            <para>
            Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
            </para>
            </param>
            <param name="dppass">
            <para>
            Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.StencilOpSeparate(OpenTK.Graphics.StencilFace,OpenTK.Graphics.StencilOp,OpenTK.Graphics.StencilOp,OpenTK.Graphics.StencilOp)">
            <summary>
            Set front and/or back stencil test actions
            </summary>
            <param name="face">
            <para>
            Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="sfail">
            <para>
            Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
            </para>
            </param>
            <param name="dpfail">
            <para>
            Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
            </para>
            </param>
            <param name="dppass">
            <para>
            Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord1(System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord1(System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord1(System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord1(System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord1(System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord1(System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord1(System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord1(System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Double,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Double[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Double@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Single,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Single[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Single@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Int32,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Int32[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Int32@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Int16,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Int16@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord2(System.Int16[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Double,System.Double,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Double@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Double[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Single,System.Single,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Single@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Single[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Int32@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Int32[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Int16@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord3(System.Int16[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Double@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Double[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Single@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Single[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Int32@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Int32[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Int16@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Int16[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoord4(System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoordPointer``1(System.Int32,OpenTK.Graphics.TexCoordPointerType,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoordPointer``1(System.Int32,OpenTK.Graphics.TexCoordPointerType,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoordPointer``1(System.Int32,OpenTK.Graphics.TexCoordPointerType,System.Int32,``0[])">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoordPointer(System.Int32,OpenTK.Graphics.TexCoordPointerType,System.Int32,System.IntPtr)">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexCoordPointer``1(System.Int32,OpenTK.Graphics.TexCoordPointerType,System.Int32,``0@)">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Single)">
            <summary>
            Set texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture environment parameter. May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR, GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Single[])">
            <summary>
            Set texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture environment parameter. May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR, GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Single*)">
            <summary>
            Set texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture environment parameter. May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR, GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Int32)">
            <summary>
            Set texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture environment parameter. May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR, GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Int32[])">
            <summary>
            Set texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture environment parameter. May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR, GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexEnv(OpenTK.Graphics.TextureEnvTarget,OpenTK.Graphics.TextureEnvParameter,System.Int32*)">
            <summary>
            Set texture environment parameters
            </summary>
            <param name="target">
            <para>
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture environment parameter. May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR, GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Double[])">
            <summary>
            Control the generation of texture coordinates
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single-valued texture generation parameter, one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Double*)">
            <summary>
            Control the generation of texture coordinates
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single-valued texture generation parameter, one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Double@)">
            <summary>
            Control the generation of texture coordinates
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single-valued texture generation parameter, one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Single)">
            <summary>
            Control the generation of texture coordinates
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single-valued texture generation parameter, one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Single[])">
            <summary>
            Control the generation of texture coordinates
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single-valued texture generation parameter, one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Single*)">
            <summary>
            Control the generation of texture coordinates
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single-valued texture generation parameter, one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Int32)">
            <summary>
            Control the generation of texture coordinates
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single-valued texture generation parameter, one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Int32*)">
            <summary>
            Control the generation of texture coordinates
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single-valued texture generation parameter, one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexGen(OpenTK.Graphics.TextureCoordName,OpenTK.Graphics.TextureGenParameter,System.Int32[])">
            <summary>
            Control the generation of texture coordinates
            </summary>
            <param name="coord">
            <para>
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies a single-valued texture generation parameter, one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Specify a one-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage1D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Specify a one-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Specify a one-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Specify a one-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Specify a one-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Specify a two-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Specify a two-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage2D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Specify a two-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Specify a two-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Specify a two-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Specify a three-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage3D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Specify a three-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Specify a three-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Specify a three-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.TextureParameterName,System.Single)">
            <summary>
            Set texture parameters
            </summary>
            <param name="target">
            <para>
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value of pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.TextureParameterName,System.Single[])">
            <summary>
            Set texture parameters
            </summary>
            <param name="target">
            <para>
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value of pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.TextureParameterName,System.Single*)">
            <summary>
            Set texture parameters
            </summary>
            <param name="target">
            <para>
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value of pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.TextureParameterName,System.Int32)">
            <summary>
            Set texture parameters
            </summary>
            <param name="target">
            <para>
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value of pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.TextureParameterName,System.Int32*)">
            <summary>
            Set texture parameters
            </summary>
            <param name="target">
            <para>
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value of pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexParameter(OpenTK.Graphics.TextureTarget,OpenTK.Graphics.TextureParameterName,System.Int32[])">
            <summary>
            Set texture parameters
            </summary>
            <param name="target">
            <para>
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value of pname.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Specify a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Specify a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage1D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Specify a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Specify a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Specify a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Specify a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Specify a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Specify a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Specify a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage2D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Specify a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Specify a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage3D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Specify a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Specify a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.TexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Specify a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Multiply the current matrix by a translation matrix
            </summary>
            <param name="x">
            <para>
            Specify the x, y, and z coordinates of a translation vector.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Multiply the current matrix by a translation matrix
            </summary>
            <param name="x">
            <para>
            Specify the x, y, and z coordinates of a translation vector.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Int32,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Int32,System.Single@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform1(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.Int32,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.Int32,System.Single@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform2(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Int32,System.Single@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Int32,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform3(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Int32,System.Single@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Int32,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Uniform4(System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.UseProgram(System.Int32)">
            <summary>
            Installs a program object as part of current rendering state
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object whose executables are to be used as part of current rendering state.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.UseProgram(System.UInt32)">
            <summary>
            Installs a program object as part of current rendering state
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object whose executables are to be used as part of current rendering state.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ValidateProgram(System.UInt32)">
            <summary>
            Validates a program object
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object to be validated.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.ValidateProgram(System.Int32)">
            <summary>
            Validates a program object
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object to be validated.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Double,System.Double)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Double[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Double*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Double@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Single,System.Single)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Single*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Single[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Single@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Int32,System.Int32)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Int32@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Int32*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Int32[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Int16,System.Int16)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Int16@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Int16*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex2(System.Int16[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Double,System.Double,System.Double)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Double@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Double*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Double[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Single,System.Single,System.Single)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Single*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Single@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Single[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Int32*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Int32@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Int32[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Int16,System.Int16,System.Int16)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Int16*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Int16@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex3(System.Int16[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Double@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Double*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Double[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Single*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Single@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Single[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Int32@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Int32*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Int32[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Int16[])">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Int16@)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Vertex4(System.Int16*)">
            <summary>
            Specify a vertex
            </summary>
            <param name="x">
            <para>
            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.UInt32,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.Int32,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.Int32,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.UInt32,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.UInt32,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.Int32,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib1(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib2(System.Int32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.Int32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib3(System.UInt32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.SByte*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.SByte[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.SByte@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Int32*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Int32@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Int32*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Int32@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Byte@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Byte*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Byte*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.Int32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.Byte@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.UInt32*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.UInt32@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.UInt16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.UInt16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttrib4(System.UInt32,System.UInt16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.Boolean,System.Int32,``0[])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttribPointer(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.Boolean,System.Int32,System.IntPtr)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.Boolean,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.Boolean,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.Boolean,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.Boolean,System.Int32,``0@)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.Boolean,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttribPointer(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.Boolean,System.Int32,System.IntPtr)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.Boolean,System.Int32,``0@)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribPointerType,System.Boolean,System.Int32,``0[])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,System.Int32,``0[])">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,System.Int32,``0@)">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.VertexPointer(System.Int32,OpenTK.Graphics.VertexPointerType,System.Int32,System.IntPtr)">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Viewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the viewport
            </summary>
            <param name="x">
            <para>
            Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            </para>
            </param>
            <param name="width">
            <para>
            Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Double,System.Double)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Double[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Double*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Double@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Single,System.Single)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Single@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Single[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Single*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Int32,System.Int32)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Int32[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Int32*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Int32@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Int16,System.Int16)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Int16*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Int16@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos2(System.Int16[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Double,System.Double,System.Double)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Double*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Double@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Double[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Single,System.Single,System.Single)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Single*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Single@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Single[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Int32[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Int32*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Int32@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Int16,System.Int16,System.Int16)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Int16[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Int16*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.WindowPos3(System.Int16@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.SupportsExtension(System.String)">
            <summary>
            Determines whether the specified OpenGL extension category is available in
            the current OpenGL context. Equivalent to IsExtensionSupported(name, true)
            </summary>
            <param name="name">The string for the OpenGL extension category (eg. "GL_ARB_multitexture")</param>
            <returns>True if the specified extension is available, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetDelegate(System.String)">
            <summary>
            Returns a System.Delegate wrapping the specified OpenGL function. You must use the
            base OpenGL name of the function (e.g. "glVertex3fv" instead of "Vertex3").
            </summary>
            <param name="name">The name of the OpenGL function (eg. "glNewList")</param>
            <returns>
            A System.Delegate that can be used to call this OpenGL function or null, if the specified
            function name does not correspond to an OpenGL function or if the function is not
            supported by the video drivers.
            </returns>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetDelegate(System.String,System.Type)">
            <summary>
            Returns a System.Delegate wrapping an OpenGL function.
            </summary>
            <param name="name">The name of the OpenGL function (eg. "glNewList")</param>
            <param name="signature">The signature of the OpenGL function.</param>
            <returns>
            A System.Delegate that can be used to call this OpenGL function, or null if the specified
            function name did not correspond to an OpenGL function.
            </returns>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadAll">
            <summary>
            Loads all OpenGL functions (core and extensions).
            </summary>
            <remarks>
            <para>
            This function will be automatically called the first time you use any opengl function. There is 
            </para>
            <para>
            Call this function manually whenever you need to update OpenGL entry points.
            This need may arise if you change the pixelformat/visual, or in case you cannot
            (or do not want) to use the automatic initialization of the GL class.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GL.Load(System.String)">
            <summary>
            Tries to reload the given OpenGL function (core or extension).
            </summary>
            <param name="function">The name of the OpenGL function (i.e. glShaderSource)</param>
            <returns>True if the function was found and reloaded, false otherwise.</returns>
            <remarks>
            <para>
            Use this function if you require greater granularity when loading OpenGL entry points.
            </para>
            <para>
            While the automatic initialisation will load all OpenGL entry points, in some cases
            the initialisation can take place before an OpenGL Context has been established.
            In this case, use this function to load the entry points for the OpenGL functions
            you will need, or use ReloadFunctions() to load all available entry points.
            </para>
            <para>
            This function returns true if the given OpenGL function is supported, false otherwise.
            </para>
            <para>
            To query for supported extensions use the IsExtensionSupported() function instead.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GL.LoadDelegate(System.String,System.Type)">
            <private />
            <summary>
            Loads an OpenGL function into a type-safe System.Delegate.
            </summary>
            <param name="name">The name of the OpenGL function (eg. "glNewList")</param>
            <param name="signature">The signature of the OpenGL function.</param>
            <returns>
            A System.Delegate that can be used to call this OpenGL function, or null if the specified
            function name did not correspond to an OpenGL function.
            </returns>
        </member>
        <member name="M:OpenTK.Graphics.GL.SupportsFunction(System.String)">
            <summary>
            Checks if a given OpenGL function is supported by the current context
            </summary>
            <param name="function">The name of the OpenGL function (i.e. glShaderSource)</param>
            <returns>True if the function is supported, false otherwise</returns>
        </member>
        <member name="M:OpenTK.Graphics.GL.SupportsFunction(System.String,System.String)">
            <summary>
            Checks if a given OpenGL function is supported by the current context
            </summary>
            <param name="function">The name of the OpenGL function (e.g. glShaderSource)</param>
            <param name="extension">The name of the extension catagory (e.g. ARB, EXT, ATI, ...)</param>
            <returns>True if the function is supported, false otherwise</returns>
        </member>
        <member name="M:OpenTK.Graphics.GL.SupportsFunction(System.Reflection.MethodInfo)">
            <summary>
            Checks if a given OpenGL function is supported by the current context.
            </summary>
            <param name="function">The System.Reflection.MethodInfo for the OpenGL function.</param>
            <returns>True if the function is supported, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.GL.BuildExtensionList">
            <summary>
            Builds a cache of the supported extensions to speed up searches.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetAddress(System.String)">
            <summary>
            Retrieves the entry point for a dynamically exported OpenGL function.
            </summary>
            <param name="function">The function string for the OpenGL function (eg. "glNewList")</param>
            <returns>
            An IntPtr contaning the address for the entry point, or IntPtr.Zero if the specified
            OpenGL function is not dynamically exported.
            </returns>
            <remarks>
            <para>
            The Marshal.GetDelegateForFunctionPointer method can be used to turn the return value
            into a call-able delegate.
            </para>
            <para>
            This function is cross-platform. It determines the underlying platform and uses the
            correct wgl, glx or agl GetAddress function to retrieve the function pointer.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetExtensionDelegate(System.String,System.Type)">
            <summary>
            Creates a System.Delegate that can be used to call a dynamically exported OpenGL function.
            </summary>
            <param name="name">The name of the OpenGL function (eg. "glNewList")</param>
            <param name="signature">The signature of the OpenGL function.</param>
            <returns>
            A System.Delegate that can be used to call this OpenGL function or null
            if the function is not available in the current OpenGL context.
            </returns>
        </member>
        <member name="M:OpenTK.Graphics.GL.PointParameter(OpenTK.Graphics.PointSpriteCoordOriginParameter)">
            <summary>
            Helper function that defines the coordinate origin of the Point Sprite.
            </summary>
            <param name="param">
            A OpenTK.Graphics.OpenGL.GL.PointSpriteCoordOriginParameter token,
            denoting the origin of the Point Sprite.
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.ActiveTexture(OpenTK.Graphics.TextureUnit)">
            <summary>
            Select active texture unit
            </summary>
            <param name="texture">
            <para>
            Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTURE, where i ranges from 0 to the larger of (GL_MAX_TEXTURE_COORDS - 1) and (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1). The initial value is GL_TEXTURE0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BeginQuery(OpenTK.Graphics.ArbOcclusionQuery,System.Int32)">
            <summary>
            Delimit the boundaries of a query object
            </summary>
            <param name="target">
            <para>
            Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be GL_SAMPLES_PASSED.
            </para>
            </param>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BeginQuery(OpenTK.Graphics.ArbOcclusionQuery,System.UInt32)">
            <summary>
            Delimit the boundaries of a query object
            </summary>
            <param name="target">
            <para>
            Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be GL_SAMPLES_PASSED.
            </para>
            </param>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BindAttribLocation(System.UInt32,System.UInt32,System.String)">
            <summary>
            Associates a generic vertex attribute index with a named attribute variable
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object in which the association is to be made.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be bound.
            </para>
            </param>
            <param name="name">
            <para>
            Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BindAttribLocation(System.Int32,System.Int32,System.String)">
            <summary>
            Associates a generic vertex attribute index with a named attribute variable
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object in which the association is to be made.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be bound.
            </para>
            </param>
            <param name="name">
            <para>
            Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BindBuffer(OpenTK.Graphics.BufferTargetArb,System.UInt32)">
            <summary>
            Bind a named buffer object
            </summary>
            <param name="target">
            <para>
            Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="buffer">
            <para>
            Specifies the name of a buffer object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BindBuffer(OpenTK.Graphics.BufferTargetArb,System.Int32)">
            <summary>
            Bind a named buffer object
            </summary>
            <param name="target">
            <para>
            Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="buffer">
            <para>
            Specifies the name of a buffer object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BufferData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,``0@,OpenTK.Graphics.BufferUsageArb)">
            <summary>
            Creates and initializes a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the buffer object's new data store.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </para>
            </param>
            <param name="usage">
            <para>
            Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BufferData(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,OpenTK.Graphics.BufferUsageArb)">
            <summary>
            Creates and initializes a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the buffer object's new data store.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </para>
            </param>
            <param name="usage">
            <para>
            Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BufferData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,``0[],OpenTK.Graphics.BufferUsageArb)">
            <summary>
            Creates and initializes a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the buffer object's new data store.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </para>
            </param>
            <param name="usage">
            <para>
            Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BufferData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,``0[0:,0:,0:],OpenTK.Graphics.BufferUsageArb)">
            <summary>
            Creates and initializes a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the buffer object's new data store.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </para>
            </param>
            <param name="usage">
            <para>
            Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BufferData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,``0[0:,0:],OpenTK.Graphics.BufferUsageArb)">
            <summary>
            Creates and initializes a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the buffer object's new data store.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </para>
            </param>
            <param name="usage">
            <para>
            Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BufferSubData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,``0[0:,0:])">
            <summary>
            Updates a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being replaced.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the new data that will be copied into the data store.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BufferSubData(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Updates a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being replaced.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the new data that will be copied into the data store.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BufferSubData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,``0[0:,0:,0:])">
            <summary>
            Updates a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being replaced.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the new data that will be copied into the data store.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BufferSubData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,``0@)">
            <summary>
            Updates a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being replaced.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the new data that will be copied into the data store.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.BufferSubData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,``0[])">
            <summary>
            Updates a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being replaced.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the new data that will be copied into the data store.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.ClientActiveTexture(OpenTK.Graphics.TextureUnit)">
            <summary>
            Select active texture unit
            </summary>
            <param name="texture">
            <para>
            Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTURE, where i ranges from 0 to the value of GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value. The initial value is GL_TEXTURE0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompileShader(System.UInt32)">
            <summary>
            Compiles a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be compiled.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompileShader(System.Int32)">
            <summary>
            Compiles a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be compiled.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage1D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a one-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,``0[])">
            <summary>
            Specify a one-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Specify a one-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a one-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Specify a one-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage2D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,``0[])">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a three-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage3D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Specify a three-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Specify a three-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[])">
            <summary>
            Specify a three-dimensional texture image in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage1D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,System.IntPtr)">
            <summary>
            Specify a one-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0@)">
            <summary>
            Specify a one-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[])">
            <summary>
            Specify a one-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:])">
            <summary>
            Specify a one-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a one-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[])">
            <summary>
            Specify a two-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:])">
            <summary>
            Specify a two-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0@)">
            <summary>
            Specify a two-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a two-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage2D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,System.IntPtr)">
            <summary>
            Specify a two-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage3D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[])">
            <summary>
            Specify a three-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:])">
            <summary>
            Specify a three-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0[0:,0:,0:])">
            <summary>
            Specify a three-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.CompressedTexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,System.Int32,``0@)">
            <summary>
            Specify a three-dimensional texture subimage in a compressed format
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the compressed image data stored at address data.
            </para>
            </param>
            <param name="imageSize">
            <para>
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the compressed image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteBuffers(System.Int32,System.Int32[])">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteBuffers(System.Int32,System.Int32*)">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteBuffers(System.Int32,System.UInt32[])">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteBuffers(System.Int32,System.Int32@)">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteBuffers(System.Int32,System.UInt32@)">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteBuffers(System.Int32,System.UInt32*)">
            <summary>
            Delete named buffer objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer objects to be deleted.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array of buffer objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteProgram(System.Int32,System.UInt32@)">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteProgram(System.Int32,System.Int32*)">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteProgram(System.Int32,System.UInt32[])">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteProgram(System.Int32,System.Int32[])">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteProgram(System.Int32,System.UInt32*)">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteProgram(System.Int32,System.Int32@)">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteQueries(System.Int32,System.Int32[])">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteQueries(System.Int32,System.Int32@)">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteQueries(System.Int32,System.UInt32@)">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteQueries(System.Int32,System.Int32*)">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteQueries(System.Int32,System.UInt32*)">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DeleteQueries(System.Int32,System.UInt32[])">
            <summary>
            Delete named query objects
            </summary>
            <param name="n">
            <para>
            Specifies the number of query objects to be deleted.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array of query objects to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DrawBuffers(System.Int32,OpenTK.Graphics.ArbDrawBuffers@)">
            <summary>
            Specifies a list of color buffers to be drawn into
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffers in bufs.
            </para>
            </param>
            <param name="bufs">
            <para>
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DrawBuffers(System.Int32,OpenTK.Graphics.ArbDrawBuffers[])">
            <summary>
            Specifies a list of color buffers to be drawn into
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffers in bufs.
            </para>
            </param>
            <param name="bufs">
            <para>
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.DrawBuffers(System.Int32,OpenTK.Graphics.ArbDrawBuffers*)">
            <summary>
            Specifies a list of color buffers to be drawn into
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffers in bufs.
            </para>
            </param>
            <param name="bufs">
            <para>
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.EnableVertexAttribArray(System.UInt32)">
            <summary>
            Enable or disable a generic vertex attribute array
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be enabled or disabled.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.EnableVertexAttribArray(System.Int32)">
            <summary>
            Enable or disable a generic vertex attribute array
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be enabled or disabled.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenBuffers(System.Int32,System.UInt32[])">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenBuffers(System.Int32,System.Int32*)">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenBuffers(System.Int32,System.UInt32@)">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenBuffers(System.Int32,System.Int32[])">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenBuffers(System.Int32,System.UInt32*)">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenBuffers(System.Int32,System.Int32@)">
            <summary>
            Generate buffer object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffer object names to be generated.
            </para>
            </param>
            <param name="buffers">
            <para>
            Specifies an array in which the generated buffer object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenQueries(System.Int32,System.UInt32[])">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenQueries(System.Int32,System.UInt32@)">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenQueries(System.Int32,System.Int32[])">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenQueries(System.Int32,System.Int32*)">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenQueries(System.Int32,System.UInt32*)">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GenQueries(System.Int32,System.Int32@)">
            <summary>
            Generate query object names
            </summary>
            <param name="n">
            <para>
            Specifies the number of query object names to be generated.
            </para>
            </param>
            <param name="ids">
            <para>
            Specifies an array in which the generated query object names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetActiveAttrib(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,OpenTK.Graphics.ArbVertexShader*,System.Text.StringBuilder)">
            <summary>
            Returns information about an active attribute variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the attribute variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the attribute variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the attribute variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the attribute variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetActiveAttrib(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,OpenTK.Graphics.ArbVertexShader@,System.Text.StringBuilder)">
            <summary>
            Returns information about an active attribute variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the attribute variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the attribute variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the attribute variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the attribute variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetActiveAttrib(System.Int32,System.Int32,System.Int32,System.Int32*,System.Int32*,OpenTK.Graphics.ArbVertexShader*,System.Text.StringBuilder)">
            <summary>
            Returns information about an active attribute variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the attribute variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the attribute variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the attribute variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the attribute variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetActiveAttrib(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,OpenTK.Graphics.ArbVertexShader@,System.Text.StringBuilder)">
            <summary>
            Returns information about an active attribute variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the attribute variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the attribute variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the attribute variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the attribute variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetActiveUniform(System.Int32,System.Int32,System.Int32,System.Int32*,System.Int32*,OpenTK.Graphics.ArbShaderObjects*,System.Text.StringBuilder)">
            <summary>
            Returns information about an active uniform variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the uniform variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the uniform variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the uniform variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetActiveUniform(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,OpenTK.Graphics.ArbShaderObjects@,System.Text.StringBuilder)">
            <summary>
            Returns information about an active uniform variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the uniform variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the uniform variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the uniform variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetActiveUniform(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,OpenTK.Graphics.ArbShaderObjects@,System.Text.StringBuilder)">
            <summary>
            Returns information about an active uniform variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the uniform variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the uniform variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the uniform variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetActiveUniform(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,OpenTK.Graphics.ArbShaderObjects*,System.Text.StringBuilder)">
            <summary>
            Returns information about an active uniform variable for the specified program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="index">
            <para>
            Specifies the index of the uniform variable to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </para>
            </param>
            <param name="size">
            <para>
            Returns the size of the uniform variable.
            </para>
            </param>
            <param name="type">
            <para>
            Returns the data type of the uniform variable.
            </para>
            </param>
            <param name="name">
            <para>
            Returns a null terminated string containing the name of the uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetAttribLocation(System.UInt32,System.String)">
            <summary>
            Returns the location of an attribute variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="name">
            <para>
            Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetAttribLocation(System.Int32,System.String)">
            <summary>
            Returns the location of an attribute variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="name">
            <para>
            Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetBufferSubData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,``0[0:,0:])">
            <summary>
            Returns a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being returned.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the location where buffer object data is returned.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetBufferSubData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,``0[0:,0:,0:])">
            <summary>
            Returns a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being returned.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the location where buffer object data is returned.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetBufferSubData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,``0@)">
            <summary>
            Returns a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being returned.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the location where buffer object data is returned.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetBufferSubData``1(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,``0[])">
            <summary>
            Returns a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being returned.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the location where buffer object data is returned.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetBufferSubData(OpenTK.Graphics.BufferTargetArb,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Returns a subset of a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="offset">
            <para>
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the size in bytes of the data store region being returned.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the location where buffer object data is returned.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetCompressedTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,``0[0:,0:])">
            <summary>
            Return a compressed texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="lod">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the compressed texture image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetCompressedTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,``0[])">
            <summary>
            Return a compressed texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="lod">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the compressed texture image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetCompressedTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,``0@)">
            <summary>
            Return a compressed texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="lod">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the compressed texture image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetCompressedTexImage(OpenTK.Graphics.TextureTarget,System.Int32,System.IntPtr)">
            <summary>
            Return a compressed texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="lod">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the compressed texture image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetCompressedTexImage``1(OpenTK.Graphics.TextureTarget,System.Int32,``0[0:,0:,0:])">
            <summary>
            Return a compressed texture image
            </summary>
            <param name="target">
            <para>
            Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
            </para>
            </param>
            <param name="lod">
            <para>
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
            </para>
            </param>
            <param name="img">
            <para>
            Returns the compressed texture image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetProgram(OpenTK.Graphics.AssemblyProgramTargetArb,OpenTK.Graphics.AssemblyProgramParameterArb,System.Int32*)">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetProgram(OpenTK.Graphics.AssemblyProgramTargetArb,OpenTK.Graphics.AssemblyProgramParameterArb,System.Int32@)">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetQueryObject(System.UInt32,OpenTK.Graphics.ArbOcclusionQuery,System.Int32@)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetQueryObject(System.UInt32,OpenTK.Graphics.ArbOcclusionQuery,System.Int32*)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetQueryObject(System.Int32,OpenTK.Graphics.ArbOcclusionQuery,System.Int32*)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetQueryObject(System.Int32,OpenTK.Graphics.ArbOcclusionQuery,System.Int32[])">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetQueryObject(System.Int32,OpenTK.Graphics.ArbOcclusionQuery,System.Int32@)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetQueryObject(System.UInt32,OpenTK.Graphics.ArbOcclusionQuery,System.Int32[])">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetQueryObject(System.UInt32,OpenTK.Graphics.ArbOcclusionQuery,System.UInt32[])">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetQueryObject(System.UInt32,OpenTK.Graphics.ArbOcclusionQuery,System.UInt32*)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetQueryObject(System.UInt32,OpenTK.Graphics.ArbOcclusionQuery,System.UInt32@)">
            <summary>
            Return parameters of a query object
            </summary>
            <param name="id">
            <para>
            Specifies the name of a query object.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetShaderSource(System.Int32,System.Int32,System.Int32*,System.Text.StringBuilder[])">
            <summary>
            Returns the source code string from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the size of the character buffer for storing the returned source code string.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in source (excluding the null terminator).
            </para>
            </param>
            <param name="source">
            <para>
            Specifies an array of characters that is used to return the source code string.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetShaderSource(System.UInt32,System.Int32,System.Int32*,System.Text.StringBuilder[])">
            <summary>
            Returns the source code string from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the size of the character buffer for storing the returned source code string.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in source (excluding the null terminator).
            </para>
            </param>
            <param name="source">
            <para>
            Specifies an array of characters that is used to return the source code string.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetShaderSource(System.Int32,System.Int32,System.Int32@,System.Text.StringBuilder[])">
            <summary>
            Returns the source code string from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the size of the character buffer for storing the returned source code string.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in source (excluding the null terminator).
            </para>
            </param>
            <param name="source">
            <para>
            Specifies an array of characters that is used to return the source code string.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetShaderSource(System.UInt32,System.Int32,System.Int32@,System.Text.StringBuilder[])">
            <summary>
            Returns the source code string from a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the shader object to be queried.
            </para>
            </param>
            <param name="bufSize">
            <para>
            Specifies the size of the character buffer for storing the returned source code string.
            </para>
            </param>
            <param name="length">
            <para>
            Returns the length of the string returned in source (excluding the null terminator).
            </para>
            </param>
            <param name="source">
            <para>
            Specifies an array of characters that is used to return the source code string.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.Int32,System.Int32,System.Single@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.UInt32,System.Int32,System.Single*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.Int32,System.Int32,System.Single*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.UInt32,System.Int32,System.Single[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.UInt32,System.Int32,System.Single@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.UInt32,System.Int32,System.Int32*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.UInt32,System.Int32,System.Int32[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniform(System.UInt32,System.Int32,System.Int32@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniformLocation(System.Int32,System.String)">
            <summary>
            Returns the location of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="name">
            <para>
            Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetUniformLocation(System.UInt32,System.String)">
            <summary>
            Returns the location of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="name">
            <para>
            Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Double[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameterArb,System.Double[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Double*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameterArb,System.Double@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Double@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameterArb,System.Double*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Single@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameterArb,System.Single*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Single*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameterArb,System.Single[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Single[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameterArb,System.Single@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32[])">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.GetVertexAttrib(System.UInt32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.IsBuffer(System.Int32)">
            <summary>
            Determine if a name corresponds to a buffer object
            </summary>
            <param name="buffer">
            <para>
            Specifies a value that may be the name of a buffer object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.IsBuffer(System.UInt32)">
            <summary>
            Determine if a name corresponds to a buffer object
            </summary>
            <param name="buffer">
            <para>
            Specifies a value that may be the name of a buffer object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.IsProgram(System.UInt32)">
            <summary>
            Determines if a name corresponds to a program object
            </summary>
            <param name="program">
            <para>
            Specifies a potential program object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.IsProgram(System.Int32)">
            <summary>
            Determines if a name corresponds to a program object
            </summary>
            <param name="program">
            <para>
            Specifies a potential program object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.IsQuery(System.UInt32)">
            <summary>
            Determine if a name corresponds to a query object
            </summary>
            <param name="id">
            <para>
            Specifies a value that may be the name of a query object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.IsQuery(System.Int32)">
            <summary>
            Determine if a name corresponds to a query object
            </summary>
            <param name="id">
            <para>
            Specifies a value that may be the name of a query object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.LinkProgram(System.Int32)">
            <summary>
            Links a program object
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object to be linked.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.LinkProgram(System.UInt32)">
            <summary>
            Links a program object
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object to be linked.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.LoadTransposeMatrix(System.Double@)">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.LoadTransposeMatrix(System.Double*)">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.LoadTransposeMatrix(System.Double[])">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.LoadTransposeMatrix(System.Single@)">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.LoadTransposeMatrix(System.Single[])">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.LoadTransposeMatrix(System.Single*)">
            <summary>
            Replace the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MapBuffer(OpenTK.Graphics.BufferTargetArb,OpenTK.Graphics.ArbVertexBufferObject)">
            <summary>
            Map a buffer object's data store
            </summary>
            <param name="target">
            <para>
            Specifies the target buffer object being mapped. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
            </para>
            </param>
            <param name="access">
            <para>
            Specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord1(OpenTK.Graphics.TextureUnit,System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Double,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Double[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Double@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Single,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Single[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Single@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int32,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int32@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int32[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int16,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int16@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int16[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord2(OpenTK.Graphics.TextureUnit,System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Double,System.Double,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Double@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Double[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Single,System.Single,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Single[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Single@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int32@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int32[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int16@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord3(OpenTK.Graphics.TextureUnit,System.Int16[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Double[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Double@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Double*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Single*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Single@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Single[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int32@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int32*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int32[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int16@)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int16[])">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultiTexCoord4(OpenTK.Graphics.TextureUnit,System.Int16*)">
            <summary>
            Set the current texture coordinates
            </summary>
            <param name="target">
            <para>
            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
            </para>
            </param>
            <param name="s">
            <para>
            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultTransposeMatrix(System.Double@)">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultTransposeMatrix(System.Double[])">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultTransposeMatrix(System.Double*)">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultTransposeMatrix(System.Single@)">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultTransposeMatrix(System.Single*)">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.MultTransposeMatrix(System.Single[])">
            <summary>
            Multiply the current matrix with the specified row-major ordered matrix
            </summary>
            <param name="m">
            <para>
            Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.PointParameter(OpenTK.Graphics.ArbPointParameters,System.Single)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.PointParameter(OpenTK.Graphics.ArbPointParameters,System.Single*)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.PointParameter(OpenTK.Graphics.ArbPointParameters,System.Single[])">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.SampleCoverage(System.Single,System.Boolean)">
            <summary>
            Specify multisample coverage parameters
            </summary>
            <param name="value">
            <para>
            Specify a single floating-point sample coverage value. The value is clamped to the range [0 ,1]. The initial value is 1.0.
            </para>
            </param>
            <param name="invert">
            <para>
            Specify a single boolean value representing if the coverage masks should be inverted. GL_TRUE and GL_FALSE are accepted. The initial value is GL_FALSE.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.ShaderSource(System.UInt32,System.Int32,System.String[],System.Int32*)">
            <summary>
            Replaces the source code in a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the handle of the shader object whose source code is to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements in the string and length arrays.
            </para>
            </param>
            <param name="string">
            <para>
            Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            </para>
            </param>
            <param name="length">
            <para>
            Specifies an array of string lengths.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.ShaderSource(System.UInt32,System.Int32,System.String[],System.Int32@)">
            <summary>
            Replaces the source code in a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the handle of the shader object whose source code is to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements in the string and length arrays.
            </para>
            </param>
            <param name="string">
            <para>
            Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            </para>
            </param>
            <param name="length">
            <para>
            Specifies an array of string lengths.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.ShaderSource(System.Int32,System.Int32,System.String[],System.Int32@)">
            <summary>
            Replaces the source code in a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the handle of the shader object whose source code is to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements in the string and length arrays.
            </para>
            </param>
            <param name="string">
            <para>
            Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            </para>
            </param>
            <param name="length">
            <para>
            Specifies an array of string lengths.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.ShaderSource(System.Int32,System.Int32,System.String[],System.Int32*)">
            <summary>
            Replaces the source code in a shader object
            </summary>
            <param name="shader">
            <para>
            Specifies the handle of the shader object whose source code is to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements in the string and length arrays.
            </para>
            </param>
            <param name="string">
            <para>
            Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            </para>
            </param>
            <param name="length">
            <para>
            Specifies an array of string lengths.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform1(System.Int32,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform1(System.Int32,System.Int32,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform1(System.Int32,System.Int32,System.Single@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform1(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform1(System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform1(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform1(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform1(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform2(System.Int32,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform2(System.Int32,System.Int32,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform2(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform2(System.Int32,System.Int32,System.Single@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform2(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform2(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform2(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform3(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform3(System.Int32,System.Int32,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform3(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform3(System.Int32,System.Int32,System.Single@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform3(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform3(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform3(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform3(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform4(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform4(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform4(System.Int32,System.Int32,System.Single@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform4(System.Int32,System.Int32,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform4(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform4(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform4(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.Uniform4(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.ValidateProgram(System.UInt32)">
            <summary>
            Validates a program object
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object to be validated.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.ValidateProgram(System.Int32)">
            <summary>
            Validates a program object
            </summary>
            <param name="program">
            <para>
            Specifies the handle of the program object to be validated.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.UInt32,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.Int32,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.UInt32,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.Int32,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.Int32,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.UInt32,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib1(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib2(System.Int32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib3(System.Int32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.SByte*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.SByte@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.SByte[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Int32@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Int32*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Int32*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Int32@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Byte*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Byte*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Byte@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.Int32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.Byte@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.UInt32*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.UInt32@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.UInt16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.UInt16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttrib4(System.UInt32,System.UInt16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribPointerTypeArb,System.Boolean,System.Int32,``0@)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribPointerTypeArb,System.Boolean,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribPointerTypeArb,System.Boolean,System.Int32,``0[])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribPointerTypeArb,System.Boolean,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribPointerTypeArb,System.Boolean,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribPointerTypeArb,System.Boolean,System.Int32,``0[])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribPointerTypeArb,System.Boolean,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttribPointer(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribPointerTypeArb,System.Boolean,System.Int32,System.IntPtr)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribPointerTypeArb,System.Boolean,System.Int32,``0@)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.VertexAttribPointer(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribPointerTypeArb,System.Boolean,System.Int32,System.IntPtr)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Double,System.Double)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Double@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Double*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Double[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Single,System.Single)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Single*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Single[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Single@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Int32,System.Int32)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Int32*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Int32[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Int32@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Int16,System.Int16)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Int16*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Int16[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos2(System.Int16@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Double,System.Double,System.Double)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Double@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Double*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Double[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Single,System.Single,System.Single)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Single*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Single[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Single@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Int32[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Int32*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Int32@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Int16,System.Int16,System.Int16)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Int16@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Int16*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Arb.WindowPos3(System.Int16[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ati.DrawBuffers(System.Int32,OpenTK.Graphics.AtiDrawBuffers[])">
            <summary>
            Specifies a list of color buffers to be drawn into
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffers in bufs.
            </para>
            </param>
            <param name="bufs">
            <para>
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ati.DrawBuffers(System.Int32,OpenTK.Graphics.AtiDrawBuffers@)">
            <summary>
            Specifies a list of color buffers to be drawn into
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffers in bufs.
            </para>
            </param>
            <param name="bufs">
            <para>
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ati.DrawBuffers(System.Int32,OpenTK.Graphics.AtiDrawBuffers*)">
            <summary>
            Specifies a list of color buffers to be drawn into
            </summary>
            <param name="n">
            <para>
            Specifies the number of buffers in bufs.
            </para>
            </param>
            <param name="bufs">
            <para>
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ati.StencilFuncSeparate(OpenTK.Graphics.StencilFunction,OpenTK.Graphics.StencilFunction,System.Int32,System.Int32)">
            <summary>
            Set front and/or back function and reference value for stencil testing
            </summary>
            <param name="face">
            <para>
            Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="func">
            <para>
            Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
            </para>
            </param>
            <param name="ref">
            <para>
            Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
            </para>
            </param>
            <param name="mask">
            <para>
            Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ati.StencilFuncSeparate(OpenTK.Graphics.StencilFunction,OpenTK.Graphics.StencilFunction,System.Int32,System.UInt32)">
            <summary>
            Set front and/or back function and reference value for stencil testing
            </summary>
            <param name="face">
            <para>
            Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="func">
            <para>
            Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
            </para>
            </param>
            <param name="ref">
            <para>
            Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
            </para>
            </param>
            <param name="mask">
            <para>
            Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ati.StencilOpSeparate(OpenTK.Graphics.AtiSeparateStencil,OpenTK.Graphics.StencilOp,OpenTK.Graphics.StencilOp,OpenTK.Graphics.StencilOp)">
            <summary>
            Set front and/or back stencil test actions
            </summary>
            <param name="face">
            <para>
            Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
            </para>
            </param>
            <param name="sfail">
            <para>
            Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
            </para>
            </param>
            <param name="dpfail">
            <para>
            Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
            </para>
            </param>
            <param name="dppass">
            <para>
            Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.AreTexturesResident(System.Int32,System.Int32@,System.Boolean@)">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.AreTexturesResident(System.Int32,System.UInt32*,System.Boolean*)">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.AreTexturesResident(System.Int32,System.Int32*,System.Boolean*)">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.AreTexturesResident(System.Int32,System.UInt32[],System.Boolean[])">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.AreTexturesResident(System.Int32,System.Int32[],System.Boolean[])">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.AreTexturesResident(System.Int32,System.UInt32@,System.Boolean@)">
            <summary>
            Determine if textures are loaded in texture memory
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be queried.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be queried.
            </para>
            </param>
            <param name="residences">
            <para>
            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ArrayElement(System.Int32)">
            <summary>
            Render a vertex using the specified vertex array element
            </summary>
            <param name="i">
            <para>
            Specifies an index into the enabled vertex data arrays.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.BindTexture(OpenTK.Graphics.TextureTarget,System.UInt32)">
            <summary>
            Bind a named texture to a texturing target
            </summary>
            <param name="target">
            <para>
            Specifies the target to which the texture is bound. Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="texture">
            <para>
            Specifies the name of a texture.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.BindTexture(OpenTK.Graphics.TextureTarget,System.Int32)">
            <summary>
            Bind a named texture to a texturing target
            </summary>
            <param name="target">
            <para>
            Specifies the target to which the texture is bound. Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </para>
            </param>
            <param name="texture">
            <para>
            Specifies the name of a texture.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.BlendColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the blend color
            </summary>
            <param name="red">
            <para>
            specify the components of GL_BLEND_COLOR
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.BlendEquation(OpenTK.Graphics.ExtBlendMinmax)">
            <summary>
            Specify the equation used for both the RGB blend equation and the Alpha blend equation
            </summary>
            <param name="mode">
            <para>
            specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.BlendEquationSeparate(OpenTK.Graphics.ExtBlendEquationSeparate,OpenTK.Graphics.ExtBlendEquationSeparate)">
            <summary>
            Set the RGB blend equation and the alpha blend equation separately
            </summary>
            <param name="modeRGB">
            <para>
            specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            </para>
            </param>
            <param name="modeAlpha">
            <para>
            specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.BlendFuncSeparate(OpenTK.Graphics.ExtBlendFuncSeparate,OpenTK.Graphics.ExtBlendFuncSeparate,OpenTK.Graphics.ExtBlendFuncSeparate,OpenTK.Graphics.ExtBlendFuncSeparate)">
            <summary>
            Specify pixel arithmetic for RGB and alpha components separately
            </summary>
            <param name="srcRGB">
            <para>
            Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.
            </para>
            </param>
            <param name="dstRGB">
            <para>
            Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
            </para>
            </param>
            <param name="srcAlpha">
            <para>
            Specified how the alpha source blending factor is computed. The same symbolic constants are accepted as for srcRGB. The initial value is GL_ONE.
            </para>
            </param>
            <param name="dstAlpha">
            <para>
            Specified how the alpha destination blending factor is computed. The same symbolic constants are accepted as for dstRGB. The initial value is GL_ZERO.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorPointer(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,System.Int32,``0@)">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,System.Int32,``0[])">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorSubTable``1(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            The number of table entries to replace.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorSubTable(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            The number of table entries to replace.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorSubTable``1(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            The number of table entries to replace.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorSubTable``1(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            The number of table entries to replace.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorSubTable``1(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="count">
            <para>
            The number of table entries to replace.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorTable(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionFilter1D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Define a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionFilter1D(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Define a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionFilter1D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Define a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionFilter1D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Define a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionFilter1D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Define a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionFilter2D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Define a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionFilter2D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Define a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionFilter2D(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Define a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionFilter2D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Define a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionFilter2D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Define a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array referenced by data.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array referenced by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Single)">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Single[])">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Single*)">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Int32)">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Int32*)">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Int32[])">
            <summary>
            Set convolution parameters
            </summary>
            <param name="target">
            <para>
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
            </para>
            </param>
            <param name="params">
            <para>
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
            </para>
            <para>
            
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.CopyColorSubTable(OpenTK.Graphics.ColorTableTarget,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Respecify a portion of a color table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="start">
            <para>
            The starting index of the portion of the color table to be replaced.
            </para>
            </param>
            <param name="x">
            <para>
            The window coordinates of the left corner of the row of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            The number of table entries to replace.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.CopyConvolutionFilter1D(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a one-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_1D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="x">
            <para>
            The window space coordinates of the lower-left coordinate of the pixel array to copy.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array to copy.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.CopyConvolutionFilter2D(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="x">
            <para>
            The window space coordinates of the lower-left coordinate of the pixel array to copy.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel array to copy.
            </para>
            </param>
            <param name="height">
            <para>
            The height of the pixel array to copy.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.CopyTexImage1D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a 1D texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the window coordinates of the left corner of the row of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image. Must be 0 or 2 sup n + 2 ( border ) for some integer . The height of the texture image is 1.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.CopyTexImage2D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a 2D texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="internalformat">
            <para>
            Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image. Must be 0 or 2 sup n + 2 ( border ) for some integer .
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image. Must be 0 or 2 sup m + 2 ( border ) for some integer .
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.CopyTexSubImage1D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies the texel offset within the texture array.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the window coordinates of the left corner of the row of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.CopyTexSubImage2D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.CopyTexSubImage3D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="x">
            <para>
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DeleteTextures(System.Int32,System.UInt32*)">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DeleteTextures(System.Int32,System.Int32@)">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DeleteTextures(System.Int32,System.Int32*)">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DeleteTextures(System.Int32,System.UInt32@)">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DeleteTextures(System.Int32,System.Int32[])">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DeleteTextures(System.Int32,System.UInt32[])">
            <summary>
            Delete named textures
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be deleted.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array of textures to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawArrays(OpenTK.Graphics.BeginMode,System.Int32,System.Int32)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="first">
            <para>
            Specifies the starting index in the enabled arrays.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of indices to be rendered.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawRangeElements(OpenTK.Graphics.BeginMode,System.UInt32,System.UInt32,System.Int32,OpenTK.Graphics.DrawElementsType,System.IntPtr)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawRangeElements(OpenTK.Graphics.BeginMode,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.DrawElementsType,System.IntPtr)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.UInt32,System.UInt32,System.Int32,OpenTK.Graphics.DrawElementsType,``0@)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.DrawElementsType,``0@)">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.UInt32,System.UInt32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.UInt32,System.UInt32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[0:,0:])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.DrawRangeElements``1(OpenTK.Graphics.BeginMode,System.UInt32,System.UInt32,System.Int32,OpenTK.Graphics.DrawElementsType,``0[0:,0:])">
            <summary>
            Render primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="start">
            <para>
            Specifies the minimum array index contained in indices.
            </para>
            </param>
            <param name="end">
            <para>
            Specifies the maximum array index contained in indices.
            </para>
            </param>
            <param name="count">
            <para>
            Specifies the number of elements to be rendered.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.EdgeFlagPointer(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Define an array of edge flags
            </summary>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first edge flag in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.EdgeFlagPointer(System.Int32,System.Int32,System.Boolean*)">
            <summary>
            Define an array of edge flags
            </summary>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first edge flag in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.EdgeFlagPointer(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            Define an array of edge flags
            </summary>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first edge flag in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.FogCoord(System.Double)">
            <summary>
            Set the current fog coordinates
            </summary>
            <param name="coord">
            <para>
            Specify the fog distance.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.FogCoord(System.Double*)">
            <summary>
            Set the current fog coordinates
            </summary>
            <param name="coord">
            <para>
            Specify the fog distance.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.FogCoord(System.Single)">
            <summary>
            Set the current fog coordinates
            </summary>
            <param name="coord">
            <para>
            Specify the fog distance.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.FogCoord(System.Single*)">
            <summary>
            Set the current fog coordinates
            </summary>
            <param name="coord">
            <para>
            Specify the fog distance.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.FogCoordPointer(OpenTK.Graphics.ExtFogCoord,System.Int32,System.IntPtr)">
            <summary>
            Define an array of fog coordinates
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.FogCoordPointer``1(OpenTK.Graphics.ExtFogCoord,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of fog coordinates
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.FogCoordPointer``1(OpenTK.Graphics.ExtFogCoord,System.Int32,``0[])">
            <summary>
            Define an array of fog coordinates
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.FogCoordPointer``1(OpenTK.Graphics.ExtFogCoord,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of fog coordinates
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.FogCoordPointer``1(OpenTK.Graphics.ExtFogCoord,System.Int32,``0@)">
            <summary>
            Define an array of fog coordinates
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GenTextures(System.Int32,System.Int32@)">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GenTextures(System.Int32,System.UInt32@)">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GenTextures(System.Int32,System.Int32*)">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GenTextures(System.Int32,System.UInt32*)">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GenTextures(System.Int32,System.UInt32[])">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GenTextures(System.Int32,System.Int32[])">
            <summary>
            Generate texture names
            </summary>
            <param name="n">
            <para>
            Specifies the number of texture names to be generated.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array in which the generated texture names are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTable(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTable``1(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Single[])">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Single@)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Single*)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Int32*)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Int32[])">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetColorTableParameter(OpenTK.Graphics.ColorTableTarget,OpenTK.Graphics.GetColorTableParameterPName,System.Int32@)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionFilter``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Get current 1D or 2D convolution filter kernel
            </summary>
            <param name="target">
            <para>
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="image">
            <para>
            Pointer to storage for the output image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionFilter``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Get current 1D or 2D convolution filter kernel
            </summary>
            <param name="target">
            <para>
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="image">
            <para>
            Pointer to storage for the output image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionFilter``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Get current 1D or 2D convolution filter kernel
            </summary>
            <param name="target">
            <para>
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="image">
            <para>
            Pointer to storage for the output image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionFilter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Get current 1D or 2D convolution filter kernel
            </summary>
            <param name="target">
            <para>
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="image">
            <para>
            Pointer to storage for the output image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionFilter``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Get current 1D or 2D convolution filter kernel
            </summary>
            <param name="target">
            <para>
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="image">
            <para>
            Pointer to storage for the output image.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Single*)">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Single@)">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Single[])">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Int32*)">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Int32@)">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetConvolutionParameter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.ExtConvolution,System.Int32[])">
            <summary>
            Get convolution parameters
            </summary>
            <param name="target">
            <para>
            The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the parameters to be retrieved.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogram``1(OpenTK.Graphics.ExtHistogram,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Get histogram table
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
            </para>
            </param>
            <param name="format">
            <para>
            The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned histogram table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogram``1(OpenTK.Graphics.ExtHistogram,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Get histogram table
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
            </para>
            </param>
            <param name="format">
            <para>
            The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned histogram table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogram``1(OpenTK.Graphics.ExtHistogram,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Get histogram table
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
            </para>
            </param>
            <param name="format">
            <para>
            The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned histogram table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogram(OpenTK.Graphics.ExtHistogram,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Get histogram table
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
            </para>
            </param>
            <param name="format">
            <para>
            The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned histogram table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogram``1(OpenTK.Graphics.ExtHistogram,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Get histogram table
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
            </para>
            </param>
            <param name="format">
            <para>
            The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned histogram table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogramParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Single[])">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogramParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Single@)">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogramParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Single*)">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogramParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Int32[])">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogramParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Int32*)">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetHistogramParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Int32@)">
            <summary>
            Get histogram parameters
            </summary>
            <param name="target">
            <para>
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="pname">
            <para>
            The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            Pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmax(OpenTK.Graphics.ExtHistogram,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Get minimum and maximum pixel values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="types">
            <para>
            The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmax``1(OpenTK.Graphics.ExtHistogram,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Get minimum and maximum pixel values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="types">
            <para>
            The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmax``1(OpenTK.Graphics.ExtHistogram,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Get minimum and maximum pixel values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="types">
            <para>
            The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmax``1(OpenTK.Graphics.ExtHistogram,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Get minimum and maximum pixel values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="types">
            <para>
            The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmax``1(OpenTK.Graphics.ExtHistogram,System.Boolean,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Get minimum and maximum pixel values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="reset">
            <para>
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="types">
            <para>
            The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="values">
            <para>
            A pointer to storage for the returned values.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmaxParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Single*)">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmaxParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Single@)">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmaxParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Single[])">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmaxParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Int32*)">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmaxParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Int32[])">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetMinmaxParameter(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.ExtHistogram,System.Int32@)">
            <summary>
            Get minmax parameters
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
            <param name="pname">
            <para>
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to storage for the retrieved parameters.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr,``0@)">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``3(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:],``1[0:,0:,0:],``2[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``3(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:],``1[0:,0:,0:],``2[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``3(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@,``1[0:,0:,0:],``2[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``2(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0@,``1[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``3(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[],``1[0:,0:,0:],``2[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr,``0[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr,``0[])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr,``0[0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``2(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[0:,0:],``1[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``2(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[0:,0:,0:],``1[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetSeparableFilter``2(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[],``1[0:,0:,0:])">
            <summary>
            Get separable convolution filter kernel images
            </summary>
            <param name="target">
            <para>
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="format">
            <para>
            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to storage for the row filter image.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to storage for the column filter image.
            </para>
            </param>
            <param name="span">
            <para>
            Pointer to storage for the span filter image (currently unused).
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetUniform(System.UInt32,System.Int32,System.UInt32@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetUniform(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetUniform(System.UInt32,System.Int32,System.UInt32*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetUniform(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetUniform(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.GetUniform(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            Returns the value of a uniform variable
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be queried.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the value of the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Histogram(OpenTK.Graphics.ExtHistogram,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Boolean)">
            <summary>
            Define histogram table
            </summary>
            <param name="target">
            <para>
            The histogram whose parameters are to be set. Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the histogram table. Must be a power of 2.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The format of entries in the histogram table. Must be one of GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="sink">
            <para>
            If GL_TRUE, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If GL_FALSE, pixels will proceed to the minmax process after histogramming.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.IndexPointer``1(OpenTK.Graphics.IndexPointerType,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of color indexes
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first index in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.IndexPointer``1(OpenTK.Graphics.IndexPointerType,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of color indexes
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first index in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.IndexPointer(OpenTK.Graphics.IndexPointerType,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Define an array of color indexes
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first index in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.IndexPointer``1(OpenTK.Graphics.IndexPointerType,System.Int32,System.Int32,``0@)">
            <summary>
            Define an array of color indexes
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first index in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.IndexPointer``1(OpenTK.Graphics.IndexPointerType,System.Int32,System.Int32,``0[])">
            <summary>
            Define an array of color indexes
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first index in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.IsTexture(System.Int32)">
            <summary>
            Determine if a name corresponds to a texture
            </summary>
            <param name="texture">
            <para>
            Specifies a value that may be the name of a texture.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.IsTexture(System.UInt32)">
            <summary>
            Determine if a name corresponds to a texture
            </summary>
            <param name="texture">
            <para>
            Specifies a value that may be the name of a texture.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Minmax(OpenTK.Graphics.ExtHistogram,OpenTK.Graphics.PixelInternalFormat,System.Boolean)">
            <summary>
            Define minmax table
            </summary>
            <param name="target">
            <para>
            The minmax table whose parameters are to be set. Must be GL_MINMAX.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The format of entries in the minmax table. Must be one of GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="sink">
            <para>
            If GL_TRUE, pixels will be consumed by the minmax process and no drawing or texture loading will take place. If GL_FALSE, pixels will proceed to the final conversion process after minmax.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawArrays(OpenTK.Graphics.BeginMode,System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Render multiple sets of primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="first">
            <para>
            Points to an array of starting indices in the enabled arrays.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the number of indices to be rendered.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the first and count
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawArrays(OpenTK.Graphics.BeginMode,System.Int32*,System.Int32*,System.Int32)">
            <summary>
            Render multiple sets of primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="first">
            <para>
            Points to an array of starting indices in the enabled arrays.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the number of indices to be rendered.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the first and count
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawArrays(OpenTK.Graphics.BeginMode,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Render multiple sets of primitives from array data
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="first">
            <para>
            Points to an array of starting indices in the enabled arrays.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the number of indices to be rendered.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the first and count
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32*,OpenTK.Graphics.DrawElementsType,``0[0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32@,OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32[],OpenTK.Graphics.DrawElementsType,``0[],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32*,OpenTK.Graphics.DrawElementsType,``0[],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements(OpenTK.Graphics.BeginMode,System.Int32[],OpenTK.Graphics.DrawElementsType,System.IntPtr,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements(OpenTK.Graphics.BeginMode,System.Int32*,OpenTK.Graphics.DrawElementsType,System.IntPtr,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32*,OpenTK.Graphics.DrawElementsType,``0@,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32[],OpenTK.Graphics.DrawElementsType,``0[0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32*,OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32@,OpenTK.Graphics.DrawElementsType,``0@,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32@,OpenTK.Graphics.DrawElementsType,``0[],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32[],OpenTK.Graphics.DrawElementsType,``0@,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32@,OpenTK.Graphics.DrawElementsType,``0[0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements(OpenTK.Graphics.BeginMode,System.Int32@,OpenTK.Graphics.DrawElementsType,System.IntPtr,System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.MultiDrawElements``1(OpenTK.Graphics.BeginMode,System.Int32[],OpenTK.Graphics.DrawElementsType,``0[0:,0:,0:],System.Int32)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements
            </summary>
            <param name="mode">
            <para>
            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
            </para>
            </param>
            <param name="count">
            <para>
            Points to an array of the elements counts.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </para>
            </param>
            <param name="indices">
            <para>
            Specifies a pointer to the location where the indices are stored.
            </para>
            </param>
            <param name="primcount">
            <para>
            Specifies the size of the count array.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.NormalPointer``1(OpenTK.Graphics.NormalPointerType,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.NormalPointer(OpenTK.Graphics.NormalPointerType,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.NormalPointer``1(OpenTK.Graphics.NormalPointerType,System.Int32,System.Int32,``0[])">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.NormalPointer``1(OpenTK.Graphics.NormalPointerType,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.NormalPointer``1(OpenTK.Graphics.NormalPointerType,System.Int32,System.Int32,``0@)">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.PointParameter(OpenTK.Graphics.ExtPointParameters,System.Single)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.PointParameter(OpenTK.Graphics.ExtPointParameters,System.Single[])">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.PointParameter(OpenTK.Graphics.ExtPointParameters,System.Single*)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.PolygonOffset(System.Single,System.Single)">
            <summary>
            Set the scale and units used to calculate depth values
            </summary>
            <param name="factor">
            <para>
            Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
            </para>
            </param>
            <param name="units">
            <para>
            Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.PrioritizeTextures(System.Int32,System.Int32@,System.Single@)">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.PrioritizeTextures(System.Int32,System.UInt32@,System.Single@)">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.PrioritizeTextures(System.Int32,System.Int32[],System.Single[])">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.PrioritizeTextures(System.Int32,System.UInt32[],System.Single[])">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.PrioritizeTextures(System.Int32,System.Int32*,System.Single*)">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.PrioritizeTextures(System.Int32,System.UInt32*,System.Single*)">
            <summary>
            Set texture residence priority
            </summary>
            <param name="n">
            <para>
            Specifies the number of textures to be prioritized.
            </para>
            </param>
            <param name="textures">
            <para>
            Specifies an array containing the names of the textures to be prioritized.
            </para>
            </param>
            <param name="priorities">
            <para>
            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ResetHistogram(OpenTK.Graphics.ExtHistogram)">
            <summary>
            Reset histogram table entries to zero
            </summary>
            <param name="target">
            <para>
            Must be GL_HISTOGRAM.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.ResetMinmax(OpenTK.Graphics.ExtHistogram)">
            <summary>
            Reset minmax table entries to initial values
            </summary>
            <param name="target">
            <para>
            Must be GL_MINMAX.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.SByte,System.SByte,System.SByte)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.SByte*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.SByte[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.SByte@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Double,System.Double,System.Double)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Double[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Double*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Double@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Single,System.Single,System.Single)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Single@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Single*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Single[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Int32@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Int32[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Int32*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Int16*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Int16[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Int16@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Byte*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Byte[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.Byte@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.UInt32[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.UInt32@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.UInt32*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.UInt16[])">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.UInt16@)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColor3(System.UInt16*)">
            <summary>
            Set the current secondary color
            </summary>
            <param name="red">
            <para>
            Specify new red, green, and blue values for the current secondary color.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of secondary colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColorPointer(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,System.IntPtr)">
            <summary>
            Define an array of secondary colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0@)">
            <summary>
            Define an array of secondary colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0[])">
            <summary>
            Define an array of secondary colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SecondaryColorPointer``1(System.Int32,OpenTK.Graphics.ColorPointerType,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of secondary colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SeparableFilter2D``2(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@,``1[0:,0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SeparableFilter2D``2(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:],``1[0:,0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SeparableFilter2D``2(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[],``1[0:,0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SeparableFilter2D``2(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:],``1[0:,0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SeparableFilter2D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0@)">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SeparableFilter2D(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,System.IntPtr)">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SeparableFilter2D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SeparableFilter2D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[0:,0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.SeparableFilter2D``1(OpenTK.Graphics.ExtConvolution,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr,``0[0:,0:])">
            <summary>
            Define a separable two-dimensional convolution filter
            </summary>
            <param name="target">
            <para>
            Must be GL_SEPARABLE_2D.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </para>
            </param>
            <param name="height">
            <para>
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="row">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            </para>
            </param>
            <param name="column">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexCoordPointer``1(System.Int32,OpenTK.Graphics.TexCoordPointerType,System.Int32,System.Int32,``0[])">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexCoordPointer``1(System.Int32,OpenTK.Graphics.TexCoordPointerType,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexCoordPointer(System.Int32,OpenTK.Graphics.TexCoordPointerType,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexCoordPointer``1(System.Int32,OpenTK.Graphics.TexCoordPointerType,System.Int32,System.Int32,``0@)">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexCoordPointer``1(System.Int32,OpenTK.Graphics.TexCoordPointerType,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexImage3D(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Specify a three-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Specify a three-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Specify a three-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Specify a three-dimensional texture image
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            </para>
            </param>
            <param name="internalFormat">
            <para>
            Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
            </para>
            </param>
            <param name="border">
            <para>
            Specifies the width of the border. Must be either 0 or 1.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage1D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Specify a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Specify a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Specify a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Specify a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage1D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Specify a one-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_1D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Specify a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Specify a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Specify a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage2D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Specify a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage2D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Specify a two-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Specify a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Specify a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Specify a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage3D``1(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Specify a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.TexSubImage3D(OpenTK.Graphics.TextureTarget,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture subimage
            </summary>
            <param name="target">
            <para>
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </para>
            </param>
            <param name="level">
            <para>
            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </para>
            </param>
            <param name="xoffset">
            <para>
            Specifies a texel offset in the x direction within the texture array.
            </para>
            </param>
            <param name="yoffset">
            <para>
            Specifies a texel offset in the y direction within the texture array.
            </para>
            </param>
            <param name="zoffset">
            <para>
            Specifies a texel offset in the z direction within the texture array.
            </para>
            </param>
            <param name="width">
            <para>
            Specifies the width of the texture subimage.
            </para>
            </param>
            <param name="height">
            <para>
            Specifies the height of the texture subimage.
            </para>
            </param>
            <param name="depth">
            <para>
            Specifies the depth of the texture subimage.
            </para>
            </param>
            <param name="format">
            <para>
            Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Specifies a pointer to the image data in memory.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform1(System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform1(System.Int32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform1(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform1(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform1(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform1(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform1(System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform1(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform2(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform2(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform2(System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform2(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform2(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform2(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform2(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform3(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform3(System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform3(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform3(System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform3(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform3(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform3(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform3(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform4(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform4(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform4(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform4(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform4(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform4(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform4(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.Uniform4(System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            <para>
            Specifies the location of the uniform variable to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified uniform variable.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.VertexPointer(System.Int32,OpenTK.Graphics.VertexPointerType,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,System.Int32,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,System.Int32,System.Int32,``0[])">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,System.Int32,System.Int32,``0@)">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ext.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,System.Int32,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Ingr.BlendFuncSeparate(OpenTK.Graphics.All,OpenTK.Graphics.All,OpenTK.Graphics.All,OpenTK.Graphics.All)">
            <summary>
            Specify pixel arithmetic for RGB and alpha components separately
            </summary>
            <param name="srcRGB">
            <para>
            Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.
            </para>
            </param>
            <param name="dstRGB">
            <para>
            Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
            </para>
            </param>
            <param name="srcAlpha">
            <para>
            Specified how the alpha source blending factor is computed. The same symbolic constants are accepted as for srcRGB. The initial value is GL_ONE.
            </para>
            </param>
            <param name="dstAlpha">
            <para>
            Specified how the alpha destination blending factor is computed. The same symbolic constants are accepted as for dstRGB. The initial value is GL_ZERO.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.ColorPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0@)">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.ColorPointer(System.Int32,OpenTK.Graphics.VertexPointerType,System.IntPtr)">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.ColorPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0[0:,0:,0:])">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.ColorPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0[0:,0:])">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.ColorPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0[])">
            <summary>
            Define an array of colors
            </summary>
            <param name="size">
            <para>
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.NormalPointer``1(OpenTK.Graphics.NormalPointerType,``0[0:,0:])">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.NormalPointer``1(OpenTK.Graphics.NormalPointerType,``0[0:,0:,0:])">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.NormalPointer``1(OpenTK.Graphics.NormalPointerType,``0[])">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.NormalPointer(OpenTK.Graphics.NormalPointerType,System.IntPtr)">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.NormalPointer``1(OpenTK.Graphics.NormalPointerType,``0@)">
            <summary>
            Define an array of normals
            </summary>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.TexCoordPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0[])">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.TexCoordPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0[0:,0:])">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.TexCoordPointer(System.Int32,OpenTK.Graphics.VertexPointerType,System.IntPtr)">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.TexCoordPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0@)">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.TexCoordPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0[0:,0:,0:])">
            <summary>
            Define an array of texture coordinates
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0@)">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.VertexPointer(System.Int32,OpenTK.Graphics.VertexPointerType,System.IntPtr)">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0[])">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0[0:,0:,0:])">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Intel.VertexPointer``1(System.Int32,OpenTK.Graphics.VertexPointerType,``0[0:,0:])">
            <summary>
            Define an array of vertex data
            </summary>
            <param name="size">
            <para>
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Double,System.Double)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Double*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Double@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Double[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Single,System.Single)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Single*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Single@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Single[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Int32,System.Int32)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Int32*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Int32@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Int32[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Int16,System.Int16)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Int16*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Int16@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos2(System.Int16[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Double,System.Double,System.Double)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Double*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Double@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Double[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Single,System.Single,System.Single)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Single*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Single@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Single[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Int32*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Int32@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Int32[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Int16,System.Int16,System.Int16)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Int16*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Int16@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos3(System.Int16[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Double*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Double@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Double[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Single*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Single@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Single[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Int32*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Int32@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Int32[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Int16*)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Int16@)">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Mesa.WindowPos4(System.Int16[])">
            <summary>
            Specify the raster position in window coordinates for pixel operations
            </summary>
            <param name="x">
            <para>
            Specify the , , coordinates for the raster position.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.ClearDepth(System.Double)">
            <summary>
            Specify the clear value for the depth buffer
            </summary>
            <param name="depth">
            <para>
            Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.DeleteProgram(System.Int32,System.Int32*)">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.DeleteProgram(System.Int32,System.Int32[])">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.DeleteProgram(System.Int32,System.UInt32[])">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.DeleteProgram(System.Int32,System.UInt32*)">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.DeleteProgram(System.Int32,System.Int32@)">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.DeleteProgram(System.Int32,System.UInt32@)">
            <summary>
            Deletes a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be deleted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.DepthRange(System.Double,System.Double)">
            <summary>
            Specify mapping of depth values from normalized device coordinates to window coordinates
            </summary>
            <param name="nearVal">
            <para>
            Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
            </para>
            </param>
            <param name="farVal">
            <para>
            Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetProgram(System.Int32,OpenTK.Graphics.NvVertexProgram,System.Int32@)">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetProgram(System.UInt32,OpenTK.Graphics.NvVertexProgram,System.Int32*)">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetProgram(System.Int32,OpenTK.Graphics.NvVertexProgram,System.Int32*)">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetProgram(System.UInt32,OpenTK.Graphics.NvVertexProgram,System.Int32@)">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetProgram(System.Int32,OpenTK.Graphics.NvVertexProgram,System.Int32[])">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetProgram(System.UInt32,OpenTK.Graphics.NvVertexProgram,System.Int32[])">
            <summary>
            Returns a parameter from a program object
            </summary>
            <param name="program">
            <para>
            Specifies the program object to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested object parameter.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.UInt32,OpenTK.Graphics.NvVertexProgram,System.Double*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.UInt32,OpenTK.Graphics.NvVertexProgram,System.Double@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.Int32,OpenTK.Graphics.NvVertexProgram,System.Double*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.Int32,OpenTK.Graphics.NvVertexProgram,System.Double@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.Int32,OpenTK.Graphics.NvVertexProgram,System.Single@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.UInt32,OpenTK.Graphics.NvVertexProgram,System.Single@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.Int32,OpenTK.Graphics.NvVertexProgram,System.Single*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.UInt32,OpenTK.Graphics.NvVertexProgram,System.Single*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.Int32,OpenTK.Graphics.NvVertexProgram,System.Int32@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.UInt32,OpenTK.Graphics.NvVertexProgram,System.Int32@)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.Int32,OpenTK.Graphics.NvVertexProgram,System.Int32*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.GetVertexAttrib(System.UInt32,OpenTK.Graphics.NvVertexProgram,System.Int32*)">
            <summary>
            Return a generic vertex attribute parameter
            </summary>
            <param name="index">
            <para>
            Specifies the generic vertex attribute parameter to be queried.
            </para>
            </param>
            <param name="pname">
            <para>
            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </para>
            </param>
            <param name="params">
            <para>
            Returns the requested data.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.IsProgram(System.UInt32)">
            <summary>
            Determines if a name corresponds to a program object
            </summary>
            <param name="program">
            <para>
            Specifies a potential program object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.IsProgram(System.Int32)">
            <summary>
            Determines if a name corresponds to a program object
            </summary>
            <param name="program">
            <para>
            Specifies a potential program object.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.PointParameter(OpenTK.Graphics.NvPointSprite,System.Int32)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.PointParameter(OpenTK.Graphics.NvPointSprite,System.Int32[])">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.PointParameter(OpenTK.Graphics.NvPointSprite,System.Int32*)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.Int32,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.UInt32,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.UInt32,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.Int32,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.UInt32,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.Int32,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib1(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib2(System.Int32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib3(System.Int32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Double*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Double@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Single*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Single@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Int16@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Int16*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Byte*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.UInt32,System.Byte@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Byte@)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttrib4(System.Int32,System.Byte*)">
            <summary>
            Specifies the value of a generic vertex attribute
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="v0">
            <para>
            Specifies the new values to be used for the specified vertex attribute.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttribPointer(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32,System.IntPtr)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttribPointer(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32,System.IntPtr)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32,``0[0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32,``0[])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32,``0[])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32,``0@)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32,``0@)">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttribPointer``1(System.Int32,System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.NV.VertexAttribPointer``1(System.UInt32,System.Int32,OpenTK.Graphics.VertexAttribParameterArb,System.Int32,``0[0:,0:,0:])">
            <summary>
            Define an array of generic vertex attribute data
            </summary>
            <param name="index">
            <para>
            Specifies the index of the generic vertex attribute to be modified.
            </para>
            </param>
            <param name="size">
            <para>
            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
            </para>
            </param>
            <param name="type">
            <para>
            Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </para>
            </param>
            <param name="normalized">
            <para>
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </para>
            </param>
            <param name="stride">
            <para>
            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            </para>
            </param>
            <param name="pointer">
            <para>
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Pgi.Hint(OpenTK.Graphics.PgiMiscHints,System.Int32)">
            <summary>
            Specify implementation-specific hints
            </summary>
            <param name="target">
            <para>
            Specifies a symbolic constant indicating the behavior to be controlled. GL_FOG_HINT, GL_GENERATE_MIPMAP_HINT, GL_LINE_SMOOTH_HINT, GL_PERSPECTIVE_CORRECTION_HINT, GL_POINT_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT, and GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted.
            </para>
            </param>
            <param name="mode">
            <para>
            Specifies a symbolic constant indicating the desired behavior. GL_FASTEST, GL_NICEST, and GL_DONT_CARE are accepted.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Single@)">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Single*)">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Single[])">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Int32[])">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Int32@)">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Int32*)">
            <summary>
            Set color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameters are stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTable``1(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTable(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTable``1(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTable``1(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.ColorTable``1(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelInternalFormat,System.Int32,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Define a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
            </para>
            </param>
            <param name="width">
            <para>
            The number of entries in the color lookup table specified by data.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </para>
            </param>
            <param name="data">
            <para>
            Pointer to a one-dimensional array of pixel data that is processed to build the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.CopyColorTable(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelInternalFormat,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a color table
            </summary>
            <param name="target">
            <para>
            The color table target. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="internalformat">
            <para>
            The internal storage format of the texture image. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            </para>
            </param>
            <param name="x">
            <para>
            The x coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
            </para>
            </param>
            <param name="y">
            <para>
            The y coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
            </para>
            </param>
            <param name="width">
            <para>
            The width of the pixel rectangle.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Single@)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Single*)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Single[])">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Int32[])">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Int32@)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTableParameter(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.SgiColorTable,System.Int32*)">
            <summary>
            Get color lookup table parameters
            </summary>
            <param name="target">
            <para>
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="pname">
            <para>
            The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
            </para>
            </param>
            <param name="params">
            <para>
            A pointer to an array where the values of the parameter will be stored.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTable``1(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0@)">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTable(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,System.IntPtr)">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTable``1(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[])">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTable``1(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:,0:])">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgi.GetColorTable``1(OpenTK.Graphics.SgiColorTable,OpenTK.Graphics.PixelFormat,OpenTK.Graphics.PixelType,``0[0:,0:])">
            <summary>
            Retrieve contents of a color lookup table
            </summary>
            <param name="target">
            <para>
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
            </para>
            </param>
            <param name="format">
            <para>
            The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </para>
            </param>
            <param name="type">
            <para>
            The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            </para>
            </param>
            <param name="table">
            <para>
            Pointer to a one-dimensional array of pixel data containing the contents of the color table.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgis.PointParameter(OpenTK.Graphics.SgisPointParameters,System.Single)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgis.PointParameter(OpenTK.Graphics.SgisPointParameters,System.Single[])">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="M:OpenTK.Graphics.GL.Sgis.PointParameter(OpenTK.Graphics.SgisPointParameters,System.Single*)">
            <summary>
            Specify point parameters
            </summary>
            <param name="pname">
            <para>
            Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
            </para>
            </param>
            <param name="param">
            <para>
            Specifies the value that pname will be set to.
            </para>
            </param>
        </member>
        <member name="T:OpenTK.Audio.Alut">
            <summary>Alut, FreeAlut = Free Audio Library Utilities</summary>
        </member>
        <member name="M:OpenTK.Audio.Alut.Init(System.IntPtr,System.IntPtr)">
            <summary>Alut.Init initializes the ALUT internals and creates an OpenAL context on the default device and makes it the current OpenAL context. If you want something more complex than that (e.g. running on a non-default device or opening multiple contexts on multiple devices), you can use alutInitWithoutContext  instead. alutInit examines the commandline arguments passed to it and remove those it recognizes. It is acceptable to pass two NULL  pointers in settings where no useful information can be obtained from argc and argv.</summary>
            <param name="argcp">Application Main Parameters. Can be IntPtr.Zero.</param>
            <param name="argv">Application Main Parameters. Can be IntPtr.Zero.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.Init">
            <summary>Parameterless function for convenience. Internally passes IntPtr.Zero as parameters.</summary>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.InitWithoutContext(System.IntPtr,System.IntPtr)">
            <summary>Alut.InitWithoutContext initializes the ALUT internals. It does not create any OpenAL context or device, so this has to be done via the usual ALC calls. alutInitWithoutContext examines the commandline arguments passed to it and remove those it recognizes. It is acceptable to pass two NULL pointers in settings where no useful information can be obtained from argc and argv.</summary>
            <param name="argcp">Application Main Parameters</param>
            <param name="argv">Application Main Parameters</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.InitWithoutContext">
            <summary>Alut.InitWithoutContext initializes the ALUT internals. It does not create any OpenAL context or device, so this has to be done via the usual ALC calls. alutInitWithoutContext examines the commandline arguments passed to it and remove those it recognizes. It is acceptable to pass two NULL pointers in settings where no useful information can be obtained from argc and argv.</summary>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.Exit">
            <summary>When the application has finished playing audio, it should shut down ALUT using Alut.Exit. This closes any OpenAL device/context that ALUT may have created in alutInit (but not any that the application created using ALC). After calling alutExit, you may subsequently call alutInit or alutInitWithoutContext again. Note that under well-behaved operating systems, it should be acceptable to simply exit from your program without bothering to call alutExit, relying on the OS to clean up after you. However, it is dangerous to rely on this behavior if portable operation is expected.</summary>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.GetError">
            <summary>Any ALUT routine that fails will return AL_FALSE / AL_NONE / NULL and set the global error state. If a subsequent error occurs while there is still an error recorded internally, the second error will simply be ignored. Calling alutGetError will reset the error code to ALUT_ERROR_NO_ERROR. Note that the error state is not cleared by other successful ALUT calls. Alut.GetError can be called in any ALUT state and will never fail.</summary>
            <returns><see cref="T:OpenTK.Audio.AlutError"/></returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.GetErrorString(OpenTK.Audio.AlutError)">
            <summary>Alut.GetErrorString can be used to convert an error code into a human-readable description. The precise text of these descriptions may vary from implementation to implementation and should not be relied upon by the application.</summary>
            <param name="error">Retrieve first occured error with Alut.GetError</param>
            <returns>A human-readable description of the Error.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.CreateBufferFromFile(System.String)">
            <summary>Alut.CreateBufferFromFile tries to guess the sound buffer format by looking at the filename and/or the file contents and loads the sound buffer into an OpenAL buffer.</summary>
            <param name="filename">The file to be loaded</param>
            <returns>OpenAL Buffer, 0 on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.CreateBufferFromFileImage(System.IntPtr,System.Int32)">
            <summary>Alut.CreateBufferFromFileImage tries to guess the sound buffer format by looking at the contents of the memory region given as parameters and loads the sound buffer into an OpenAL buffer.</summary>
            <param name="buffer">A Pointer to the sound buffer in memory.</param>
            <param name="length">Size in Bytes of the sound buffer.</param>
            <returns>OpenAL Buffer, 0 on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.CreateBufferHelloWorld">
            <summary>Alut.CreateBufferHelloWorld returns a handle to an OpenAL buffer containing the sound of someone saying 'Hello, world!'.</summary>
            <returns>OpenAL Buffer, 0 on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.CreateBufferWaveform(OpenTK.Audio.AlutWaveform,System.Single,System.Single,System.Single)">
            <summary>Alut.CreateBufferWaveform returns a handle to an OpenAL buffer containing a snippet of audio with the specified waveshape at the specified frequency (in Hertz), phase (in degrees: -180 to +180) and duration (in seconds).</summary>
            <param name="waveshape"></param>
            <param name="frequency">Frequency in Hertz [Hz].</param>
            <param name="phase">Phase (in degrees: -180 to +180)</param>
            <param name="duration">Duration (in seconds)</param>
            <returns>OpenAL Buffer, 0 on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.GetMIMETypes(OpenTK.Audio.AlutLoader)">
            <summary>Alut.GetMIMETypes returns a comma-separated list of supported MIME types for the given loader type, e.g. something like "audio/basic,audio/mpeg,audio/x-wav". 
            It is possible that AlutLoader.Memory loaders will be unable to support some file types that AlutLoader.Buffer loaders can support (although the reverse is never the case). Furthermore, it is possible that for some file types (notably audio/x-wav) the support may be only for a few sub-formats. For example, an implementation may advertise that audio/x-wav is supported when in fact it only supports uncompressed (i.e. PCM) WAV files and not any of the compressed subformats. In this event, the various ALUT loaders may return an error and set ALUT_ERROR_UNSUPPORTED_FILE_SUBTYPE rather than ALUT_ERROR_UNSUPPORTED_FILE_TYPE which would indicate that no files of this type are allowed.
            </summary>
            <param name="loader"><see cref="T:OpenTK.Audio.AlutLoader"/></param>
            <returns>A comma-separated list of supported MIME types.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.GetMajorVersion">
            <summary>Alut.GetMajorVersion returns the major version number of the ALUT in use, which will match the major version number of the corresponding ALUT specification document. Can be compared using AlutVersions.</summary>
            <returns>Major Version Number.</returns>
        </member>
        <member name="M:OpenTK.Audio.Alut.GetMinorVersion">
            <summary>Alut.GetMinorVersion returns the minor version number of the ALUT in use, which will match the minor version number of the corresponding ALUT specification document. Can be compared using AlutVersions.</summary>
            <returns>Minor Version Number.</returns>
        </member>
        <member name="T:OpenTK.Platform.X11.Glx">
            <summary>
            Provides access to GLX functions.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.X11.Glx.LoadDelegate(System.String,System.Type)">
            <summary>
            Creates a System.Delegate that can be used to call an OpenGL function, core or extension.
            </summary>
            <param name="name">The name of the Wgl function (eg. "wglNewList")</param>
            <param name="signature">The signature of the OpenGL function.</param>
            <returns>
            A System.Delegate that can be used to call this OpenGL function, or null if the specified
            function name did not correspond to an OpenGL function.
            </returns>
        </member>
        <member name="M:OpenTK.Platform.X11.Glx.GetExtensionDelegate(System.String,System.Type)">
            <summary>
            Creates a System.Delegate that can be used to call a dynamically exported OpenGL function.
            </summary>
            <param name="name">The name of the OpenGL function (eg. "glNewList")</param>
            <param name="signature">The signature of the OpenGL function.</param>
            <returns>
            A System.Delegate that can be used to call this OpenGL function or null
            if the function is not available in the current OpenGL context.
            </returns>
        </member>
        <member name="M:OpenTK.Platform.X11.API.Free(System.IntPtr)">
            <summary>
            Frees the memory used by an X structure. Only use on unmanaged structures!
            </summary>
            <param name="buffer">A pointer to the structure that will be freed.</param>
        </member>
        <member name="M:OpenTK.Platform.X11.API.SelectInput(System.IntPtr,System.IntPtr,OpenTK.Platform.X11.EventMask)">
            <summary>
            The XSelectInput() function requests that the X server report the events associated
            with the specified event mask.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="w">Specifies the window whose events you are interested in.</param>
            <param name="event_mask">Specifies the event mask.</param>
            <remarks>
            Initially, X will not report any of these events.
            Events are reported relative to a window.
            If a window is not interested in a device event,
            it usually propagates to the closest ancestor that is interested,
            unless the do_not_propagate mask prohibits it.
            Setting the event-mask attribute of a window overrides any previous call for the same window but not for other clients. Multiple clients can select for the same events on the same window with the following restrictions: 
            <para>Multiple clients can select events on the same window because their event masks are disjoint. When the X server generates an event, it reports it to all interested clients. </para>
            <para>Only one client at a time can select CirculateRequest, ConfigureRequest, or MapRequest events, which are associated with the event mask SubstructureRedirectMask. </para>
            <para>Only one client at a time can select a ResizeRequest event, which is associated with the event mask ResizeRedirectMask. </para>
            <para>Only one client at a time can select a ButtonPress event, which is associated with the event mask ButtonPressMask. </para>
            <para>The server reports the event to all interested clients. </para>
            <para>XSelectInput() can generate a BadWindow error.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.X11.API.CheckIfEvent(System.IntPtr,OpenTK.Platform.X11.XEvent@,OpenTK.Platform.X11.API.CheckEventPredicate,System.IntPtr)">
            <summary>
            When the predicate procedure finds a match, XCheckIfEvent() copies the matched event into the client-supplied XEvent structure and returns True. (This event is removed from the queue.) If the predicate procedure finds no match, XCheckIfEvent() returns False, and the output buffer will have been flushed. All earlier events stored in the queue are not discarded.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="event_return">Returns a copy of the matched event's associated structure.</param>
            <param name="predicate">Specifies the procedure that is to be called to determine if the next event in the queue matches what you want</param>
            <param name="arg">Specifies the user-supplied argument that will be passed to the predicate procedure.</param>
            <returns>true if the predicate returns true for some event, false otherwise</returns>
        </member>
        <member name="M:OpenTK.Platform.X11.API.GetKeyboardMapping(System.IntPtr,System.Byte,System.Int32,System.Int32@)">
            <summary>
            The XGetKeyboardMapping() function returns the symbols for the specified number of KeyCodes starting with first_keycode.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="first_keycode">Specifies the first KeyCode that is to be returned.</param>
            <param name="keycode_count">Specifies the number of KeyCodes that are to be returned</param>
            <param name="keysyms_per_keycode_return">Returns the number of KeySyms per KeyCode.</param>
            <returns></returns>
            <remarks>
            <para>The value specified in first_keycode must be greater than or equal to min_keycode as returned by XDisplayKeycodes(), or a BadValue error results. In addition, the following expression must be less than or equal to max_keycode as returned by XDisplayKeycodes(): </para>
            <para>first_keycode + keycode_count - 1 </para>
            <para>If this is not the case, a BadValue error results. The number of elements in the KeySyms list is: </para>
            <para>keycode_count * keysyms_per_keycode_return </para>
            <para>KeySym number N, counting from zero, for KeyCode K has the following index in the list, counting from zero: </para>
            <para> (K - first_code) * keysyms_per_code_return + N </para>
            <para>The X server arbitrarily chooses the keysyms_per_keycode_return value to be large enough to report all requested symbols. A special KeySym value of NoSymbol is used to fill in unused elements for individual KeyCodes. To free the storage returned by XGetKeyboardMapping(), use XFree(). </para>
            <para>XGetKeyboardMapping() can generate a BadValue error.</para>
            <para>Diagnostics:</para>
            <para>BadValue:    Some numeric value falls outside the range of values accepted by the request. Unless a specific range is specified for an argument, the full range defined by the argument's type is accepted. Any argument defined as a set of alternatives can generate this error.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.X11.API.DisplayKeycodes(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
            The XDisplayKeycodes() function returns the min-keycodes and max-keycodes supported by the specified display.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="min_keycodes_return">Returns the minimum number of KeyCodes</param>
            <param name="max_keycodes_return">Returns the maximum number of KeyCodes.</param>
            <remarks> The minimum number of KeyCodes returned is never less than 8, and the maximum number of KeyCodes returned is never greater than 255. Not all KeyCodes in this range are required to have corresponding keys.</remarks>
        </member>
        <member name="T:OpenTK.Platform.X11.API.XF86VidModeModeInfo">
            <summary>
            Specifies an XF86 display mode.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.dotclock">
            <summary>
            Pixel clock.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.hdisplay">
            <summary>
            Number of display pixels horizontally
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.hsyncstart">
            <summary>
            Horizontal sync start
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.hsyncend">
            <summary>
            Horizontal sync end
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.htotal">
            <summary>
            Total horizontal pixel
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.hskew">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.vdisplay">
            <summary>
            Number of display pixels vertically
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.vsyncstart">
            <summary>
            Vertical sync start
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.vsyncend">
            <summary>
            Vertical sync end
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.vtotal">
            <summary>
            Total vertical pixels
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.vskew">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.API.XF86VidModeModeInfo.flags">
            <summary>
            Mode flags
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.background_pixmap">
            <summary>
            background, None, or ParentRelative
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.background_pixel">
            <summary>
            background pixel
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.border_pixmap">
            <summary>
            border of the window or CopyFromParent
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.border_pixel">
            <summary>
            border pixel value
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.bit_gravity">
            <summary>
            one of bit gravity values
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.win_gravity">
            <summary>
            one of the window gravity values
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.backing_store">
            <summary>
            NotUseful, WhenMapped, Always
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.backing_planes">
            <summary>
            planes to be preserved if possible
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.backing_pixel">
            <summary>
            value to use in restoring planes
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.save_under">
            <summary>
            should bits under be saved? (popups)
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.event_mask">
            <summary>
            set of events that should be saved
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.do_not_propagate_mask">
            <summary>
            set of events that should not propagate
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.override_redirect">
            <summary>
            boolean value for override_redirect
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.colormap">
            <summary>
            color map to be associated with window
            </summary>
        </member>
        <member name="F:OpenTK.Platform.X11.SetWindowAttributes.cursor">
            <summary>
            cursor to be displayed (or None)
            </summary>
        </member>
        <member name="T:OpenTK.Platform.X11.XKey">
            <summary>
            Defines LATIN-1 and miscellaneous keys.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.X11.Functions.XCreateWindow(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,OpenTK.Platform.X11.XSetWindowAttributes@)">
            <summary>
            The XCreateWindow function creates an unmapped subwindow for a specified parent window, returns the window ID of the created window, and causes the X server to generate a CreateNotify event. The created window is placed on top in the stacking order with respect to siblings.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="parent">Specifies the parent window.</param>
            <param name="x">Specify the x coordinates, which are the top-left outside corner of the window's borders and are relative to the inside of the parent window's borders.</param>
            <param name="y">Specify the y coordinates, which are the top-left outside corner of the window's borders and are relative to the inside of the parent window's borders.</param>
            <param name="width">Specify the width, which is the created window's inside dimensions and do not include the created window's borders.</param>
            <param name="height">Specify the height, which is the created window's inside dimensions and do not include the created window's borders.</param>
            <param name="border_width">Specifies the width of the created window's border in pixels.</param>
            <param name="depth">Specifies the window's depth. A depth of CopyFromParent means the depth is taken from the parent.</param>
            <param name="class">Specifies the created window's class. You can pass InputOutput, InputOnly, or CopyFromParent. A class of CopyFromParent means the class is taken from the parent.</param>
            <param name="visual">Specifies the visual type. A visual of CopyFromParent means the visual type is taken from the parent.</param>
            <param name="valuemask">Specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits. If valuemask is zero, the attributes are ignored and are not referenced.</param>
            <param name="attributes">Specifies the structure from which the values (as specified by the value mask) are to be taken. The value mask should have the appropriate bits set to indicate which attributes have been set in the structure.</param>
            <returns>The window ID of the created window.</returns>
            <remarks>
            The coordinate system has the X axis horizontal and the Y axis vertical with the origin [0, 0] at the upper-left corner. Coordinates are integral, in terms of pixels, and coincide with pixel centers. Each window and pixmap has its own coordinate system. For a window, the origin is inside the border at the inside, upper-left corner. 
            <para>The border_width for an InputOnly window must be zero, or a BadMatch error results. For class InputOutput, the visual type and depth must be a combination supported for the screen, or a BadMatch error results. The depth need not be the same as the parent, but the parent must not be a window of class InputOnly, or a BadMatch error results. For an InputOnly window, the depth must be zero, and the visual must be one supported by the screen. If either condition is not met, a BadMatch error results. The parent window, however, may have any depth and class. If you specify any invalid window attribute for a window, a BadMatch error results. </para>
            <para>The created window is not yet displayed (mapped) on the user's display. To display the window, call XMapWindow(). The new window initially uses the same cursor as its parent. A new cursor can be defined for the new window by calling XDefineCursor(). The window will not be visible on the screen unless it and all of its ancestors are mapped and it is not obscured by any of its ancestors. </para>
            <para>XCreateWindow can generate BadAlloc BadColor, BadCursor, BadMatch, BadPixmap, BadValue, and BadWindow errors. </para>
            <para>The XCreateSimpleWindow function creates an unmapped InputOutput subwindow for a specified parent window, returns the window ID of the created window, and causes the X server to generate a CreateNotify event. The created window is placed on top in the stacking order with respect to siblings. Any part of the window that extends outside its parent window is clipped. The border_width for an InputOnly window must be zero, or a BadMatch error results. XCreateSimpleWindow inherits its depth, class, and visual from its parent. All other window attributes, except background and border, have their default values. </para>
            <para>XCreateSimpleWindow can generate BadAlloc, BadMatch, BadValue, and BadWindow errors.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.X11.Functions.XQueryKeymap(System.IntPtr,System.Byte[])">
            <summary>
            The XQueryKeymap() function returns a bit vector for the logical state of the keyboard, where each bit set to 1 indicates that the corresponding key is currently pressed down. The vector is represented as 32 bytes. Byte N (from 0) contains the bits for keys 8N to 8N + 7 with the least-significant bit in the byte representing key 8N.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="keys">Returns an array of bytes that identifies which keys are pressed down. Each bit represents one key of the keyboard.</param>
            <remarks>Note that the logical state of a device (as seen by client applications) may lag the physical state if device event processing is frozen.</remarks>
        </member>
        <member name="M:OpenTK.Platform.X11.Functions.XMaskEvent(System.IntPtr,OpenTK.Platform.X11.EventMask,OpenTK.Platform.X11.XEvent@)">
            <summary>
            The XMaskEvent() function searches the event queue for the events associated with the specified mask. When it finds a match, XMaskEvent() removes that event and copies it into the specified XEvent structure. The other events stored in the queue are not discarded. If the event you requested is not in the queue, XMaskEvent() flushes the output buffer and blocks until one is received.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="event_mask">Specifies the event mask.</param>
            <param name="e">Returns the matched event's associated structure.</param>
        </member>
        <member name="M:OpenTK.Platform.X11.Functions.XPutBackEvent(System.IntPtr,OpenTK.Platform.X11.XEvent@)">
            <summary>
            The XPutBackEvent() function pushes an event back onto the head of the display's event queue by copying the event into the queue. This can be useful if you read an event and then decide that you would rather deal with it later. There is no limit to the number of times in succession that you can call XPutBackEvent().
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="event">Specifies the event.</param>
        </member>
        <member name="T:OpenTK.Math.Quaterniond">
            <summary>
            Represents a double-precision Quaternion.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.#ctor(OpenTK.Math.Vector3d,System.Double)">
            <summary>
            Construct a new Quaterniond from vector and w components
            </summary>
            <param name="v">The vector part</param>
            <param name="w">The w part</param>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new Quaterniond
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.ToAxisAngle(OpenTK.Math.Vector3d@,System.Double@)">
            <summary>
            Convert the current quaternion to axis angle representation
            </summary>
            <param name="axis">The resultant axis</param>
            <param name="angle">The resultant angle</param>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.ToAxisAngle">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Normalize">
            <summary>
            Scales the Quaterniond to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Conjugate">
            <summary>
            Convert this Quaterniond to its conjugate
            </summary>
        </member>
        <member name="F:OpenTK.Math.Quaterniond.Identity">
            <summary>
            Defines the identity quaternion.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Add(OpenTK.Math.Quaterniond,OpenTK.Math.Quaterniond)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <returns>The result of the addition</returns>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Add(OpenTK.Math.Quaterniond@,OpenTK.Math.Quaterniond@,OpenTK.Math.Quaterniond@)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <param name="result">The result of the addition</param>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Conjugate(OpenTK.Math.Quaterniond)">
            <summary>
            Get the conjugate of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond</param>
            <returns>The conjugate of the given Quaterniond</returns>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Conjugate(OpenTK.Math.Quaterniond@,OpenTK.Math.Quaterniond@)">
            <summary>
            Get the conjugate of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond</param>
            <param name="result">The conjugate of the given Quaterniond</param>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Invert(OpenTK.Math.Quaterniond)">
            <summary>
            Get the inverse of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond to invert</param>
            <returns>The inverse of the given Quaterniond</returns>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Invert(OpenTK.Math.Quaterniond@,OpenTK.Math.Quaterniond@)">
            <summary>
            Get the inverse of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond to invert</param>
            <param name="result">The inverse of the given Quaterniond</param>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Normalize(OpenTK.Math.Quaterniond)">
            <summary>
            Scale the given Quaterniond to unit length
            </summary>
            <param name="q">The Quaterniond to normalize</param>
            <returns>The normalized Quaterniond</returns>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Normalize(OpenTK.Math.Quaterniond@,OpenTK.Math.Quaterniond@)">
            <summary>
            Scale the given Quaterniond to unit length
            </summary>
            <param name="q">The Quaterniond to normalize</param>
            <param name="result">The normalized Quaterniond</param>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.FromAxisAngle(OpenTK.Math.Vector3d,System.Double)">
            <summary>
            Build a Quaterniond from the given axis and angle
            </summary>
            <param name="axis">The axis to rotate about</param>
            <param name="angle">The rotation angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Slerp(OpenTK.Math.Quaterniond,OpenTK.Math.Quaterniond,System.Double)">
            <summary>
            Do Spherical linear interpolation between two quaternions 
            </summary>
            <param name="q1">The first Quaterniond</param>
            <param name="q2">The second Quaterniond</param>
            <param name="blend">The blend factor</param>
            <returns>A smooth blend between the given quaternions</returns>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.ToString">
            <summary>
            Returns a System.String that represents the current Quaterniond.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Equals(System.Object)">
            <summary>
            Compares this object instance to another object for equality. 
            </summary>
            <param name="other">The other object to be used in the comparison.</param>
            <returns>True if both objects are Quaternions of equal value. Otherwise it returns false.</returns>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.GetHashCode">
            <summary>
            Provides the hash code for this object. 
            </summary>
            <returns>A hash code formed from the bitwise XOR of this objects members.</returns>
        </member>
        <member name="M:OpenTK.Math.Quaterniond.Equals(OpenTK.Math.Quaterniond)">
            <summary>
            Compares this Quaterniond instance to another Quaterniond for equality. 
            </summary>
            <param name="other">The other Quaterniond to be used in the comparison.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Math.Quaterniond.XYZ">
            <summary>
            Gets or sets an OpenTK.Math.Vector3d with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaterniond.Xyz">
            <summary>
            Gets or sets an OpenTK.Math.Vector3d with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaterniond.X">
            <summary>
            Gets or sets the X component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaterniond.Y">
            <summary>
            Gets or sets the Y component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaterniond.Z">
            <summary>
            Gets or sets the Z component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaterniond.W">
            <summary>
            Gets or sets the W component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Quaterniond.Length">
            <summary>
            Gets the length (magnitude) of the Quaterniond.
            </summary>
            <seealso cref="P:OpenTK.Math.Quaterniond.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Quaterniond.LengthSquared">
            <summary>
            Gets the square of the Quaterniond length (magnitude).
            </summary>
        </member>
        <member name="T:OpenTK.Math.BezierCurveQuadric">
            <summary>
            Represents a quadric bezier curve with two anchor and one control point.
            </summary>
        </member>
        <member name="F:OpenTK.Math.BezierCurveQuadric.StartAnchor">
            <summary>
            Start anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.Math.BezierCurveQuadric.EndAnchor">
            <summary>
            End anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.Math.BezierCurveQuadric.ControlPoint">
            <summary>
            Control point, controls the direction of both endings of the curve.
            </summary>
        </member>
        <member name="F:OpenTK.Math.BezierCurveQuadric.Parallel">
            <summary>
            The parallel value.
            </summary>
            <remarks>This value defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f i.e. stands for a curve that has always a distance
            of 5.f to the orignal curve at any point.</remarks>
        </member>
        <member name="M:OpenTK.Math.BezierCurveQuadric.#ctor(OpenTK.Math.Vector2,OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.Math.BezierCurveQuadric"/>.
            </summary>
            <param name="startAnchor">The start anchor.</param>
            <param name="endAnchor">The end anchor.</param>
            <param name="controlPoint">The control point.</param>
        </member>
        <member name="M:OpenTK.Math.BezierCurveQuadric.#ctor(System.Single,OpenTK.Math.Vector2,OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.Math.BezierCurveQuadric"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="startAnchor">The start anchor.</param>
            <param name="endAnchor">The end anchor.</param>
            <param name="controlPoint">The control point.</param>
        </member>
        <member name="M:OpenTK.Math.BezierCurveQuadric.CalculatePoint(System.Single)">
            <summary>
            Calculates the point with the specified t.
            </summary>
            <param name="t">The t value, between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.Math.BezierCurveQuadric.CalculatePointOfDerivative(System.Single)">
            <summary>
            Calculates the point with the specified t of the derivative of this function.
            </summary>
            <param name="t">The t, value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.Math.BezierCurveQuadric.CalculateLength(System.Single)">
            <summary>
            Calculates the length of this bezier curve.
            </summary>
            <param name="precision">The precision.</param>
            <returns>Length of curve.</returns>
            <remarks>The precision gets better when the <paramref name="precision"/>
            value gets smaller.</remarks>
        </member>
        <member name="T:OpenTK.Input.JoystickDevice">
            <summary>
            Represents a joystick device and provides methods to query its status.
            </summary>
        </member>
        <member name="T:OpenTK.Input.IInputDevice">
            <summary>
            Defines a common interface for all input devices.
            </summary>
        </member>
        <member name="P:OpenTK.Input.IInputDevice.Description">
            <summary>
            Gets a System.String with a unique description of this IInputDevice instance.
            </summary>
        </member>
        <member name="P:OpenTK.Input.IInputDevice.DeviceType">
            <summary>
            Gets an OpenTK.Input.InputDeviceType value, representing the device type of this IInputDevice instance.
            </summary>
        </member>
        <member name="F:OpenTK.Input.JoystickDevice.Move">
            <summary>
            Occurs when an axis of this JoystickDevice instance is moved.
            </summary>
        </member>
        <member name="F:OpenTK.Input.JoystickDevice.ButtonDown">
            <summary>
            Occurs when a button of this JoystickDevice instance is pressed.
            </summary>
        </member>
        <member name="F:OpenTK.Input.JoystickDevice.ButtonUp">
            <summary>
            Occurs when a button of this JoystickDevice is released.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickDevice.Axis">
            <summary>
            Gets a JoystickAxisCollection containing the state of each axis on this instance. Values are normalized in the [-1, 1] range.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickDevice.Button">
            <summary>
            Gets JoystickButtonCollection containing the state of each button on this instance. True indicates that the button is pressed.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickDevice.Description">
            <summary>
            Gets a System.String containing a unique description for this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickDevice.DeviceType">
            <summary>
            Gets a value indicating the InputDeviceType of this InputDevice. 
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickEventArgs">
            <summary>
            The base class for JoystickDevice event arguments.
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickButtonEventArgs">
            <summary>
            Provides data for the <see cref="F:OpenTK.Input.JoystickDevice.ButtonDown"/> and <see cref="F:OpenTK.Input.JoystickDevice.ButtonUp"/> events.
            This class is cached for performance reasons - avoid storing references outside the scope of the event.
            </summary>
        </member>
        <member name="M:OpenTK.Input.JoystickButtonEventArgs.#ctor(OpenTK.Input.JoystickButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTK.Input.JoystickButtonEventArgs"/> class.
            </summary>
            <param name="button">The index of the joystick button for the event.</param>
            <param name="pressed">The current state of the button.</param>
        </member>
        <member name="P:OpenTK.Input.JoystickButtonEventArgs.Button">
            <summary>
            The index of the joystick button for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickButtonEventArgs.Pressed">
            <summary>
            Gets a System.Boolean representing the state of the button for the event.
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickMoveEventArgs">
            <summary>
            Provides data for the <see cref="F:OpenTK.Input.JoystickDevice.Move"/> event.
            This class is cached for performance reasons - avoid storing references outside the scope of the event.
            </summary>
        </member>
        <member name="M:OpenTK.Input.JoystickMoveEventArgs.#ctor(OpenTK.Input.JoystickAxis,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTK.Input.JoystickMoveEventArgs"/> class.
            </summary>
            <param name="axis">The index of the joystick axis that was moved.</param>
            <param name="value">The absolute value of the joystick axis.</param>
            <param name="delta">The relative change in value of the joystick axis.</param>
        </member>
        <member name="P:OpenTK.Input.JoystickMoveEventArgs.Axis">
            <summary>
            Gets a System.Int32 representing the index of the axis that was moved.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickMoveEventArgs.Value">
            <summary>
            Gets a System.Single representing the absolute position of the axis.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickMoveEventArgs.Delta">
            <summary>
            Gets a System.Single representing the relative change in the position of the axis.
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickButton">
            <summary>
            Defines available JoystickDevice buttons.
            </summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button0">
            <summary>The first button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button1">
            <summary>The second button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button2">
            <summary>The third button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button3">
            <summary>The fourth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button4">
            <summary>The fifth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button5">
            <summary>The sixth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button6">
            <summary>The seventh button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button7">
            <summary>The eighth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button8">
            <summary>The ninth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button9">
            <summary>The tenth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button10">
            <summary>The eleventh button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button11">
            <summary>The twelfth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button12">
            <summary>The thirteenth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button13">
            <summary>The fourteenth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button14">
            <summary>The fifteenth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button15">
            <summary>The sixteenth button of the JoystickDevice.</summary>
        </member>
        <member name="T:OpenTK.Input.JoystickButtonCollection">
            <summary>
            Defines a collection of JoystickButtons.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickButtonCollection.Item(System.Int32)">
            <summary>
            Gets a System.Boolean indicating whether the JoystickButton with the specified index is pressed.
            </summary>
            <param name="index">The index of the JoystickButton to check.</param>
            <returns>True if the JoystickButton is pressed; false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Input.JoystickButtonCollection.Item(OpenTK.Input.JoystickButton)">
            <summary>
            Gets a System.Boolean indicating whether the specified JoystickButton is pressed.
            </summary>
            <param name="button">The JoystickButton to check.</param>
            <returns>True if the JoystickButton is pressed; false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Input.JoystickButtonCollection.Count">
            <summary>
            Gets a System.Int32 indicating the available amount of JoystickButtons.
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickAxis">
            <summary>
            Defines available JoystickDevice axes.
            </summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis0">
            <summary>The first axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis1">
            <summary>The second axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis2">
            <summary>The third axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis3">
            <summary>The fourth axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis4">
            <summary>The fifth axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis5">
            <summary>The sixth axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis6">
            <summary>The seventh axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis7">
            <summary>The eighth axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis8">
            <summary>The ninth axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis9">
            <summary>The tenth axis of the JoystickDevice.</summary>
        </member>
        <member name="T:OpenTK.Input.JoystickAxisCollection">
            <summary>
            Defines a collection of JoystickAxes.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickAxisCollection.Item(System.Int32)">
            <summary>
            Gets a System.Single indicating the absolute position of the JoystickAxis with the specified index.
            </summary>
            <param name="index">The index of the JoystickAxis to check.</param>
            <returns>A System.Single in the range [-1, 1].</returns>
        </member>
        <member name="P:OpenTK.Input.JoystickAxisCollection.Item(OpenTK.Input.JoystickAxis)">
            <summary>
            Gets a System.Single indicating the absolute position of the JoystickAxis.
            </summary>
            <param name="axis">The JoystickAxis to check.</param>
            <returns>A System.Single in the range [-1, 1].</returns>
        </member>
        <member name="P:OpenTK.Input.JoystickAxisCollection.Count">
            <summary>
            Gets a System.Int32 indicating the available amount of JoystickAxes.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsContextVersion">
            <summary>
            Defines the version information of a GraphicsContext.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContextVersion.Minor">
            <summary>
            Gets a System.Int32 indicating the minor version of a GraphicsContext instance.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContextVersion.Major">
            <summary>
            Gets a System.Int32 indicating the major version of a GraphicsContext instance.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContextVersion.Vendor">
            <summary>
            Gets a System.String indicating the vendor of a GraphicsContext instance.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContextVersion.Renderer">
            <summary>
            Gets a System.String indicating the renderer of a GraphicsContext instance.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.AlutVersions.ApiMajorVersion">
            <summary>Defines the A in OpenAL A.B</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutVersions.ApiMinorVersion">
            <summary>Defines the B in OpenAL A.B</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.NoError">
            <summary>No ALUT error found.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.OutOfMemory">
            <summary>ALUT ran out of memory.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.InvalidEnum">
            <summary>ALUT was given an invalid enumeration token.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.InvalidValue">
            <summary>ALUT was given an invalid value.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.InvalidOperation">
            <summary>The operation is invalid in the current ALUT state.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.NoCurrentContext">
            <summary>There is no current AL context.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.AlErrorOnEntry">
            <summary>There was already an AL error on entry to an ALUT function.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.AlcErrorOnEntry">
            <summary>There was already an ALC error on entry to an ALUT function.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.OpenDevice">
            <summary>There was an error opening the ALC device.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.CloseDevice">
            <summary>There was an error closing the ALC device.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.CreateContext">
            <summary>There was an error creating an ALC context.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.MakeContextCurrent">
            <summary>Could not change the current ALC context.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.DestroyContext">
            <summary>There was an error destroying the ALC context.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.GenBuffers">
            <summary>There was an error generating an AL buffer.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.BufferData">
            <summary>There was an error passing buffer buffer to AL.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.IoError">
            <summary>I/O error, consult errno for more details.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.UnsupportedFileType">
            <summary>Unsupported file type.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.UnsupportedFileSubtype">
            <summary>Unsupported mode within an otherwise usable file type.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutError.CorruptOrTruncatedData">
            <summary>The sound buffer was corrupt or truncated.</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutLoader.Buffer">
            <summary>For the loaders returning sound buffer in an OpenAL buffer, e.g. Alut.CreateBufferFromFile and Alut.CreateBufferFromFileImage</summary>
        </member>
        <member name="F:OpenTK.Audio.AlutLoader.Memory">
            <summary>For the loaders returning sound buffer in a newly allocated memory region, e.g. Alut.LoadMemoryFromFile and Alut.LoadMemoryFromFileImage.</summary>
        </member>
        <member name="T:OpenTK.Audio.AudioContextException">
            <summary>Represents exceptions related to an OpenTK.Audio.AudioContext.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContextException.#ctor">
            <summary>Constructs a new AudioContextException.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContextException.#ctor(System.String)">
            <summary>Constructs a new AudioContextException with the specified error message.</summary>
            <param name="message">The error message of the AudioContextException.</param>
        </member>
        <member name="T:OpenTK.GLControl">
            <summary>
            Defines a UserControl with OpenGL rendering capabilities.
            </summary>
        </member>
        <member name="M:OpenTK.GLControl.#ctor">
            <summary>
            Constructs a new GLControl.
            </summary>
        </member>
        <member name="M:OpenTK.GLControl.#ctor(OpenTK.Graphics.GraphicsMode)">
            <summary>
            Constructs a new GLControl with the specified GraphicsMode.
            </summary>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the control.</param>
        </member>
        <member name="M:OpenTK.GLControl.#ctor(OpenTK.Graphics.GraphicsMode,System.Int32,System.Int32,OpenTK.Graphics.GraphicsContextFlags)">
            <summary>
            Constructs a new GLControl with the specified GraphicsMode.
            </summary>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the control.</param>
            <param name="major">The major version for the OpenGL GraphicsContext.</param>
            <param name="minor">The minor version for the OpenGL GraphicsContext.</param>
            <param name="flags">The GraphicsContextFlags for the OpenGL GraphicsContext.</param>
        </member>
        <member name="M:OpenTK.GLControl.#ctor(OpenTK.DisplayMode)">
            <summary>This method is obsolete and will be removed in future versions.</summary>
            <param name="mode">Obsolete.</param>v
        </member>
        <member name="M:OpenTK.GLControl.OnHandleCreated(System.EventArgs)">
            <summary>Raises the HandleCreated event.</summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.GLControl.OnHandleDestroyed(System.EventArgs)">
            <summary>Raises the HandleDestroyed event.</summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.GLControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.Paint event.
            </summary>
            <param name="e">A System.Windows.Forms.PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenTK.GLControl.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event.
            </summary>
            <param name="e">A System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenTK.GLControl.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the ParentChanged event.
            </summary>
            <param name="e">A System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenTK.GLControl.SwapBuffers">
            <summary>
            Swaps the front and back buffers, presenting the rendered scene to the screen.
            </summary>
        </member>
        <member name="M:OpenTK.GLControl.MakeCurrent">
            <summary>
            Makes the underlying this GLControl current in the calling thread.
            All OpenGL commands issued are hereafter interpreted by this GLControl.
            </summary>
        </member>
        <member name="M:OpenTK.GLControl.CreateContext">
            <summary>
            Creates a GraphicsContext and attaches it to this GLControl.
            </summary>
        </member>
        <member name="M:OpenTK.GLControl.DestroyContext">
            <summary>
            Destroys the GraphicsContext attached to this GLControl.
            </summary>
            <exception cref="T:System.NullReferenceException">Occurs when no GraphicsContext is attached.</exception>
        </member>
        <member name="M:OpenTK.GLControl.GrabScreenshot">
            <summary>Grabs a screenshot of the frontbuffer contents.</summary>
            <returns>A System.Drawing.Bitmap, containing the contents of the frontbuffer.</returns>
            <exception cref="T:OpenTK.Graphics.GraphicsContextException">
            Occurs when no OpenTK.Graphics.GraphicsContext is current in the calling thread.
            </exception>
        </member>
        <member name="F:OpenTK.GLControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OpenTK.GLControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OpenTK.GLControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OpenTK.GLControl.IsIdle">
            <summary>
            Gets a value indicating whether the current thread contains pending system messages.
            </summary>
        </member>
        <member name="P:OpenTK.GLControl.Context">
            <summary>
            Gets an interface to the underlying GraphicsContext used by this GLControl.
            </summary>
        </member>
        <member name="P:OpenTK.GLControl.AspectRatio">
            <summary>
            Gets the aspect ratio of this GLControl.
            </summary>
        </member>
        <member name="P:OpenTK.GLControl.VSync">
            <summary>
            Gets or sets a value indicating whether vsync is active for this GLControl.
            </summary>
        </member>
        <member name="P:OpenTK.GLControl.GraphicsMode">
            <summary>
            Gets the GraphicsMode of the GraphicsContext attached to this GLControl.
            </summary>
            <remarks>
            To change the GraphicsMode, you must destroy and recreate the GLControl.
            </remarks>
        </member>
        <member name="T:OpenTK.Audio.AudioDeviceException">
            <summary>Represents exceptions related to an OpenTK.Audio device.</summary>
        </member>
        <member name="T:OpenTK.Audio.AudioException">
            <summary>Represents exceptions related to the OpenTK.Audio subsystem.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioException.#ctor">
            <summary>Constructs a new AudioException.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioException.#ctor(System.String)">
            <summary>Constructs a new AudioException with the specified error message.</summary>
            <param name="message">The error message of the AudioException.</param>
        </member>
        <member name="M:OpenTK.Audio.AudioDeviceException.#ctor">
            <summary>Constructs a new AudioDeviceException.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioDeviceException.#ctor(System.String)">
            <summary>Constructs a new AudioDeviceException with the specified error message.</summary>
            <param name="message">The error message of the AudioDeviceException.</param>
        </member>
        <member name="T:OpenTK.ContextExistsException">
            <summary>
            This exception is thrown when a GraphicsContext property cannot be changed after creation.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.Wgl.LoadDelegate(System.String,System.Type)">
            <summary>
            Creates a System.Delegate that can be used to call an OpenGL function, core or extension.
            </summary>
            <param name="name">The name of the Wgl function (eg. "wglNewList")</param>
            <param name="signature">The signature of the OpenGL function.</param>
            <returns>
            A System.Delegate that can be used to call this OpenGL function, or null if the specified
            function name did not correspond to an OpenGL function.
            </returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Wgl.GetExtensionDelegate(System.String,System.Type)">
            <summary>
            Creates a System.Delegate that can be used to call a dynamically exported OpenGL function.
            </summary>
            <param name="name">The name of the OpenGL function (eg. "glNewList")</param>
            <param name="signature">The signature of the OpenGL function.</param>
            <returns>
            A System.Delegate that can be used to call this OpenGL function or null
            if the function is not available in the current OpenGL context.
            </returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Wgl.LoadAll">
            <summary>
            Loads all Wgl entry points, core and extensions.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.Wgl.Load(System.String)">
            <summary>
            Loads the given Wgl entry point.
            </summary>
            <param name="function">The name of the function to load.</param>
            <returns></returns>
        </member>
        <member name="T:OpenTK.Platform.Windows.Wgl.Arb">
            <summary>Contains ARB extensions for WGL.</summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.Wgl.Arb.SupportsExtension(OpenTK.Platform.Windows.WinGLContext,System.String)">
            <summary>
            Checks if a Wgl extension is supported by the given context.
            </summary>
            <param name="context">The device context.</param>
            <param name="ext">The extension to check.</param>
            <returns>True if the extension is supported by the given context, false otherwise</returns>
        </member>
        <member name="T:OpenTK.Platform.Windows.Wgl.Ext">
            <summary>Contains EXT extensions for WGL.</summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.Wgl.Ext.SupportsExtension(System.String)">
            <summary>
            Checks if a Wgl extension is supported by the given context.
            </summary>
            <param name="ext">The extension to check.</param>
            <returns>True if the extension is supported by the given context, false otherwise</returns>
        </member>
        <member name="T:OpenTK.Platform.Dummy.DummyGLContext">
            <summary>
            An empty IGraphicsContext implementation to be used inside the Visual Studio designer.
            This class supports OpenTK, and is not intended for use by OpenTK programs.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.DisplayResolution">
            <summary>Contains information regarding a monitor's display resolution.</summary>
        </member>
        <member name="M:OpenTK.Graphics.DisplayResolution.#ctor(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a new DisplayResolution object for the primary DisplayDevice.
            </summary>
            <param name="width">The requested width in pixels.</param>
            <param name="height">The requested height in pixels.</param>
            <param name="bitsPerPixel">The requested bits per pixel in bits.</param>
            <param name="refreshRate">The requested refresh rate in Herz.</param>
            <remarks>OpenTK will select the closest match between all available resolutions on the primary DisplayDevice.</remarks>
        </member>
        <member name="M:OpenTK.Graphics.DisplayResolution.ToString">
            <summary>
            Returns a System.String representing this DisplayResolution.
            </summary>
            <returns>A System.String representing this DisplayResolution.</returns>
        </member>
        <member name="M:OpenTK.Graphics.DisplayResolution.Equals(System.Object)">
            <summary>Determines whether the specified resolutions are equal.</summary>
            <param name="obj">The System.Object to check against.</param>
            <returns>True if the System.Object is an equal DisplayResolution; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.DisplayResolution.GetHashCode">
            <summary>Returns a unique hash representing this resolution.</summary>
            <returns>A System.Int32 that may serve as a hash code for this resolution.</returns>
        </member>
        <member name="P:OpenTK.Graphics.DisplayResolution.Width">
            <summary>Gets a System.Int32 that contains the width of this display in pixels.</summary>
        </member>
        <member name="P:OpenTK.Graphics.DisplayResolution.Height">
            <summary>Gets a System.Int32 that contains the height of this display in pixels.</summary>
        </member>
        <member name="P:OpenTK.Graphics.DisplayResolution.BitsPerPixel">
            <summary>Gets a System.Int32 that contains number of bits per pixel of this display. Typical values include 8, 16, 24 and 32.</summary>
        </member>
        <member name="P:OpenTK.Graphics.DisplayResolution.RefreshRate">
            <summary>
            Gets a System.Single representing the vertical refresh rate of this display.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.Color4">
            <summary>
            Represents a color with 4 floating-point components (R, G, B, A).
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.Color4.R">
            <summary>
            The red component of this Color4 structure.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.Color4.G">
            <summary>
            The green component of this Color4 structure.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.Color4.B">
            <summary>
            The blue component of this Color4 structure.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.Color4.A">
            <summary>
            The alpha component of this Color4 structure.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.Color4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color4 structure from the specified components.
            </summary>
            <param name="r">The red component of the new Color4 structure.</param>
            <param name="g">The green component of the new Color4 structure.</param>
            <param name="b">The blue component of the new Color4 structure.</param>
            <param name="a">The alpha component of the new Color4 structure.</param>
        </member>
        <member name="M:OpenTK.Graphics.Color4.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new Color4 structure from the specified System.Drawing.Color.
            </summary>
            <param name="color">The System.Drawing.Color containing the component values.</param>
        </member>
        <member name="M:OpenTK.Graphics.Color4.op_Equality(OpenTK.Graphics.Color4,OpenTK.Graphics.Color4)">
            <summary>
            Compares the specified Color4 structures for equality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
            <returns>True if left is equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.op_Inequality(OpenTK.Graphics.Color4,OpenTK.Graphics.Color4)">
            <summary>
            Compares the specified Color4 structures for inequality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
            <returns>True if left is not equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.op_Implicit(System.Drawing.Color)~OpenTK.Graphics.Color4">
            <summary>
            Converts the specified System.Drawing.Color to a Color4 structure.
            </summary>
            <param name="color">The System.Drawing.Color to convert.</param>
            <returns>A new Color4 structure containing the converted components.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.op_Explicit(OpenTK.Graphics.Color4)~System.Drawing.Color">
            <summary>
            Converts the specified Color4 to a System.Drawing.Color structure.
            </summary>
            <param name="color">The Color4 to convert.</param>
            <returns>A new System.Drawing.Color structure containing the converted components.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.Equals(OpenTK.Graphics.Color4)">
            <summary>
            Compares whether this Color4 structure is equal to the specified Color4.
            </summary>
            <param name="other">The Color4 structure to compare to.</param>
            <returns>True if both Color4 structures contain the same components; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.Equals(System.Object)">
            <summary>
            Compares whether this Color4 structure is equal to the specified object.
            </summary>
            <param name="obj">An object to compare to.</param>
            <returns>True obj is a Color4 structure with the same components as this Color4; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.GetHashCode">
            <summary>
            Calculates the hash code for this Color4 structure.
            </summary>
            <returns>A System.Int32 containing the hashcode of this Color4 structure.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.ToString">
            <summary>
            Creates a System.String that describes this Color4 structure.
            </summary>
            <returns>A System.String that describes this Color4 structure.</returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinDisplayDeviceDriver.#cctor">
            <summary>Queries available display devices and display resolutions.</summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.WinWindowInfo">
            <summary>Describes a win32 window.</summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinWindowInfo.ToString">
            <summary>Returns a System.String that represents the current window.</summary>
            <returns>A System.String that represents the current window.</returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinWindowInfo.Equals(System.Object)">
            <summary>Checks if <c>this</c> and <c>obj</c> reference the same win32 window.</summary>
            <param name="obj">The object to check against.</param>
            <returns>True if <c>this</c> and <c>obj</c> reference the same win32 window; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinWindowInfo.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A hash code for the current <c>WinWindowInfo</c>.</returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinWindowInfo.Dispose">
            <summary>Releases the unmanaged resources consumed by this instance.</summary>
        </member>
        <member name="T:OpenTK.Graphics.ColorFormat">
            <summary>Defines the ColorFormat component of a GraphicsMode.</summary>
            <remarks>
            <para>A ColorFormat contains Red, Green, Blue and Alpha components that descibe
            the allocated bits per pixel for the corresponding color.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.#ctor(System.Int32)">
            <summary>
            Constructs a new ColorFormat with the specified aggregate bits per pixel.
            </summary>
            <param name="bpp">The bits per pixel sum for the Red, Green, Blue and Alpha color channels.</param>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new ColorFormat with the specified bits per pixel for 
            the Red, Green, Blue and Alpha color channels.
            </summary>
            <param name="red">Bits per pixel for the Red color channel.</param>
            <param name="green">Bits per pixel for the Green color channel.</param>
            <param name="blue">Bits per pixel for the Blue color channel.</param>
            <param name="alpha">Bits per pixel for the Alpha color channel.</param>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.op_Implicit(System.Int32)~OpenTK.Graphics.ColorFormat">
            <summary>
            Converts the specified bpp into a new ColorFormat.
            </summary>
            <param name="bpp">The bits per pixel to convert.</param>
            <returns>A ColorFormat with the specified bits per pixel.</returns>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.Red">
            <summary>Gets the bits per pixel for the Red channel.</summary>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.Green">
            <summary>Gets the bits per pixel for the Green channel.</summary>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.Blue">
            <summary>Gets the bits per pixel for the Blue channel.</summary>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.Alpha">
            <summary>Gets the bits per pixel for the Alpha channel.</summary>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.IsIndexed">
            <summary>Gets a System.Boolean indicating whether this ColorFormat is indexed.</summary>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.BitsPerPixel">
            <summary>Gets the sum of Red, Green, Blue and Alpha bits per pixel.</summary>
        </member>
        <member name="T:OpenTK.Audio.EfxEffectf">
            <summary>A list of valid 32-Bits Float Effect/GetEffect parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbDensity">
            <summary>Reverb Modal Density controls the coloration of the late reverb. Lowering the value adds more coloration to the late reverb. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbDiffusion">
            <summary>The Reverb Diffusion property controls the echo density in the reverberation decay. The default 1.0f provides the highest density. Reducing diffusion gives the reverberation a more "grainy" character that is especially noticeable with percussive sound sources. If you set a diffusion value of 0.0f, the later reverberation sounds like a succession of distinct echoes. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbGain">
            <summary>The Reverb Gain property is the master volume control for the reflected sound - both early reflections and reverberation - that the reverb effect adds to all sound sources. Ranges from 1.0 (0db) (the maximum amount) to 0.0 (-100db) (no reflected sound at all) are accepted. Units: Linear gain Range [0.0f .. 1.0f] Default: 0.32f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbGainHF">
            <summary>The Reverb Gain HF property further tweaks reflected sound by attenuating it at high frequencies. It controls a low-pass filter that applies globally to the reflected sound of all sound sources feeding the particular instance of the reverb effect. Ranges from 1.0f (0db) (no filter) to 0.0f (-100db) (virtually no reflected sound) are accepted. Units: Linear gain Range [0.0f .. 1.0f] Default: 0.89f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbDecayTime">
            <summary>The Decay Time property sets the reverberation decay time. It ranges from 0.1f (typically a small room with very dead surfaces) to 20.0 (typically a large room with very live surfaces). Unit: Seconds Range [0.1f .. 20.0f] Default: 1.49f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbDecayHFRatio">
            <summary>The Decay HF Ratio property sets the spectral quality of the Decay Time parameter. It is the ratio of high-frequency decay time relative to the time set by Decay Time.. Unit: linear multiplier Range [0.1f .. 2.0f] Default: 0.83f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbReflectionsGain">
            <summary>The Reflections Gain property controls the overall amount of initial reflections relative to the Gain property. The value of Reflections Gain ranges from a maximum of 3.16f (+10 dB) to a minimum of 0.0f (-100 dB) (no initial reflections at all), and is corrected by the value of the Gain property. Unit: Linear gain Range [0.0f .. 3.16f] Default: 0.05f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbReflectionsDelay">
            <summary>The Reflections Delay property is the amount of delay between the arrival time of the direct path from the source to the first reflection from the source. It ranges from 0 to 300 milliseconds. Unit: Seconds Range [0.0f .. 0.3f] Default: 0.007f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbLateReverbGain">
            <summary>The Late Reverb Gain property controls the overall amount of later reverberation relative to the Gain property. The value of Late Reverb Gain ranges from a maximum of 10.0f (+20 dB) to a minimum of 0.0f (-100 dB) (no late reverberation at all). Unit: Linear gain Range [0.0f .. 10.0f] Default: 1.26f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbLateReverbDelay">
            <summary>The Late Reverb Delay property defines the begin time of the late reverberation relative to the time of the initial reflection (the first of the early reflections). It ranges from 0 to 100 milliseconds. Unit: Seconds Range [0.0f .. 0.1f] Default: 0.011f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbAirAbsorptionGainHF">
            <summary>The Air Absorption Gain HF property controls the distance-dependent attenuation at high frequencies caused by the propagation medium and applies to reflected sound only. Unit: Linear gain per meter Range [0.892f .. 1.0f] Default: 0.994f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ReverbRoomRolloffFactor">
            <summary>The Room Rolloff Factor property is one of two methods available to attenuate the reflected sound (containing both reflections and reverberation) according to source-listener distance. It's defined the same way as OpenAL's Rolloff Factor, but operates on reverb sound instead of direct-path sound. Unit: Linear multiplier Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ChorusRate">
            <summary>This property sets the modulation rate of the low-frequency oscillator that controls the delay time of the delayed signals. Unit: Hz Range [0.0f .. 10.0f] Default: 1.1f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ChorusDepth">
            <summary>This property controls the amount by which the delay time is modulated by the low-frequency oscillator. Range [0.0f .. 1.0f] Default: 0.1f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ChorusFeedback">
            <summary>This property controls the amount of processed signal that is fed back to the input of the chorus effect. Negative values will reverse the phase of the feedback signal. At full magnitude the identical sample will repeat endlessly. Range [-1.0f .. +1.0f] Default: +0.25f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.ChorusDelay">
            <summary>This property controls the average amount of time the sample is delayed before it is played back, and with feedback, the amount of time between iterations of the sample. Larger values lower the pitch. Unit: Seconds Range [0.0f .. 0.016f] Default: 0.016f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.DistortionEdge">
            <summary>This property controls the shape of the distortion. The higher the value for Edge, the "dirtier" and "fuzzier" the effect. Range [0.0f .. 1.0f] Default: 0.2f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.DistortionGain">
            <summary>This property allows you to attenuate the distorted sound. Range [0.01f .. 1.0f] Default: 0.05f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.DistortionLowpassCutoff">
            <summary>Input signals can have a low pass filter applied, to limit the amount of high frequency signal feeding into the distortion effect. Unit: Hz Range [80.0f .. 24000.0f] Default: 8000.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.DistortionEQCenter">
            <summary>This property controls the frequency at which the post-distortion attenuation (Distortion Gain) is active. Unit: Hz Range [80.0f .. 24000.0f] Default: 3600.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.DistortionEQBandwidth">
            <summary>This property controls the bandwidth of the post-distortion attenuation. Unit: Hz Range [80.0f .. 24000.0f] Default: 3600.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EchoDelay">
            <summary>This property controls the delay between the original sound and the first "tap", or echo instance. Subsequently, the value for Echo Delay is used to determine the time delay between each "second tap" and the next "first tap". Unit: Seconds Range [0.0f .. 0.207f] Default: 0.1f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EchoLRDelay">
            <summary>This property controls the delay between the "first tap" and the "second tap". Subsequently, the value for Echo LR Delay is used to determine the time delay between each "first tap" and the next "second tap". Unit: Seconds Range [0.0f .. 0.404f] Default: 0.1f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EchoDamping">
            <summary>This property controls the amount of high frequency damping applied to each echo. As the sound is subsequently fed back for further echoes, damping results in an echo which progressively gets softer in tone as well as intensity. Range [0.0f .. 0.99f] Default: 0.5f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EchoFeedback">
            <summary>This property controls the amount of feedback the output signal fed back into the input. Use this parameter to create "cascading" echoes. At full magnitude, the identical sample will repeat endlessly. Below full magnitude, the sample will repeat and fade. Range [0.0f .. 1.0f] Default: 0.5f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EchoSpread">
            <summary>This property controls how hard panned the individual echoes are. With a value of 1.0f, the first "tap" will be panned hard left, and the second "tap" hard right. –1.0f gives the opposite result and values near to 0.0f result in less emphasized panning. Range [-1.0f .. +1.0f] Default: -1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.FlangerRate">
            <summary>The number of times per second the low-frequency oscillator controlling the amount of delay repeats. Range [0.0f .. 10.0f] Default: 0.27f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.FlangerDepth">
            <summary>The ratio by which the delay time is modulated by the low-frequency oscillator. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.FlangerFeedback">
            <summary>This is the amount of the output signal level fed back into the effect's input. A negative value will reverse the phase of the feedback signal. Range [-1.0f .. +1.0f] Default: -0.5f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.FlangerDelay">
            <summary>The average amount of time the sample is delayed before it is played back. When used with the Feedback property it's the amount of time between iterations of the sample. Unit: Seconds Range [0.0f .. 0.004f] Default: 0.002f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.FrequencyShifterFrequency">
            <summary>This is the carrier frequency. For carrier frequencies below the audible range, the single sideband modulator may produce phaser effects, spatial effects or a slight pitch-shift. As the carrier frequency increases, the timbre of the sound is affected. Unit: Hz Range [0.0f .. 24000.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.VocalMorpherRate">
            <summary>This controls the frequency of the low-frequency oscillator used to morph between the two phoneme filters. Unit: Hz Range [0.0f .. 10.0f] Default: 1.41f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.RingModulatorFrequency">
            <summary>This is the frequency of the carrier signal. If the carrier signal is slowly varying (less than 20 Hz), the result is a slow amplitude variation effect (tremolo). Unit: Hz Range [0.0f .. 8000.0f] Default: 440.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.RingModulatorHighpassCutoff">
            <summary>This controls the cutoff frequency at which the input signal is high-pass filtered before being ring modulated. Unit: Hz Range [0.0f .. 24000.0f] Default: 800.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.AutowahAttackTime">
            <summary>This property controls the time the filtering effect takes to sweep from minimum to maximum center frequency when it is triggered by input signal. Unit: Seconds Range [0.0001f .. 1.0f] Default: 0.06f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.AutowahReleaseTime">
            <summary>This property controls the time the filtering effect takes to sweep from maximum back to base center frequency, when the input signal ends. Unit: Seconds Range [0.0001f .. 1.0f] Default: 0.06f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.AutowahResonance">
            <summary>This property controls the resonant peak, sometimes known as emphasis or Q, of the auto-wah band-pass filter. Range [2.0f .. 1000.0f] Default: 1000.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.AutowahPeakGain">
            <summary>This property controls the input signal level at which the band-pass filter will be fully opened. Range [0.00003f .. 31621.0f] Default: 11.22f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EqualizerLowGain">
            <summary>This property controls amount of cut or boost on the low frequency range. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EqualizerLowCutoff">
            <summary>This property controls the low frequency below which signal will be cut off. Unit: Hz Range [50.0f .. 800.0f] Default: 200.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EqualizerMid1Gain">
            <summary>This property allows you to cut/boost signal on the "mid1" range. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EqualizerMid1Center">
            <summary>This property sets the center frequency for the "mid1" range. Unit: Hz Range [200.0f .. 3000.0f] Default: 500.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EqualizerMid1Width">
            <summary>This property controls the width of the "mid1" range. Range [0.01f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EqualizerMid2Gain">
            <summary>This property allows you to cut/boost signal on the "mid2" range. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EqualizerMid2Center">
            <summary>This property sets the center frequency for the "mid2" range. Unit: Hz Range [1000.0f .. 8000.0f] Default: 3000.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EqualizerMid2Width">
            <summary>This property controls the width of the "mid2" range. Range [0.01f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EqualizerHighGain">
            <summary>This property allows to cut/boost the signal at high frequencies. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EqualizerHighCutoff">
            <summary>This property controls the high frequency above which signal will be cut off. Unit: Hz Range [4000.0f .. 16000.0f] Default: 6000.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbDensity">
            <summary>Reverb Modal Density controls the coloration of the late reverb. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbDiffusion">
            <summary>The Reverb Diffusion property controls the echo density in the reverberation decay. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbGain">
            <summary>Reverb Gain controls the level of the reverberant sound in an environment. A high level of reverb is characteristic of rooms with highly reflective walls and/or small dimensions. Unit: Linear gain Range [0.0f .. 1.0f] Default: 0.32f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbGainHF">
            <summary>Gain HF is used to attenuate the high frequency content of all the reflected sound in an environment. You can use this property to give a room specific spectral characteristic. Unit: Linear gain Range [0.0f .. 1.0f] Default: 0.89f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbGainLF">
            <summary>Gain LF is the low frequency counterpart to Gain HF. Use this to reduce or boost the low frequency content in an environment. Unit: Linear gain Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbDecayTime">
            <summary>The Decay Time property sets the reverberation decay time. It ranges from 0.1f (typically a small room with very dead surfaces) to 20.0f (typically a large room with very live surfaces). Unit: Seconds Range [0.1f .. 20.0f] Default: 1.49f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbDecayHFRatio">
            <summary>Decay HF Ratio scales the decay time of high frequencies relative to the value of the Decay Time property. By changing this value, you are changing the amount of time it takes for the high frequencies to decay compared to the mid frequencies of the reverb. Range [0.1f .. 2.0f] Default: 0.83f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbDecayLFRatio">
            <summary>Decay LF Ratio scales the decay time of low frequencies in the reverberation in the same manner that Decay HF Ratio handles high frequencies. Unit: Linear multiplier Range [0.1f .. 2.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbReflectionsGain">
            <summary>Reflections Gain sets the level of the early reflections in an environment. Early reflections are used as a cue for determining the size of the environment we are in. Unit: Linear gain Range [0.0f .. 3.16f] Default: 0.05f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbReflectionsDelay">
            <summary>Reflections Delay controls the amount of time it takes for the first reflected wave front to reach the listener, relative to the arrival of the direct-path sound. Unit: Seconds Range [0.0f .. 0.3f] Default: 0.007f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbLateReverbGain">
            <summary>The Late Reverb Gain property controls the overall amount of later reverberation relative to the Gain property. Range [0.0f .. 10.0f] Default: 1.26f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbLateReverbDelay">
            <summary>The Late Reverb Delay property defines the begin time of the late reverberation relative to the time of the initial reflection (the first of the early reflections). It ranges from 0 to 100 milliseconds. Unit: Seconds Range [0.0f .. 0.1f] Default: 0.011f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbEchoTime">
            <summary>Echo Time controls the rate at which the cyclic echo repeats itself along the reverberation decay. Range [0.075f .. 0.25f] Default: 0.25f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbEchoDepth">
            <summary>Echo Depth introduces a cyclic echo in the reverberation decay, which will be noticeable with transient or percussive sounds. Range [0.0f .. 1.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbModulationTime">
            <summary>Modulation Time controls the speed of the rate of periodic changes in pitch (vibrato). Range [0.04f .. 4.0f] Default: 0.25f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbModulationDepth">
            <summary>Modulation Depth controls the amount of pitch change. Low values of Diffusion will contribute to reinforcing the perceived effect by reducing the mixing of overlapping reflections in the reverberation decay. Range [0.0f .. 1.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbAirAbsorptionGainHF">
            <summary>The Air Absorption Gain HF property controls the distance-dependent attenuation at high frequencies caused by the propagation medium. It applies to reflected sound only. Range [0.892f .. 1.0f] Default: 0.994f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbHFReference">
            <summary>The property HF reference determines the frequency at which the high-frequency effects created by Reverb properties are measured. Unit: Hz Range [1000.0f .. 20000.0f] Default: 5000.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbLFReference">
            <summary>The property LF reference determines the frequency at which the low-frequency effects created by Reverb properties are measured. Unit: Hz Range [20.0f .. 1000.0f] Default: 250.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectf.EaxReverbRoomRolloffFactor">
            <summary>The Room Rolloff Factor property is one of two methods available to attenuate the reflected sound (containing both reflections and reverberation) according to source-listener distance. It's defined the same way as OpenAL Rolloff Factor, but operates on reverb sound instead of direct-path sound. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.EfxEffect3f">
            <summary>A list of valid Math.Vector3 Effect/GetEffect parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffect3f.EaxReverbLateReverbPan">
            <summary>Reverb Pan does for the Reverb what Reflections Pan does for the Reflections. Unit: Vector3 of length 0f to 1f Default: {0.0f, 0.0f, 0.0f}</summary>  
        </member>
        <member name="F:OpenTK.Audio.EfxEffect3f.EaxReverbReflectionsPan">
            <summary>This Vector3 controls the spatial distribution of the cluster of early reflections. The direction of this vector controls the global direction of the reflections, while its magnitude controls how focused the reflections are towards this direction. For legacy reasons this Vector3 follows a left-handed co-ordinate system! Note that OpenAL uses a right-handed coordinate system. Unit: Vector3 of length 0f to 1f Default: {0.0f, 0.0f, 0.0f}</summary>
        </member>
        <member name="T:OpenTK.Audio.EfxEffecti">
            <summary>A list of valid Int32 Effect/GetEffect parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.ChorusWaveform">
            <summary>This property sets the waveform shape of the low-frequency oscillator that controls the delay time of the delayed signals. Unit: (0) Sinusoid, (1) Triangle Range [0 .. 1] Default: 1</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.ChorusPhase">
            <summary>This property controls the phase difference between the left and right low-frequency oscillators. At zero degrees the two low-frequency oscillators are synchronized. Unit: Degrees Range [-180 .. 180] Default: 90</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.FlangerWaveform">
            <summary>Selects the shape of the low-frequency oscillator waveform that controls the amount of the delay of the sampled signal. Unit: (0) Sinusoid, (1) Triangle Range [0 .. 1] Default: 1</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.FlangerPhase">
            <summary>This changes the phase difference between the left and right low-frequency oscillator's. At zero degrees the two low-frequency oscillators are synchronized. Range [-180 .. +180] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.FrequencyShifterLeftDirection">
            <summary>These select which internal signals are added together to produce the output. Unit: (0) Down, (1) Up, (2) Off Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.FrequencyShifterRightDirection">
            <summary>These select which internal signals are added together to produce the output. Unit: (0) Down, (1) Up, (2) Off Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.VocalMorpherPhonemeA">
            <summary>Sets the vocal morpher 4-band formant filter A, used to impose vocal tract effects upon the input signal. The vocal morpher is not necessarily intended for use on voice signals; it is primarily intended for pitched noise effects, vocal-like wind effects, etc. Unit: Use enum EfxFormantFilterSettings Range [0 .. 29] Default: 0, "Phoneme A"</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.VocalMorpherPhonemeACoarseTuning">
            <summary>This is used to adjust the pitch of phoneme filter A in 1-semitone increments. Unit: Semitones Range [-24 .. +24] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.VocalMorpherPhonemeB">
            <summary>Sets the vocal morpher 4-band formant filter B, used to impose vocal tract effects upon the input signal. The vocal morpher is not necessarily intended for use on voice signals; it is primarily intended for pitched noise effects, vocal-like wind effects, etc. Unit: Use enum EfxFormantFilterSettings Range [0 .. 29] Default: 10, "Phoneme ER"</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.VocalMorpherPhonemeBCoarseTuning">
            <summary>This is used to adjust the pitch of phoneme filter B in 1-semitone increments. Unit: Semitones Range [-24 .. +24] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.VocalMorpherWaveform">
            <summary>This controls the shape of the low-frequency oscillator used to morph between the two phoneme filters. Unit: (0) Sinusoid, (1) Triangle, (2) Sawtooth Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.PitchShifterCoarseTune">
            <summary>This sets the number of semitones by which the pitch is shifted. There are 12 semitones per octave. Unit: Semitones Range [-12 .. +12] Default: +12</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.PitchShifterFineTune">
            <summary>This sets the number of cents between Semitones a pitch is shifted. A Cent is 1/100th of a Semitone. Unit: Cents Range [-50 .. +50] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.RingModulatorWaveform">
            <summary>This controls which waveform is used as the carrier signal. Traditional ring modulator and tremolo effects generally use a sinusoidal carrier. Unit: (0) Sinusoid, (1) Sawtooth, (2) Square Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.CompressorOnoff">
            <summary>Enabling this will result in audio exhibiting smaller variation in intensity between the loudest and quietest portions. Unit: (0) Off, (1) On Range [0 .. 1] Default: 1</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.ReverbDecayHFLimit">
            <summary>When this flag is set, the high-frequency decay time automatically stays below a limit value that's derived from the setting of the property Air Absorption HF. Unit: (0) False, (1) True Range [False, True] Default: True</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.EaxReverbDecayHFLimit">
            <summary>When this flag is set, the high-frequency decay time automatically stays below a limit value that's derived from the setting of the property AirAbsorptionGainHF. Unit: (0) False, (1) True Range [False, True] Default: True</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffecti.EffectType">
            <summary>Used with the enum EfxEffectType as it's parameter.</summary>
        </member>
        <member name="T:OpenTK.Audio.EfxFormantFilterSettings">
            <summary>Vocal morpher effect parameters. If both parameters are set to the same phoneme, that determines the filtering effect that will be heard. If these two parameters are set to different phonemes, the filtering effect will morph between the two settings at a rate specified by EfxEffectf.VocalMorpherRate.</summary>
        </member>
        <member name="T:OpenTK.Audio.EfxEffectType">
            <summary>Effect type definitions to be used with EfxEffecti.EffectType.</summary>  
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.Null">
            <summary>No Effect, disable. This Effect type is used when an Effect object is initially created.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.Reverb">
            <summary>The Reverb effect is the standard Effects Extension's environmental reverberation effect. It is available on all Generic Software and Generic Hardware devices.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.Chorus">
            <summary>The Chorus effect essentially replays the input audio accompanied by another slightly delayed version of the signal, creating a "doubling" effect.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.Distortion">
            <summary>The Distortion effect simulates turning up (overdriving) the gain stage on a guitar amplifier or adding a distortion pedal to an instrument's output.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.Echo">
            <summary>The Echo effect generates discrete, delayed instances of the input signal.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.Flanger">
            <summary>The Flanger effect creates a "tearing" or "whooshing" sound, like a jet flying overhead.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.FrequencyShifter">
            <summary>The Frequency shifter is a single-sideband modulator, which translates all the component frequencies of the input signal by an equal amount.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.VocalMorpher">
            <summary>The Vocal morpher consists of a pair of 4-band formant filters, used to impose vocal tract effects upon the input signal.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.PitchShifter">
            <summary>The Pitch shifter applies time-invariant pitch shifting to the input signal, over a one octave range and controllable at a semi-tone and cent resolution.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.RingModulator">
            <summary>The Ring modulator multiplies an input signal by a carrier signal in the time domain, resulting in tremolo or inharmonic effects.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.Autowah">
            <summary>The Auto-wah effect emulates the sound of a wah-wah pedal used with an electric guitar, or a mute on a brass instrument.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.Compressor">
            <summary>The Compressor will boost quieter portions of the audio, while louder portions will stay the same or may even be reduced.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.Equalizer">
            <summary>The Equalizer is very flexible, providing tonal control over four different adjustable frequency ranges.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxEffectType.EaxReverb">
            <summary>The EAX Reverb has a more advanced parameter set than EfxEffectType.Reverb, but is only natively supported on devices that support the EAX 3.0 or above.</summary>
        </member>
        <member name="T:OpenTK.Audio.EfxAuxiliaryi">
            <summary>A list of valid Int32 AuxiliaryEffectSlot/GetAuxiliaryEffectSlot parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxAuxiliaryi.EffectslotEffect">
            <summary>This property is used to attach an Effect object to the Auxiliary Effect Slot object. After the attachment, the Auxiliary Effect Slot object will contain the effect type and have the same effect parameters that were stored in the Effect object. Any Sources feeding the Auxiliary Effect Slot will immediate feed the new effect type and new effect parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxAuxiliaryi.EffectslotAuxiliarySendAuto">
            <summary>This property is used to enable or disable automatic send adjustments based on the physical positions of the sources and the listener. This property should be enabled when an application wishes to use a reverb effect to simulate the environment surrounding a listener or a collection of Sources. Range [False, True] Default: True </summary>
        </member>
        <member name="T:OpenTK.Audio.EfxAuxiliaryf">
            <summary>A list of valid 32-Bits Float AuxiliaryEffectSlot/GetAuxiliaryEffectSlot parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxAuxiliaryf.EffectslotGain">
            <summary>This property is used to specify an output level for the Auxiliary Effect Slot. Setting the gain to 0.0f mutes the output. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.EfxFilterf">
            <summary>A list of valid 32-Bits Float Filter/GetFilter parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterf.LowpassGain">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterf.LowpassGainHF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterf.HighpassGain">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterf.HighpassGainLF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterf.BandpassGain">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterf.BandpassGainLF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterf.BandpassGainHF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.EfxFilteri">
            <summary>A list of valid Int32 Filter/GetFilter parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilteri.FilterType">
            <summary>Used with the enum EfxFilterType as Parameter to select a filter logic.</summary>
        </member>
        <member name="T:OpenTK.Audio.EfxFilterType">
            <summary>Filter type definitions to be used with EfxFilteri.FilterType.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterType.Null">
            <summary>No Filter, disable. This Filter type is used when a Filter object is initially created.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterType.Lowpass">
            <summary>A low-pass filter is used to remove high frequency content from a signal.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterType.Highpass">
            <summary>Currently not implemented. A high-pass filter is used to remove low frequency content from a signal.</summary>
        </member>
        <member name="F:OpenTK.Audio.EfxFilterType.Bandpass">
            <summary>Currently not implemented. A band-pass filter is used to remove high and low frequency content from a signal.</summary>
        </member>
        <member name="T:OpenTK.Audio.SoundData">
            <summary>Encapsulates a pointer to a decoded sound buffer.</summary>
        </member>
        <member name="M:OpenTK.Audio.SoundData.#ctor(OpenTK.Audio.SoundFormat,System.Byte[])">
            <internal />
            <summary>Constructs a new SoundData object.</summary>
            <param name="format">The SoundFormat of these SoundData.</param>
            <param name="data">An array of PCM buffer.</param>
        </member>
        <member name="P:OpenTK.Audio.SoundData.Data">
            <summary>Gets the raw PCM buffer.</summary>
        </member>
        <member name="P:OpenTK.Audio.SoundData.SoundFormat">
            <summary>Gets the SoundFormat of the SoundData.</summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.WinGLContext">
            <summary>
            Provides methods to create and control an opengl context on the Windows platform.
            This class supports OpenTK, and is not intended for use by OpenTK programs.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinGLContext.ToString">
            <summary>Returns a System.String describing this OpenGL context.</summary>
            <returns>A System.String describing this OpenGL context.</returns>
        </member>
        <member name="P:OpenTK.Platform.Windows.WinGLContext.VSync">
            <summary>
            Gets or sets a System.Boolean indicating whether SwapBuffer calls are synced to the screen refresh rate.
            </summary>
        </member>
        <member name="T:OpenTK.Math.Vector2h">
            <summary>2-component Vector of the Half type. Occupies 4 Byte total.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector2h.X">
            <summary>The X component of the Half2.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector2h.Y">
            <summary>The Y component of the Half2.</summary>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(OpenTK.Math.Half,OpenTK.Math.Half)">
            <summary>
            The new Half2 instance will avoid conversion and copy directly from the Half parameters.
            </summary>
            <param name="x">An Half instance of a 16-Bit half precision floating point number.</param>
            <param name="y">An Half instance of a 16-Bit half precision floating point number.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(System.Single,System.Single)">
            <summary>
            The new Half2 instance will convert the 2 parameters into 16-Bit Half precision floating point.
            </summary>
            <param name="x">32-Bit Single precision floating point number.</param>
            <param name="y">32-Bit Single precision floating point number.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            The new Half2 instance will convert the 2 parameters into 16-Bit Half precision floating point.
            </summary>
            <param name="x">32-Bit Single precision floating point number.</param>
            <param name="y">32-Bit Single precision floating point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(OpenTK.Math.Vector2)">
            <summary>
            The new Half2 instance will convert the Vector2 into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector2</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(OpenTK.Math.Vector2,System.Boolean)">
            <summary>
            The new Half2 instance will convert the Vector2 into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector2</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(OpenTK.Math.Vector2@)">
            <summary>
            The new Half2 instance will convert the Vector2 into 16-Bit Half precision floating point.
            This is the fastest constructor.
            </summary>
            <param name="v">OpenTK.Math.Vector2</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(OpenTK.Math.Vector2@,System.Boolean)">
            <summary>
            The new Half2 instance will convert the Vector2 into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector2</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(OpenTK.Math.Vector2d)">
            <summary>
            The new Half2 instance will convert the Vector2d into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector2d</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(OpenTK.Math.Vector2d,System.Boolean)">
            <summary>
            The new Half2 instance will convert the Vector2d into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector2d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(OpenTK.Math.Vector2d@)">
            <summary>
            The new Half2 instance will convert the Vector2d into 16-Bit Half precision floating point.
            This is the faster constructor.
            </summary>
            <param name="v">OpenTK.Math.Vector2d</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(OpenTK.Math.Vector2d@,System.Boolean)">
            <summary>
            The new Half2 instance will convert the Vector2d into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector2d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.ToVector2">
            <summary>
            Returns this Half2 instance's contents as Vector2.
            </summary>
            <returns>OpenTK.Math.Vector2</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2h.ToVector2d">
            <summary>
            Returns this Half2 instance's contents as Vector2d.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector2h.op_Explicit(OpenTK.Math.Vector2)~OpenTK.Math.Vector2h">
            <summary>Converts OpenTK.Math.Vector2 to OpenTK.Math.Half2.</summary>
            <param name="v">The Vector2 to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2h.op_Explicit(OpenTK.Math.Vector2d)~OpenTK.Math.Vector2h">
            <summary>Converts OpenTK.Math.Vector2d to OpenTK.Math.Half2.</summary>
            <param name="v">The Vector2d to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2h.op_Explicit(OpenTK.Math.Vector2h)~OpenTK.Math.Vector2">
            <summary>Converts OpenTK.Math.Half2 to OpenTK.Math.Vector2.</summary>
            <param name="h">The Half2 to convert.</param>
            <returns>The resulting Vector2.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2h.op_Explicit(OpenTK.Math.Vector2h)~OpenTK.Math.Vector2d">
            <summary>Converts OpenTK.Math.Half2 to OpenTK.Math.Vector2d.</summary>
            <param name="h">The Half2 to convert.</param>
            <returns>The resulting Vector2d.</returns>
        </member>
        <member name="F:OpenTK.Math.Vector2h.SizeInBytes">
            <summary>The size in bytes for an instance of the Half2 struct is 4.</summary>
        </member>
        <member name="M:OpenTK.Math.Vector2h.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor used by ISerializable to deserialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used by ISerialize to serialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.FromBinaryStream(System.IO.BinaryReader)">
            <summary>Updates the X and Y components of this instance by reading from a Stream.</summary>
            <param name="bin">A BinaryReader instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.ToBinaryStream(System.IO.BinaryWriter)">
            <summary>Writes the X and Y components of this instance into a Stream.</summary>
            <param name="bin">A BinaryWriter instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2h.Equals(OpenTK.Math.Vector2h)">
            <summary>Returns a value indicating whether this instance is equal to a specified OpenTK.Math.Half2 vector.</summary>
            <param name="other">OpenTK.Math.Half2 to compare to this instance..</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2h.ToString">
            <summary>Returns a string that contains this Half2's numbers in human-legible form.</summary>
        </member>
        <member name="M:OpenTK.Math.Vector2h.GetBytes(OpenTK.Math.Vector2h)">
            <summary>Returns the Half2 as an array of bytes.</summary>
            <param name="h">The Half2 to convert.</param>
            <returns>The input as byte array.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2h.FromBytes(System.Byte[],System.Int32)">
            <summary>Converts an array of bytes into Half2.</summary>
            <param name="value">A Half2 in it's byte[] representation.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A new Half2 instance.</returns>
        </member>
        <member name="T:OpenTK.Input.InputDeviceType">
            <summary>
            The type of the input device.
            </summary>
        </member>
        <member name="F:OpenTK.Input.InputDeviceType.Keyboard">
            <summary>
            Device is a keyboard.
            </summary>
        </member>
        <member name="F:OpenTK.Input.InputDeviceType.Mouse">
            <summary>
            Device is a mouse.
            </summary>
        </member>
        <member name="F:OpenTK.Input.InputDeviceType.Hid">
            <summary>
            Device is a Human Interface Device. Joysticks, joypads, pens
            and some specific usb keyboards/mice fall into this category.
            </summary>
        </member>
        <member name="T:OpenTK.GameWindow">
            <summary>
            The GameWindow class contains cross-platform methods to create and render on an OpenGL
            window, handle input and load resources.
            </summary>
            <remarks>
            GameWindow contains several events you can hook or override to add your custom logic:
            <list>
            <item>
            OnLoad: Occurs after creating the OpenGL context, but before entering the main loop.
            Override to load resources.
            </item>
            <item>
            OnUnload: Occurs after exiting the main loop, but before deleting the OpenGL context.
            Override to unload resources.
            </item>
            <item>
            OnResize: Occurs whenever GameWindow is resized. You should update the OpenGL Viewport
            and Projection Matrix here.
            </item>
            <item>
            OnUpdateFrame: Occurs at the specified logic update rate. Override to add your game
            logic.
            </item>
            <item>
            OnRenderFrame: Occurs at the specified frame render rate. Override to add your
            rendering code.
            </item>
            </list>
            Call the Run() method to start the application's main loop. Run(double, double) takes two
            parameters that
            specify the logic update rate, and the render update rate.
            </remarks>
        </member>
        <member name="M:OpenTK.GameWindow.#ctor">
            <summary>Constructs a new GameWindow with sensible default attributes..</summary>
        </member>
        <member name="M:OpenTK.GameWindow.#ctor(System.Int32,System.Int32)">
            <summary>Constructs a new GameWindow with the specified attributes.</summary>
            <param name="width">The width of the GameWindow in pixels.</param>
            <param name="height">The height of the GameWindow in pixels.</param>
        </member>
        <member name="M:OpenTK.GameWindow.#ctor(System.Int32,System.Int32,OpenTK.Graphics.GraphicsMode)">
            <summary>Constructs a new GameWindow with the specified attributes.</summary>
            <param name="width">The width of the GameWindow in pixels.</param>
            <param name="height">The height of the GameWindow in pixels.</param>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the GameWindow.</param>
        </member>
        <member name="M:OpenTK.GameWindow.#ctor(System.Int32,System.Int32,OpenTK.Graphics.GraphicsMode,System.String)">
            <summary>Constructs a new GameWindow with the specified attributes.</summary>
            <param name="width">The width of the GameWindow in pixels.</param>
            <param name="height">The height of the GameWindow in pixels.</param>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the GameWindow.</param>
            <param name="title">The title of the GameWindow.</param>
        </member>
        <member name="M:OpenTK.GameWindow.#ctor(System.Int32,System.Int32,OpenTK.Graphics.GraphicsMode,System.String,OpenTK.GameWindowFlags)">
            <summary>Constructs a new GameWindow with the specified attributes.</summary>
            <param name="width">The width of the GameWindow in pixels.</param>
            <param name="height">The height of the GameWindow in pixels.</param>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the GameWindow.</param>
            <param name="title">The title of the GameWindow.</param>
            <param name="options">GameWindow options regarding window appearance and behavior.</param>
        </member>
        <member name="M:OpenTK.GameWindow.#ctor(System.Int32,System.Int32,OpenTK.Graphics.GraphicsMode,System.String,OpenTK.GameWindowFlags,OpenTK.Graphics.DisplayDevice)">
            <summary>Constructs a new GameWindow with the specified attributes.</summary>
            <param name="width">The width of the GameWindow in pixels.</param>
            <param name="height">The height of the GameWindow in pixels.</param>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the GameWindow.</param>
            <param name="title">The title of the GameWindow.</param>
            <param name="options">GameWindow options regarding window appearance and behavior.</param>
            <param name="device">The OpenTK.Graphics.DisplayDevice to construct the GameWindow in.</param>
        </member>
        <member name="M:OpenTK.GameWindow.#ctor(System.Int32,System.Int32,OpenTK.Graphics.GraphicsMode,System.String,OpenTK.GameWindowFlags,OpenTK.Graphics.DisplayDevice,System.Int32,System.Int32,OpenTK.Graphics.GraphicsContextFlags)">
            <summary>Constructs a new GameWindow with the specified attributes.</summary>
            <param name="width">The width of the GameWindow in pixels.</param>
            <param name="height">The height of the GameWindow in pixels.</param>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the GameWindow.</param>
            <param name="title">The title of the GameWindow.</param>
            <param name="options">GameWindow options regarding window appearance and behavior.</param>
            <param name="device">The OpenTK.Graphics.DisplayDevice to construct the GameWindow in.</param>
            <param name="major">The major version for the OpenGL GraphicsContext.</param>
            <param name="minor">The minor version for the OpenGL GraphicsContext.</param>
            <param name="flags">The GraphicsContextFlags version for the OpenGL GraphicsContext.</param>
        </member>
        <member name="M:OpenTK.GameWindow.#ctor(OpenTK.DisplayMode)">
            <summary>
            Constructs a new GameWindow, and opens a render window with the specified DisplayMode.
            </summary>
            <param name="mode">The DisplayMode of the GameWindow.</param>
        </member>
        <member name="M:OpenTK.GameWindow.#ctor(OpenTK.DisplayMode,System.String)">
            <summary>
            Constructs a new GameWindow with the specified title, and opens a render window with the
            specified DisplayMode.
            </summary>
            <param name="mode">The DisplayMode of the GameWindow.</param>
            <param name="title">The Title of the GameWindow.</param>
        </member>
        <member name="M:OpenTK.GameWindow.Exit">
            <summary>
            Gracefully exits the GameWindow. May be called from any thread.
            </summary>
            <remarks>
            <para>Override if you are not using <see cref="M:OpenTK.GameWindow.Run"/>.</para>
            <para>If you override this method, place a call to base.Exit(), to ensure proper OpenTK shutdown.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.GameWindow.Run">
            <summary>
            Enters the game loop of the GameWindow updating and rendering at the maximum possible frequency.
            </summary>
            <see cref="M:OpenTK.GameWindow.Run(System.Double,System.Double)"/>
        </member>
        <member name="M:OpenTK.GameWindow.Run(System.Double)">
            <summary>
            Enters the game loop of the GameWindow updating the specified update frequency, while maintaining the
            maximum possible render frequency.
            </summary>
            <see cref="M:OpenTK.GameWindow.Run(System.Double,System.Double)"/>
        </member>
        <member name="M:OpenTK.GameWindow.Run(System.Double,System.Double)">
            <summary>
            Enters the game loop of the GameWindow updating and rendering at the specified frequency.
            </summary>
            <param name="updates_per_second">The frequency of UpdateFrame events.</param>
            <param name="frames_per_second">The frequency of RenderFrame events.</param>
        </member>
        <member name="M:OpenTK.GameWindow.ProcessEvents">
            <summary>
            Processes operating system events until the GameWindow becomes idle.
            </summary>
            <remarks>
            When overriding the default GameWindow game loop (provided by the Run() function)
            you should call ProcessEvents() to ensure that your GameWindow responds to
            operating system events.
            <para>
            Once ProcessEvents() returns, it is time to call update and render the next frame.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.GameWindow.OnRenderFrameInternal(OpenTK.RenderFrameEventArgs)">
            <summary>
            Raises the RenderFrame event, and calls the public function.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenTK.GameWindow.OnRenderFrame(OpenTK.RenderFrameEventArgs)">
            <summary>
            Override in derived classes to render a frame.
            </summary>
            <param name="e">Contains information necessary for frame rendering.</param>
            <remarks>
            The base implementation (base.OnRenderFrame) is empty, there is no need to call it.
            </remarks>
        </member>
        <member name="M:OpenTK.GameWindow.OnUpdateFrame(OpenTK.UpdateFrameEventArgs)">
            <summary>
            Override in derived classes to update a frame.
            </summary>
            <param name="e">Contains information necessary for frame updating.</param>
            <remarks>
            The base implementation (base.OnUpdateFrame) is empty, there is no need to call it.
            </remarks>
        </member>
        <member name="M:OpenTK.GameWindow.OnLoadInternal(System.EventArgs)">
            <summary>
            Raises the Load event, and calls the user's OnLoad override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenTK.GameWindow.OnLoad(System.EventArgs)">
            <summary>
            Occurs after establishing an OpenGL context, but before entering the main loop.
            Override to load resources that should be maintained for the lifetime of the application.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.GameWindow.OnUnloadInternal(System.EventArgs)">
            <summary>
            Raises the Unload event, and calls the user's OnUnload override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenTK.GameWindow.OnUnload(System.EventArgs)">
            <summary>
            Occurs after after calling GameWindow.Exit, but before destroying the OpenGL context.
            Override to unload application resources.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.GameWindow.SwapBuffers">
            <summary>
            Swaps the front and back buffer, presenting the rendered scene to the user.
            Only useful in double- or triple-buffered formats.
            </summary>
            <remarks>Calling this function is equivalent to calling Context.SwapBuffers()</remarks>
        </member>
        <member name="M:OpenTK.GameWindow.OnResizeInternal(OpenTK.Platform.ResizeEventArgs)">
            <summary>
            Raises the Resize event.
            </summary>
            <param name="e">Contains information about the Resize event.</param>
        </member>
        <member name="M:OpenTK.GameWindow.OnResize(OpenTK.Platform.ResizeEventArgs)">
            <summary>
            Override in derived classes to respond to the Resize events.
            </summary>
            <param name="e">Contains information about the Resize event.</param>
        </member>
        <member name="M:OpenTK.GameWindow.PointToClient(System.Drawing.Point)">
            <summary>
            Converts the screen coordinates of a specified point on the screen to client-area coordinates.
            </summary>
            <param name="point">A System.Drawing.Point structure that specifies the screen coordinates to be converted</param>
            <returns>The client-area coordinates of the point. The new coordinates are relative to the upper-left corner of the GameWindow's client area.</returns>
        </member>
        <member name="M:OpenTK.GameWindow.PointToScreen(System.Drawing.Point)">
            <summary>
            Converts the client-area coordinates of a specified point to screen coordinates.
            </summary>
            <param name="p">A System.Drawing.Point structure that specifies the client-area coordinates to be converted</param>
            <returns>The screen coordinates of the point, relative to the upper-left corner of the screen. Note, a screen-coordinate point that is above the window's client area has a negative y-coordinate. Similarly, a screen coordinate to the left of a client area has a negative x-coordinate.</returns>
        </member>
        <member name="M:OpenTK.GameWindow.Dispose">
            <summary>
            Disposes of the GameWindow, releasing all resources consumed by it.
            </summary>
        </member>
        <member name="M:OpenTK.GameWindow.Dispose(System.Boolean)">
            <summary>
            Override to add custom cleanup logic.
            </summary>
            <param name="manual">True, if this method was called by the application; false if this was called by the finalizer thread.</param>
        </member>
        <member name="P:OpenTK.GameWindow.IsIdle">
            <summary>
            Gets a value indicating whether the current GameWindow is idle.
            If true, the OnUpdateFrame and OnRenderFrame functions should be called.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.Context">
            <summary>
            Returns the opengl IGraphicsContext associated with the current GameWindow.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.Exists">
            <summary>
            Gets a value indicating whether a render window exists.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.Title">
            <summary>
            Gets or sets the GameWindow title.
            </summary>
        </member>
        <member name="E:OpenTK.GameWindow.RenderFrame">
            <summary>
            Occurs when it is time to render the next frame.
            </summary>
        </member>
        <member name="E:OpenTK.GameWindow.UpdateFrame">
            <summary>
            Occurs when it is time to update the next frame.
            </summary>
        </member>
        <member name="E:OpenTK.GameWindow.Load">
            <summary>
            Occurs after establishing an OpenGL context, but before entering the main loop.
            </summary>
        </member>
        <member name="E:OpenTK.GameWindow.Unload">
            <summary>
            Occurs after after calling GameWindow.Exit, but before destroying the OpenGL context.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.IsExiting">
            <summary>
            Gets a value indicating whether the shutdown sequence has been initiated
            for this window, by calling GameWindow.Exit() or hitting the 'close' button.
            If this property is true, it is no longer safe to use any OpenTK.Input or
            OpenTK.Graphics.OpenGL functions or properties.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.Keyboard">
            <summary>
            Gets the primary Keyboard device, or null if no Keyboard exists.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.Mouse">
            <summary>
            Gets the primary Mouse device, or null if no Mouse exists.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.Joysticks">
            <summary>
            Gets a readonly IList containing all available OpenTK.Input.JoystickDevices.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.VSync">
            <summary>
            Gets or sets the VSyncMode.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.WindowState">
            <summary>
            Gets or states the state of the GameWindow.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.WindowBorder">
            <summary>
            Gets or states the border of the GameWindow.
            </summary>
        </member>
        <member name="E:OpenTK.GameWindow.Closing">
            <summary>
            Occurs when the GameWindow is about to close.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.TargetRenderPeriod">
            <summary>
            Gets or sets a double representing the target render period, in seconds.
            </summary>
            <remarks>
            <para>A value of 0.0 indicates that RenderFrame events are generated at the maximum possible frequency (i.e. only limited by the hardware's capabilities).</para>
            <para>Values lower than 0.005 seconds (200Hz) are clamped to 0.0. Values higher than 1.0 seconds (1Hz) are clamped to 1.0.</para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameWindow.TargetRenderFrequency">
            <summary>
            Gets or sets a double representing the target render frequency, in Herz.
            </summary>
            <remarks>
            <para>A value of 0.0 indicates that RenderFrame events are generated at the maximum possible frequency (i.e. only limited by the hardware's capabilities).</para>
            <para>Values lower than 1.0Hz are clamped to 1.0Hz. Values higher than 200.0Hz are clamped to 200.0Hz.</para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameWindow.TargetUpdatePeriod">
            <summary>
            Gets or sets a double representing the target update period, in seconds.
            </summary>
            <remarks>
            <para>A value of 0.0 indicates that UpdateFrame events are generated at the maximum possible frequency (i.e. only limited by the hardware's capabilities).</para>
            <para>Values lower than 0.005 seconds (200Hz) are clamped to 0.0. Values higher than 1.0 seconds (1Hz) are clamped to 1.0.</para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameWindow.TargetUpdateFrequency">
            <summary>
            Gets or sets a double representing the target update frequency, in Herz.
            </summary>
            <remarks>
            <para>A value of 0.0 indicates that UpdateFrame events are generated at the maximum possible frequency (i.e. only limited by the hardware's capabilities).</para>
            <para>Values lower than 1.0Hz are clamped to 1.0Hz. Values higher than 200.0Hz are clamped to 200.0Hz.</para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameWindow.RenderFrequency">
            <summary>
            Gets a double representing the actual frequency of RenderFrame events, in Herz (i.e. FPS or Frames Per Second).
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.RenderPeriod">
            <summary>
            Gets a double representing the period of RenderFrame events, in seconds.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.UpdateFrequency">
            <summary>
            Gets a double representing the frequency of UpdateFrame events, in Herz.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.UpdatePeriod">
            <summary>
            Gets a double representing the period of UpdateFrame events, in seconds.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.RenderTime">
            <summary>
            Gets a double representing the time spent in the RenderFrame function, in seconds.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.UpdateTime">
            <summary>
            Gets a double representing the time spent in the UpdateFrame function, in seconds.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.Width">
            <summary>
            Gets or sets the Width of the GameWindow's rendering area, in pixels.
            </summary>
        </member>
        <member name="P:OpenTK.GameWindow.Height">
            <summary>
            Gets or sets the Height of the GameWindow's rendering area, in pixels.
            </summary>
        </member>
        <member name="E:OpenTK.GameWindow.Resize">
            <summary>
            Occurs when the GameWindow is resized. Derived classes should override the OnResize method for better performance.
            </summary>
        </member>
        <member name="T:OpenTK.VSyncMode">
            <summary>
            Enumerates available VSync modes.
            </summary>
        </member>
        <member name="F:OpenTK.VSyncMode.Off">
            <summary>
            Vsync disabled.
            </summary>
        </member>
        <member name="F:OpenTK.VSyncMode.On">
            <summary>
            VSync enabled.
            </summary>
        </member>
        <member name="F:OpenTK.VSyncMode.Adaptive">
            <summary>
            VSync enabled, but automatically disabled if framerate falls below a specified limit.
            </summary>
        </member>
        <member name="P:OpenTK.UpdateFrameEventArgs.Time">
            <summary>
            Gets the Time elapsed between frame updates, in seconds.
            </summary>
        </member>
        <member name="P:OpenTK.RenderFrameEventArgs.Time">
            <summary>
            Gets the Time elapsed between frame updates, in seconds.
            </summary>
        </member>
        <member name="T:OpenTK.GameWindowFlags">
            <summary>Enumerates available GameWindow construction options.</summary>
        </member>
        <member name="F:OpenTK.GameWindowFlags.Fullscreen">
            <summary>Indicates that the GameWindow should cover the whole screen.</summary>
        </member>
        <member name="T:OpenTK.Configuration">
            <summary>Provides information about the underlying OS and runtime.</summary>
        </member>
        <member name="M:OpenTK.Configuration.DetectUnixKernel">
            <summary>
            Detects the unix kernel by p/invoking the uname call in libc.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnWindows">
            <summary>Gets a System.Boolean indicating whether OpenTK is running on a Windows platform.</summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnX11">
            <summary>Gets a System.Boolean indicating whether OpenTK is running on an X11 platform.</summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnLinux">
            <summary>Gets a System.Boolean indicating whether OpenTK is running on an X11 platform.</summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnMacOS">
            <summary>Gets a System.Boolean indicating whether OpenTK is running on a MacOS platform.</summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnMono">
            <summary>
            Gets a System.Boolean indicating whether OpenTK is running on the Mono runtime.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.X11.X11Input">
            <summary>
            Drives the InputDriver on X11.
            This class supports OpenTK, and is not intended for users of OpenTK.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.X11.X11Input.#ctor(OpenTK.Platform.IWindowInfo)">
            <summary>
            Constructs a new X11Input driver. Creates a hidden InputOnly window, child to
            the main application window, which selects input events and routes them to 
            the device specific drivers (Keyboard, Mouse, Hid).
            </summary>
            <param name="attach">The window which the InputDriver will attach itself on.</param>
        </member>
        <member name="M:OpenTK.Platform.X11.X11Input.Poll">
            <summary>
            Polls and updates state of all keyboard, mouse and joystick devices.
            </summary>
        </member>
        <member name="T:OpenTK.Math.Vector3h">
            <summary>
            3-component Vector of the Half type. Occupies 6 Byte total.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3h.X">
            <summary>The X component of the Half3.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector3h.Y">
            <summary>The Y component of the Half3.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector3h.Z">
            <summary>The Z component of the Half3.</summary>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(OpenTK.Math.Half,OpenTK.Math.Half,OpenTK.Math.Half)">
            <summary>
            The new Half3 instance will avoid conversion and copy directly from the Half parameters.
            </summary>
            <param name="x">An Half instance of a 16-Bit half precision floating point number.</param>
            <param name="y">An Half instance of a 16-Bit half precision floating point number.</param>
            <param name="z">An Half instance of a 16-Bit half precision floating point number.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            The new Half3 instance will convert the 3 parameters into 16-Bit Half precision floating point.
            </summary>
            <param name="x">32-Bit Single precision floating point number.</param>
            <param name="y">32-Bit Single precision floating point number.</param>
            <param name="z">32-Bit Single precision floating point number.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            The new Half3 instance will convert the 3 parameters into 16-Bit Half precision floating point.
            </summary>
            <param name="x">32-Bit Single precision floating point number.</param>
            <param name="y">32-Bit Single precision floating point number.</param>
            <param name="z">32-Bit Single precision floating point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(OpenTK.Math.Vector3)">
            <summary>
            The new Half3 instance will convert the Vector3 into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector3</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(OpenTK.Math.Vector3,System.Boolean)">
            <summary>
            The new Half3 instance will convert the Vector3 into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector3</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(OpenTK.Math.Vector3@)">
            <summary>
            The new Half3 instance will convert the Vector3 into 16-Bit Half precision floating point.
            This is the fastest constructor.
            </summary>
            <param name="v">OpenTK.Math.Vector3</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(OpenTK.Math.Vector3@,System.Boolean)">
            <summary>
            The new Half3 instance will convert the Vector3 into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector3</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(OpenTK.Math.Vector3d)">
            <summary>
            The new Half3 instance will convert the Vector3d into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector3d</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(OpenTK.Math.Vector3d,System.Boolean)">
            <summary>
            The new Half3 instance will convert the Vector3d into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector3d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(OpenTK.Math.Vector3d@)">
            <summary>
            The new Half3 instance will convert the Vector3d into 16-Bit Half precision floating point.
            This is the faster constructor.
            </summary>
            <param name="v">OpenTK.Math.Vector3d</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(OpenTK.Math.Vector3d@,System.Boolean)">
            <summary>
            The new Half3 instance will convert the Vector3d into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector3d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.ToVector3">
            <summary>
            Returns this Half3 instance's contents as Vector3.
            </summary>
            <returns>OpenTK.Math.Vector3</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3h.ToVector3d">
            <summary>
            Returns this Half3 instance's contents as Vector3d.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector3h.op_Explicit(OpenTK.Math.Vector3)~OpenTK.Math.Vector3h">
            <summary>Converts OpenTK.Math.Vector3 to OpenTK.Math.Half3.</summary>
            <param name="v3f">The Vector3 to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3h.op_Explicit(OpenTK.Math.Vector3d)~OpenTK.Math.Vector3h">
            <summary>Converts OpenTK.Math.Vector3d to OpenTK.Math.Half3.</summary>
            <param name="v3d">The Vector3d to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3h.op_Explicit(OpenTK.Math.Vector3h)~OpenTK.Math.Vector3">
            <summary>Converts OpenTK.Math.Half3 to OpenTK.Math.Vector3.</summary>
            <param name="h3">The Half3 to convert.</param>
            <returns>The resulting Vector3.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3h.op_Explicit(OpenTK.Math.Vector3h)~OpenTK.Math.Vector3d">
            <summary>Converts OpenTK.Math.Half3 to OpenTK.Math.Vector3d.</summary>
            <param name="h3">The Half3 to convert.</param>
            <returns>The resulting Vector3d.</returns>
        </member>
        <member name="F:OpenTK.Math.Vector3h.SizeInBytes">
            <summary>The size in bytes for an instance of the Half3 struct is 6.</summary>
        </member>
        <member name="M:OpenTK.Math.Vector3h.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor used by ISerializable to deserialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used by ISerialize to serialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.FromBinaryStream(System.IO.BinaryReader)">
            <summary>Updates the X,Y and Z components of this instance by reading from a Stream.</summary>
            <param name="bin">A BinaryReader instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.ToBinaryStream(System.IO.BinaryWriter)">
            <summary>Writes the X,Y and Z components of this instance into a Stream.</summary>
            <param name="bin">A BinaryWriter instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3h.Equals(OpenTK.Math.Vector3h)">
            <summary>Returns a value indicating whether this instance is equal to a specified OpenTK.Math.Half3 vector.</summary>
            <param name="other">OpenTK.Math.Half3 to compare to this instance..</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3h.ToString">
            <summary>Returns a string that contains this Half3's numbers in human-legible form.</summary>
        </member>
        <member name="M:OpenTK.Math.Vector3h.GetBytes(OpenTK.Math.Vector3h)">
            <summary>Returns the Half3 as an array of bytes.</summary>
            <param name="h">The Half3 to convert.</param>
            <returns>The input as byte array.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3h.FromBytes(System.Byte[],System.Int32)">
            <summary>Converts an array of bytes into Half3.</summary>
            <param name="value">A Half3 in it's byte[] representation.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A new Half3 instance.</returns>
        </member>
        <member name="P:OpenTK.Math.Vector3h.Xy">
            <summary>
            Gets or sets an OpenTK.Math.Vector2h with the X and Y components of this instance.
            </summary>
        </member>
        <member name="T:OpenTK.Input.MouseDevice">
            <summary>
            Represents a mouse device and provides methods to query its status.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.Description">
            <summary>
            Gets a string describing this MouseDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.DeviceType">
            <summary>
            Gets a value indicating the InputDeviceType of this InputDevice. 
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.NumberOfButtons">
            <summary>
            Gets an integer representing the number of buttons on this MouseDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.NumberOfWheels">
            <summary>
            Gets an integer representing the number of wheels on this MouseDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.DeviceID">
            <summary>
            Gets an IntPtr representing a device dependent ID.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.Wheel">
            <summary>
            Gets an integer representing the absolute wheel position.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.X">
            <summary>
            Gets an integer representing the absolute x position of the pointer, in window pixel coordinates.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.Y">
            <summary>
            Gets an integer representing the absolute y position of the pointer, in window pixel coordinates.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.Item(OpenTK.Input.MouseButton)">
            <summary>
            Gets a System.Boolean indicating the state of the specified MouseButton.
            </summary>
            <param name="button">The MouseButton to check.</param>
            <returns>True if the MouseButton is pressed, false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.Position">
            <summary>
            Sets a System.Drawing.Point representing the absolute position of the pointer, in window pixel coordinates.
            </summary>
        </member>
        <member name="E:OpenTK.Input.MouseDevice.Move">
            <summary>
            Occurs when the mouse's position is moved.
            </summary>
        </member>
        <member name="E:OpenTK.Input.MouseDevice.ButtonDown">
            <summary>
            Occurs when a button is pressed.
            </summary>
        </member>
        <member name="E:OpenTK.Input.MouseDevice.ButtonUp">
            <summary>
            Occurs when a button is released.
            </summary>
        </member>
        <member name="E:OpenTK.Input.MouseDevice.WheelChanged">
            <summary>
            Occurs when one of the mouse wheels is moved.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.WheelDelta">
            <summary>
            Gets an integer representing the relative wheel movement.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.XDelta">
            <summary>
            Gets an integer representing the relative x movement of the pointer, in pixel coordinates.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.YDelta">
            <summary>
            Gets an integer representing the relative y movement of the pointer, in pixel coordinates.
            </summary>
        </member>
        <member name="M:OpenTK.Input.MouseMoveEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTK.Input.MouseMoveEventArgs"/> class.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="xDelta">The change in X position produced by this event.</param>
            <param name="yDelta">The change in Y position produced by this event.</param>
        </member>
        <member name="P:OpenTK.Input.MouseMoveEventArgs.X">
            <summary>
            Gets the X position of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseMoveEventArgs.Y">
            <summary>
            Gets the Y position of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseMoveEventArgs.Position">
            <summary>
            Gets a System.Drawing.Points representing the location of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseMoveEventArgs.XDelta">
            <summary>
            Gets the change in X position produced by this event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseMoveEventArgs.YDelta">
            <summary>
            Gets the change in Y position produced by this event.
            </summary>
        </member>
        <member name="T:OpenTK.Input.MouseButtonEventArgs">
            <summary>
            Provides data for the <see cref="E:OpenTK.Input.MouseDevice.ButtonDown"/> and <see cref="E:OpenTK.Input.MouseDevice.ButtonUp"/> events.
            </summary>
        </member>
        <member name="M:OpenTK.Input.MouseButtonEventArgs.#ctor(System.Int32,System.Int32,OpenTK.Input.MouseButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTK.Input.MouseButtonEventArgs"/> class.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="button">The mouse button for the event.</param>
            <param name="pressed">The current state of the button.</param>
        </member>
        <member name="P:OpenTK.Input.MouseButtonEventArgs.X">
            <summary>
            Gets the X position of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseButtonEventArgs.Y">
            <summary>
            Gets the Y position of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseButtonEventArgs.Position">
            <summary>
            Gets a System.Drawing.Points representing the location of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseButtonEventArgs.Button">
            <summary>
            The mouse button for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseButtonEventArgs.IsPressed">
            <summary>
            Gets a System.Boolean representing the state of the mouse button for the event.
            </summary>
        </member>
        <member name="T:OpenTK.Input.MouseWheelEventArgs">
            <summary>
            Provides data for the <see cref="E:OpenTK.Input.MouseDevice.WheelChanged"/> event.
            </summary>
        </member>
        <member name="M:OpenTK.Input.MouseWheelEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTK.Input.MouseWheelEventArgs"/> class.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="value">The value of the wheel.</param>
            <param name="delta">The change in value of the wheel for this event.</param>
        </member>
        <member name="P:OpenTK.Input.MouseWheelEventArgs.X">
            <summary>
            Gets the X position of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseWheelEventArgs.Y">
            <summary>
            Gets the Y position of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseWheelEventArgs.Position">
            <summary>
            Gets a System.Drawing.Points representing the location of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseWheelEventArgs.Value">
            <summary>
            The value of the wheel.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseWheelEventArgs.Delta">
            <summary>
            The change in value of the wheel for this event.
            </summary>
        </member>
        <member name="T:OpenTK.Input.MouseMoveEventHandler">
            <summary>
            Defines a <see cref="E:OpenTK.Input.MouseDevice.Move"/> event.
            </summary>
            <param name="sender">The MouseDevice that generated this event.</param>
            <param name="e">A <see cref="T:OpenTK.Input.MouseMoveEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:OpenTK.Input.MouseWheelEventHandler">
            <summary>
            Defines a <see cref="E:OpenTK.Input.MouseDevice.WheelChanged"/> event.
            </summary>
            <param name="sender">The MouseDevice that generated this event.</param>
            <param name="e">A <see>MouseWheelEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:OpenTK.Input.MouseButtonEventHandler">
            <summary>
            Defines the <see cref="E:OpenTK.Input.MouseDevice.ButtonDown"/> and <see cref="E:OpenTK.Input.MouseDevice.ButtonUp"/> events.
            </summary>
            <param name="sender">The MouseDevice that generated this event.</param>
            <param name="e">A <see cref="T:OpenTK.Input.MouseButtonEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:OpenTK.Math.Vector4h">
            <summary>
            4-component Vector of the Half type. Occupies 8 Byte total.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4h.X">
            <summary>The X component of the Half4.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector4h.Y">
            <summary>The Y component of the Half4.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector4h.Z">
            <summary>The Z component of the Half4.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector4h.W">
            <summary>The W component of the Half4.</summary>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(OpenTK.Math.Half,OpenTK.Math.Half,OpenTK.Math.Half,OpenTK.Math.Half)">
            <summary>
            The new Half4 instance will avoid conversion and copy directly from the Half parameters.
            </summary>
            <param name="x">An Half instance of a 16-Bit half precision floating point number.</param>
            <param name="y">An Half instance of a 16-Bit half precision floating point number.</param>
            <param name="z">An Half instance of a 16-Bit half precision floating point number.</param>
            <param name="w">An Half instance of a 16-Bit half precision floating point number.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            The new Half4 instance will convert the 4 parameters into 16-Bit Half precision floating point.
            </summary>
            <param name="x">32-Bit Single precision floating point number.</param>
            <param name="y">32-Bit Single precision floating point number.</param>
            <param name="z">32-Bit Single precision floating point number.</param>
            <param name="w">32-Bit Single precision floating point number.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            The new Half4 instance will convert the 4 parameters into 16-Bit Half precision floating point.
            </summary>
            <param name="x">32-Bit Single precision floating point number.</param>
            <param name="y">32-Bit Single precision floating point number.</param>
            <param name="z">32-Bit Single precision floating point number.</param>
            <param name="w">32-Bit Single precision floating point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(OpenTK.Math.Vector4)">
            <summary>
            The new Half4 instance will convert the Vector4 into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector4</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(OpenTK.Math.Vector4,System.Boolean)">
            <summary>
            The new Half4 instance will convert the Vector4 into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector4</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(OpenTK.Math.Vector4@)">
            <summary>
            The new Half4 instance will convert the Vector4 into 16-Bit Half precision floating point.
            This is the fastest constructor.
            </summary>
            <param name="v">OpenTK.Math.Vector4</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(OpenTK.Math.Vector4@,System.Boolean)">
            <summary>
            The new Half4 instance will convert the Vector4 into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector4</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(OpenTK.Math.Vector4d)">
            <summary>
            The new Half4 instance will convert the Vector4d into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector4d</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(OpenTK.Math.Vector4d,System.Boolean)">
            <summary>
            The new Half4 instance will convert the Vector4d into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector4d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(OpenTK.Math.Vector4d@)">
            <summary>
            The new Half4 instance will convert the Vector4d into 16-Bit Half precision floating point.
            This is the faster constructor.
            </summary>
            <param name="v">OpenTK.Math.Vector4d</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(OpenTK.Math.Vector4d@,System.Boolean)">
            <summary>
            The new Half4 instance will convert the Vector4d into 16-Bit Half precision floating point.
            </summary>
            <param name="v">OpenTK.Math.Vector4d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.ToVector4">
            <summary>
            Returns this Half4 instance's contents as Vector4.
            </summary>
            <returns>OpenTK.Math.Vector4</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4h.ToVector4d">
            <summary>
            Returns this Half4 instance's contents as Vector4d.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector4h.op_Explicit(OpenTK.Math.Vector4)~OpenTK.Math.Vector4h">
            <summary>Converts OpenTK.Math.Vector4 to OpenTK.Math.Half4.</summary>
            <param name="v4f">The Vector4 to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4h.op_Explicit(OpenTK.Math.Vector4d)~OpenTK.Math.Vector4h">
            <summary>Converts OpenTK.Math.Vector4d to OpenTK.Math.Half4.</summary>
            <param name="v4d">The Vector4d to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4h.op_Explicit(OpenTK.Math.Vector4h)~OpenTK.Math.Vector4">
            <summary>Converts OpenTK.Math.Half4 to OpenTK.Math.Vector4.</summary>
            <param name="h4">The Half4 to convert.</param>
            <returns>The resulting Vector4.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4h.op_Explicit(OpenTK.Math.Vector4h)~OpenTK.Math.Vector4d">
            <summary>Converts OpenTK.Math.Half4 to OpenTK.Math.Vector4d.</summary>
            <param name="h4">The Half4 to convert.</param>
            <returns>The resulting Vector4d.</returns>
        </member>
        <member name="F:OpenTK.Math.Vector4h.SizeInBytes">
            <summary>The size in bytes for an instance of the Half4 struct is 8.</summary>
        </member>
        <member name="M:OpenTK.Math.Vector4h.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor used by ISerializable to deserialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used by ISerialize to serialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.FromBinaryStream(System.IO.BinaryReader)">
            <summary>Updates the X,Y,Z and W components of this instance by reading from a Stream.</summary>
            <param name="bin">A BinaryReader instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.ToBinaryStream(System.IO.BinaryWriter)">
            <summary>Writes the X,Y,Z and W components of this instance into a Stream.</summary>
            <param name="bin">A BinaryWriter instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4h.Equals(OpenTK.Math.Vector4h)">
            <summary>Returns a value indicating whether this instance is equal to a specified OpenTK.Math.Half4 vector.</summary>
            <param name="other">OpenTK.Math.Half4 to compare to this instance..</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4h.ToString">
            <summary>Returns a string that contains this Half4's numbers in human-legible form.</summary>
        </member>
        <member name="M:OpenTK.Math.Vector4h.GetBytes(OpenTK.Math.Vector4h)">
            <summary>Returns the Half4 as an array of bytes.</summary>
            <param name="h">The Half4 to convert.</param>
            <returns>The input as byte array.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4h.FromBytes(System.Byte[],System.Int32)">
            <summary>Converts an array of bytes into Half4.</summary>
            <param name="value">A Half4 in it's byte[] representation.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A new Half4 instance.</returns>
        </member>
        <member name="P:OpenTK.Math.Vector4h.Xy">
            <summary>
            Gets or sets an OpenTK.Math.Vector2h with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Vector4h.Xyz">
            <summary>
            Gets or sets an OpenTK.Math.Vector3h with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="T:OpenTK.Math.Matrix4">
            <summary>
            Represents a 4x4 Matrix
            </summary>
        </member>
        <member name="F:OpenTK.Math.Matrix4.Row0">
            <summary>
            Top row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Math.Matrix4.Row1">
            <summary>
            2nd row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Math.Matrix4.Row2">
            <summary>
            3rd row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Math.Matrix4.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Math.Matrix4.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:OpenTK.Math.Matrix4.#ctor(OpenTK.Math.Vector4,OpenTK.Math.Vector4,OpenTK.Math.Vector4,OpenTK.Math.Vector4)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row of the matrix.</param>
            <param name="m01">Second item of the first row of the matrix.</param>
            <param name="m02">Third item of the first row of the matrix.</param>
            <param name="m03">Fourth item of the first row of the matrix.</param>
            <param name="m10">First item of the second row of the matrix.</param>
            <param name="m11">Second item of the second row of the matrix.</param>
            <param name="m12">Third item of the second row of the matrix.</param>
            <param name="m13">Fourth item of the second row of the matrix.</param>
            <param name="m20">First item of the third row of the matrix.</param>
            <param name="m21">Second item of the third row of the matrix.</param>
            <param name="m22">Third item of the third row of the matrix.</param>
            <param name="m23">First item of the third row of the matrix.</param>
            <param name="m30">Fourth item of the fourth row of the matrix.</param>
            <param name="m31">Second item of the fourth row of the matrix.</param>
            <param name="m32">Third item of the fourth row of the matrix.</param>
            <param name="m33">Fourth item of the fourth row of the matrix.</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4.CreateTranslation(System.Single,System.Single,System.Single,OpenTK.Math.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4.CreateTranslation(OpenTK.Math.Vector3@,OpenTK.Math.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.CreateTranslation(OpenTK.Math.Vector3)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,OpenTK.Math.Matrix4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <rereturns>The resulting Matrix4 instance.</rereturns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,OpenTK.Math.Matrix4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Translation(OpenTK.Math.Vector3)">
            <summary>
            Builds a translation matrix.
            </summary>
            <param name="trans">The translation vector.</param>
            <returns>A new Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="x">X translation</param>
            <param name="y">Y translation</param>
            <param name="z">Z translation</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Scale(System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Single scale factor for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Scale(OpenTK.Math.Vector3)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Scale factors for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.RotateX(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the x-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the x-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.RotateY(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the y-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the y-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.RotateZ(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the z-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the z-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Rotate(OpenTK.Math.Vector3,System.Single)">
            <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Rotate(OpenTK.Math.Quaternion)">
            <summary>
            Build a rotation matrix from a quaternion
            </summary>
            <param name="q">the quaternion</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.LookAt(OpenTK.Math.Vector3,OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix that transforms world space to camera space</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Mult(OpenTK.Math.Matrix4,OpenTK.Math.Matrix4)">
            <summary>
            Post multiply this matrix by another matrix
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Invert(OpenTK.Math.Matrix4)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4 is singular.</exception>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Transpose(OpenTK.Math.Matrix4)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Transpose(OpenTK.Math.Matrix4@,OpenTK.Math.Matrix4@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4.op_Multiply(OpenTK.Math.Matrix4,OpenTK.Math.Matrix4)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix44 which holds the result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4.Equals(OpenTK.Math.Matrix4)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Math.Matrix4.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.Column0">
            <summary>
            The first column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.Column1">
            <summary>
            The second column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.Column2">
            <summary>
            The third column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="T:OpenTK.Math.BezierCurve">
            <summary>
            Represents a bezier curve with as many points as you want.
            </summary>
        </member>
        <member name="F:OpenTK.Math.BezierCurve.Parallel">
            <summary>
            The parallel value.
            </summary>
            <remarks>This value defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f i.e. stands for a curve that has always a distance
            of 5.0f to the orignal curve at any point.</remarks>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{OpenTK.Math.Vector2})">
            <summary>
            Constructs a new <see cref="T:OpenTK.Math.BezierCurve"/>.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.#ctor(OpenTK.Math.Vector2[])">
            <summary>
            Constructs a new <see cref="T:OpenTK.Math.BezierCurve"/>.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.#ctor(System.Single,OpenTK.Math.Vector2[])">
            <summary>
            Constructs a new <see cref="T:OpenTK.Math.BezierCurve"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.#ctor(System.Single,System.Collections.Generic.IEnumerable{OpenTK.Math.Vector2})">
            <summary>
            Constructs a new <see cref="T:OpenTK.Math.BezierCurve"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.CalculatePoint(System.Single)">
            <summary>
            Calculates the point with the specified t.
            </summary>
            <param name="t">The t value, between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.CalculateLength(System.Single)">
            <summary>
            Calculates the length of this bezier curve.
            </summary>
            <param name="precision">The precision.</param>
            <returns>Length of curve.</returns>
            <remarks>The precision gets better as the <paramref name="precision"/>
            value gets smaller.</remarks>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.CalculateLength(System.Collections.Generic.IList{OpenTK.Math.Vector2},System.Single)">
            <summary>
            Calculates the length of the specified bezier curve.
            </summary>
            <param name="points">The points.</param>
            <param name="precision">The precision value.</param>
            <returns>The precision gets better as the <paramref name="precision"/>
            value gets smaller.</returns>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.CalculateLength(System.Collections.Generic.IList{OpenTK.Math.Vector2},System.Single,System.Single)">
            <summary>
            Calculates the length of the specified bezier curve.
            </summary>
            <param name="points">The points.</param>
            <param name="precision">The precision value.</param>
            <param name="parallel">The parallel value.</param>
            <returns>Length of curve.</returns>
            <remarks><para>The precision gets better as the <paramref name="precision"/>
            value gets smaller.</para>
            <para>The <paramref name="parallel"/> parameter defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f represents a curve that has always a distance
            of 5.0f to the orignal curve.</para></remarks>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.CalculatePoint(System.Collections.Generic.IList{OpenTK.Math.Vector2},System.Single)">
            <summary>
            Calculates the point on the given bezier curve with the specified t parameter.
            </summary>
            <param name="points">The points.</param>
            <param name="t">The t parameter, a value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.CalculatePoint(System.Collections.Generic.IList{OpenTK.Math.Vector2},System.Single,System.Single)">
            <summary>
            Calculates the point on the given bezier curve with the specified t parameter.
            </summary>
            <param name="points">The points.</param>
            <param name="t">The t parameter, a value between 0.0f and 1.0f.</param>
            <param name="parallel">The parallel value.</param>
            <returns>Resulting point.</returns>
            <remarks>The <paramref name="parallel"/> parameter defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f represents a curve that has always a distance
            of 5.0f to the orignal curve.</remarks>
        </member>
        <member name="M:OpenTK.Math.BezierCurve.CalculatePointOfDerivative(System.Collections.Generic.IList{OpenTK.Math.Vector2},System.Single)">
            <summary>
            Calculates the point with the specified t of the derivative of the given bezier function.
            </summary>
            <param name="points">The points.</param>
            <param name="t">The t parameter, value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="P:OpenTK.Math.BezierCurve.Points">
            <summary>
            Gets the points of this curve.
            </summary>
            <remarks>The first point and the last points represent the anchor points.</remarks>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsModeException">
            <summary>Represents errors related to unavailable graphics parameters..</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsModeException.#ctor">
            <summary>Constructs a new GraphicsModeException.</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsModeException.#ctor(System.String)">
            <summary>Constructs a new GraphicsModeException with the given error message.</summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsContextException">
            <summary>Represents errors related to a GraphicsContext.</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContextException.#ctor">
            <summary>Constructs a new GraphicsContextException.</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContextException.#ctor(System.String)">
            <summary>Constructs a new GraphicsContextException with the given error message..</summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsContextMissingException">
            <summary>
            Thrown when an operation that required GraphicsContext is performed, when no
            GraphicsContext is current in the calling thread.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContextMissingException.#ctor">
            <summary>Constructs a new GraphicsContextMissingException.</summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsContextFlags">
            <summary>
            Enumerates various flags that affect the creation of new GraphicsContexts.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.GraphicsContextFlags.Default">
            <summary>
            The default value of the GraphicsContextFlags enumeration.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.GraphicsContextFlags.Debug">
            <summary>
            Indicates that this is a debug GraphicsContext. Debug contexts may provide
            additional debugging information at the cost of performance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:OpenTK.Graphics.GraphicsContextFlags.ForwardCompatible">
            <summary>
            Indicates that this is a forward compatible GraphicsContext. Forward-compatible contexts
            do not support functionality marked as deprecated in the current GraphicsContextVersion.
            </summary>
            <remarks>Forward-compatible contexts are defined only for OpenGL versions 3.0 and later.</remarks>
        </member>
        <member name="T:OpenTK.Platform.X11.X11GLNative">
            <summary>
            Drives GameWindow on X11.
            This class supports OpenTK, and is not intended for use by OpenTK programs.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.X11.X11GLNative.#ctor">
            <summary>
            Constructs and initializes a new X11GLNative window.
            Call CreateWindow to create the actual render window.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.X11.X11GLNative.RegisterAtoms(OpenTK.Platform.X11.X11WindowInfo)">
            <summary>
            Not used yet.
            Registers the necessary atoms for GameWindow.
            </summary>
        </member>
        <member name="P:OpenTK.Platform.X11.X11GLNative.Exists">
            <summary>
            Returns true if a render window/context exists.
            </summary>
        </member>
        <member name="P:OpenTK.Platform.X11.X11GLNative.Handle">
            <summary>
            Gets the current window handle.
            </summary>
        </member>
        <member name="P:OpenTK.Platform.X11.X11GLNative.Title">
            <summary>
            TODO: Use atoms for this property.
            Gets or sets the GameWindow title.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.WinRawMouse">
            <summary>
            Contains methods to register for and process mouse WM_INPUT messages.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinRawMouse.ProcessEvent(OpenTK.Platform.Windows.RawInput)">
            <summary>
            Processes raw input events.
            </summary>
            <param name="rin"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Platform.MacOS.Agl.aglChoosePixelFormat(System.IntPtr,System.Int32,System.Int32[])">
            <summary>
            Use this overload only with IntPtr.Zero for the first argument.
            </summary>
            <param name="gdevs">
            </param>
            <param name="ndev">
            </param>
            <param name="attribs">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:OpenTK.ContextHandle">
            <summary>
            Represents a handle to an OpenGL or OpenAL context.
            </summary>
        </member>
        <member name="F:OpenTK.ContextHandle.Zero">
            <summary>A read-only field that represents a handle that has been initialized to zero.</summary>
        </member>
        <member name="M:OpenTK.ContextHandle.#ctor(System.IntPtr)">
            <summary>
            Constructs a new instance with the specified handle.
            </summary>
            <param name="h">A System.IntPtr containing the value for this instance.</param>
        </member>
        <member name="M:OpenTK.ContextHandle.ToString">
            <summary>
            Converts this instance to its equivalent string representation.
            </summary>
            <returns>A System.String that contains the string representation of this instance.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.Equals(System.Object)">
            <summary>
            Compares this instance to the specified object.
            </summary>
            <param name="obj">The System.Object to compare to.</param>
            <returns>True if obj is a ContextHandle that is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A System.Int32 with the hash code of this instance.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.op_Explicit(OpenTK.ContextHandle)~System.IntPtr">
            <summary>
            Converts the specified ContextHandle to the equivalent IntPtr.
            </summary>
            <param name="c">The ContextHandle to convert.</param>
            <returns>A System.IntPtr equivalent to the specified ContextHandle.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.op_Explicit(System.IntPtr)~OpenTK.ContextHandle">
            <summary>
            Converts the specified IntPtr to the equivalent ContextHandle.
            </summary>
            <param name="p">The System.IntPtr to convert.</param>
            <returns>A ContextHandle equivalent to the specified IntPtr.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.op_Equality(OpenTK.ContextHandle,OpenTK.ContextHandle)">
            <summary>
            Compares two ContextHandles for equality.
            </summary>
            <param name="left">The ContextHandle to compare.</param>
            <param name="right">The ContextHandle to compare to.</param>
            <returns>True if left is equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.op_Inequality(OpenTK.ContextHandle,OpenTK.ContextHandle)">
            <summary>
            Compares two ContextHandles for inequality.
            </summary>
            <param name="left">The ContextHandle to compare.</param>
            <param name="right">The ContextHandle to compare to.</param>
            <returns>True if left is not equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.CompareTo(OpenTK.ContextHandle)">
            <summary>
            Compares the numerical value of this instance to the specified ContextHandle and
            returns a value indicating their relative order.
            </summary>
            <param name="other">The ContextHandle to compare to.</param>
            <returns>Less than 0, if this instance is less than other; 0 if both are equal; Greater than 0 if other is greater than this instance.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.Equals(OpenTK.ContextHandle)">
            <summary>
            Compares this instance to the specified ContextHandle for equality.
            </summary>
            <param name="other">The ContextHandle to compare to.</param>
            <returns>True if this instance is equal to other; false otherwise.</returns>
        </member>
        <member name="P:OpenTK.ContextHandle.Handle">
            <summary>
            Gets a System.IntPtr that represents the handle of this ContextHandle.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinRawInput.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes the input Windows Message, routing the buffer to the correct Keyboard, Mouse or HID.
            </summary>
            <param name="msg">The WM_INPUT message, containing the buffer on the input event.</param>
        </member>
        <member name="T:OpenTK.Math.Vector4">
            <summary>Represents a 4D vector using four single-precision floating-point numbers.</summary>
            <remarks>
            The Vector4 structure is suitable for interoperation with unmanaged code requiring four consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenTK.Math.Vector4.X">
            <summary>
            The X component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4.Y">
            <summary>
            The Y component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4.Z">
            <summary>
            The Z component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4.W">
            <summary>
            The Z component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4.UnitX">
            <summary>
            Defines a unit-length Vector4 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4.UnitY">
            <summary>
            Defines a unit-length Vector4 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4.UnitZ">
            <summary>
            Defines a unit-length Vector4 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4.UnitW">
            <summary>
            Defines a unit-length Vector4 that points towards the W-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4.Zero">
            <summary>
            Defines a zero-length Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4.SizeInBytes">
            <summary>
            Defines the size of the Vector4 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector4.
            </summary>
            <param name="x">The x component of the Vector4.</param>
            <param name="y">The y component of the Vector4.</param>
            <param name="z">The z component of the Vector4.</param>
            <param name="w">The z component of the Vector4.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.#ctor(OpenTK.Math.Vector2)">
            <summary>
            Constructs a new Vector4 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.#ctor(OpenTK.Math.Vector3)">
            <summary>
            Constructs a new Vector4 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.#ctor(OpenTK.Math.Vector3,System.Single)">
            <summary>
            Constructs a new Vector4 from the specified Vector3 and W component.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
            <param name="w">The W component of the new Vector4.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.#ctor(OpenTK.Math.Vector4)">
            <summary>
            Constructs a new Vector4 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Add(OpenTK.Math.Vector4)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Add(OpenTK.Math.Vector4@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Sub(OpenTK.Math.Vector4)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Sub(OpenTK.Math.Vector4@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Normalize">
            <summary>
            Scales the Vector4 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector4.NormalizeFast">
            <summary>
            Scales the Vector4 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector4.Scale(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector4 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
            <param name="sw">The scale of the Z component.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Scale(OpenTK.Math.Vector4)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Scale(OpenTK.Math.Vector4@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Add(OpenTK.Math.Vector4,OpenTK.Math.Vector4)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Add(OpenTK.Math.Vector4@,OpenTK.Math.Vector4@,OpenTK.Math.Vector4@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Sub(OpenTK.Math.Vector4,OpenTK.Math.Vector4)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Sub(OpenTK.Math.Vector4@,OpenTK.Math.Vector4@,OpenTK.Math.Vector4@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Mult(OpenTK.Math.Vector4,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Mult(OpenTK.Math.Vector4@,System.Single,OpenTK.Math.Vector4@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Div(OpenTK.Math.Vector4,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Div(OpenTK.Math.Vector4@,System.Single,OpenTK.Math.Vector4@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Min(OpenTK.Math.Vector4,OpenTK.Math.Vector4)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Min(OpenTK.Math.Vector4@,OpenTK.Math.Vector4@,OpenTK.Math.Vector4@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Max(OpenTK.Math.Vector4,OpenTK.Math.Vector4)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Max(OpenTK.Math.Vector4@,OpenTK.Math.Vector4@,OpenTK.Math.Vector4@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Clamp(OpenTK.Math.Vector4,OpenTK.Math.Vector4,OpenTK.Math.Vector4)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Clamp(OpenTK.Math.Vector4@,OpenTK.Math.Vector4@,OpenTK.Math.Vector4@,OpenTK.Math.Vector4@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Normalize(OpenTK.Math.Vector4)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Normalize(OpenTK.Math.Vector4@,OpenTK.Math.Vector4@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.NormalizeFast(OpenTK.Math.Vector4)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.NormalizeFast(OpenTK.Math.Vector4@,OpenTK.Math.Vector4@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Dot(OpenTK.Math.Vector4,OpenTK.Math.Vector4)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Dot(OpenTK.Math.Vector4@,OpenTK.Math.Vector4@,System.Single@)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Lerp(OpenTK.Math.Vector4,OpenTK.Math.Vector4,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Lerp(OpenTK.Math.Vector4@,OpenTK.Math.Vector4@,System.Single,OpenTK.Math.Vector4@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.BaryCentric(OpenTK.Math.Vector4,OpenTK.Math.Vector4,OpenTK.Math.Vector4,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.BaryCentric(OpenTK.Math.Vector4@,OpenTK.Math.Vector4@,OpenTK.Math.Vector4@,System.Single,System.Single,OpenTK.Math.Vector4@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.Transform(OpenTK.Math.Vector4,OpenTK.Math.Matrix4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Transform(OpenTK.Math.Vector4@,OpenTK.Math.Matrix4@,OpenTK.Math.Vector4@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector4.ToString">
            <summary>
            Returns a System.String that represents the current Vector4.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4.Equals(OpenTK.Math.Vector4)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Math.Vector4.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Math.Vector4.LengthFast"/>
            <seealso cref="P:OpenTK.Math.Vector4.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector4.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Math.Vector4.Length"/>
            <seealso cref="P:OpenTK.Math.Vector4.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector4.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Math.Vector4.Length"/>
            <seealso cref="P:OpenTK.Math.Vector4.LengthFast"/>
        </member>
        <member name="P:OpenTK.Math.Vector4.Xy">
            <summary>
            Gets or sets an OpenTK.Math.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Vector4.Xyz">
            <summary>
            Gets or sets an OpenTK.Math.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="T:OpenTK.Math.Vector2d">
            <summary>Represents a 2D vector using two double-precision floating-point numbers.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector2d.X">
            <summary>The X coordinate of this instance.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector2d.Y">
            <summary>The Y coordinate of this instance.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector2d.UnitX">
            <summary>
            Defines a unit-length Vector2d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector2d.UnitY">
            <summary>
            Defines a unit-length Vector2d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector2d.Zero">
            <summary>
            Defines a zero-length Vector2d.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector2d.SizeInBytes">
            <summary>
            Defines the size of the Vector2d struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector2d.#ctor(System.Double,System.Double)">
            <summary>Constructs left vector with the given coordinates.</summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Add(OpenTK.Math.Vector2d)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Add(OpenTK.Math.Vector2d@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Sub(OpenTK.Math.Vector2d)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Sub(OpenTK.Math.Vector2d@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Mult(System.Double)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Div(System.Double)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Scale(System.Double,System.Double)">
            <summary>
            Scales the current Vector2 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Scale(OpenTK.Math.Vector2d)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Scale(OpenTK.Math.Vector2d@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Add(OpenTK.Math.Vector2d,OpenTK.Math.Vector2d)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Add(OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Sub(OpenTK.Math.Vector2d,OpenTK.Math.Vector2d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Sub(OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Mult(OpenTK.Math.Vector2d,System.Double)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Mult(OpenTK.Math.Vector2d@,System.Double,OpenTK.Math.Vector2d@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Div(OpenTK.Math.Vector2d,System.Double)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Div(OpenTK.Math.Vector2d@,System.Double,OpenTK.Math.Vector2d@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Min(OpenTK.Math.Vector2d,OpenTK.Math.Vector2d)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Min(OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Max(OpenTK.Math.Vector2d,OpenTK.Math.Vector2d)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Max(OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Clamp(OpenTK.Math.Vector2d,OpenTK.Math.Vector2d,OpenTK.Math.Vector2d)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Clamp(OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Normalize(OpenTK.Math.Vector2d)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Normalize(OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.NormalizeFast(OpenTK.Math.Vector2d)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.NormalizeFast(OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Dot(OpenTK.Math.Vector2d,OpenTK.Math.Vector2d)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Dot(OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Lerp(OpenTK.Math.Vector2d,OpenTK.Math.Vector2d,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Lerp(OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@,System.Double,OpenTK.Math.Vector2d@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.BaryCentric(OpenTK.Math.Vector2d,OpenTK.Math.Vector2d,OpenTK.Math.Vector2d,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.BaryCentric(OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@,OpenTK.Math.Vector2d@,System.Single,System.Single,OpenTK.Math.Vector2d@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector2d.op_Explicit(OpenTK.Math.Vector2)~OpenTK.Math.Vector2d">
            <summary>Converts OpenTK.Math.Vector2 to OpenTK.Math.Vector2d.</summary>
            <param name="v2">The Vector2 to convert.</param>
            <returns>The resulting Vector2d.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.op_Explicit(OpenTK.Math.Vector2d)~OpenTK.Math.Vector2">
            <summary>Converts OpenTK.Math.Vector2d to OpenTK.Math.Vector2.</summary>
            <param name="v2d">The Vector2d to convert.</param>
            <returns>The resulting Vector2.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.ToString">
            <summary>
            Returns a System.String that represents the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2d.Equals(OpenTK.Math.Vector2d)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Math.Vector2d.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <seealso cref="P:OpenTK.Math.Vector2d.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector2d.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Math.Vector2d.Length"/>
        </member>
        <member name="P:OpenTK.Math.Vector2d.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Vector2d.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsContext">
            <summary>
            Represents and provides methods to manipulate an OpenGL render context.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.#ctor(OpenTK.Graphics.GraphicsMode,OpenTK.Platform.IWindowInfo)">
            <summary>
            Constructs a new GraphicsContext with the specified GraphicsMode and attaches it to the specified window.
            </summary>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the GraphicsContext.</param>
            <param name="window">The OpenTK.Platform.IWindowInfo to attach the GraphicsContext to.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.#ctor(OpenTK.Graphics.GraphicsMode,OpenTK.Platform.IWindowInfo,System.Int32,System.Int32,OpenTK.Graphics.GraphicsContextFlags)">
            <summary>
            Constructs a new GraphicsContext with the specified GraphicsMode, version and flags,  and attaches it to the specified window.
            </summary>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the GraphicsContext.</param>
            <param name="window">The OpenTK.Platform.IWindowInfo to attach the GraphicsContext to.</param>
            <param name="major">The major version of the new GraphicsContext.</param>
            <param name="minor">The minor version of the new GraphicsContext.</param>
            <param name="flags">The GraphicsContextFlags for the GraphicsContext.</param>
            <remarks>
            Different hardware supports different flags, major and minor versions. Invalid parameters will be silently ignored.
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.CreateDummyContext">
            <summary>
            Creates a dummy GraphicsContext to allow OpenTK to work with contexts created by external libraries.
            </summary>
            <returns>A new, dummy GraphicsContext instance.</returns>
            <remarks>
            <para>Instances created by this methodwill not be functional. Instance methods will have no effect.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.Assert">
            <summary>
            Checks if a GraphicsContext exists in the calling thread and throws a GraphicsContextException if it doesn't.
            </summary>
            <exception cref="T:OpenTK.Graphics.GraphicsContextMissingException">Generated when no GraphicsContext is current in the calling thread.</exception>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.ContextDestroyed(OpenTK.Graphics.IGraphicsContext,System.EventArgs)">
            <summary>
            Handles the Destroy event.
            </summary>
            <param name="context">The OpenTK.Platform.IGraphicsContext that was destroyed.</param>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.CreateContext(System.Boolean,OpenTK.Graphics.IGraphicsContext)">
            <summary>
            Creates an OpenGL context with the specified direct/indirect rendering mode and sharing state with the
            specified IGraphicsContext.
            </summary>
            <param name="direct">Set to true for direct rendering or false otherwise.</param>
            <param name="source">The source IGraphicsContext to share state from.</param>.
            <remarks>
            <para>
            Direct rendering is the default rendering mode for OpenTK, since it can provide higher performance
            in some circumastances.
            </para>
            <para>
            The 'direct' parameter is a hint, and will ignored if the specified mode is not supported (e.g. setting
            indirect rendering on Windows platforms).
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.SwapBuffers">
            <summary>
            Swaps buffers on a context. This presents the rendered scene to the user.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.MakeCurrent(OpenTK.Platform.IWindowInfo)">
            <summary>
            Makes the GraphicsContext the current rendering target.
            </summary>
            <param name="info">A System.Platform.IWindowInfo structure for the window this context is bound to.</param>
            <remarks>
            You can use this method to bind the GraphicsContext to a different window than the one it was created from.
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.Update(OpenTK.Platform.IWindowInfo)">
            <summary>
            Updates the graphics context.  This must be called when the render target
            is resized for proper behavior on Mac OS X.
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.OpenTK#Graphics#IGraphicsContextInternal#LoadAll">
            <summary>
            Loads all OpenGL extensions.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.OpenTK#Graphics#IGraphicsContextInternal#RegisterForDisposal(System.IDisposable)">
            <summary>
            Registers an OpenGL resource for disposal.
            </summary>
            <param name="resource">The OpenGL resource to dispose.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.OpenTK#Graphics#IGraphicsContextInternal#DisposeResources">
            <summary>
            Disposes all registered OpenGL resources.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.OpenTK#Graphics#IGraphicsContextInternal#GetAddress(System.String)">
            <summary>
            Gets the address of an OpenGL extension function.
            </summary>
            <param name="function">The name of the OpenGL function (e.g. "glGetString")</param>
            <returns>
            A pointer to the specified function or IntPtr.Zero if the function isn't
            available in the current opengl context.
            </returns>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.Dispose">
            <summary>
            Disposes of the GraphicsContext.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.CurrentContext">
            <summary>
            Gets the GraphicsContext that is current in the calling thread.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.ShareContexts">
            <summary>Gets or sets a System.Boolean, indicating whether GraphicsContext resources are shared</summary>
            <remarks>
            <para>If ShareContexts is true, new GLContexts will share resources. If this value is
            false, new GLContexts will not share resources.</para>
            <para>Changing this value will not affect already created GLContexts.</para>
            </remarks>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.DirectRendering">
            <summary>Gets or sets a System.Boolean, indicating whether GraphicsContexts will perform direct rendering.</summary>
            <remarks>
            <para>
            If DirectRendering is true, new contexts will be constructed with direct rendering capabilities, if possible.
            If DirectRendering is false, new contexts will be constructed with indirect rendering capabilities.
            </para>
            <para>This property does not affect existing GraphicsContexts, unless they are recreated.</para>
            <para>
            This property is ignored on Operating Systems without support for indirect rendering, like Windows and OS X.
            </para>
            </remarks>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.ErrorChecking">
            <summary>
            Gets or sets a System.Boolean, indicating whether automatic error checking should be performed.
            Influences the debug version of OpenTK.dll, only.
            </summary>
            <remarks>Automatic error checking will clear the OpenGL error state. Set CheckErrors to false if you use
            the OpenGL error state in your code flow (e.g. for checking supported texture formats).</remarks>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.IsCurrent">
            <summary>
            Gets a System.Boolean indicating whether this Context is current in the calling thread.
            </summary>
        </member>
        <member name="E:OpenTK.Graphics.GraphicsContext.Destroy">
            <summary>
            Raised when a Context is destroyed.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.VSync">
            <summary>
            Gets or sets a value indicating whether VSync is enabled.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.OpenTK#Graphics#IGraphicsContextInternal#Implementation">
            <summary>
            Gets the platform-specific implementation of this IGraphicsContext.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.OpenTK#Graphics#IGraphicsContextInternal#Context">
            <summary>
            Gets a handle to the OpenGL rendering context.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.GraphicsMode">
            <summary>
            Gets the GraphicsMode of the context.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsException">
            <summary>Represents errors related to Graphics operations.</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsException.#ctor">
            <summary>Constructs a new GraphicsException.</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsException.#ctor(System.String)">
            <summary>Constructs a new GraphicsException with the specified excpetion message.</summary>
            <param name="message"></param>
        </member>
        <member name="T:OpenTK.WindowState">
            <summary>
            Enumerates available window states.
            </summary>
        </member>
        <member name="F:OpenTK.WindowState.Normal">
            <summary>
            The window is in its normal state.
            </summary>
        </member>
        <member name="F:OpenTK.WindowState.Minimized">
            <summary>
            The window is minimized to the taskbar (also known as 'iconified').
            </summary>
        </member>
        <member name="F:OpenTK.WindowState.Maximized">
            <summary>
            The window covers the whole working area, which includes the desktop but not the taskbar and/or panels.
            </summary>
        </member>
        <member name="F:OpenTK.WindowState.Fullscreen">
            <summary>
            The window covers the whole screen, including all taskbars and/or panels.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.X11.X11WindowInfo">
            <summary>Describes an X11 window.</summary>
        </member>
        <member name="M:OpenTK.Platform.X11.X11WindowInfo.#ctor">
            <summary>Constructs a new X11WindowInfo class.</summary>
        </member>
        <member name="M:OpenTK.Platform.X11.X11WindowInfo.#ctor(System.IntPtr,OpenTK.Platform.X11.X11WindowInfo)">
            <summary>
            Constructs a new X11WindowInfo class from the specified window handle and parent.
            </summary>
            <param name="handle">The handle of the window.</param>
            <param name="parent">The parent of the window.</param>
        </member>
        <member name="M:OpenTK.Platform.X11.X11WindowInfo.ToString">
            <summary>Returns a System.String that represents the current window.</summary>
            <returns>A System.String that represents the current window.</returns>
        </member>
        <member name="M:OpenTK.Platform.X11.X11WindowInfo.Equals(System.Object)">
            <summary>Checks if <c>this</c> and <c>obj</c> reference the same win32 window.</summary>
            <param name="obj">The object to check against.</param>
            <returns>True if <c>this</c> and <c>obj</c> reference the same win32 window; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Platform.X11.X11WindowInfo.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A hash code for the current <c>X11WindowInfo</c>.</returns>
        </member>
        <member name="P:OpenTK.Platform.X11.X11WindowInfo.WindowHandle">
            <summary>Gets or sets the handle of the window.</summary>
        </member>
        <member name="P:OpenTK.Platform.X11.X11WindowInfo.Parent">
            <summary>Gets or sets the parent of the window.</summary>
        </member>
        <member name="P:OpenTK.Platform.X11.X11WindowInfo.RootWindow">
            <summary>Gets or sets the X11 root window.</summary>
        </member>
        <member name="P:OpenTK.Platform.X11.X11WindowInfo.Display">
            <summary>Gets or sets the connection to the X11 display.</summary>
        </member>
        <member name="P:OpenTK.Platform.X11.X11WindowInfo.Screen">
            <summary>Gets or sets the X11 screen.</summary>
        </member>
        <member name="P:OpenTK.Platform.X11.X11WindowInfo.VisualInfo">
            <summary>Gets or sets the X11 VisualInfo.</summary>
        </member>
        <member name="P:OpenTK.Platform.X11.X11WindowInfo.EventMask">
            <summary>Gets or sets the X11 EventMask.</summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinKeyMap.#ctor">
            <summary>
            Initializes the map between VirtualKeys and OpenTK.Key
            </summary>
        </member>
        <member name="T:OpenTK.Math.Vector3d">
            <summary>
            Represents a 3D vector using three double-precision floating-point numbers.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3d.X">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3d.Y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3d.Z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.#ctor(OpenTK.Math.Vector2d)">
            <summary>
            Constructs a new instance from the given Vector2d.
            </summary>
            <param name="v">The Vector2d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.#ctor(OpenTK.Math.Vector3d)">
            <summary>
            Constructs a new instance from the given Vector3d.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.#ctor(OpenTK.Math.Vector4d)">
            <summary>
            Constructs a new instance from the given Vector4d.
            </summary>
            <param name="v">The Vector4d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Add(OpenTK.Math.Vector3d)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Add(OpenTK.Math.Vector3d@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Sub(OpenTK.Math.Vector3d)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Sub(OpenTK.Math.Vector3d@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Mult(System.Double)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Div(System.Double)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Normalize">
            <summary>
            Scales the Vector3d to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector3d.NormalizeFast">
            <summary>
            Scales the Vector3d to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scales the current Vector3d by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Scale(OpenTK.Math.Vector3d)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Scale(OpenTK.Math.Vector3d@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenTK.Math.Vector3d.UnitX">
            <summary>
            Defines a unit-length Vector3d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3d.UnitY">
            <summary>
            Defines a unit-length Vector3d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3d.UnitZ">
            <summary>
            /// Defines a unit-length Vector3d that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3d.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3d.SizeInBytes">
            <summary>
            Defines the size of the Vector3d struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Add(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Add(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Sub(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Sub(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Mult(OpenTK.Math.Vector3d,System.Double)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Mult(OpenTK.Math.Vector3d@,System.Double,OpenTK.Math.Vector3d@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Div(OpenTK.Math.Vector3d,System.Double)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Div(OpenTK.Math.Vector3d@,System.Double,OpenTK.Math.Vector3d@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.ComponentMin(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.ComponentMin(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.ComponentMax(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.ComponentMax(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Min(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Returns the Vector3d with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Max(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Returns the Vector3d with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Clamp(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Clamp(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Normalize(OpenTK.Math.Vector3d)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Normalize(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.NormalizeFast(OpenTK.Math.Vector3d)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.NormalizeFast(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Dot(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Dot(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Cross(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Cross(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Lerp(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Lerp(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,System.Double,OpenTK.Math.Vector3d@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.BaryCentric(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d,OpenTK.Math.Vector3d,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.BaryCentric(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,System.Single,System.Single,OpenTK.Math.Vector3d@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.TransformVector(OpenTK.Math.Vector3d,OpenTK.Math.Matrix4d)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.TransformVector(OpenTK.Math.Vector3d@,OpenTK.Math.Matrix4d@,OpenTK.Math.Vector3d@)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.TransformNormal(OpenTK.Math.Vector3d,OpenTK.Math.Matrix4d)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.TransformNormal(OpenTK.Math.Vector3d@,OpenTK.Math.Matrix4d@,OpenTK.Math.Vector3d@)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.TransformNormalInverse(OpenTK.Math.Vector3d,OpenTK.Math.Matrix4d)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.TransformNormalInverse(OpenTK.Math.Vector3d@,OpenTK.Math.Matrix4d@,OpenTK.Math.Vector3d@)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.TransformPosition(OpenTK.Math.Vector3d,OpenTK.Math.Matrix4d)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.TransformPosition(OpenTK.Math.Vector3d@,OpenTK.Math.Matrix4d@,OpenTK.Math.Vector3d@)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed position</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Transform(OpenTK.Math.Vector3d,OpenTK.Math.Matrix4d)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Transform(OpenTK.Math.Vector3d@,OpenTK.Math.Matrix4d@,OpenTK.Math.Vector4d@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.TransformPerspective(OpenTK.Math.Vector3d,OpenTK.Math.Matrix4d)">
            <summary>
            Transform a Vector3d by the given Matrix, and project the resulting Vector4 back to a Vector3
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.TransformPerspective(OpenTK.Math.Vector3d@,OpenTK.Math.Matrix4d@,OpenTK.Math.Vector3d@)">
            <summary>Transform a Vector3d by the given Matrix, and project the resulting Vector4d back to a Vector3d</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3d.CalculateAngle(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenTK.Math.Vector3d.CalculateAngle(OpenTK.Math.Vector3d@,OpenTK.Math.Vector3d@,System.Double@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenTK.Math.Vector3d.op_Explicit(OpenTK.Math.Vector3)~OpenTK.Math.Vector3d">
            <summary>Converts OpenTK.Math.Vector3 to OpenTK.Math.Vector3d.</summary>
            <param name="v3">The Vector3 to convert.</param>
            <returns>The resulting Vector3d.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.op_Explicit(OpenTK.Math.Vector3d)~OpenTK.Math.Vector3">
            <summary>Converts OpenTK.Math.Vector3d to OpenTK.Math.Vector3.</summary>
            <param name="v3d">The Vector3d to convert.</param>
            <returns>The resulting Vector3.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3d.Equals(OpenTK.Math.Vector3d)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Math.Vector3d.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Math.Vector3d.LengthFast"/>
            <seealso cref="P:OpenTK.Math.Vector3d.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector3d.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Math.Vector3d.Length"/>
            <seealso cref="P:OpenTK.Math.Vector3d.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector3d.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Math.Vector3d.Length"/>
            <seealso cref="P:OpenTK.Math.Vector3d.LengthFast"/>
        </member>
        <member name="P:OpenTK.Math.Vector3d.Xy">
            <summary>
            Gets or sets an OpenTK.Math.Vector2d with the X and Y components of this instance.
            </summary>
        </member>
        <member name="T:OpenTK.Math.Vector3">
            <summary>
            Represents a 3D vector using three single-precision floating-point numbers.
            </summary>
            <remarks>
            The Vector3 structure is suitable for interoperation with unmanaged code requiring three consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenTK.Math.Vector3.X">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3.Y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3.Z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.#ctor(OpenTK.Math.Vector2)">
            <summary>
            Constructs a new Vector3 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.#ctor(OpenTK.Math.Vector3)">
            <summary>
            Constructs a new Vector3 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.#ctor(OpenTK.Math.Vector4)">
            <summary>
            Constructs a new Vector3 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Add(OpenTK.Math.Vector3)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Add(OpenTK.Math.Vector3@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Sub(OpenTK.Math.Vector3)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Sub(OpenTK.Math.Vector3@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Normalize">
            <summary>
            Scales the Vector3 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector3.NormalizeFast">
            <summary>
            Scales the Vector3 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector3.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector3 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Scale(OpenTK.Math.Vector3)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Scale(OpenTK.Math.Vector3@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenTK.Math.Vector3.UnitX">
            <summary>
            Defines a unit-length Vector3 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3.UnitY">
            <summary>
            Defines a unit-length Vector3 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3.UnitZ">
            <summary>
            /// Defines a unit-length Vector3 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector3.SizeInBytes">
            <summary>
            Defines the size of the Vector3 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector3.Add(OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Add(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,OpenTK.Math.Vector3@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Sub(OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Sub(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,OpenTK.Math.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Mult(OpenTK.Math.Vector3,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Mult(OpenTK.Math.Vector3@,System.Single,OpenTK.Math.Vector3@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Div(OpenTK.Math.Vector3,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Div(OpenTK.Math.Vector3@,System.Single,OpenTK.Math.Vector3@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.ComponentMin(OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.ComponentMin(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,OpenTK.Math.Vector3@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.ComponentMax(OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.ComponentMax(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,OpenTK.Math.Vector3@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Min(OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Max(OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Clamp(OpenTK.Math.Vector3,OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Clamp(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,OpenTK.Math.Vector3@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Normalize(OpenTK.Math.Vector3)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Normalize(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.NormalizeFast(OpenTK.Math.Vector3)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.NormalizeFast(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Dot(OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Dot(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Cross(OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Cross(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,OpenTK.Math.Vector3@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Lerp(OpenTK.Math.Vector3,OpenTK.Math.Vector3,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Lerp(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,System.Single,OpenTK.Math.Vector3@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.BaryCentric(OpenTK.Math.Vector3,OpenTK.Math.Vector3,OpenTK.Math.Vector3,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.BaryCentric(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,System.Single,System.Single,OpenTK.Math.Vector3@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.TransformVector(OpenTK.Math.Vector3,OpenTK.Math.Matrix4)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.TransformVector(OpenTK.Math.Vector3@,OpenTK.Math.Matrix4@,OpenTK.Math.Vector3@)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.TransformNormal(OpenTK.Math.Vector3,OpenTK.Math.Matrix4)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.TransformNormal(OpenTK.Math.Vector3@,OpenTK.Math.Matrix4@,OpenTK.Math.Vector3@)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.TransformNormalInverse(OpenTK.Math.Vector3,OpenTK.Math.Matrix4)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.TransformNormalInverse(OpenTK.Math.Vector3@,OpenTK.Math.Matrix4@,OpenTK.Math.Vector3@)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.TransformPosition(OpenTK.Math.Vector3,OpenTK.Math.Matrix4)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.TransformPosition(OpenTK.Math.Vector3@,OpenTK.Math.Matrix4@,OpenTK.Math.Vector3@)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed position</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.Transform(OpenTK.Math.Vector3,OpenTK.Math.Matrix4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Transform(OpenTK.Math.Vector3@,OpenTK.Math.Matrix4@,OpenTK.Math.Vector4@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.TransformPerspective(OpenTK.Math.Vector3,OpenTK.Math.Matrix4)">
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.TransformPerspective(OpenTK.Math.Vector3@,OpenTK.Math.Matrix4@,OpenTK.Math.Vector3@)">
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector3.CalculateAngle(OpenTK.Math.Vector3,OpenTK.Math.Vector3)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenTK.Math.Vector3.CalculateAngle(OpenTK.Math.Vector3@,OpenTK.Math.Vector3@,System.Single@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenTK.Math.Vector3.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector3.Equals(OpenTK.Math.Vector3)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Math.Vector3.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Math.Vector3.LengthFast"/>
            <seealso cref="P:OpenTK.Math.Vector3.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector3.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Math.Vector3.Length"/>
            <seealso cref="P:OpenTK.Math.Vector3.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector3.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Math.Vector3.Length"/>
            <seealso cref="P:OpenTK.Math.Vector3.LengthFast"/>
        </member>
        <member name="P:OpenTK.Math.Vector3.Xy">
            <summary>
            Gets or sets an OpenTK.Math.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="T:OpenTK.Math.Matrix4d">
            <summary>
            Represents a 4x4 Matrix with double-precision components.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Matrix4d.Row0">
            <summary>
            Top row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Math.Matrix4d.Row1">
            <summary>
            2nd row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Math.Matrix4d.Row2">
            <summary>
            3rd row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Math.Matrix4d.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Math.Matrix4d.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.#ctor(OpenTK.Math.Vector4d,OpenTK.Math.Vector4d,OpenTK.Math.Vector4d,OpenTK.Math.Vector4d)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row.</param>
            <param name="m01">Second item of the first row.</param>
            <param name="m02">Third item of the first row.</param>
            <param name="m03">Fourth item of the first row.</param>
            <param name="m10">First item of the second row.</param>
            <param name="m11">Second item of the second row.</param>
            <param name="m12">Third item of the second row.</param>
            <param name="m13">Fourth item of the second row.</param>
            <param name="m20">First item of the third row.</param>
            <param name="m21">Second item of the third row.</param>
            <param name="m22">Third item of the third row.</param>
            <param name="m23">First item of the third row.</param>
            <param name="m30">Fourth item of the fourth row.</param>
            <param name="m31">Second item of the fourth row.</param>
            <param name="m32">Third item of the fourth row.</param>
            <param name="m33">Fourth item of the fourth row.</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.CreateTranslation(System.Double,System.Double,System.Double,OpenTK.Math.Matrix4d@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.CreateTranslation(OpenTK.Math.Vector3d@,OpenTK.Math.Matrix4d@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.CreateTranslation(OpenTK.Math.Vector3d)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.CreateOrthographic(System.Double,System.Double,System.Double,System.Double,OpenTK.Math.Matrix4d@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.CreateOrthographic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <rereturns>The resulting Matrix4d instance.</rereturns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,OpenTK.Math.Matrix4d@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Translation(OpenTK.Math.Vector3d)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="trans">The vector to translate along</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="x">X translation</param>
            <param name="y">Y translation</param>
            <param name="z">Z translation</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Scale(System.Double)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Single scale factor for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Scale(OpenTK.Math.Vector3d)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Scale factors for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.RotateX(System.Double)">
            <summary>
            Build a rotation matrix that rotates about the x-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the x-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.RotateY(System.Double)">
            <summary>
            Build a rotation matrix that rotates about the y-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the y-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.RotateZ(System.Double)">
            <summary>
            Build a rotation matrix that rotates about the z-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the z-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Rotate(OpenTK.Math.Vector3d,System.Double)">
            <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Rotate(OpenTK.Math.Quaterniond)">
            <summary>
            Build a rotation matrix from a quaternion
            </summary>
            <param name="q">the quaternion</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.LookAt(OpenTK.Math.Vector3d,OpenTK.Math.Vector3d,OpenTK.Math.Vector3d)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix that transforms world space to camera space</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Frustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Mult(OpenTK.Math.Matrix4d,OpenTK.Math.Matrix4d)">
            <summary>
            Post multiply this matrix by another matrix
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Invert(OpenTK.Math.Matrix4d)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4d is singular.</exception>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Transpose(OpenTK.Math.Matrix4d)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Transpose(OpenTK.Math.Matrix4d@,OpenTK.Math.Matrix4d@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.op_Multiply(OpenTK.Math.Matrix4d,OpenTK.Math.Matrix4d)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix44 which holds the result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Matrix4d.Equals(OpenTK.Math.Matrix4d)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.Column0">
            <summary>
            The first column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.Column1">
            <summary>
            The second column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.Column2">
            <summary>
            The third column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M42">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Matrix4d.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="T:OpenTK.Math.Vector4d">
            <summary>Represents a 4D vector using four double-precision floating-point numbers.</summary>
        </member>
        <member name="F:OpenTK.Math.Vector4d.X">
            <summary>
            The X component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4d.Y">
            <summary>
            The Y component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4d.Z">
            <summary>
            The Z component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4d.W">
            <summary>
            The Z component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4d.UnitX">
            <summary>
            Defines a unit-length Vector4d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4d.UnitY">
            <summary>
            Defines a unit-length Vector4d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4d.UnitZ">
            <summary>
            Defines a unit-length Vector4d that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4d.UnitW">
            <summary>
            Defines a unit-length Vector4d that points towards the W-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4d.Zero">
            <summary>
            Defines a zero-length Vector4d.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector4d.SizeInBytes">
            <summary>
            Defines the size of the Vector4d struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Vector4d.
            </summary>
            <param name="x">The x component of the Vector4d.</param>
            <param name="y">The y component of the Vector4d.</param>
            <param name="z">The z component of the Vector4d.</param>
            <param name="w">The z component of the Vector4d.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.#ctor(OpenTK.Math.Vector2d)">
            <summary>
            Constructs a new Vector4d from the given Vector2d.
            </summary>
            <param name="v">The Vector2d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.#ctor(OpenTK.Math.Vector3d)">
            <summary>
            Constructs a new Vector4d from the given Vector3d.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.#ctor(OpenTK.Math.Vector3,System.Double)">
            <summary>
            Constructs a new Vector4d from the specified Vector3d and W component.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
            <param name="w">The W component of the new Vector4.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.#ctor(OpenTK.Math.Vector4d)">
            <summary>
            Constructs a new Vector4d from the given Vector4d.
            </summary>
            <param name="v">The Vector4d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Add(OpenTK.Math.Vector4d)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Add(OpenTK.Math.Vector4d@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Sub(OpenTK.Math.Vector4d)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Sub(OpenTK.Math.Vector4d@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Mult(System.Double)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Div(System.Double)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Normalize">
            <summary>
            Scales the Vector4d to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector4d.NormalizeFast">
            <summary>
            Scales the Vector4d to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Scale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales the current Vector4d by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
            <param name="sw">The scale of the Z component.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Scale(OpenTK.Math.Vector4d)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Scale(OpenTK.Math.Vector4d@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Add(OpenTK.Math.Vector4d,OpenTK.Math.Vector4d)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Add(OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Sub(OpenTK.Math.Vector4d,OpenTK.Math.Vector4d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Sub(OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Mult(OpenTK.Math.Vector4d,System.Double)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Mult(OpenTK.Math.Vector4d@,System.Double,OpenTK.Math.Vector4d@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Div(OpenTK.Math.Vector4d,System.Double)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Div(OpenTK.Math.Vector4d@,System.Double,OpenTK.Math.Vector4d@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Min(OpenTK.Math.Vector4d,OpenTK.Math.Vector4d)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Min(OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Max(OpenTK.Math.Vector4d,OpenTK.Math.Vector4d)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Max(OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Clamp(OpenTK.Math.Vector4d,OpenTK.Math.Vector4d,OpenTK.Math.Vector4d)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Clamp(OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Normalize(OpenTK.Math.Vector4d)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Normalize(OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.NormalizeFast(OpenTK.Math.Vector4d)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.NormalizeFast(OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Dot(OpenTK.Math.Vector4d,OpenTK.Math.Vector4d)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Dot(OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@,System.Double@)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Lerp(OpenTK.Math.Vector4d,OpenTK.Math.Vector4d,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Lerp(OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@,System.Double,OpenTK.Math.Vector4d@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.BaryCentric(OpenTK.Math.Vector4d,OpenTK.Math.Vector4d,OpenTK.Math.Vector4d,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.BaryCentric(OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@,OpenTK.Math.Vector4d@,System.Single,System.Single,OpenTK.Math.Vector4d@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Transform(OpenTK.Math.Vector4d,OpenTK.Math.Matrix4d)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Transform(OpenTK.Math.Vector4d@,OpenTK.Math.Matrix4d@,OpenTK.Math.Vector4d@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector4d.op_Explicit(OpenTK.Math.Vector4)~OpenTK.Math.Vector4d">
            <summary>Converts OpenTK.Math.Vector4 to OpenTK.Math.Vector4d.</summary>
            <param name="v4">The Vector4 to convert.</param>
            <returns>The resulting Vector4d.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.op_Explicit(OpenTK.Math.Vector4d)~OpenTK.Math.Vector4">
            <summary>Converts OpenTK.Math.Vector4d to OpenTK.Math.Vector4.</summary>
            <param name="v4d">The Vector4d to convert.</param>
            <returns>The resulting Vector4.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.ToString">
            <summary>
            Returns a System.String that represents the current Vector4d.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector4d.Equals(OpenTK.Math.Vector4d)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Math.Vector4d.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Math.Vector4d.LengthFast"/>
            <seealso cref="P:OpenTK.Math.Vector4d.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector4d.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Math.Vector4d.Length"/>
            <seealso cref="P:OpenTK.Math.Vector4d.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector4d.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Math.Vector4d.Length"/>
        </member>
        <member name="P:OpenTK.Math.Vector4d.Xy">
            <summary>
            Gets or sets an OpenTK.Math.Vector2d with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Vector4d.Xyz">
            <summary>
            Gets or sets an OpenTK.Math.Vector3d with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="T:OpenTK.Math.Vector2">
            <summary>Represents a 2D vector using two single-precision floating-point numbers.</summary>
            <remarks>
            The Vector2 structure is suitable for interoperation with unmanaged code requiring two consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenTK.Math.Vector2.X">
            <summary>
            The X component of the Vector2.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector2.Y">
            <summary>
            The Y component of the Vector2.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new Vector2.
            </summary>
            <param name="x">The x coordinate of the net Vector2.</param>
            <param name="y">The y coordinate of the net Vector2.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.#ctor(OpenTK.Math.Vector2)">
            <summary>
            Constructs a new Vector2 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.#ctor(OpenTK.Math.Vector3)">
            <summary>
            Constructs a new Vector2 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from. Z is discarded.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.#ctor(OpenTK.Math.Vector4)">
            <summary>
            Constructs a new Vector2 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from. Z and W are discarded.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Add(OpenTK.Math.Vector2)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Add(OpenTK.Math.Vector2@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Sub(OpenTK.Math.Vector2)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Sub(OpenTK.Math.Vector2@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector2.NormalizeFast">
            <summary>
            Scales the Vector2 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector2.Scale(System.Single,System.Single)">
            <summary>
            Scales the current Vector2 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Scale(OpenTK.Math.Vector2)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Scale(OpenTK.Math.Vector2@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenTK.Math.Vector2.UnitX">
            <summary>
            Defines a unit-length Vector2 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector2.UnitY">
            <summary>
            Defines a unit-length Vector2 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector2.Zero">
            <summary>
            Defines a zero-length Vector2.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Vector2.SizeInBytes">
            <summary>
            Defines the size of the Vector2 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Vector2.Add(OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Add(OpenTK.Math.Vector2@,OpenTK.Math.Vector2@,OpenTK.Math.Vector2@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Sub(OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Sub(OpenTK.Math.Vector2@,OpenTK.Math.Vector2@,OpenTK.Math.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Mult(OpenTK.Math.Vector2,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Mult(OpenTK.Math.Vector2@,System.Single,OpenTK.Math.Vector2@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Div(OpenTK.Math.Vector2,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Div(OpenTK.Math.Vector2@,System.Single,OpenTK.Math.Vector2@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.ComponentMin(OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.ComponentMin(OpenTK.Math.Vector2@,OpenTK.Math.Vector2@,OpenTK.Math.Vector2@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.ComponentMax(OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.ComponentMax(OpenTK.Math.Vector2@,OpenTK.Math.Vector2@,OpenTK.Math.Vector2@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Min(OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Max(OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Clamp(OpenTK.Math.Vector2,OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Clamp(OpenTK.Math.Vector2@,OpenTK.Math.Vector2@,OpenTK.Math.Vector2@,OpenTK.Math.Vector2@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Normalize(OpenTK.Math.Vector2)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Normalize(OpenTK.Math.Vector2@,OpenTK.Math.Vector2@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.NormalizeFast(OpenTK.Math.Vector2)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.NormalizeFast(OpenTK.Math.Vector2@,OpenTK.Math.Vector2@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Dot(OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Dot(OpenTK.Math.Vector2@,OpenTK.Math.Vector2@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.Lerp(OpenTK.Math.Vector2,OpenTK.Math.Vector2,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Lerp(OpenTK.Math.Vector2@,OpenTK.Math.Vector2@,System.Single,OpenTK.Math.Vector2@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.BaryCentric(OpenTK.Math.Vector2,OpenTK.Math.Vector2,OpenTK.Math.Vector2,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.BaryCentric(OpenTK.Math.Vector2@,OpenTK.Math.Vector2@,OpenTK.Math.Vector2@,System.Single,System.Single,OpenTK.Math.Vector2@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Math.Vector2.ToString">
            <summary>
            Returns a System.String that represents the current Vector2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Math.Vector2.Equals(OpenTK.Math.Vector2)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Math.Vector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Math.Vector2.LengthFast"/>
            <seealso cref="P:OpenTK.Math.Vector2.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector2.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Math.Vector2.Length"/>
            <seealso cref="P:OpenTK.Math.Vector2.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Math.Vector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Math.Vector2.Length"/>
            <seealso cref="P:OpenTK.Math.Vector2.LengthFast"/>
        </member>
        <member name="P:OpenTK.Math.Vector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Vector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="T:OpenTK.Math.Box2">
            <summary>
            Defines a 2d box (rectangle).
            </summary>
        </member>
        <member name="F:OpenTK.Math.Box2.Left">
            <summary>
            The left boundary of the structure.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Box2.Right">
            <summary>
            The right boundary of the structure.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Box2.Top">
            <summary>
            The top boundary of the structure.
            </summary>
        </member>
        <member name="F:OpenTK.Math.Box2.Bottom">
            <summary>
            The bottom boundary of the structure.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Box2.#ctor(OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Constructs a new Box2 with the specified dimensions.
            </summary>
            <param name="topLeft">An OpenTK.Math.Vector2 describing the top-left corner of the Box2.</param>
            <param name="bottomRight">An OpenTK.Math.Vector2 describing the bottom-right corner of the Box2.</param>
        </member>
        <member name="M:OpenTK.Math.Box2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Box2 with the specified dimensions.
            </summary>
            <param name="left">The position of the left boundary.</param>
            <param name="top">The position of the top boundary.</param>
            <param name="right">The position of the right boundary.</param>
            <param name="bottom">The position of the bottom boundary.</param>
        </member>
        <member name="M:OpenTK.Math.Box2.FromTLRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Box2 with the specified dimensions.
            </summary>
            <param name="top">The position of the top boundary.</param>
            <param name="left">The position of the left boundary.</param>
            <param name="right">The position of the right boundary.</param>
            <param name="bottom">The position of the bottom boundary.</param>
            <returns>A new OpenTK.Math.Box2 with the specfied dimensions.</returns>
        </member>
        <member name="P:OpenTK.Math.Box2.Width">
            <summary>
            Gets a float describing the width of the Box2 structure.
            </summary>
        </member>
        <member name="P:OpenTK.Math.Box2.Height">
            <summary>
            Gets a float describing the height of the Box2 structure.
            </summary>
        </member>
        <member name="T:OpenTK.Math.BezierCurveCubic">
            <summary>
            Represents a cubic bezier curve with two anchor and two control points.
            </summary>
        </member>
        <member name="F:OpenTK.Math.BezierCurveCubic.StartAnchor">
            <summary>
            Start anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.Math.BezierCurveCubic.EndAnchor">
            <summary>
            End anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.Math.BezierCurveCubic.FirstControlPoint">
            <summary>
            First control point, controls the direction of the curve start.
            </summary>
        </member>
        <member name="F:OpenTK.Math.BezierCurveCubic.SecondControlPoint">
            <summary>
            Second control point, controls the direction of the curve end.
            </summary>
        </member>
        <member name="F:OpenTK.Math.BezierCurveCubic.Parallel">
            <summary>
            Gets or sets the parallel value.
            </summary>
            <remarks>This value defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f i.e. stands for a curve that has always a distance
            of 5.f to the orignal curve at any point.</remarks>
        </member>
        <member name="M:OpenTK.Math.BezierCurveCubic.#ctor(OpenTK.Math.Vector2,OpenTK.Math.Vector2,OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.Math.BezierCurveCubic"/>.
            </summary>
            <param name="startAnchor">The start anchor point.</param>
            <param name="endAnchor">The end anchor point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
        </member>
        <member name="M:OpenTK.Math.BezierCurveCubic.#ctor(System.Single,OpenTK.Math.Vector2,OpenTK.Math.Vector2,OpenTK.Math.Vector2,OpenTK.Math.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.Math.BezierCurveCubic"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="startAnchor">The start anchor point.</param>
            <param name="endAnchor">The end anchor point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
        </member>
        <member name="M:OpenTK.Math.BezierCurveCubic.CalculatePoint(System.Single)">
            <summary>
            Calculates the point with the specified t.
            </summary>
            <param name="t">The t value, between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.Math.BezierCurveCubic.CalculatePointOfDerivative(System.Single)">
            <summary>
            Calculates the point with the specified t of the derivative of this function.
            </summary>
            <param name="t">The t, value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.Math.BezierCurveCubic.CalculateLength(System.Single)">
            <summary>
            Calculates the length of this bezier curve.
            </summary>
            <param name="precision">The precision.</param>
            <returns>Length of the curve.</returns>
            <remarks>The precision gets better when the <paramref name="precision"/>
            value gets smaller.</remarks>
        </member>
        <member name="T:OpenTK.Audio.ALCapability">
            <summary>A list of valid Enable/Disable/IsEnabled parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALCapability.Invalid">
            <summary>Currently no state toggles exist for vanilla OpenAL and no Extension uses it.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALListenerf">
            <summary>A list of valid 32-Bits Float Listener/GetListener parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALListenerf.Gain">
            <summary>Indicate the gain (Volume amplification) applied. Type: float Range: [0.0f - ? ] A value of 1.0 means un-attenuated/unchanged. Each division by 2 equals an attenuation of -6dB. Each multiplicaton with 2 equals an amplification of +6dB. A value of 0.0f is interpreted as zero volume and the channel is effectively disabled.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALListenerf.EfxMetersPerUnit">
            <summary>(EFX Extension) This setting is critical if Air Absorption effects are enabled because the amount of Air Absorption applied is directly related to the real-world distance between the Source and the Listener. centimeters 0.01f meters 1.0f kilometers 1000.0f Range [float.MinValue .. float.MaxValue] Default: 1.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.ALListener3f">
            <summary>A list of valid Math.Vector3 Listener/GetListener parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALListener3f.Position">
            <summary>Specify the current location in three dimensional space. OpenAL, like OpenGL, uses a right handed coordinate system, where in a frontal default view X (thumb) points right, Y points up (index finger), and Z points towards the viewer/camera (middle finger). To switch from a left handed coordinate system, flip the sign on the Z coordinate. Listener position is always in the world coordinate system.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALListener3f.Velocity">
            <summary>Specify the current velocity in three dimensional space.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALListenerfv">
            <summary>A list of valid float[] Listener/GetListener parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALListenerfv.Orientation">
            <summary>Indicate Listener orientation. Expects two Vector3, At followed by Up.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALSourcef">
            <summary>A list of valid 32-Bits Float Source/GetSource parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.ReferenceDistance">
            <summary>Source specific reference distance. Type: float Range: [0.0f - float.PositiveInfinity] At 0.0f, no distance attenuation occurs. Type: float Default: 1.0f.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.MaxDistance">
            <summary>Indicate distance above which Sources are not attenuated using the inverse clamped distance model. Default: float.PositiveInfinity Type: float Range: [0.0f - float.PositiveInfinity]</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.RolloffFactor">
            <summary>Source specific rolloff factor. Type: float Range: [0.0f - float.PositiveInfinity]</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.Pitch">
            <summary>Specify the pitch to be applied, either at Source, or on mixer results, at Listener. Range: [0.5f - 2.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.Gain">
            <summary>Indicate the gain (volume amplification) applied. Type: float. Range: [0.0f - ? ] A value of 1.0 means un-attenuated/unchanged. Each division by 2 equals an attenuation of -6dB. Each multiplicaton with 2 equals an amplification of +6dB. A value of 0.0f is meaningless with respect to a logarithmic scale; it is interpreted as zero volume - the channel is effectively disabled.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.MinGain">
            <summary>Indicate minimum Source attenuation. Type: float Range: [0.0f - 1.0f] (Logarthmic)</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.MaxGain">
            <summary>Indicate maximum Source attenuation. Type: float Range: [0.0f - 1.0f] (Logarthmic)</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.ConeInnerAngle">
            <summary>Directional Source, inner cone angle, in degrees. Range: [0-360] Default: 360</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.ConeOuterAngle">
            <summary>Directional Source, outer cone angle, in degrees. Range: [0-360] Default: 360</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.ConeOuterGain">
            <summary>Directional Source, outer cone gain. Default: 0.0f Range: [0.0f - 1.0] (Logarithmic)</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.SecOffset">
            <summary>The playback position, expressed in seconds.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.EfxAirAbsorptionFactor">
            <summary>(EFX Extension) This property is a multiplier on the amount of Air Absorption applied to the Source. The AL_AIR_ABSORPTION_FACTOR is multiplied by an internal Air Absorption Gain HF value of 0.994 (-0.05dB) per meter which represents normal atmospheric humidity and temperature. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.EfxRoomRolloffFactor">
            <summary>(EFX Extension) This property is defined the same way as the Reverb Room Rolloff property: it is one of two methods available in the Effect Extension to attenuate the reflected sound (early reflections and reverberation) according to source-listener distance. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcef.EfxConeOuterGainHighFrequency">
            <summary>(EFX Extension) A directed Source points in a specified direction. The Source sounds at full volume when the listener is directly in front of the source; it is attenuated as the listener circles the Source away from the front. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.ALSource3f">
            <summary>A list of valid Math.Vector3 Source/GetSource parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSource3f.Position">
            <summary>Specify the current location in three dimensional space. OpenAL, like OpenGL, uses a right handed coordinate system, where in a frontal default view X (thumb) points right, Y points up (index finger), and Z points towards the viewer/camera (middle finger). To switch from a left handed coordinate system, flip the sign on the Z coordinate. Listener position is always in the world coordinate system.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSource3f.Velocity">
            <summary>Specify the current velocity in three dimensional space.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSource3f.Direction">
            <summary>Specify the current direction vector.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALSourceb">
            <summary>A list of valid 8-Bits boolean Source/GetSource parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceb.SourceRelative">
            <summary>Indicate that the Source has relative coordinates. Type: bool Range: [True, False]</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceb.Looping">
            <summary>Indicate whether the Source is looping. Type: bool Range: [True, False] Default: False.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceb.EfxDirectFilterGainHighFrequencyAuto">
            <summary>(EFX Extension) If this Source property is set to True, this Source’s direct-path is automatically filtered according to the orientation of the source relative to the listener and the setting of the Source property Sourcef.ConeOuterGainHF. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceb.EfxAuxiliarySendFilterGainAuto">
            <summary>(EFX Extension) If this Source property is set to True, the intensity of this Source’s reflected sound is automatically attenuated according to source-listener distance and source directivity (as determined by the cone parameters). If it is False, the reflected sound is not attenuated according to distance and directivity. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceb.EfxAuxiliarySendFilterGainHighFrequencyAuto">
            <summary>(EFX Extension) If this Source property is AL_TRUE (its default value), the intensity of this Source’s reflected sound at high frequencies will be automatically attenuated according to the high-frequency source directivity as set by the Sourcef.ConeOuterGainHF property. If this property is AL_FALSE, the Source’s reflected sound is not filtered at all according to the Source’s directivity. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="T:OpenTK.Audio.ALSourcei">
            <summary>A list of valid Int32 Source parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcei.ByteOffset">
            <summary>The playback position, expressed in bytes.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcei.SampleOffset">
            <summary>The playback position, expressed in samples.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcei.Buffer">
            <summary>Indicate the Buffer to provide sound samples. Type: uint Range: any valid Buffer Handle.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcei.SourceType">
            <summary>Source type (Static, Streaming or undetermined). Use enum AlSourceType for comparison</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourcei.EfxDirectFilter">
            <summary>(EFX Extension) This Source property is used to apply filtering on the direct-path (dry signal) of a Source.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALSource3i">
            <summary>A list of valid 3x Int32 Source/GetSource parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSource3i.EfxAuxiliarySendFilter">
            <summary>(EFX Extension) This Source property is used to establish connections between Sources and Auxiliary Effect Slots. For a Source to feed an Effect that has been loaded into an Auxiliary Effect Slot the application must configure one of the Source’s auxiliary sends. This process involves setting 3 variables – the destination Auxiliary Effect Slot ID, the Auxiliary Send number, and an optional Filter ID. Type: uint Range: any valid Filter Handle.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALGetSourcei">
            <summary>A list of valid Int32 GetSource parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetSourcei.ByteOffset">
            <summary>The playback position, expressed in bytes. AL_EXT_OFFSET Extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetSourcei.SampleOffset">
            <summary>The playback position, expressed in samples. AL_EXT_OFFSET Extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetSourcei.Buffer">
            <summary>Indicate the Buffer to provide sound samples. Type: uint Range: any valid Buffer Handle.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetSourcei.SourceState">
            <summary>The state of the source (Stopped, Playing, etc.) Use the enum AlSourceState for comparison.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetSourcei.BuffersQueued">
            <summary>The number of buffers queued on this source.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetSourcei.BuffersProcessed">
            <summary>The number of buffers in the queue that have been processed.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetSourcei.SourceType">
            <summary>Source type (Static, Streaming or undetermined). Use enum AlSourceType for comparison.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALSourceState">
            <summary>Source state information, can be retrieved by AL.Source() with ALSourcei.SourceState.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceState.Initial">
            <summary>Default State when loaded, can be manually set with AL.SourceRewind().</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceState.Playing">
            <summary>The source is currently playing.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceState.Paused">
            <summary>The source has paused playback.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceState.Stopped">
            <summary>The source is not playing.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALSourceType">
            <summary>Source type information,  can be retrieved by AL.Source() with ALSourcei.SourceType.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceType.Static">
            <summary>Source is Static if a Buffer has been attached using AL.Source with the parameter Sourcei.Buffer.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceType.Streaming">
            <summary>Source is Streaming if one or more Buffers have been attached using AL.SourceQueueBuffers</summary>
        </member>
        <member name="F:OpenTK.Audio.ALSourceType.Undetermined">
            <summary>Source is undetermined when it has a null Buffer attached</summary>
        </member>
        <member name="T:OpenTK.Audio.ALFormat">
            <summary>Sound samples: Format specifier.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALFormat.Mono8">
            <summary>1 Channel, 8 Bits.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALFormat.Mono16">
            <summary>1 Channel, 16 Bits.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALFormat.Stereo8">
            <summary>2 Channels, 8 Bits each.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALFormat.Stereo16">
            <summary>2 Channels, 16 Bits each.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALGetBufferi">
            <summary>A list of valid Int32 GetBuffer parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetBufferi.Frequency">
            <summary>Sound sample's frequency, in units of Hertz [Hz]. This is the number of samples per second. Half of the sample frequency marks the maximum significant frequency component.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetBufferi.Bits">
            <summary>Bit depth of the buffer. Should be 8 or 16.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetBufferi.Channels">
            <summary>Number of channels in buffer. > 1 is valid, but buffer won’t be positioned when played. 1 for Mono, 2 for Stereo.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetBufferi.Size">
            <summary>size of the Buffer in bytes.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALBufferState">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:OpenTK.Audio.ALBufferState.Unused">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:OpenTK.Audio.ALBufferState.Pending">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:OpenTK.Audio.ALBufferState.Processed">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="T:OpenTK.Audio.ALError">
            <summary>Returned by AL.GetError</summary>
        </member>
        <member name="F:OpenTK.Audio.ALError.NoError">
            <summary>No OpenAL Error.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALError.InvalidName">
            <summary>Invalid Name paramater passed to OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALError.IllegalEnum">
            <summary>Invalid parameter passed to OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALError.InvalidEnum">
            <summary>Invalid parameter passed to OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALError.InvalidValue">
            <summary>Invalid OpenAL enum parameter value.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALError.IllegalCommand">
            <summary>Illegal OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALError.InvalidOperation">
            <summary>Illegal OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALError.OutOfMemory">
            <summary>No OpenAL memory left.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALGetString">
            <summary>A list of valid string AL.Get() parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetString.Vendor">
            <summary>Gets the Vendor name.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetString.Version">
            <summary>Gets the driver version.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetString.Renderer">
            <summary>Gets the renderer mode.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetString.Extensions">
            <summary>Gets a list of all available Extensions, separated with spaces.</summary>
        </member>
        <member name="T:OpenTK.Audio.ALGetFloat">
            <summary>A list of valid 32-Bits Float AL.Get() parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetFloat.DopplerFactor">
            <summary>Doppler scale. Default 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetFloat.DopplerVelocity">
            <summary>Tweaks speed of propagation. This functionality is deprecated.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetFloat.SpeedOfSound">
            <summary>Speed of Sound in units per second. Default: 343.3f</summary>
        </member>
        <member name="T:OpenTK.Audio.ALGetInteger">
            <summary>A list of valid Int32 AL.Get() parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.ALGetInteger.DistanceModel">
            <summary>See enum ALDistanceModel.</summary><see cref="T:OpenTK.Audio.ALDistanceModel"/>
        </member>
        <member name="T:OpenTK.Audio.ALDistanceModel">
            <summary>Used by AL.DistanceModel(), the distance model can be retrieved by AL.Get() with ALGetInteger.DistanceModel</summary>
        </member>
        <member name="F:OpenTK.Audio.ALDistanceModel.None">
            <summary>Bypasses all distance attenuation calculation for all Sources.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALDistanceModel.InverseDistance">
            <summary>InverseDistance is equivalent to the IASIG I3DL2 model with the exception that ALSourcef.ReferenceDistance does not imply any clamping.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALDistanceModel.InverseDistanceClamped">
            <summary>InverseDistanceClamped is the IASIG I3DL2 model, with ALSourcef.ReferenceDistance indicating both the reference distance and the distance below which gain will be clamped.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALDistanceModel.LinearDistance">
            <summary>AL_EXT_LINEAR_DISTANCE extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALDistanceModel.LinearDistanceClamped">
            <summary>AL_EXT_LINEAR_DISTANCE extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALDistanceModel.ExponentDistance">
            <summary>AL_EXT_EXPONENT_DISTANCE extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.ALDistanceModel.ExponentDistanceClamped">
            <summary>AL_EXT_EXPONENT_DISTANCE extension.</summary>
        </member>
        <member name="T:OpenTK.Audio.AudioContext">
            <summary>
            Provides methods to create and use an audio context.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#cctor">
            <private />
            <static />
            <summary>
            Runs before the actual class constructor, to load available devices.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor">
            <summary>Constructs a new AudioContext, using the default audio device.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String)">
            <summary>Constructs a new AudioContext, using the specified audio device.</summary>
            <param name="device">The name of the audio device to use.</param>
            <remarks>
            Use AudioContext.AvailableDevices to obtain a list of all available audio devices.
            devices.
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String,System.Int32)">
            <summary>Constructs a new AudioContext, using the specified audio device and device parameters.</summary>
            <param name="device">The name of the audio device to use.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <remarks>
            Use AudioContext.AvailableDevices to obtain a list of all available audio devices.
            devices.
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Constructs a new AudioContext, using the specified audio device and device parameters.</summary>
            <param name="device">The name of the audio device to use.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <remarks>
            Use AudioContext.AvailableDevices to obtain a list of all available audio devices.
            devices.
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Constructs a new AudioContext, using the specified audio device and device parameters.</summary>
            <param name="device">The name of the audio device to use.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <remarks>
            Use AudioContext.AvailableDevices to obtain a list of all available audio devices.
            devices.
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Creates the audio context using the specified device and device parameters.</summary>
            <param name="device">The device descriptor obtained through AudioContext.AvailableDevices.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <param name="enableEfx">Indicates whether the EFX extension should be initialized, if present.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the device string is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when a specified parameter is invalid.</exception>
            <exception cref="T:OpenTK.Audio.AudioDeviceException">
            Occurs when the specified device is not available, or is in use by another program.
            </exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">
            Occurs when an audio context could not be created with the specified parameters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Occurs when an AudioContext already exists.</exception>
            <remarks>
            <para>For maximum compatibility, you are strongly recommended to use the default constructor.</para>
            <para>Multiple AudioContexts are not supported at this point.</para>
            <para>
            The number of auxilliary EFX sends depends on the audio hardware and drivers. Most Realtek devices, as well
            as the Creative SB Live!, support 1 auxilliary send. Creative's Audigy and X-Fi series support 4 sends.
            Values higher than supported will be clamped by the driver.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.LoadAvailableDevices">
            <private />
            <static />
            <summary>
            Loads all available audio devices into the available_devices array.
            </summary>
            <remarks>
            Only called by the static AudioContext constructor.
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.CreateContext(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <private/>
            <summary>Creates the audio context using the specified device.</summary>
            <param name="device">The device descriptor obtained through AudioContext.AvailableDevices, or null for the default device.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <param name="enableEfx">Indicates whether the EFX extension should be initialized, if present.</param>
            /// <exception cref="T:System.ArgumentOutOfRangeException">Occurs when a specified parameter is invalid.</exception>
            <exception cref="T:OpenTK.Audio.AudioDeviceException">
            Occurs when the specified device is not available, or is in use by another program.
            </exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">
            Occurs when an audio context could not be created with the specified parameters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Occurs when an AudioContext already exists.</exception>
            <remarks>
            <para>For maximum compatibility, you are strongly recommended to use the default constructor.</para>
            <para>Multiple AudioContexts are not supported at this point.</para>
            <para>
            The number of auxilliary EFX sends depends on the audio hardware and drivers. Most Realtek devices, as well
            as the Creative SB Live!, support 1 auxilliary send. Creative's Audigy and X-Fi series support 4 sends.
            Values higher than supported will be clamped by the driver.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.MakeCurrent(OpenTK.Audio.AudioContext)">
            <private/>
            <summary>Makes the specified AudioContext current in the calling thread.</summary>
            <param name="context">The OpenTK.Audio.AudioContext to make current, or null.</param>
            <exception cref="T:System.ObjectDisposedException">
            Occurs if this function is called after the AudioContext has been disposed.
            </exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">
            Occurs when the AudioContext could not be made current.
            </exception>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.MakeCurrent">
            <summary>Makes the AudioContext current in the calling thread.</summary>
            <exception cref="T:System.ObjectDisposedException">
            Occurs if this function is called after the AudioContext has been disposed.
            </exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">
            Occurs when the AudioContext could not be made current.
            </exception>
            <remarks>
            Only one AudioContext can be current in the application at any time,
            <b>regardless of the number of threads</b>.
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.Process">
            <summary>
            Processes queued audio events.
            </summary>
            <remarks>
            <para>
            If AudioContext.IsSynchronized is true, this function will resume
            the internal audio processing thread. If AudioContext.IsSynchronized is false,
            you will need to call this function multiple times per second to process
            audio events.
            </para>
            <para>
            In some implementations this function may have no effect.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Occurs when this function is called after the AudioContext had been disposed.</exception>
            <seealso cref="M:OpenTK.Audio.AudioContext.Suspend"/>
            <seealso cref="P:OpenTK.Audio.AudioContext.IsProcessing"/>
            <seealso cref="P:OpenTK.Audio.AudioContext.IsSynchronized"/>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.Suspend">
            <summary>
            Suspends processing of audio events.
            </summary>
            <remarks>
            <para>
            To avoid audio artifacts when calling this function, set audio gain to zero before
            suspending an AudioContext.
            </para>
            <para>
            In some implementations, it can be faster to suspend processing before changing
            AudioContext state.
            </para>
            <para>
            In some implementations this function may have no effect.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Occurs when this function is called after the AudioContext had been disposed.</exception>
            <seealso cref="M:OpenTK.Audio.AudioContext.Process"/>
            <seealso cref="P:OpenTK.Audio.AudioContext.IsProcessing"/>
            <seealso cref="P:OpenTK.Audio.AudioContext.IsSynchronized"/>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.SupportsExtension(System.String)">
            <summary>
            Checks whether the specified OpenAL extension is supported.
            </summary>
            <param name="extension">The name of the extension to check (e.g. "ALC_EXT_EFX").</param>
            <returns>true if the extension is supported; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.Dispose">
            <summary>
            Disposes of the AudioContext, cleaning up all resources consumed by it.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.IsCurrent">
            <summary>
            Gets or sets a System.Boolean indicating whether the AudioContext
            is current.
            </summary>
            <remarks>
            Only one AudioContext can be current in the application at any time,
            <b>regardless of the number of threads</b>.
            </remarks>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.IsProcessing">
            <summary>
            Gets a System.Boolean indicating whether the AudioContext is
            currently processing audio events.
            </summary>
            <seealso cref="M:OpenTK.Audio.AudioContext.Process"/>
            <seealso cref="M:OpenTK.Audio.AudioContext.Suspend"/>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.IsSynchronized">
            <summary>
            Gets a System.Boolean indicating whether the AudioContext is
            synchronized.
            </summary>
            <seealso cref="M:OpenTK.Audio.AudioContext.Process"/>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.CurrentContext">
            <summary>
            Gets the OpenTK.Audio.AudioContext which is current in the application.
            </summary>
            <remarks>
            Only one AudioContext can be current in the application at any time,
            <b>regardless of the number of threads</b>.
            </remarks>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.AvailableDevices">
            <summary>
            Gets a System.String array containing all available audio devices.
            </summary>
            <remarks>This property allocates memory.</remarks>
        </member>
        <member name="T:OpenTK.ColorMode">
            <summary>Defines a color mode for OpenGL rendering.</summary>
            <remarks>
            <para>A ColorMode contains Red, Green, Blue and Alpha components that descibe
            the allocated bits per pixel for the corresponding color.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.ColorMode.#ctor(System.Int32)">
            <summary>
            Constructs a new ColorMode with the specified aggregate bits per pixel.
            </summary>
            <param name="bpp">The bits per pixel sum for the Red, Green, Blue and Alpha color channels.</param>
        </member>
        <member name="M:OpenTK.ColorMode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new ColorMode with the specified bits per pixel for 
            the Red, Green, Blue and Alpha color channels.
            </summary>
            <param name="red">Bits per pixel for the Red color channel.</param>
            <param name="green">Bits per pixel for the Green color channel.</param>
            <param name="blue">Bits per pixel for the Blue color channel.</param>
            <param name="alpha">Bits per pixel for the Alpha color channel.</param>
        </member>
        <member name="M:OpenTK.ColorMode.op_Implicit(System.Int32)~OpenTK.ColorMode">
            <summary>
            Converts the specified bpp into a new ColorMode.
            </summary>
            <param name="bpp">The bits per pixel to convert.</param>
            <returns>A ColorMode with the specified bits per pixel.</returns>
        </member>
        <member name="P:OpenTK.ColorMode.Red">
            <summary>Gets the bits per pixel for the Red channel.</summary>
        </member>
        <member name="P:OpenTK.ColorMode.Green">
            <summary>Gets the bits per pixel for the Green channel.</summary>
        </member>
        <member name="P:OpenTK.ColorMode.Blue">
            <summary>Gets the bits per pixel for the Blue channel.</summary>
        </member>
        <member name="P:OpenTK.ColorMode.Alpha">
            <summary>Gets the bits per pixel for the Alpha channel.</summary>
        </member>
        <member name="P:OpenTK.ColorMode.IsIndexed">
            <summary>Gets a System.Boolean indicating whether this ColorMode is indexed.</summary>
        </member>
        <member name="P:OpenTK.ColorMode.BitsPerPixel">
            <summary>Gets the sum of Red, Green, Blue and Alpha bits per pixel.</summary>
        </member>
        <member name="M:OpenTK.Platform.MacOS.CarbonWindowInfo.ToString">
            <summary>Returns a System.String that represents the current window.</summary>
            <returns>A System.String that represents the current window.</returns>
        </member>
        <member name="T:OpenTK.Input.KeyboardDevice">
            <summary>
            Represents a keyboard device and provides methods to query its status. 
            </summary>
        </member>
        <member name="M:OpenTK.Input.KeyboardDevice.GetHashCode">
            <summary>Returns the hash code for this KeyboardDevice.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OpenTK.Input.KeyboardDevice.ToString">
            <summary>
            Returns a System.String representing this KeyboardDevice.
            </summary>
            <returns>A System.String representing this KeyboardDevice.</returns>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.Item(OpenTK.Input.Key)">
            <summary>
            Gets a value indicating the status of the specified Key.
            </summary>
            <param name="key">The Key to check.</param>
            <returns>True if the Key is pressed, false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.NumberOfKeys">
            <summary>
            Gets an integer representing the number of keys on this KeyboardDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.NumberOfFunctionKeys">
            <summary>
            Gets an integer representing the number of function keys (F-keys) on this KeyboardDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.NumberOfLeds">
            <summary>
            Gets a value indicating the number of led indicators on this KeyboardDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.DeviceID">
            <summary>
            Gets an IntPtr representing a device dependent ID.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.KeyRepeat">
            <summary>
            Gets or sets a System.Boolean indicating key repeat status.
            </summary>
            <remarks>
            If KeyRepeat is true, multiple KeyDown events will be generated while a key is being held.
            Otherwise only one KeyDown event will be reported.
            <para>
            The rate of the generated KeyDown events is controlled by the Operating System. Usually,
            one KeyDown event will be reported, followed by a small (250-1000ms) pause and several
            more KeyDown events (6-30 events per second).
            </para>
            <para>
            Set to true to handle text input (where keyboard repeat is desirable), but set to false
            for game input.
            </para>
            </remarks>
        </member>
        <member name="E:OpenTK.Input.KeyboardDevice.KeyDown">
            <summary>
            Occurs when a key is pressed.
            </summary>
        </member>
        <member name="E:OpenTK.Input.KeyboardDevice.KeyUp">
            <summary>
            Occurs when a key is released.
            </summary>
        </member>
        <member name="T:OpenTK.Input.Key">
            <summary>
            The available keyboard keys.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.DisplayDevice">
            <summary>
            Defines a display device on the underlying system, and provides
            methods to query and change its display parameters.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.DisplayDevice.SelectResolution(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Selects an available resolution that matches the specified parameters.
            </summary>
            <param name="width">The width of the requested resolution in pixels.</param>
            <param name="height">The height of the requested resolution in pixels.</param>
            <param name="bitsPerPixel">The bits per pixel of the requested resolution.</param>
            <param name="refreshRate">The refresh rate of the requested resolution in Herz.</param>
            <returns>The requested DisplayResolution or null if the parameters cannot be met.</returns>
            <remarks>
            <para>If a matching resolution is not found, this function will retry ignoring the specified refresh rate,
            bits per pixel and resolution, in this order. If a matching resolution still doesn't exist, this function will
            return the current resolution.</para>
            <para>A parameter set to 0 or negative numbers will not be used in the search (e.g. if refreshRate is 0,
            any refresh rate will be considered valid).</para>
            <para>This function allocates memory.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.DisplayDevice.ChangeResolution(OpenTK.Graphics.DisplayResolution)">
            <summary>Changes the resolution of the DisplayDevice.</summary>
            <param name="resolution">The resolution to set. <see cref="M:OpenTK.Graphics.DisplayDevice.SelectResolution(System.Int32,System.Int32,System.Int32,System.Single)"/></param>
            <exception cref="T:OpenTK.Graphics.GraphicsModeException">Thrown if the requested resolution could not be set.</exception>
            <remarks>If the specified resolution is null, this function will restore the original DisplayResolution.</remarks>
        </member>
        <member name="M:OpenTK.Graphics.DisplayDevice.ChangeResolution(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>Changes the resolution of the DisplayDevice.</summary>
            <param name="width">The new width of the DisplayDevice.</param>
            <param name="height">The new height of the DisplayDevice.</param>
            <param name="bitsPerPixel">The new bits per pixel of the DisplayDevice.</param>
            <param name="refreshRate">The new refresh rate of the DisplayDevice.</param>
            <exception cref="T:OpenTK.Graphics.GraphicsModeException">Thrown if the requested resolution could not be set.</exception>
        </member>
        <member name="M:OpenTK.Graphics.DisplayDevice.RestoreResolution">
            <summary>Restores the original resolution of the DisplayDevice.</summary>
            <exception cref="T:OpenTK.Graphics.GraphicsModeException">Thrown if the original resolution could not be restored.</exception>
        </member>
        <member name="M:OpenTK.Graphics.DisplayDevice.ToString">
            <summary>
            Returns a System.String representing this DisplayDevice.
            </summary>
            <returns>A System.String representing this DisplayDevice.</returns>
        </member>
        <member name="P:OpenTK.Graphics.DisplayDevice.Width">
            <summary>Gets a System.Int32 that contains the width of this display in pixels.</summary>
        </member>
        <member name="P:OpenTK.Graphics.DisplayDevice.Height">
            <summary>Gets a System.Int32 that contains the height of this display in pixels.</summary>
        </member>
        <member name="P:OpenTK.Graphics.DisplayDevice.BitsPerPixel">
            <summary>Gets a System.Int32 that contains number of bits per pixel of this display. Typical values include 8, 16, 24 and 32.</summary>
        </member>
        <member name="P:OpenTK.Graphics.DisplayDevice.RefreshRate">
            <summary>
            Gets a System.Single representing the vertical refresh rate of this display.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.DisplayDevice.IsPrimary">
            <summary>Gets a System.Boolean that indicates whether this Display is the primary Display in systems with multiple Displays.</summary>
        </member>
        <member name="P:OpenTK.Graphics.DisplayDevice.AvailableResolutions">
            <summary>
            Gets an array of OpenTK.DisplayResolution objects, which describe all available resolutions
            for this device.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.DisplayDevice.AvailableDisplays">
            <summary>
            Gets an array of OpenTK.DisplayDevice objects, which describe all available display devices.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.DisplayDevice.Default">
            <summary>Gets the default (primary) display of this system.</summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.WinRawKeyboard.ProcessKeyboardEvent(OpenTK.Platform.Windows.RawInput)">
            <summary>
            Processes raw input events.
            </summary>
            <param name="rin"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTK.Platform.Windows.API">
            <summary>
            For internal use by OpenTK only!
            Exposes useful native WINAPI methods and structures.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.AdjustWindowRect(OpenTK.Platform.Windows.Rectangle@,OpenTK.Platform.Windows.WindowStyle,System.Boolean)">
            <summary>
            Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size.
            </summary>
            <param name="lpRect">[in, out] Pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.</param>
            <param name="dwStyle">[in] Specifies the window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.</param>
            <param name="bMenu">[in] Specifies whether the window has a menu.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            A client rectangle is the smallest rectangle that completely encloses a client area. A window rectangle is the smallest rectangle that completely encloses the window, which includes the client area and the nonclient area. 
            The AdjustWindowRect function does not add extra space when a menu bar wraps to two or more rows. 
            The AdjustWindowRect function does not take the WS_VSCROLL or WS_HSCROLL styles into account. To account for the scroll bars, call the GetSystemMetrics function with SM_CXVSCROLL or SM_CYHSCROLL.
            Found Winuser.h, user32.dll
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.PeekMessage(OpenTK.Platform.Windows.MSG@,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Low-level WINAPI function that checks the next message in the queue.
            </summary>
            <param name="msg">The pending message (if any) is stored here.</param>
            <param name="hWnd">Not used</param>
            <param name="messageFilterMin">Not used</param>
            <param name="messageFilterMax">Not used</param>
            <param name="flags">Not used</param>
            <returns>True if there is a message pending.</returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetMessage(OpenTK.Platform.Windows.MSG@,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Low-level WINAPI function that retriives the next message in the queue.
            </summary>
            <param name="msg">The pending message (if any) is stored here.</param>
            <param name="windowHandle">Not used</param>
            <param name="messageFilterMin">Not used</param>
            <param name="messageFilterMax">Not used</param>
            <returns>
            Nonzero indicates that the function retrieves a message other than WM_QUIT.
            Zero indicates that the function retrieves the WM_QUIT message, or that lpMsg is an invalid pointer.
            1 indicates that an error occurred  for example, the function fails if hWnd is an invalid window handle.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetQueueStatus(OpenTK.Platform.Windows.QueueStatusFlags)">
            <summary>
            Indicates the type of messages found in the calling thread's message queue.
            </summary>
            <param name="flags"></param>
            <returns>
            The high-order word of the return value indicates the types of messages currently in the queue.
            The low-order word indicates the types of messages that have been added to the queue and that are still
            in the queue since the last call to the GetQueueStatus, GetMessage, or PeekMessage function.
            </returns>
            <remarks>
            The presence of a QS_ flag in the return value does not guarantee that
            a subsequent call to the GetMessage or PeekMessage function will return a message.
            GetMessage and PeekMessage perform some internal filtering that may cause the message
            to be processed internally. For this reason, the return value from GetQueueStatus
            should be considered only a hint as to whether GetMessage or PeekMessage should be called. 
            <para>
            The QS_ALLPOSTMESSAGE and QS_POSTMESSAGE flags differ in when they are cleared.
            QS_POSTMESSAGE is cleared when you call GetMessage or PeekMessage, whether or not you are filtering messages.
            QS_ALLPOSTMESSAGE is cleared when you call GetMessage or PeekMessage without filtering messages
            (wMsgFilterMin and wMsgFilterMax are 0). This can be useful when you call PeekMessage multiple times
            to get messages in different ranges.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.TimeBeginPeriod(System.Int32)">
            <summary>
            Sets the timing resolution of the GetTime (?) method.
            </summary>
            <param name="period">Timing resolution in msec (?)</param>
            <returns>(?)</returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            
            </summary>
            <param name="PerformanceFrequency"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.QueryPerformanceCounter(System.Int64@)">
            <summary>
            
            </summary>
            <param name="PerformanceCount"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetDC(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <param name="DC"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.SetPixelFormat(System.IntPtr,System.Int32,OpenTK.Platform.Windows.PixelFormatDescriptor@)">
            <summary>
            
            </summary>
            <param name="dc"></param>
            <param name="format"></param>
            <param name="pfd"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="funcname"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.LoadLibrary(System.String)">
            <summary>
            
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.FreeLibrary(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.ShowWindow(System.IntPtr,OpenTK.Platform.Windows.ShowWindowCommand)">
            <summary>
            The ShowWindow function sets the specified window's show state.
            </summary>
            <param name="hWnd">[in] Handle to the window.</param>
            <param name="nCmdShow">[in] Specifies how the window is to be shown. This parameter is ignored the first time an application calls ShowWindow, if the program that launched the application provides a STARTUPINFO structure. Otherwise, the first time ShowWindow is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter. In subsequent calls, this parameter can be one of the ShowWindowEnum values.</param>
            <returns>If the window was previously visible, the return value is true. Otherwise false.</returns>
            <remarks>
            <para>To perform certain special effects when showing or hiding a window, use AnimateWindow.</para>
            <para>The first time an application calls ShowWindow, it should use the WinMain function's nCmdShow parameter as its nCmdShow parameter. Subsequent calls to ShowWindow must use one of the values in the given list, instead of the one specified by the WinMain function's nCmdShow parameter.</para>
            <para>As noted in the discussion of the nCmdShow parameter, the nCmdShow value is ignored in the first call to ShowWindow if the program that launched the application specifies startup information in the structure. In this case, ShowWindow uses the information specified in the STARTUPINFO structure to show the window. On subsequent calls, the application must call ShowWindow with nCmdShow set to SW_SHOWDEFAULT to use the startup information provided by the program that launched the application. This behavior is designed for the following situations:</para>
            <list type="">
            <item>Applications create their main window by calling CreateWindow with the WS_VISIBLE flag set.</item>
            <item>Applications create their main window by calling CreateWindow with the WS_VISIBLE flag cleared, and later call ShowWindow with the SW_SHOW flag set to make it visible.</item>
            </list>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.SetWindowText(System.IntPtr,System.String)">
            <summary>
            The SetWindowText function changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application.
            </summary>
            <param name="hWnd">[in] Handle to the window or control whose text is to be changed.</param>
            <param name="lpString">[in] Pointer to a null-terminated string to be used as the new title or control text.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>If the target window is owned by the current process, SetWindowText causes a WM_SETTEXT message to be sent to the specified window or control. If the control is a list box control created with the WS_CAPTION style, however, SetWindowText sets the text for the control, not for the list box entries. </para>
            <para>To set the text of a control in another process, send the WM_SETTEXT message directly instead of calling SetWindowText. </para>
            <para>The SetWindowText function does not expand tab characters (ASCII code 0x09). Tab characters are displayed as vertical bar (|) characters. </para>
            <para>Windows 95/98/Me: SetWindowTextW is supported by the Microsoft Layer for Unicode (MSLU). To use this, you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems .</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            The GetWindowText function copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application.
            </summary>
            <param name="hWnd">[in] Handle to the window or control containing the text.</param>
            <param name="lpString">[out] Pointer to the buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a NULL character.</param>
            <param name="nMaxCount">[in] Specifies the maximum number of characters to copy to the buffer, including the NULL character. If the text exceeds this limit, it is truncated.</param>
            <returns>
            If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating NULL character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call GetLastError.
            <para>This function cannot retrieve the text of an edit control in another application.</para>
            </returns>
            <remarks>
            <para>If the target window is owned by the current process, GetWindowText causes a WM_GETTEXT message to be sent to the specified window or control. If the target window is owned by another process and has a caption, GetWindowText retrieves the window caption text. If the window does not have a caption, the return value is a null string. This behavior is by design. It allows applications to call GetWindowText without becoming unresponsive if the process that owns the target window is not responding. However, if the target window is not responding and it belongs to the calling application, GetWindowText will cause the calling application to become unresponsive.</para>
            <para>To retrieve the text of a control in another process, send a WM_GETTEXT message directly instead of calling GetWindowText.</para>
            <para>Windows 95/98/Me: GetWindowTextW is supported by the Microsoft Layer for Unicode (MSLU). To use this, you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.ScreenToClient(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Converts the screen coordinates of a specified point on the screen to client-area coordinates.
            </summary>
            <param name="hWnd">Handle to the window whose client area will be used for the conversion.</param>
            <param name="point">Pointer to a POINT structure that specifies the screen coordinates to be converted.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. Windows NT/2000/XP: To get extended error information, call GetLastError.</returns>
            <remarks>
            <para>The function uses the window identified by the hWnd parameter and the screen coordinates given in the POINT structure to compute client coordinates. It then replaces the screen coordinates with the client coordinates. The new coordinates are relative to the upper-left corner of the specified window's client area. </para>
            <para>The ScreenToClient function assumes the specified point is in screen coordinates. </para>
            <para>All coordinates are in device units.</para>
            <para>Do not use ScreenToClient when in a mirroring situation, that is, when changing from left-to-right layout to right-to-left layout. Instead, use MapWindowPoints. For more information, see "Window Layout and Mirroring" in Window Features.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Converts the client-area coordinates of a specified point to screen coordinates.
            </summary>
            <param name="hWnd">Handle to the window whose client area will be used for the conversion.</param>
            <param name="point">Pointer to a POINT structure that contains the client coordinates to be converted. The new screen coordinates are copied into this structure if the function succeeds.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. Windows NT/2000/XP: To get extended error information, call GetLastError.</returns>
            <remarks>
            <para>The ClientToScreen function replaces the client-area coordinates in the POINT structure with the screen coordinates. The screen coordinates are relative to the upper-left corner of the screen. Note, a screen-coordinate point that is above the window's client area has a negative y-coordinate. Similarly, a screen coordinate to the left of a client area has a negative x-coordinate.</para>
            <para>All coordinates are device coordinates.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetClientRect(System.IntPtr,OpenTK.Platform.Windows.Rectangle@)">
            <summary>
            The GetClientRect function retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0).
            </summary>
            <param name="windowHandle">Handle to the window whose client coordinates are to be retrieved.</param>
            <param name="clientRectangle">Pointer to a RECT structure that receives the client coordinates. The left and top members are zero. The right and bottom members contain the width and height of the window.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>In conformance with conventions for the RECT structure, the bottom-right coordinates of the returned rectangle are exclusive. In other words, the pixel at (right, bottom) lies immediately outside the rectangle.</remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.ChangeDisplaySettings(OpenTK.Platform.Windows.DeviceMode,OpenTK.Platform.Windows.ChangeDisplaySettingsEnum)">
            <summary>
            The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode.
            </summary>
            <param name="device_mode">[in] Pointer to a DEVMODE structure that describes the new graphics mode. If lpDevMode is NULL, all the values currently in the registry will be used for the display setting. Passing NULL for the lpDevMode parameter and 0 for the dwFlags parameter is the easiest way to return to the default mode after a dynamic mode change.</param>
            <param name="flags">[in] Indicates how the graphics mode should be changed.</param>
            <returns></returns>
            <remarks>To change the settings of a specified display device, use the ChangeDisplaySettingsEx function.
            <para>To ensure that the DEVMODE structure passed to ChangeDisplaySettings is valid and contains only values supported by the display driver, use the DEVMODE returned by the EnumDisplaySettings function.</para>
            <para>When the display mode is changed dynamically, the WM_DISPLAYCHANGE message is sent to all running applications.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetCursorPos(System.Drawing.Point@)">
            <summary>
            Retrieves the cursor's position, in screen coordinates.
            </summary>
            <param name="point">Pointer to a POINT structure that receives the screen coordinates of the cursor.</param>
            <returns>Returns nonzero if successful or zero otherwise. To get extended error information, call GetLastError.</returns>
            <remarks>
            <para>The cursor position is always specified in screen coordinates and is not affected by the mapping mode of the window that contains the cursor.</para>
            <para>The calling process must have WINSTA_READATTRIBUTES access to the window station.</para>
            <para>The input desktop must be the current desktop when you call GetCursorPos. Call OpenInputDesktop to determine whether the current desktop is the input desktop. If it is not, call SetThreadDesktop with the HDESK returned by OpenInputDesktop to switch to that desktop.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.DefRawInputProc(OpenTK.Platform.Windows.RawInput[],System.Int32,System.UInt32)">
            <summary>
            calls the default raw input procedure to provide default processing for
            any raw input messages that an application does not process.
            This function ensures that every message is processed.
            DefRawInputProc is called with the same parameters received by the window procedure.
            </summary>
            <param name="RawInput">Pointer to an array of RawInput structures.</param>
            <param name="Input">Number of RawInput structures pointed to by paRawInput.</param>
            <param name="SizeHeader">Size, in bytes, of the RawInputHeader structure.</param>
            <returns>If successful, the function returns S_OK. Otherwise it returns an error value.</returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.RegisterRawInputDevices(OpenTK.Platform.Windows.RawInputDevice[],System.UInt32,System.UInt32)">
            <summary>
            Registers the devices that supply the raw input data.
            </summary>
            <param name="RawInputDevices">
            Pointer to an array of RawInputDevice structures that represent the devices that supply the raw input.
            </param>
            <param name="NumDevices">
            Number of RawInputDevice structures pointed to by RawInputDevices.
            </param>
            <param name="Size">
            Size, in bytes, of a RAWINPUTDEVICE structure.
            </param>
            <returns>
            TRUE if the function succeeds; otherwise, FALSE. If the function fails, call GetLastError for more information.
            </returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetRawInputBuffer(OpenTK.Platform.Windows.RawInput[],System.UInt32@,System.UInt32)">
            <summary>
            Does a buffered read of the raw input data.
            </summary>
            <param name="Data">
            Pointer to a buffer of RawInput structures that contain the raw input data.
            If NULL, the minimum required buffer, in bytes, is returned in Size.
            </param>
            <param name="Size">Pointer to a variable that specifies the size, in bytes, of a RawInput structure.</param>
            <param name="SizeHeader">Size, in bytes, of RawInputHeader.</param>
            <returns>
            If Data is NULL and the function is successful, the return value is zero.
            If Data is not NULL and the function is successful, the return value is the number
            of RawInput structures written to Data.
            If an error occurs, the return value is (UINT)-1. Call GetLastError for the error code.
            </returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetRegisteredRawInputDevices(OpenTK.Platform.Windows.RawInput[],System.UInt32@,System.UInt32)">
            <summary>
            Gets the information about the raw input devices for the current application.
            </summary>
            <param name="RawInputDevices">
            Pointer to an array of RawInputDevice structures for the application.
            </param>
            <param name="NumDevices">
            Number of RawInputDevice structures in RawInputDevices.
            </param>
            <param name="cbSize">
            Size, in bytes, of a RawInputDevice structure.
            </param>
            <returns>
            <para>
            If successful, the function returns a non-negative number that is
            the number of RawInputDevice structures written to the buffer. 
            </para>
            <para>
            If the pRawInputDevices buffer is too small or NULL, the function sets
            the last error as ERROR_INSUFFICIENT_BUFFER, returns -1,
            and sets NumDevices to the required number of devices.
            </para>
            <para>
            If the function fails for any other reason, it returns -1. For more details, call GetLastError.
            </para>
            </returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetRawInputDeviceList(OpenTK.Platform.Windows.RawInputDeviceList[],System.UInt32@,System.UInt32)">
            <summary>
            Enumerates the raw input devices attached to the system.
            </summary>
            <param name="RawInputDeviceList">
            ointer to buffer that holds an array of RawInputDeviceList structures
            for the devices attached to the system.
            If NULL, the number of devices are returned in NumDevices.
            </param>
            <param name="NumDevices">
            Pointer to a variable. If RawInputDeviceList is NULL, it specifies the number
            of devices attached to the system. Otherwise, it contains the size, in bytes,
            of the preallocated buffer pointed to by pRawInputDeviceList.
            However, if NumDevices is smaller than needed to contain RawInputDeviceList structures,
            the required buffer size is returned here.
            </param>
            <param name="Size">
            Size of a RawInputDeviceList structure.
            </param>
            <returns>
            If the function is successful, the return value is the number of devices stored in the buffer
            pointed to by RawInputDeviceList.
            If RawInputDeviceList is NULL, the return value is zero. 
            If NumDevices is smaller than needed to contain all the RawInputDeviceList structures,
            the return value is (UINT) -1 and the required buffer is returned in NumDevices.
            Calling GetLastError returns ERROR_INSUFFICIENT_BUFFER.
            On any other error, the function returns (UINT) -1 and GetLastError returns the error indication.
            </returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetRawInputDeviceList(System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            Enumerates the raw input devices attached to the system.
            </summary>
            <param name="RawInputDeviceList">
            ointer to buffer that holds an array of RawInputDeviceList structures
            for the devices attached to the system.
            If NULL, the number of devices are returned in NumDevices.
            </param>
            <param name="NumDevices">
            Pointer to a variable. If RawInputDeviceList is NULL, it specifies the number
            of devices attached to the system. Otherwise, it contains the size, in bytes,
            of the preallocated buffer pointed to by pRawInputDeviceList.
            However, if NumDevices is smaller than needed to contain RawInputDeviceList structures,
            the required buffer size is returned here.
            </param>
            <param name="Size">
            Size of a RawInputDeviceList structure.
            </param>
            <returns>
            If the function is successful, the return value is the number of devices stored in the buffer
            pointed to by RawInputDeviceList.
            If RawInputDeviceList is NULL, the return value is zero. 
            If NumDevices is smaller than needed to contain all the RawInputDeviceList structures,
            the return value is (UINT) -1 and the required buffer is returned in NumDevices.
            Calling GetLastError returns ERROR_INSUFFICIENT_BUFFER.
            On any other error, the function returns (UINT) -1 and GetLastError returns the error indication.
            </returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetRawInputDeviceInfo(System.IntPtr,OpenTK.Platform.Windows.RawInputDeviceInfoEnum,System.IntPtr,System.UInt32@)">
            <summary>
            Gets information about the raw input device.
            </summary>
            <param name="Device">
            Handle to the raw input device. This comes from the lParam of the WM_INPUT message,
            from RawInputHeader.Device, or from GetRawInputDeviceList.
            It can also be NULL if an application inserts input data, for example, by using SendInput.
            </param>
            <param name="Command">
            Specifies what data will be returned in pData. It can be one of the following values. 
            RawInputDeviceInfoEnum.PREPARSEDDATA
            Data points to the previously parsed data.
            RawInputDeviceInfoEnum.DEVICENAME
            Data points to a string that contains the device name. 
            For this Command only, the value in Size is the character count (not the byte count).
            RawInputDeviceInfoEnum.DEVICEINFO
            Data points to an RawInputDeviceInfo structure.
            </param>
            <param name="Data">
            ointer to a buffer that contains the information specified by Command.
            If Command is RawInputDeviceInfoEnum.DEVICEINFO, set RawInputDeviceInfo.Size to sizeof(RawInputDeviceInfo)
            before calling GetRawInputDeviceInfo. (This is done automatically in OpenTK)
            </param>
            <param name="Size">
            Pointer to a variable that contains the size, in bytes, of the data in Data.
            </param>
            <returns>
            <para>If successful, this function returns a non-negative number indicating the number of bytes copied to Data.</para>
            <para>If Data is not large enough for the data, the function returns -1. If Data is NULL, the function returns a value of zero. In both of these cases, Size is set to the minimum size required for the Data buffer.</para>
            <para>Call GetLastError to identify any other errors.</para>
            </returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetRawInputDeviceInfo(System.IntPtr,OpenTK.Platform.Windows.RawInputDeviceInfoEnum,OpenTK.Platform.Windows.RawInputDeviceInfo,System.UInt32@)">
            <summary>
            Gets information about the raw input device.
            </summary>
            <param name="Device">
            Handle to the raw input device. This comes from the lParam of the WM_INPUT message,
            from RawInputHeader.Device, or from GetRawInputDeviceList.
            It can also be NULL if an application inserts input data, for example, by using SendInput.
            </param>
            <param name="Command">
            Specifies what data will be returned in pData. It can be one of the following values. 
            RawInputDeviceInfoEnum.PREPARSEDDATA
            Data points to the previously parsed data.
            RawInputDeviceInfoEnum.DEVICENAME
            Data points to a string that contains the device name. 
            For this Command only, the value in Size is the character count (not the byte count).
            RawInputDeviceInfoEnum.DEVICEINFO
            Data points to an RawInputDeviceInfo structure.
            </param>
            <param name="Data">
            ointer to a buffer that contains the information specified by Command.
            If Command is RawInputDeviceInfoEnum.DEVICEINFO, set RawInputDeviceInfo.Size to sizeof(RawInputDeviceInfo)
            before calling GetRawInputDeviceInfo. (This is done automatically in OpenTK)
            </param>
            <param name="Size">
            Pointer to a variable that contains the size, in bytes, of the data in Data.
            </param>
            <returns>
            <para>If successful, this function returns a non-negative number indicating the number of bytes copied to Data.</para>
            <para>If Data is not large enough for the data, the function returns -1. If Data is NULL, the function returns a value of zero. In both of these cases, Size is set to the minimum size required for the Data buffer.</para>
            <para>Call GetLastError to identify any other errors.</para>
            </returns>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetRawInputData(System.IntPtr,OpenTK.Platform.Windows.GetRawInputDataEnum,System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            Gets the raw input from the specified device.
            </summary>
            <param name="RawInput">Handle to the RawInput structure. This comes from the lParam in WM_INPUT.</param>
            <param name="Command">
            Command flag. This parameter can be one of the following values. 
            RawInputDateEnum.INPUT
            Get the raw data from the RawInput structure.
            RawInputDateEnum.HEADER
            Get the header information from the RawInput structure.
            </param>
            <param name="Data">Pointer to the data that comes from the RawInput structure. This depends on the value of uiCommand. If Data is NULL, the required size of the buffer is returned in Size.</param>
            <param name="Size">Pointer to a variable that specifies the size, in bytes, of the data in Data.</param>
            <param name="SizeHeader">Size, in bytes, of RawInputHeader.</param>
            <returns>
            <para>If Data is NULL and the function is successful, the return value is 0. If Data is not NULL and the function is successful, the return value is the number of bytes copied into Data.</para>
            <para>If there is an error, the return value is (UINT)-1.</para>
            </returns>
            <remarks>
            GetRawInputData gets the raw input one RawInput structure at a time. In contrast, GetRawInputBuffer gets an array of RawInput structures.
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Windows.Functions.GetRawInputData(System.IntPtr,OpenTK.Platform.Windows.GetRawInputDataEnum,OpenTK.Platform.Windows.RawInput@,System.UInt32@,System.UInt32)">
            <summary>
            Gets the raw input from the specified device.
            </summary>
            <param name="RawInput">Handle to the RawInput structure. This comes from the lParam in WM_INPUT.</param>
            <param name="Command">
            Command flag. This parameter can be one of the following values. 
            RawInputDateEnum.INPUT
            Get the raw data from the RawInput structure.
            RawInputDateEnum.HEADER
            Get the header information from the RawInput structure.
            </param>
            <param name="Data">Pointer to the data that comes from the RawInput structure. This depends on the value of uiCommand. If Data is NULL, the required size of the buffer is returned in Size.</param>
            <param name="Size">Pointer to a variable that specifies the size, in bytes, of the data in Data.</param>
            <param name="SizeHeader">Size, in bytes, of RawInputHeader.</param>
            <returns>
            <para>If Data is NULL and the function is successful, the return value is 0. If Data is not NULL and the function is successful, the return value is the number of bytes copied into Data.</para>
            <para>If there is an error, the return value is (UINT)-1.</para>
            </returns>
            <remarks>
            GetRawInputData gets the raw input one RawInput structure at a time. In contrast, GetRawInputBuffer gets an array of RawInput structures.
            </remarks>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.lpCreateParams">
            <summary>
            Contains additional data which may be used to create the window.
            </summary>
            <remarks>
             If the window is being created as a result of a call to the CreateWindow
             or CreateWindowEx function, this member contains the value of the lpParam 
             parameter specified in the function call.
             <para>
            If the window being created is a multiple-document interface (MDI) client window,
            this member contains a pointer to a CLIENTCREATESTRUCT structure. If the window
            being created is a MDI child window, this member contains a pointer to an 
            MDICREATESTRUCT structure.
             </para>
            <para>
            Windows NT/2000/XP: If the window is being created from a dialog template,
            this member is the address of a SHORT value that specifies the size, in bytes,
            of the window creation data. The value is immediately followed by the creation data.
            </para>
            <para>
            Windows NT/2000/XP: You should access the data represented by the lpCreateParams member
            using a pointer that has been declared using the UNALIGNED type, because the pointer
            may not be DWORD aligned.
            </para>
            </remarks>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.hInstance">
            <summary>
            Handle to the module that owns the new window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.hMenu">
            <summary>
            Handle to the menu to be used by the new window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.hwndParent">
            <summary>
            Handle to the parent window, if the window is a child window.
            If the window is owned, this member identifies the owner window.
            If the window is not a child or owned window, this member is NULL.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.cy">
            <summary>
            Specifies the height of the new window, in pixels.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.cx">
            <summary>
            Specifies the width of the new window, in pixels.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.y">
            <summary>
            Specifies the y-coordinate of the upper left corner of the new window.
            If the new window is a child window, coordinates are relative to the parent window.
            Otherwise, the coordinates are relative to the screen origin.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.x">
            <summary>
            Specifies the x-coordinate of the upper left corner of the new window.
            If the new window is a child window, coordinates are relative to the parent window.
            Otherwise, the coordinates are relative to the screen origin.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.style">
            <summary>
            Specifies the style for the new window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.lpszName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the new window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.lpszClass">
            <summary>
            Either a pointer to a null-terminated string or an atom that specifies the class name
            of the new window.
            <remarks>
            Note  Because the lpszClass member can contain a pointer to a local (and thus inaccessable) atom,
            do not obtain the class name by using this member. Use the GetClassName function instead.
            </remarks>
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.CreateStruct.dwExStyle">
            <summary>
            Specifies the extended window style for the new window.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.PixelFormatDescriptor">
            <summary>
            Describes a pixel format. It is used when interfacing with the WINAPI to create a new Context.
            Found in WinGDI.h
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.LayerPlaneDescriptor">
            <summary>
            Describes the pixel format of a drawing surface.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.GlyphMetricsFloat">
            <summary>
            The <b>GlyphMetricsFloat</b> structure contains information about the placement and orientation of a glyph in a
            character cell.
            </summary>
            <remarks>The values of <b>GlyphMetricsFloat</b> are specified as notional units.</remarks>
            <seealso cref="T:OpenTK.Platform.Windows.PointFloat"/>
        </member>
        <member name="F:OpenTK.Platform.Windows.GlyphMetricsFloat.BlackBoxX">
            <summary>
            Specifies the width of the smallest rectangle (the glyph's black box) that completely encloses the glyph.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.GlyphMetricsFloat.BlackBoxY">
            <summary>
            Specifies the height of the smallest rectangle (the glyph's black box) that completely encloses the glyph.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.GlyphMetricsFloat.GlyphOrigin">
            <summary>
            Specifies the x and y coordinates of the upper-left corner of the smallest rectangle that completely encloses the glyph.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.GlyphMetricsFloat.CellIncX">
            <summary>
            Specifies the horizontal distance from the origin of the current character cell to the origin of the next character cell.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.GlyphMetricsFloat.CellIncY">
            <summary>
            Specifies the vertical distance from the origin of the current character cell to the origin of the next character cell.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.PointFloat">
            <summary>
            The <b>PointFloat</b> structure contains the x and y coordinates of a point.
            </summary>
            <seealso cref="T:OpenTK.Platform.Windows.GlyphMetricsFloat"/>
        </member>
        <member name="F:OpenTK.Platform.Windows.PointFloat.X">
            <summary>
            Specifies the horizontal (x) coordinate of a point.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.PointFloat.Y">
            <summary>
            Specifies the vertical (y) coordinate of a point.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.WindowsDisplayDevice">
            <summary>
            The DISPLAY_DEVICE structure receives information about the display device specified by the iDevNum parameter of the EnumDisplayDevices function.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.MINMAXINFO">
            <summary>
            Struct pointed to by WM_GETMINMAXINFO lParam
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.WindowPosition">
            <summary>
            The WindowPosition structure contains information about the size and position of a window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowPosition.hwnd">
            <summary>
            Handle to the window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowPosition.hwndInsertAfter">
            <summary>
            Specifies the position of the window in Z order (front-to-back position).
            This member can be a handle to the window behind which this window is placed,
            or can be one of the special values listed with the SetWindowPos function.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowPosition.x">
            <summary>
            Specifies the position of the left edge of the window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowPosition.y">
            <summary>
            Specifies the position of the top edge of the window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowPosition.cx">
            <summary>
            Specifies the window width, in pixels.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowPosition.cy">
            <summary>
            Specifies the window height, in pixels.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowPosition.flags">
            <summary>
            Specifies the window position.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.NOSIZE">
            <summary>
            Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.NOMOVE">
            <summary>
            Retains the current position (ignores the x and y parameters).
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.NOZORDER">
            <summary>
            Retains the current Z order (ignores the hwndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.NOREDRAW">
            <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs.
            This applies to the client area, the nonclient area (including the title bar and scroll bars),
            and any part of the parent window uncovered as a result of the window being moved.
            When this flag is set, the application must explicitly invalidate or redraw any parts
            of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.NOACTIVATE">
            <summary>
            Does not activate the window. If this flag is not set,
            the window is activated and moved to the top of either the topmost or non-topmost group
            (depending on the setting of the hwndInsertAfter member).
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.FRAMECHANGED">
            <summary>
            Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed.
            If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.SHOWWINDOW">
            <summary>
            Displays the window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.HIDEWINDOW">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area. If this flag is not specified,
            the valid contents of the client area are saved and copied back into the client area 
            after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.NOOWNERZORDER">
            <summary>
            Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.NOSENDCHANGING">
            <summary>
            Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.DRAWFRAME">
            <summary>
            Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.SetWindowPosFlags.NOREPOSITION">
            <summary>
            Same as the NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawInputDevice">
            <summary>
            Defines information for the raw input devices.
            </summary>
            <remarks>
            If RIDEV_NOLEGACY is set for a mouse or a keyboard, the system does not generate any legacy message for that device for the application. For example, if the mouse TLC is set with RIDEV_NOLEGACY, WM_LBUTTONDOWN and related legacy mouse messages are not generated. Likewise, if the keyboard TLC is set with RIDEV_NOLEGACY, WM_KEYDOWN and related legacy keyboard messages are not generated.
            </remarks>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDevice.UsagePage">
            <summary>
            Top level collection Usage page for the raw input device.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDevice.Usage">
            <summary>
            Top level collection Usage for the raw input device.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDevice.Flags">
            <summary>
            Mode flag that specifies how to interpret the information provided by UsagePage and Usage.
            It can be zero (the default) or one of the following values.
            By default, the operating system sends raw input from devices with the specified top level collection (TLC)
            to the registered application as long as it has the window focus. 
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDevice.Target">
            <summary>
            Handle to the target window. If NULL it follows the keyboard focus.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawInputDeviceList">
            <summary>
            Contains information about a raw input device.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceList.Device">
            <summary>
            Handle to the raw input device.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceList.Type">
            <summary>
            Type of device.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawInput">
            <summary>
            Contains the raw input from a device.
            </summary>
            <remarks>
            <para>The handle to this structure is passed in the lParam parameter of WM_INPUT.</para>
            <para>To get detailed information -- such as the header and the content of the raw input -- call GetRawInputData.</para>
            <para>To get device specific information, call GetRawInputDeviceInfo with the hDevice from RAWINPUTHEADER.</para>
            <para>Raw input is available only when the application calls RegisterRawInputDevices with valid device specifications.</para>
            </remarks>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawInputHeader">
            <summary>
            Contains the header information that is part of the raw input data.
            </summary>
            <remarks>
            To get more information on the device, use hDevice in a call to GetRawInputDeviceInfo.
            </remarks>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputHeader.Type">
            <summary>
            Type of raw input.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputHeader.Size">
            <summary>
            Size, in bytes, of the entire input packet of data. This includes the RawInput struct plus possible extra input reports in the RAWHID variable length array.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputHeader.Device">
            <summary>
            Handle to the device generating the raw input data.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputHeader.Param">
            <summary>
            Value passed in the wParam parameter of the WM_INPUT message.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawKeyboard">
            <summary>
            Contains information about the state of the keyboard.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawKeyboard.MakeCode">
            <summary>
            Scan code from the key depression. The scan code for keyboard overrun is KEYBOARD_OVERRUN_MAKE_CODE.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawKeyboard.Flags">
            <summary>
            Flags for scan code information. It can be one or more of the following.
            RI_KEY_MAKE
            RI_KEY_BREAK
            RI_KEY_E0
            RI_KEY_E1
            RI_KEY_TERMSRV_SET_LED
            RI_KEY_TERMSRV_SHADOW
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawKeyboard.Reserved">
            <summary>
            Reserved; must be zero.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawKeyboard.VKey">
            <summary>
            Microsoft Windows message compatible virtual-key code. For more information, see Virtual-Key Codes.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawKeyboard.Message">
            <summary>
            Corresponding window message, for example WM_KEYDOWN, WM_SYSKEYDOWN, and so forth.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawKeyboard.ExtraInformation">
            <summary>
            Device-specific additional information for the event.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawMouse">
            <summary>
            Contains information about the state of the mouse.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawMouse.buttonFlags">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawMouse.ButtonData">
            <summary>
            If usButtonFlags is RI_MOUSE_WHEEL, this member is a signed value that specifies the wheel delta.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawMouse.RawButtons">
            <summary>
            Raw state of the mouse buttons.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawMouse.LastX">
            <summary>
            Motion in the X direction. This is signed relative motion or absolute motion, depending on the value of usFlags.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawMouse.LastY">
            <summary>
            Motion in the Y direction. This is signed relative motion or absolute motion, depending on the value of usFlags.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawMouse.ExtraInformation">
            <summary>
            Device-specific additional information for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Platform.Windows.RawMouse.Flags">
            <summary>
            Mouse state. This member can be any reasonable combination of the following. 
            MOUSE_ATTRIBUTES_CHANGED
            Mouse attributes changed; application needs to query the mouse attributes.
            MOUSE_MOVE_RELATIVE
            Mouse movement data is relative to the last mouse position.
            MOUSE_MOVE_ABSOLUTE
            Mouse movement data is based on absolute position.
            MOUSE_VIRTUAL_DESKTOP
            Mouse coordinates are mapped to the virtual desktop (for a multiple monitor system).
            </summary>
        </member>
        <member name="P:OpenTK.Platform.Windows.RawMouse.ButtonFlags">
            <summary>
            Transition state of the mouse buttons.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawHID">
            <summary>
            The RawHID structure describes the format of the raw input
            from a Human Interface Device (HID).
            </summary>
            <remarks>
            Each WM_INPUT can indicate several inputs, but all of the inputs
            come from the same HID. The size of the bRawData array is
            dwSizeHid * dwCount.
            </remarks>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawHID.SizeHid">
            <summary>
            Size, in bytes, of each HID input in bRawData.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawHID.Count">
            <summary>
            Number of HID inputs in bRawData.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawHID.RawData">
            <summary>
            Raw input data as an array of bytes.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawInputDeviceInfo">
            <summary>
            Defines the raw input data coming from any device.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceInfo.Size">
            <summary>
            Size, in bytes, of the RawInputDeviceInfo structure.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceInfo.Type">
            <summary>
            Type of raw input data.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawInputHIDDeviceInfo">
            <summary>
            Defines the raw input data coming from the specified Human Interface Device (HID).
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputHIDDeviceInfo.VendorId">
            <summary>
            Vendor ID for the HID.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputHIDDeviceInfo.ProductId">
            <summary>
            Product ID for the HID.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputHIDDeviceInfo.VersionNumber">
            <summary>
            Version number for the HID.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputHIDDeviceInfo.UsagePage">
            <summary>
            Top-level collection Usage Page for the device.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputHIDDeviceInfo.Usage">
            <summary>
            Top-level collection Usage for the device.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawInputKeyboardDeviceInfo">
            <summary>
            Defines the raw input data coming from the specified keyboard.
            </summary>
            <remarks>
            For the keyboard, the Usage Page is 1 and the Usage is 6.
            </remarks>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputKeyboardDeviceInfo.Type">
            <summary>
            Type of the keyboard.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputKeyboardDeviceInfo.SubType">
            <summary>
            Subtype of the keyboard.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputKeyboardDeviceInfo.KeyboardMode">
            <summary>
            Scan code mode.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputKeyboardDeviceInfo.NumberOfFunctionKeys">
            <summary>
            Number of function keys on the keyboard.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputKeyboardDeviceInfo.NumberOfIndicators">
            <summary>
            Number of LED indicators on the keyboard.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputKeyboardDeviceInfo.NumberOfKeysTotal">
            <summary>
            Total number of keys on the keyboard.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawInputMouseDeviceInfo">
            <summary>
            Defines the raw input data coming from the specified mouse.
            </summary>
            <remarks>
            For the keyboard, the Usage Page is 1 and the Usage is 2.
            </remarks>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputMouseDeviceInfo.Id">
            <summary>
            ID for the mouse device.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputMouseDeviceInfo.NumberOfButtons">
            <summary>
            Number of buttons for the mouse.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputMouseDeviceInfo.SampleRate">
            <summary>
            Number of data points per second. This information may not be applicable for every mouse device.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputMouseDeviceInfo.HasHorizontalWheel">
            <summary>
            TRUE if the mouse has a wheel for horizontal scrolling; otherwise, FALSE.
            </summary>
            <remarks>
            This member is only supported under Microsoft Windows Vista and later versions.
            </remarks>
        </member>
        <member name="T:OpenTK.Platform.Windows.GWL">
            <summary>
            Window field offsets for GetWindowLong() and GetWindowLongPtr().
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.Rectangle">
            <summary>
            Defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
            <remarks>
            By convention, the right and bottom edges of the rectangle are normally considered exclusive. In other words, the pixel whose coordinates are (right, bottom) lies immediately outside of the the rectangle. For example, when RECT is passed to the FillRect function, the rectangle is filled up to, but not including, the right column and bottom row of pixels. This structure is identical to the RECTL structure.
            </remarks>
        </member>
        <member name="F:OpenTK.Platform.Windows.Rectangle.left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.Rectangle.top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.Rectangle.right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.Rectangle.bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.WindowInfo">
            <summary>
            Contains window information.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowInfo.Size">
            <summary>
            The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowInfo.Window">
            <summary>
            Pointer to a RECT structure that specifies the coordinates of the window. 
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowInfo.Client">
            <summary>
            Pointer to a RECT structure that specifies the coordinates of the client area. 
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowInfo.Style">
            <summary>
            The window styles. For a table of window styles, see CreateWindowEx. 
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowInfo.ExStyle">
            <summary>
            The extended window styles. For a table of extended window styles, see CreateWindowEx.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowInfo.WindowStatus">
            <summary>
            The window status. If this member is WS_ACTIVECAPTION, the window is active. Otherwise, this member is zero.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowInfo.WindowBordersX">
            <summary>
            The width of the window border, in pixels. 
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowInfo.WindowBordersY">
            <summary>
            The height of the window border, in pixels.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowInfo.WindowType">
            <summary>
            The window class atom (see RegisterClass). 
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowInfo.CreatorVersion">
            <summary>
            The Microsoft Windows version of the application that created the window. 
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceFlags.REMOVE">
            <summary>
            If set, this removes the top level collection from the inclusion list.
            This tells the operating system to stop reading from a device which matches the top level collection.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceFlags.EXCLUDE">
            <summary>
            If set, this specifies the top level collections to exclude when reading a complete usage page.
            This flag only affects a TLC whose usage page is already specified with RawInputDeviceEnum.PAGEONLY. 
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceFlags.PAGEONLY">
            <summary>
            If set, this specifies all devices whose top level collection is from the specified UsagePage.
            Note that usUsage must be zero. To exclude a particular top level collection, use EXCLUDE.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceFlags.NOLEGACY">
            <summary>
            If set, this prevents any devices specified by UsagePage or Usage from generating legacy messages.
            This is only for the mouse and keyboard. See RawInputDevice Remarks.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceFlags.INPUTSINK">
            <summary>
            If set, this enables the caller to receive the input even when the caller is not in the foreground.
            Note that Target must be specified in RawInputDevice.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceFlags.CAPTUREMOUSE">
            <summary>
            If set, the mouse button click does not activate the other window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceFlags.NOHOTKEYS">
            <summary>
            If set, the application-defined keyboard device hotkeys are not handled.
            However, the system hotkeys; for example, ALT+TAB and CTRL+ALT+DEL, are still handled.
            By default, all keyboard hotkeys are handled.
            NOHOTKEYS can be specified even if NOLEGACY is not specified and Target is NULL in RawInputDevice.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceFlags.APPKEYS">
            <summary>
            Microsoft Windows XP Service Pack 1 (SP1): If set, the application command keys are handled. APPKEYS can be specified only if NOLEGACY is specified for a keyboard device.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawInputDeviceFlags.EXINPUTSINK">
            <summary>
            If set, this enables the caller to receive input in the background only if the foreground application
            does not process it. In other words, if the foreground application is not registered for raw input,
            then the background application that is registered will receive the input.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.RawMouseFlags">
            <summary>
            Mouse indicator flags (found in winuser.h).
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawMouseFlags.MOUSE_MOVE_RELATIVE">
            <summary>
            LastX/Y indicate relative motion.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawMouseFlags.MOUSE_MOVE_ABSOLUTE">
            <summary>
            LastX/Y indicate absolute motion.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawMouseFlags.MOUSE_VIRTUAL_DESKTOP">
            <summary>
            The coordinates are mapped to the virtual desktop.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.RawMouseFlags.MOUSE_ATTRIBUTES_CHANGED">
            <summary>
            Requery for mouse attributes.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.MouseKeys">
            <summary>
            Enumerates available mouse keys (suitable for use in WM_MOUSEMOVE messages).
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.QueueStatusFlags">
            <summary>
            Queue status flags for GetQueueStatus() and MsgWaitForMultipleObjects()
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.KEY">
            <summary>
            A WM_KEYUP, WM_KEYDOWN, WM_SYSKEYUP, or WM_SYSKEYDOWN message is in the queue.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.MOUSEMOVE">
            <summary>
            A WM_MOUSEMOVE message is in the queue.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.MOUSEBUTTON">
            <summary>
            A mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on).
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.POSTMESSAGE">
            <summary>
            A posted message (other than those listed here) is in the queue.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.TIMER">
            <summary>
            A WM_TIMER message is in the queue.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.PAINT">
            <summary>
            A WM_PAINT message is in the queue.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.SENDMESSAGE">
            <summary>
            A message sent by another thread or application is in the queue.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.HOTKEY">
            <summary>
            A WM_HOTKEY message is in the queue.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.ALLPOSTMESSAGE">
            <summary>
            A posted message (other than those listed here) is in the queue.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.RAWINPUT">
            <summary>
            A raw input message is in the queue. For more information, see Raw Input.
            Windows XP and higher only.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.MOUSE">
            <summary>
            A WM_MOUSEMOVE message or mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on).
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.INPUT">
            <summary>
            An input message is in the queue. This is composed of KEY, MOUSE and RAWINPUT.
            Windows XP and higher only.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.INPUT_LEGACY">
            <summary>
            An input message is in the queue. This is composed of QS_KEY and QS_MOUSE.
            Windows 2000 and earlier.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.ALLEVENTS">
            <summary>
            An input, WM_TIMER, WM_PAINT, WM_HOTKEY, or posted message is in the queue.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.QueueStatusFlags.ALLINPUT">
            <summary>
            Any message is in the queue.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowMessage.NCXBUTTONDOWN">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowMessage.NCXBUTTONUP">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowMessage.NCXBUTTONDBLCLK">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowMessage.XBUTTONDOWN">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowMessage.XBUTTONUP">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.WindowMessage.XBUTTONDBLCLK">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.ShowWindowCommand">
            <summary>
            ShowWindow() Commands
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.SHOWNORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.SHOWNOACTIVATE">
            <summary>
            Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.SHOWNA">
            <summary>
            Displays the window in its current size and position. This value is similar to SW_SHOW, except the window is not activated.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.RESTORE">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.ShowWindowCommand.FORCEMINIMIZE">
            <summary>
            Windows 2000/XP: Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.ShowWindowMessageIdentifiers">
            <summary>
            Identifiers for the WM_SHOWWINDOW message
            </summary>
        </member>
        <member name="T:OpenTK.Platform.Windows.GdiCharset">
            <summary>
            Enumerates the available character sets.
            </summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.MapVirtualKeyType.VirtualKeyToScanCode">
            <summary>uCode is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not distinguish between left- and right-hand keys, the left-hand scan code is returned. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.MapVirtualKeyType.ScanCodeToVirtualKey">
            <summary>uCode is a scan code and is translated into a virtual-key code that does not distinguish between left- and right-hand keys. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.MapVirtualKeyType.VirtualKeyToCharacter">
            <summary>uCode is a virtual-key code and is translated into an unshifted character value in the low-order word of the return value. Dead keys (diacritics) are indicated by setting the top bit of the return value. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:OpenTK.Platform.Windows.MapVirtualKeyType.ScanCodeToVirtualKeyExtended">
            <summary>Windows NT/2000/XP: uCode is a scan code and is translated into a virtual-key code that distinguishes between left- and right-hand keys. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="T:OpenTK.Platform.Utilities">
            <summary>
            Provides cross-platform utilities to help interact with the underlying platform.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Utilities.LoadExtensions(System.Type)">
            <internal />
            <summary>Loads all extensions for the specified class. This function is intended
            for OpenGL, Wgl, Glx, OpenAL etc.</summary>
            <param name="type">The class to load extensions for.</param>
            <remarks>
            <para>The Type must contain a nested class called "Delegates".</para>
            <para>
            The Type must also implement a static function called LoadDelegate with the
            following signature:
            <code>static Delegate LoadDelegate(string name, Type signature)</code>
            </para>
            <para>This function allocates memory.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Utilities.TryLoadExtension(System.Type,System.String)">
            <internal />
            <summary>Loads the specified extension for the specified class. This function is intended
            for OpenGL, Wgl, Glx, OpenAL etc.</summary>
            <param name="type">The class to load extensions for.</param>
            <param name="extension">The extension to load.</param>
            <remarks>
            <para>The Type must contain a nested class called "Delegates".</para>
            <para>
            The Type must also implement a static function called LoadDelegate with the
            following signature:
            <code>static Delegate LoadDelegate(string name, Type signature)</code>
            </para>
            <para>This function allocates memory.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Utilities.CreateGraphicsContext(OpenTK.Graphics.GraphicsMode,OpenTK.Platform.IWindowInfo,System.Int32,System.Int32,OpenTK.Graphics.GraphicsContextFlags)">
             <summary>
             Creates a Graphics context and for a window or control.
             </summary>
             <param name="mode"></param>
            
             <param name="major">Major version number of OpenGL context to create.</param>
             <param name="minor">Minor version number of OpenGL context to create.</param>
             <param name="flags"></param>
             <param name="context"></param>
             <param name="info"></param>
        </member>
        <member name="M:OpenTK.Platform.Utilities.CreateGraphicsContext(OpenTK.Graphics.GraphicsMode,System.Windows.Forms.Control,OpenTK.Graphics.GraphicsContext@,OpenTK.Platform.IWindowInfo@)">
            <summary>
            Creates GraphicsContext and IWindowInfo objects for a WinForms control.
            </summary>
            <param name="cntrl"></param>
            <param name="context"></param>
            <param name="info"></param>
            <param name="mode"></param>
        </member>
        <member name="M:OpenTK.Platform.Utilities.CreateGraphicsContext(OpenTK.Graphics.GraphicsMode,System.IntPtr,OpenTK.Graphics.GraphicsContext@,OpenTK.Platform.IWindowInfo@)">
            <summary>
            Creates GraphicsContext and IWindowInfo objects for a WinForms control.
            </summary>
            <param name="cntrlHandle"></param>
            <param name="context"></param>
            <param name="info"></param>
            <param name="mode"></param>
        </member>
        <member name="M:OpenTK.Platform.Utilities.CreateWindowInfo(OpenTK.Graphics.GraphicsMode,System.Windows.Forms.Control)">
            <summary>
            Creates an object which implements the IWindowInfo interface for the platform
            currently running on.  This will create a handle for the control, so it is not
            recommended that this be called in the constructor of a custom control.
            </summary>
            <param name="mode">The desired GraphicsMode for this window.</param>
            <param name="cntrl">A <see cref="T:System.Windows.Forms.Control"/> to get the IWindowInfo from.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Platform.Utilities.CreateWindowInfo(OpenTK.Graphics.GraphicsMode,System.IntPtr)">
            <summary>
            Creates an object which implements the IWindowInfo interface for the platform
            currently running on.  
            </summary>
            <param name="mode">The desired GraphicsMode for this window.</param>
            <param name="controlHandle">The handle to the control, obtained from Control.Handle.</param>
            <returns></returns>
        </member>
        <member name="T:OpenTK.Math.Functions">
            <summary>
            Contains mathematical functions for the OpenTK.Math toolkit.
            </summary>
        </member>
        <member name="M:OpenTK.Math.Functions.NextPowerOfTwo(System.Int64)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.Math.Functions.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.Math.Functions.Factorial(System.Int32)">
            <summary>
            Calculates the factorial of a given natural number.
            </summary>
            <param name="n">The number.</param>
            <returns>n!</returns>
        </member>
        <member name="M:OpenTK.Math.Functions.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Calculates the binomial coefficient <paramref name="n"/> above <paramref name="k"/>.
            </summary>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <returns>n! / (k! * (n - k)!)</returns>
        </member>
        <member name="M:OpenTK.Math.Functions.InverseSqrtFast(System.Single)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenTK.Math.Functions.DegreesToRadians(System.Single)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="degrees">An angle in degrees</param>
            <returns>The angle expressed in radians</returns>
        </member>
        <member name="M:OpenTK.Math.Functions.RadiansToDegrees(System.Single)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="radians">An angle in radians</param>
            <returns>The angle expressed in degrees</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.Enable(OpenTK.Audio.ALCapability)">
            <summary>This function enables a feature of the OpenAL driver. There are no capabilities defined in OpenAL 1.1 to be used with this function, but it may be used by an extension.</summary>
            <param name="capability">The name of a capability to enable.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Disable(OpenTK.Audio.ALCapability)">
            <summary>This function disables a feature of the OpenAL driver.</summary>
            <param name="capability">The name of a capability to disable.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.IsEnabled(OpenTK.Audio.ALCapability)">
            <summary>This function returns a boolean indicating if a specific feature is enabled in the OpenAL driver.</summary>
            <param name="capability">The name of a capability to enable.</param>
            <returns>True if enabled, False if disabled.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.Get(OpenTK.Audio.ALGetString)">
            <summary>This function retrieves an OpenAL string property.</summary>
            <param name="param">The property to be returned: Vendor, Version, Renderer and Extensions</param>
            <returns>Returns a pointer to a null-terminated string.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GetErrorString(OpenTK.Audio.ALError)">
            <summary>This function retrieves an OpenAL string property.</summary>
            <param name="param">The human-readable errorstring to be returned.</param>
            <returns>Returns a pointer to a null-terminated string.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.Get(OpenTK.Audio.ALGetInteger)">
            <summary>This function returns an integer OpenAL state.</summary>
            <param name="param">the state to be queried: DistanceModel.</param>
            <returns>The integer state described by param will be returned.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.Get(OpenTK.Audio.ALGetFloat)">
            <summary>This function returns a floating point OpenAL state.</summary>
            <param name="param">the state to be queried: DopplerFactor, SpeedOfSound.</param>
            <returns>The floating point state described by param will be returned.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GetError">
            <summary>Error support. Obtain the most recent error generated in the AL state machine. When an error is detected by AL, a flag is set and the error code is recorded. Further errors, if they occur, do not affect this recorded code. When alGetError is called, the code is returned and the flag is cleared, so that a further error will again record its code.</summary>
            <returns>The first error that occured. can be used with AL.GetString. Returns an Alenum representing the error state. When an OpenAL error occurs, the error state is set and will not be changed until the error state is retrieved using alGetError. Whenever alGetError is called, the error state is cleared and the last state (the current state when the call was made) is returned. To isolate error detection to a specific portion of code, alGetError should be called before the isolated section to clear the current error state.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.IsExtensionPresent(System.String)">
            <summary>This function tests if a specific Extension is available for the OpenAL driver.</summary>
             <param name="extname">A string naming the desired extension. Example: "EAX-RAM"</param>
             <returns>Returns True if the Extension is available or False if not available.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GetProcAddress(System.String)">
            <summary>This function returns the address of an OpenAL extension function. Handle with care.</summary>
            <param name="fname">A string containing the function name.</param>
            <returns>The return value is a pointer to the specified function. The return value will be IntPtr.Zero if the function is not found.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GetEnumValue(System.String)">
            <summary>This function returns the enumeration value of an OpenAL token, described by a string.</summary>
            <param name="ename">A string describing an OpenAL token. Example "AL_DISTANCE_MODEL"</param>
            <returns>Returns the actual ALenum described by a string. Returns 0 if the string doesn’t describe a valid OpenAL token.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.Listener(OpenTK.Audio.ALListenerf,System.Single)">
            <summary>This function sets a floating point property for the listener.</summary>
            <param name="param">The name of the attribute to be set: ALListenerf.Gain</param>
            <param name="value">The float value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Listener(OpenTK.Audio.ALListener3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a floating point property for the listener.</summary>
            <param name="param">The name of the attribute to set: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="value1">The value to set the attribute to.</param>
            <param name="value2">The value to set the attribute to.</param>
            <param name="value3">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Listener(OpenTK.Audio.ALListener3f,OpenTK.Math.Vector3@)">
            <summary>This function sets a Math.Vector3 property for the listener.</summary>
            <param name="param">The name of the attribute to set: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="values">The Math.Vector3 to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Listener(OpenTK.Audio.ALListenerfv,System.Single[]@)">
            <summary>This function sets a floating point-vector property of the listener.</summary>
            <param name="param">The name of the attribute to be set: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation</param>
            <param name="values">Pointer to floating point-vector values.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Listener(OpenTK.Audio.ALListenerfv,OpenTK.Math.Vector3@,OpenTK.Math.Vector3@)">
            <summary>This function sets two Math.Vector3 properties of the listener.</summary>
            <param name="param">The name of the attribute to be set: ALListenerfv.Orientation</param>
            <param name="at">A Math.Vector3 for the At-Vector.</param>
            <param name="up">A Math.Vector3 for the Up-Vector.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetListener(OpenTK.Audio.ALListenerf,System.Single@)">
            <summary>This function retrieves a floating point property of the listener.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListenerf.Gain</param>
            <param name="value">a pointer to the floating point value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetListener(OpenTK.Audio.ALListener3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves a set of three floating point values from a property of the listener.</summary>
            <param name="param">The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="value1">Pointers to the three floating point being retrieved.</param>
            <param name="value2">Pointers to the three floating point being retrieved.</param>
            <param name="value3">Pointers to the three floating point being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetListener(OpenTK.Audio.ALListener3f,OpenTK.Math.Vector3@)">
            <summary>This function retrieves a Math.Vector3 from a property of the listener.</summary>
            <param name="param">The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="values">A Math.Vector3 to hold the three floats being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetListener(OpenTK.Audio.ALListenerfv,System.Single*)">
            <summary>This function retrieves a floating point-vector property of the listener. You must pin it manually.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation</param>
            <param name="values">A pointer to the floating point-vector value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetListener(OpenTK.Audio.ALListenerfv,OpenTK.Math.Vector3@,OpenTK.Math.Vector3@)">
            <summary>This function retrieves two Math.Vector3 properties of the listener.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListenerfv.Orientation</param>
            <param name="at">A Math.Vector3 for the At-Vector.</param>
            <param name="up">A Math.Vector3 for the Up-Vector.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GenSources(System.Int32,System.UInt32@)">
            <summary>This function generates one or more sources. References to sources are uint values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="n">The number of sources to be generated.</param>
            <param name="sources">Pointer to an array of uint values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GenSources(System.Int32,System.Int32@)">
            <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="n">The number of sources to be generated.</param>
            <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GenSources(System.Int32[])">
            <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GenSources(System.Int32)">
            <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="n">The number of sources to be generated.</param>
            <returns>Pointer to an array of int values which will store the names of the new sources.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GenSource">
            <summary>This function generates one source only. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <returns>Pointer to an int value which will store the name of the new source.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GenSource(System.UInt32@)">
            <summary>This function generates one source only. References to sources are uint values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="source">Pointer to an uint value which will store the name of the new source.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteSources(System.Int32,System.UInt32*)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Pointer to an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteSources(System.Int32,System.UInt32@)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Reference to a single source, or an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteSources(System.Int32,System.Int32@)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Reference to a single source, or an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteSources(System.UInt32[])">
            <summary>This function deletes one or more sources.</summary>
            <param name="sources">An array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteSources(System.Int32[])">
            <summary>This function deletes one or more sources.</summary>
            <param name="sources">An array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteSource(System.UInt32@)">
            <summary>This function deletes one source only.</summary>
            <param name="source">Pointer to a source name identifying the source to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteSource(System.Int32)">
            <summary>This function deletes one source only.</summary>
            <param name="source">Pointer to a source name identifying the source to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.IsSource(System.UInt32)">
            <summary>This function tests if a source name is valid, returning True if valid and False if not.</summary>
            <param name="sid">A source name to be tested for validity</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.IsSource(System.Int32)">
            <summary>This function tests if a source name is valid, returning True if valid and False if not.</summary>
            <param name="sid">A source name to be tested for validity</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.UInt32,OpenTK.Audio.ALSourcef,System.Single)">
            <summary>This function sets a floating point property of a source.</summary>
            <param name="sid">Source name whose attribute is being set</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.Int32,OpenTK.Audio.ALSourcef,System.Single)">
            <summary>This function sets a floating point property of a source.</summary>
            <param name="sid">Source name whose attribute is being set</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.UInt32,OpenTK.Audio.ALSource3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a source property requiring three floating point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">The three ALfloat values which the attribute will be set to.</param>
            <param name="value2">The three ALfloat values which the attribute will be set to.</param>
            <param name="value3">The three ALfloat values which the attribute will be set to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.Int32,OpenTK.Audio.ALSource3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a source property requiring three floating point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">The three ALfloat values which the attribute will be set to.</param>
            <param name="value2">The three ALfloat values which the attribute will be set to.</param>
            <param name="value3">The three ALfloat values which the attribute will be set to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.UInt32,OpenTK.Audio.ALSource3f,OpenTK.Math.Vector3@)">
            <summary>This function sets a source property requiring three floating point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 which the attribute will be set to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.Int32,OpenTK.Audio.ALSource3f,OpenTK.Math.Vector3@)">
            <summary>This function sets a source property requiring three floating point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 which the attribute will be set to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.UInt32,OpenTK.Audio.ALSourcei,System.Int32)">
            <summary>This function sets an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourcei.SourceRelative, ConeInnerAngle, ConeOuterAngle, Looping, Buffer, SourceState.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.Int32,OpenTK.Audio.ALSourcei,System.Int32)">
            <summary>This function sets an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourcei.SourceRelative, ConeInnerAngle, ConeOuterAngle, Looping, Buffer, SourceState.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.UInt32,OpenTK.Audio.ALSourceb,System.Boolean)">
            <summary>This function sets an bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.Int32,OpenTK.Audio.ALSourceb,System.Boolean)">
            <summary>This function sets an bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.BindBufferToSource(System.UInt32,System.UInt32)">
            <summary>(Helper) Binds a Buffer to a Source handle.</summary>
            <param name="source">Source name to attach the Buffer to.</param>
            <param name="buffer">Buffer name which is attached to the Source.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.BindBufferToSource(System.Int32,System.Int32)">
            <summary>(Helper) Binds a Buffer to a Source handle.</summary>
            <param name="source">Source name to attach the Buffer to.</param>
            <param name="buffer">Buffer name which is attached to the Source.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.UInt32,OpenTK.Audio.ALSource3i,System.Int32,System.Int32,System.Int32)">
             <summary>This function sets 3 integer properties of a source. This property is used to establish connections between Sources and Auxiliary Effect Slots.</summary>
             <param name="sid">Source name whose attribute is being set.</param>
             <param name="param">The name of the attribute to set: EfxAuxiliarySendFilter</param>
             <param name="value1">The value to set the attribute to. (EFX Extension) The destination Auxiliary Effect Slot ID</param>
             <param name="value2">The value to set the attribute to. (EFX Extension) The Auxiliary Send number.</param>
            <param name="value3">The value to set the attribute to. (EFX Extension) optional Filter ID.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.Source(System.Int32,OpenTK.Audio.ALSource3i,System.Int32,System.Int32,System.Int32)">
             <summary>This function sets 3 integer properties of a source. This property is used to establish connections between Sources and Auxiliary Effect Slots.</summary>
             <param name="sid">Source name whose attribute is being set.</param>
             <param name="param">The name of the attribute to set: EfxAuxiliarySendFilter</param>
             <param name="value1">The value to set the attribute to. (EFX Extension) The destination Auxiliary Effect Slot ID</param>
             <param name="value2">The value to set the attribute to. (EFX Extension) The Auxiliary Send number.</param>
            <param name="value3">The value to set the attribute to. (EFX Extension) optional Filter ID.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSource(System.UInt32,OpenTK.Audio.ALSourcef,System.Single@)">
            <summary>This function retrieves a floating point property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">A pointer to the floating point value being retrieved</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSource(System.Int32,OpenTK.Audio.ALSourcef,System.Single@)">
            <summary>This function retrieves a floating point property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">A pointer to the floating point value being retrieved</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSource(System.UInt32,OpenTK.Audio.ALSource3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves three floating point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">Pointer to the value to retrieve.</param>
            <param name="value2">Pointer to the value to retrieve.</param>
            <param name="value3">Pointer to the value to retrieve.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSource(System.Int32,OpenTK.Audio.ALSource3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves three floating point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">Pointer to the value to retrieve.</param>
            <param name="value2">Pointer to the value to retrieve.</param>
            <param name="value3">Pointer to the value to retrieve.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSource(System.UInt32,OpenTK.Audio.ALSource3f,OpenTK.Math.Vector3@)">
            <summary>This function retrieves three floating point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 to retrieve the values to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSource(System.Int32,OpenTK.Audio.ALSource3f,OpenTK.Math.Vector3@)">
            <summary>This function retrieves three floating point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 to retrieve the values to.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSource(System.UInt32,OpenTK.Audio.ALGetSourcei,System.Int32@)">
            <summary>This function retrieves an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.</param>
            <param name="value">A pointer to the integer value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSource(System.Int32,OpenTK.Audio.ALGetSourcei,System.Int32@)">
            <summary>This function retrieves an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.</param>
            <param name="value">A pointer to the integer value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSource(System.UInt32,OpenTK.Audio.ALSourceb,System.Boolean@)">
            <summary>This function retrieves a bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to get: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">A pointer to the bool value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSource(System.Int32,OpenTK.Audio.ALSourceb,System.Boolean@)">
            <summary>This function retrieves a bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to get: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">A pointer to the bool value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePlay(System.Int32,System.UInt32*)">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePlay(System.Int32,System.UInt32[])">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePlay(System.Int32,System.Int32[])">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePlay(System.Int32,System.UInt32@)">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceStop(System.Int32,System.UInt32*)">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceStop(System.Int32,System.UInt32[])">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceStop(System.Int32,System.Int32[])">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceStop(System.Int32,System.UInt32@)">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceRewind(System.Int32,System.UInt32*)">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceRewind(System.Int32,System.UInt32[])">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceRewind(System.Int32,System.Int32[])">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceRewind(System.Int32,System.UInt32@)">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePause(System.Int32,System.UInt32*)">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePause(System.Int32,System.UInt32[])">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePause(System.Int32,System.Int32[])">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePause(System.Int32,System.UInt32@)">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePlay(System.UInt32)">
            <summary>This function plays, replays or resumes a source. The playing source will have it's state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="sid">The name of the source to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePlay(System.Int32)">
            <summary>This function plays, replays or resumes a source. The playing source will have it's state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="sid">The name of the source to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceStop(System.UInt32)">
            <summary>This function stops a source. The stopped source will have it's state changed to ALSourceState.Stopped.</summary>
            <param name="sid">The name of the source to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceStop(System.Int32)">
            <summary>This function stops a source. The stopped source will have it's state changed to ALSourceState.Stopped.</summary>
            <param name="sid">The name of the source to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceRewind(System.UInt32)">
            <summary>This function stops the source and sets its state to ALSourceState.Initial.</summary>
            <param name="sid">The name of the source to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceRewind(System.Int32)">
            <summary>This function stops the source and sets its state to ALSourceState.Initial.</summary>
            <param name="sid">The name of the source to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePause(System.UInt32)">
            <summary>This function pauses a source. The paused source will have its state changed to ALSourceState.Paused.</summary>
            <param name="sid">The name of the source to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourcePause(System.Int32)">
            <summary>This function pauses a source. The paused source will have its state changed to ALSourceState.Paused.</summary>
            <param name="sid">The name of the source to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceQueueBuffers(System.UInt32,System.Int32,System.UInt32*)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceQueueBuffers(System.UInt32,System.Int32,System.UInt32[])">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32[])">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceQueueBuffers(System.UInt32,System.Int32,System.UInt32@)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceQueueBuffer(System.Int32,System.Int32)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="source">The name of the source to queue buffers onto.</param>
            <param name="buffer">The name of the buffer to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceUnqueueBuffers(System.UInt32,System.Int32,System.UInt32*)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceUnqueueBuffers(System.UInt32,System.Int32,System.UInt32[])">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32[])">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceUnqueueBuffers(System.UInt32,System.Int32,System.UInt32@)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32@)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceUnqueueBuffer(System.Int32)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SourceUnqueueBuffers(System.Int32,System.Int32)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GenBuffers(System.Int32,System.UInt32*)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GenBuffers(System.Int32,System.UInt32@)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GenBuffers(System.Int32,System.Int32@)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GenBuffers(System.Int32)">
            <summary>This function generates one or more buffers, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <returns>Pointer to an array of uint values which will store the names of the new buffers.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GenBuffer">
            <summary>This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <returns>Pointer to an uint value which will store the name of the new buffer.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GenBuffer(System.UInt32@)">
            <summary>This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="buffer">Pointer to an uint value which will store the names of the new buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteBuffers(System.Int32,System.UInt32*)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteBuffers(System.Int32,System.UInt32@)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteBuffers(System.Int32,System.Int32@)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteBuffers(System.UInt32[])">
            <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffers">Pointer to a buffer name identifying the buffer to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteBuffers(System.Int32[])">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteBuffer(System.UInt32@)">
            <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffer">Pointer to a buffer name identifying the buffer to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DeleteBuffer(System.Int32)">
            <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffer">Pointer to a buffer name identifying the buffer to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.IsBuffer(System.UInt32)">
            <summary>This function tests if a buffer name is valid, returning True if valid, False if not.</summary>
            <param name="bid">A buffer Handle previously allocated with <see cref="M:OpenTK.Audio.AL.GenBuffers(System.Int32)"/>.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.IsBuffer(System.Int32)">
            <summary>This function tests if a buffer name is valid, returning True if valid, False if not.</summary>
            <param name="bid">A buffer Handle previously allocated with <see cref="M:OpenTK.Audio.AL.GenBuffers(System.Int32)"/>.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.BufferData(System.UInt32,OpenTK.Audio.ALFormat,System.IntPtr,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Pointer to the audio buffer. YOU MUST PIN THIS MANUALLY.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.BufferData(System.Int32,OpenTK.Audio.ALFormat,System.IntPtr,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Pointer to the audio buffer. YOU MUST PIN THIS MANUALLY.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.BufferData(System.UInt32,OpenTK.Audio.SoundData)">
            <summary>This function fills a buffer with audio buffer (PCM format).</summary>
            <param name="bid">Buffer Handle/Name to be filled with buffer.</param>
            <param name="buffer">A SoundData object containing the buffer to upload.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.BufferData(System.Int32,OpenTK.Audio.SoundData)">
            <summary>This function fills a buffer with audio buffer (PCM format).</summary>
            <param name="bid">Buffer Handle/Name to be filled with buffer.</param>
            <param name="data">A SoundData object containing the buffer to upload.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetBuffer(System.UInt32,OpenTK.Audio.ALGetBufferi,System.Int32@)">
            <summary>This function retrieves an integer property of a buffer.</summary>
            <param name="bid">Buffer name whose attribute is being retrieved</param>
            <param name="param">The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).</param>
            <param name="value">A pointer to an int to hold the retrieved buffer</param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetBuffer(System.Int32,OpenTK.Audio.ALGetBufferi,System.Int32@)">
            <summary>This function retrieves an integer property of a buffer.</summary>
            <param name="bid">Buffer name whose attribute is being retrieved</param>
            <param name="param">The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).</param>
            <param name="value">A pointer to an int to hold the retrieved buffer</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DopplerFactor(System.Single)">
            <summary>AL.DopplerFactor is a simple scaling of source and listener velocities to exaggerate or deemphasize the Doppler (pitch) shift resulting from the calculation.</summary>
            <param name="value">A negative value will result in an error, the command is then ignored. The default value is 1f. The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DopplerVelocity(System.Single)">
            <summary>This function is deprecated and should not be used.</summary>
            <param name="value">The default is 1.0f.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.SpeedOfSound(System.Single)">
            <summary>AL.SpeedOfSound allows the application to change the reference (propagation) speed used in the Doppler calculation. The source and listener velocities should be expressed in the same units as the speed of sound.</summary>
            <param name="value">A negative or zero value will result in an error, and the command is ignored. Default: 343.3f (appropriate for velocity units of meters and air as the propagation medium). The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.</param>
        </member>
        <member name="M:OpenTK.Audio.AL.DistanceModel(OpenTK.Audio.ALDistanceModel)">
            <summary>This function selects the OpenAL distance model – ALDistanceModel.InverseDistance, ALDistanceModel.InverseDistanceClamped, ALDistanceModel.LinearDistance, ALDistanceModel.LinearDistanceClamped, ALDistanceModel.ExponentDistance, ALDistanceModel.ExponentDistanceClamped, or ALDistanceModel.None. The default distance model in OpenAL is ALDistanceModel.InverseDistanceClamped.</summary>
            <remarks>
            The ALDistanceModel .InverseDistance model works according to the following formula:
            gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));
            
            The ALDistanceModel .InverseDistanceClamped model works according to the following formula:
            distance = max(distance,ALSourcef.ReferenceDistance);
            distance = min(distance,ALSourcef.MaxDistance);
            gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));
            
            The ALDistanceModel.LinearDistance model works according to the following formula: 
            distance = min(distance, ALSourcef.MaxDistance) // avoid negative gain
            gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))
            
            The ALDistanceModel.LinearDistanceClamped model works according to the following formula:
            distance = max(distance, ALSourcef.ReferenceDistance)
            distance = min(distance, ALSourcef.MaxDistance)
            gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))
            
            The ALDistanceModel.ExponentDistance model works according to the following formula:
            gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor) 
            
            The ALDistanceModel.ExponentDistanceClamped model works according to the following formula:
            distance = max(distance, ALSourcef.ReferenceDistance)
            distance = min(distance, ALSourcef.MaxDistance)
            gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor)
            
            The ALDistanceModel.None model works according to the following formula:
            gain = 1f;
            </remarks>
            <param name="distancemodel"></param>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSourceState(System.UInt32)">
            <summary>(Helper) Returns Source state information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>state information from OpenAL.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSourceState(System.Int32)">
            <summary>(Helper) Returns Source state information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>state information from OpenAL.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSourceType(System.UInt32)">
            <summary>(Helper) Returns Source type information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>type information from OpenAL.</returns>
        </member>
        <member name="M:OpenTK.Audio.AL.GetSourceType(System.Int32)">
            <summary>(Helper) Returns Source type information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>type information from OpenAL.</returns>
        </member>
        <member name="T:OpenTK.Audio.SoundFormat">
            <summary>Describes the format of the SoundData.</summary>
        </member>
        <member name="M:OpenTK.Audio.SoundFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Constructs a new SoundFormat.</summary>
        </member>
        <member name="F:OpenTK.Audio.SoundFormat.SampleFormat">
            <summary>Describes the SampleFormat of the SoundData.</summary>
        </member>
        <member name="F:OpenTK.Audio.SoundFormat.SampleRate">
            <summary>Describes the sample rate (frequency) of the SoundData.</summary>
        </member>
        <member name="P:OpenTK.Audio.SoundFormat.SampleFormatAsOpenALFormat">
            <summary>Gets the SampleFormat of the buffer as an OpenTK.Audio.ALFormat enumeration.</summary>
        </member>
        <member name="T:OpenTK.Audio.SampleFormat">
            <summary>Defines the available formats for SoundData.</summary>
        </member>
        <member name="F:OpenTK.Audio.SampleFormat.Mono8">
            <summary>8 bits per sample, 1 channel.</summary>
        </member>
        <member name="F:OpenTK.Audio.SampleFormat.Mono16">
            <summary>16 bits per sample, 1 channel.</summary>
        </member>
        <member name="F:OpenTK.Audio.SampleFormat.Stereo8">
            <summary>8 bits per sample, 2 channels.</summary>
        </member>
        <member name="F:OpenTK.Audio.SampleFormat.Stereo16">
            <summary>16 bits per sample, 2 channels.</summary>
        </member>
    </members>
</doc>
