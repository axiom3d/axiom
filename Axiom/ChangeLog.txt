4-10-2004
**Important changes**
- Refactored the SceneQuery interface to use interface based listeners rather that .Net events, which ended up making more sense in this scenario, which proved to be a cleaner and more flexible implementation.  Anyone using the RaySceneQuery will need to make modifications to use the new interface, which isn't a drastic change but is a breaking change.
- Added the SphereRegionSceneQuery and a default implementation, which allows you to query for objects that intersect with a specified sphere.  They can be created via the scene managers CreateSphereRegionQuery method.  An example of its initial usage will be to find objects that fall within the attenuation range of point lights to determine potential shadow casters.

4-8-2004
- Playing catchup on shadow functionality.  VertexData and Mesh are up to date.
- Fixed long outstanding bug with vertex bone assignments, which caused the infamous bug with the fish in the fresnel demo where a single vertex would be way off to the side of the fish.  Woohoo!
- Added new Memory class for handling memory copying throughout the engine (and potentially other things down the road).

4-7-2004
Major patch from jkeiser
- Fixes all initialization issues.  The DemoBrowser now works with running demos over and over.
- Several memory leaks fixed now that all managers get disposed of properly.
- Enhanced resource loading implementation now support proper factory based implementation, with a Zip and Folder implementation included (before this was hardcoded to support these but I never went back to fix it.

Awesome changes overall!

Major particle system updates submitted by Maarc!
  - All Ogre Emitters and Affectors are completed and available.
  - All core classes were updated to support additional functionality, such as modifying texture coords on Billboards (for rotation).
  - Potential crash bug fixed in BillboardSet.GenVertices.
  - Added Smoke demo now that the particle system supports all required functionality.

Patch from Antiarc to allow gpu program definitions within material files like Ogre does.  Robot material modified to include one just to have a conbined material.  Thanks antiarc!

Najak submissions
  - Added smooth camera acceleration in the demos.
  - Fixed several memory leaks.

3-30-2004
Big Commit
- Hardware skinning now support.  
- Skeletal animation demo updated to include more robots for stressing the new code.  Hardware skinning is used by default if vertex programs are available.
- Software animation revamped to use blend weights and indices, replacing the old SoftwareBlendInfo struct.
- Temporary buffer licensing in place for storing per frame post-blended vertex position, which is used for software animation, and will be used to generate shadow volumes for hardware skinned meshes.
- Entities now have their own copy of a skeleton rather than then multiple entities using the same skeleton sharing a single skeleton instance
- Various sparsly documented classes updated with XML docs (this is a continual work in progress).
- Render to texture memory leak in D3D fix from najak.
- Fixed issue with loading the free Ninja model (a multiple bone per vertex issue).

Issues:
- Startup/shutdown issues exist, but are being worked on by the community (namely jkeiser).
- Fresnel crashes on some hardware configurations in OpenGL when VBO's are used.

Still Todo:
- Profile and optimize the latest skeletal animation updates.

3-20-2004
- Implemented TagPoint functionality, which allows you to attach objects to bones when using an entity that
  has a skeleton.  An example would be attaching a gun to a player's hand, where the gun will move with the players
  hand as it moves.
- Continued refactoring work to support hardware skinning.
- Using the default scene manager now until I fix a bug where billboards weren't always showing up in Octree scenes.

3-17-2004
- Fixed problem with duplicate keyframes in animations; allows the Ninja model to load without incident.

3-14-2004
- Fixed Cg version of Offset Mapping thanks to a patch from Steve Streeting.

3-4-2004
- Added SceneNode.CreateChildSceneNode (and overloads) to allow for creating scene nodes without having to do createChild with a cast.
- Fixed nasty bug in hardware buffers causing stream source indexes to go above what some hardware can support.  Caused Dot3 and Offset to throw an
  exception on lower end cards.
- Modified all demos to use SceneNode.CreateChildSceneNode.
- Added more overloads to Node.CreateChild.

3-2-2004
- Added default texture filtering options to TextureUnitState and MaterialManager.
- Added texture filter toggling ('T') to the TechDemo class.  Right now, the effect is most noticable on the demos that have the box in it (Frustum, Physics, etc).
- changed 'R' to toggle between the different render modes (wireframe, solid, points).

3-1-2004
- *Significant Change* - Project files no longer included, and can be auto-generated via the included premake batch files.
- Frustum demo, shows a frustum visually and allows you to move it around and clip objects.
- Started pulling out expliciy usage of loosely typed collection and using subclasses that will eventually get replaced with generic version in Whidbey.
- Added another constructor to Vector2D (thanks metaphaze).
- Added a few core methods required for the BSP Scene Manager to progress.
- ATI Radeon 8500+ support for DX ps1.1 through ps1.4 pixel shaders!

2-23-2004 (continued)
- Fixed assert bug in RenderTarget.GetViewport().
- Added new method: Camera.GetCameraToViewport(), which takes x and y viewports coords in the range[0,1] and returns a Ray that can be used in a RaySceneQuery for object picking.
- Fixed potential particle emission bug.
- Fixed render to texture issue with recent camera/frustum changes.
- Added Camera.Orientation (can't believe that was never there before, heh).

2-23-2004
- Camera now inherits from Frustum.
- Frustum is a renderable object.
- Modified Node.Translate() to allow for using different transform spaces (local, world, parent).

2-22-2004
- Implemented normal normalization capability in the render systems.
- Added explicit scissor test capability to the render systems.
- Added secondary color support in GL now that Tao has all the extensions done.
- BezierPatch demo and all supporting functionality added.
- Fixed a bug where not all output was being flushed to the log file.

2-15-2004
- Completed heightmap terrain functionality in the OctreeSceneManager plugin.
- Added Terrain demo.
- Fixed bug in OpenGL where software buffers weren't being used during a ReadData calls on hardware buffers when a software buffer backup existed.
- Fixed bug in Fresnel demo where toggling the debug overlay didn't work.
- Updated demo descriptions shown during a mouse over in the demo browser.  Also updated a few of the images.
- Fixed an error in the Plane constructor which flipped the sign bit on the distance value.

2-9-2004
- Updated controller documentation.
- Animated textures!  Added fuctionality to support the anim_texture attribute for texture_unit blocks in .material files.

2-6-2004
- Fixed a long standing bug with Mesh LOD.  Functionality has now been re-enabled.

2-1-2004

Big update!

New Features:
- Shader support: Cg, DirectX HLSL, Assembler.  
 Current profiles supported are 
	Direct3D: ps1.1, ps1.2, ps1.3, ps1.4, ps2.0, vs1.1, vs2.0
	OpenGL: arbvp1, arbfp1, fp20(via Nvparse), vp30/fp30 (GeForceFX)

	See http://www.ogre3d.org/docs/manual/manual_16.html#SEC25 for documentation on the .material file format.

- Image loading with DevIL, now supporting .dds and .tga images.  Using Tao.DevIl library.
- Volume and cube supported via .dds files, even in OpenGL.
- Render to texture capability
- Octree Scene Manager (beta)
- Easier use of Axiom outside the built in render loop.

New Dependencies:
- DevIL (devil.dll, ilu.dll, ilut.dll).  Required for cross platform image loading and support for a wider range of image formats.
- nvparse.dll - Dynamically linkable version of the nVidia Nvparse utility which converts DX8 pixel shaders
  to register and texture combiner instructions that can run on GeForce3/4 hardware.  The .dll version was made
  available by Tom Nuydens over at http://www.delphi3d.net

New/Modified Demos:
- Render To Texture: Simple example of rendering the scene contents into a texture and mapping the texture to a plane.
- Cel Shading: Cartoon shading technique, requiring fragment program support.
- Dot3 Bump Mapping: Shows the use of vertex/fragment programs to accomplish bump mapping.  Fixed function Dot3 bump mapping is also included as a fallback for hardware that doesn't support fragment programs.
- Fresnel: Advanced fragment program used to create ultra realistic water, with reflection of objects above water as well as refraction of objects   below the water.
- Tutorial 1: Now uses much easier, and also CLS compliant means of writing data to vertex buffers for custom geometry.

Core Changes:
- FrameStarted and FrameEnded event handlers no longer return boolean.  The FrameEventArgs structure now has a RequestShutdown property that can be set to true to cause the render loop to stop and for the engine to begin shutdown.
- The 'v' texture coordinate has been flipped so that the origin is now in the top-left, this removes the need to flip textures and improves loading times as well as making compressed texture support feasible. 1.10 .mesh files will be converted on the fly automatically, but you should use OgreMeshUpgrade to fix it permanently and start using 1.20.
- More stuff I'm sure, I only just recently started recording this log :).

Bugs Fixed:
- Taking screenshots now works in D3D.
- Bug in skeletons with multiple blending weights fixed.
- Texture loading in D3D should be more stable with a recent overhaul of the managed code.
- Fixed problem with .zip files not resetting the stream position when returning uncompressed file data.

Known Problems:
- Even though the most widespread issue with the glDrawArrays exception in OpenGL on nVidia cards was
  temporarily fixed via a modifications to one of the overlays, the problem still exists and has popped up
  in at least one other place, namely the Fresnel demo.  Comment out the following line in GLRenderSystem.CheckCaps()
  to prevent it from happening in the meantime:

            if(GLHelper.SupportsExtension("GL_ARB_vertex_buffer_object")) {
                caps.SetCap(Capabilities.VertexBuffer);
            }
  This should be resolved fairly soon.

In the works:
- Support for loading individual plugins, or scanning a directory via app.config entries.
- Ability to run DX8 pixel shaders on Radeon 8500+ under OpenGL via the ATI_fragment_shader extension.
- Terrain Demo: Shows the use of a simple heightmap with an extension to the Octree scene manager.