void CelShadingVP(float4 position : POSITION,
                       float3 normal   : NORMAL,

                   out float4 oPosition    : POSITION,
				   out float2 diffuseLight  : TEXCOORD0,
				   out float2 specularLight : TEXCOORD1,
				   out float2 edge          : TEXCOORD2,
				   
               uniform float4 shininess,
				uniform float4x4 modelViewProj,
               uniform float3 lightPosition,          // Light Position (in object space)
               uniform float3 eyePosition)
{
  oPosition = mul(modelViewProj, position);
    
  // Calculate diffuse lighting
  float3 N = normalize(normal);
  float3 L = normalize(lightPosition - position.xyz);
  diffuseLight.x = max(0, dot(L, N));
  diffuseLight.y = 0;
	   
  // Calculate specular lighting
  float3 V = normalize(eyePosition - position.xyz);
  float3 H = normalize(L + V);
  specularLight.x = pow(max(0, dot(H, N)), shininess.x);
  if (diffuseLight.x <= 0) specularLight.x = 0;
  specularLight.y = 0;

  // Perform edge detection
  edge.x = max(0, dot(V, N));	
  edge.y = 0;
}

void CelShadingFP(float2 diffuseLight  : TEXCOORD0,  
                  float2 specularLight : TEXCOORD1,  
                  float2 edge          : TEXCOORD2,
                  out float4 color : COLOR,
				uniform sampler2D diffuseRamp,
               	  uniform float4 Kd,
                  uniform sampler2D specularRamp,
					uniform float4 Ks,
                  uniform sampler2D edgeRamp)
{
  // Apply step functions
  diffuseLight = tex2D(diffuseRamp, diffuseLight);
  specularLight = tex2D(specularRamp, specularLight);
  edge = tex2D(edgeRamp, edge);


  // Compute the final color 
  color = edge.x *  (Kd * diffuseLight.x + Ks * specularLight.x);
}