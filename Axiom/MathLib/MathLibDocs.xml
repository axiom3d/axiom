<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathLib</name>
    </assembly>
    <members>
        <member name="T:Axiom.MathLib.Collections.BaseCollection">
            <summary>
            	Serves as a basis for strongly typed collections in the math lib.
            </summary>
            <remarks>
            	<b>GODDAMIT WHY DO WE HAVE TO GO THROUGH THIS SHIT!</b>
            	Can't wait for Generics in .Net Framework 2.0!   
            </remarks>
        </member>
        <member name="F:Axiom.MathLib.Collections.BaseCollection.objectList">
            <summary></summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.#ctor">
            <summary>
            	
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.Add(System.Object)">
            <summary>
            	Adds an item to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.Clear">
            <summary>
            	Clears all objects from the collection.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.Remove(System.Object)">
            <summary>
            	Removes the item from the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.Reset">
            <summary>
            	Resets the in progress enumerator.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.MoveNext">
            <summary>
            	Moves to the next item in the enumeration if there is one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.OnItemAdded">
            <summary>
            	Called to fire the ItemAdded event.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.BaseCollection.OnCleared">
            <summary>
             Called to fire the Cleared event
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Collections.BaseCollection.Item(System.Int32)">
            <summary>
            	
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Collections.BaseCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Collections.BaseCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Collections.BaseCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Collections.BaseCollection.Current">
            <summary>
            	Returns the current object in the enumeration.
            </summary>
        </member>
        <member name="E:Axiom.MathLib.Collections.BaseCollection.ItemAdded">
            <summary>An event that is fired when items are added to the collection. </summary>
        </member>
        <member name="E:Axiom.MathLib.Collections.BaseCollection.Cleared">
            <summary>An event that is fired when the collection is cleared. </summary>
        </member>
        <member name="T:Axiom.MathLib.Collections.QuaternionCollection">
            <summary>
            Summary description for QuaternionCollection.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.QuaternionCollection.#ctor">
            <summary>
            	Default constructor.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.QuaternionCollection.Add(Axiom.MathLib.Quaternion)">
            <summary>
            	Adds an object to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Axiom.MathLib.Collections.QuaternionCollection.Item(System.Int32)">
            <summary>
            	Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="T:Axiom.MathLib.Collections.Vector3Collection">
            <summary>
            Summary description for Vector3Collection.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.Vector3Collection.#ctor">
            <summary>
            	Default constructor.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Collections.Vector3Collection.Add(Axiom.MathLib.Vector3)">
            <summary>
            	Adds an object to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Axiom.MathLib.Collections.Vector3Collection.Item(System.Int32)">
            <summary>
            	Get/Set indexer that allows access to the collection by index.
            </summary>
        </member>
        <member name="T:Axiom.MathLib.MathUtil">
            <summary>
            This is a class which exposes static methods for various common math functions.  Currently,
            the methods simply wrap the methods of the System.Math class (with the exception of a few added extras).
            This is in case the implementation needs to be swapped out with a faster C++ implementation, if
            deemed that the System.Math methods are not up to far speed wise.
            </summary>
            TODO: Add overloads for all methods for all instrinsic data types (i.e. float, short, etc).
        </member>
        <member name="M:Axiom.MathLib.MathUtil.#ctor">
            <summary>
            	Empty private constructor.  This class has nothing but static methods/properties, so a public default
            	constructor should not be created by the compiler.  This prevents instance of this class from being
            	created.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.DegreesToRadians(System.Single)">
            <summary>
            	Converts degrees to radians.
            </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.RadiansToDegrees(System.Single)">
            <summary>
            	Converts radians to degrees.
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Sin(System.Single)">
            <summary>
            	Returns the sine of the angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Cos(System.Single)">
            <summary>
            	Returns the cosine of the angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.ACos(System.Single)">
            <summary>
            	Returns the arc cosine of the angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.ASin(System.Single)">
            <summary>
            	Returns the arc sine of the angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Sqrt(System.Single)">
            <summary>
            	Returns the square root of a number.
            </summary>
            <remarks>This is one of the more expensive math operations.  Avoid when possible.</remarks>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Abs(System.Single)">
            <summary>
            	Returns the absolute value of the supplied number.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Tan(System.Single)">
            <summary>
            	Returns the tangent of the angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Max(System.Single,System.Single)">
            <summary>
            	Used to quickly determine the greater value between two values.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.Min(System.Single,System.Single)">
            <summary>
            	Used to quickly determine the lesser value between two values.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.UnitRandom">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.MathUtil.SymmetricRandom">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Axiom.MathLib.Matrix3">
            <summary>
            A 3x3 matrix which can represent rotations around axes.
            </summary>
        </member>
        <member name="F:Axiom.MathLib.Matrix3.m00">
            <summary>
            
            </summary>
        </member>
        <member name="F:Axiom.MathLib.Matrix3.m01">
            <summary>
            
            </summary>
        </member>
        <member name="F:Axiom.MathLib.Matrix3.m02">
            <summary>
            
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            	Creates a new Matrix3 with all the specified parameters.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.#ctor(Axiom.MathLib.Vector3,Axiom.MathLib.Vector3,Axiom.MathLib.Vector3)">
            <summary>
            Create a new Matrix from 3 Vertex3 objects.
            </summary>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <param name="zAxis"></param>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.Transpose">
            <summary>
            Swap the rows of the matrix with the columns.
            </summary>
            <returns>A transposed Matrix.</returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.GetColumn(System.Int32)">
            <summary>
            	Gets a matrix column by index.
            </summary>
            <param name="col"></param>
            <returns>A Vector3 representing one of the Matrix columns.</returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.SetColumn(System.Int32,Axiom.MathLib.Vector3)">
            <summary>
            	Sets one of the columns of the Matrix with a Vector3.
            </summary>
            <param name="col"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.FromAxes(Axiom.MathLib.Vector3,Axiom.MathLib.Vector3,Axiom.MathLib.Vector3)">
            <summary>
            	Creates a Matrix3 from 3 axes.
            </summary>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <param name="zAxis"></param>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.op_Multiply(Axiom.MathLib.Matrix3,Axiom.MathLib.Matrix3)">
            <summary>
            Multiply (concatenate) two Matrix3 instances together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.op_Multiply(Axiom.MathLib.Vector3,Axiom.MathLib.Matrix3)">
            <summary>
            	vector * matrix [1x3 * 3x3 = 1x3]
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.op_Multiply(Axiom.MathLib.Matrix3,Axiom.MathLib.Vector3)">
            <summary>
            	matrix * vector [3x3 * 3x1 = 3x1]
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.op_Multiply(Axiom.MathLib.Matrix3,System.Single)">
            <summary>
            Multiplies all the items in the Matrix3 by a scalar value.
            </summary>
            <param name="matrix"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.op_Multiply(System.Single,Axiom.MathLib.Matrix3)">
            <summary>
            Multiplies all the items in the Matrix3 by a scalar value.
            </summary>
            <param name="matrix"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.op_Addition(Axiom.MathLib.Matrix3,Axiom.MathLib.Matrix3)">
            <summary>
            	Used to add two matrices together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.op_Subtraction(Axiom.MathLib.Matrix3,Axiom.MathLib.Matrix3)">
            <summary>
            	Used to subtract two matrices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.op_UnaryNegation(Axiom.MathLib.Matrix3)">
            <summary>
            Negates all the items in the Matrix.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.op_Equality(Axiom.MathLib.Matrix3,Axiom.MathLib.Matrix3)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.ToString">
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Matrix4.
            </summary>
            <returns>A string representation of a vector3.</returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.GetHashCode">
            <summary>
            	Provides a unique hash code based on the member variables of this
            	class.  This should be done because the equality operators (==, !=)
            	have been overriden by this class.
            	<p/>
            	The standard implementation is a simple XOR operation between all local
            	member variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix3.Equals(System.Object)">
            <summary>
            	Compares this Matrix to another object.  This should be done because the 
            	equality operators (==, !=) have been overriden by this class.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Axiom.MathLib.Matrix3.Identity">
            <summary>
            Identity Matrix
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Matrix3.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Matrix3.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for accessing the matrix like a 2d array (i.e. matrix[2,3]).
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Matrix3.Item(System.Int32)">
            <summary>
            	Allows the Matrix to be accessed linearly (m[0] -> m[8]).  
            </summary>
        </member>
        <member name="T:Axiom.MathLib.Matrix4">
            <summary>
            	Class encapsulating a standard 4x4 homogenous matrix.
            </summary>
            <remarks>
            	The engine uses column vectors when applying matrix multiplications,
            	This means a vector is represented as a single column, 4-row
            	matrix. This has the effect that the tranformations implemented
            	by the matrices happens right-to-left e.g. if vector V is to be
            	transformed by M1 then M2 then M3, the calculation would be
            	M3 * M2 * M1 * V. The order that matrices are concatenated is
            	vital since matrix multiplication is not cummatative, i.e. you
            	can get a different result if you concatenate in the wrong order.
            		<p/>
            	The use of column vectors and right-to-left ordering is the
            	standard in most mathematical texts, and id the same as used in
            	OpenGL. It is, however, the opposite of Direct3D, which has
            	inexplicably chosen to differ from the accepted standard and uses
            	row vectors and left-to-right matrix multiplication.
            	<p/>
            	The engine deals with the differences between D3D and OpenGL etc.
            	internally when operating through different render systems. The engine
            	users only need to conform to standard maths conventions, i.e.
            	right-to-left matrix multiplication, (The engine transposes matrices it
            	passes to D3D to compensate).
            	<p/>
            	The generic form M * V which shows the layout of the matrix 
            	entries is shown below:
            	<p/>
            	| m[0][0]  m[0][1]  m[0][2]  m[0][3] |   {x}
            	| m[1][0]  m[1][1]  m[1][2]  m[1][3] |   {y}
            	| m[2][0]  m[2][1]  m[2][2]  m[2][3] |   {z}
            	| m[3][0]  m[3][1]  m[3][2]  m[3][3] |   {1}
            </remarks>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            	Creates a new Matrix4 with all the specified parameters.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.Transpose">
            <summary>
            Swap the rows of the matrix with the columns.
            </summary>
            <returns>A transposed Matrix.</returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.op_Multiply(Axiom.MathLib.Matrix4,Axiom.MathLib.Matrix4)">
            <summary>
            	Used to multiply (concatenate) two 4x4 Matrices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.op_Multiply(Axiom.MathLib.Matrix4,Axiom.MathLib.Vector3)">
            <summary>
            	Transforms the given 3-D vector by the matrix, projecting the 
            	result back into <i>w</i> = 1.
            	<p/>
            	This means that the initial <i>w</i> is considered to be 1.0,
            	and then all the tree elements of the resulting 3-D vector are
            	divided by the resulting <i>w</i>.
            </summary>
            <param name="matrix">A Matrix4.</param>
            <param name="vector">A Vector3.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.op_Addition(Axiom.MathLib.Matrix4,Axiom.MathLib.Matrix4)">
            <summary>
            	Used to add two matrices together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.op_Subtraction(Axiom.MathLib.Matrix4,Axiom.MathLib.Matrix4)">
            <summary>
            	Used to subtract two matrices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.op_Equality(Axiom.MathLib.Matrix4,Axiom.MathLib.Matrix4)">
            <summary>
            Compares two Matrix4 instances for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true if the Matrix 4 instances are equal, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.op_Inequality(Axiom.MathLib.Matrix4,Axiom.MathLib.Matrix4)">
            <summary>
            Compares two Matrix4 instances for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true if the Matrix 4 instances are not equal, false otherwise.</returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.op_Implicit(Axiom.MathLib.Matrix3)~Axiom.MathLib.Matrix4">
            <summary>
            	Used to allow assignment from a Matrix3 to a Matrix4 object.
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.MakeFloatArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.ToString">
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Matrix4.
            </summary>
            <returns>A string representation of a vector3.</returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.GetHashCode">
            <summary>
            	Provides a unique hash code based on the member variables of this
            	class.  This should be done because the equality operators (==, !=)
            	have been overriden by this class.
            	<p/>
            	The standard implementation is a simple XOR operation between all local
            	member variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Matrix4.Equals(System.Object)">
            <summary>
            	Compares this Matrix to another object.  This should be done because the 
            	equality operators (==, !=) have been overriden by this class.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Axiom.MathLib.Matrix4.Identity">
            <summary>
            Returns a matrix with the following form:
            | 1,0,0,0 |
            | 0,1,0,0 |
            | 0,0,1,0 |
            | 0,0,0,1 |
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Matrix4.Zero">
            <summary>
            Returns a matrix with all elements set to 0.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Matrix4.Translation">
            <summary>
            	Gets/Sets the Translation portion of the matrix.
            	| 0 0 0 Tx|
            	| 0 0 0 Ty|
            	| 0 0 0 Tz|
            	| 0 0 0  1 |
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Matrix4.Scale">
            <summary>
            	Gets/Sets the Translation portion of the matrix.
            	|Sx 0  0  0 |
            	| 0 Sy 0  0 |
            	| 0  0 Sz 0 |
            	| 0  0  0  0 |
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Matrix4.Item(System.Int32,System.Int32)">
            <summary>
            Allows the Matrix to be accessed like a 2d array (i.e. matrix.m23)
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Matrix4.Item(System.Int32)">
            <summary>
            	Allows the Matrix to be accessed linearly (m[0] -> m[15]).  
            </summary>
        </member>
        <member name="T:Axiom.MathLib.PositionalSpline">
            <summary>
            	A Catmull-Rom spline that can be used for interpolating translation movements.
            </summary>
            <remarks>
            	A Catmull-Rom spline is a derivitive of the Hermite spline.  The difference is that the Hermite spline
            	allows you to specifiy 2 endpoints and 2 tangents, then the spline is generated.  A Catmull-Rom spline
            	allows you to just supply 1-n number of points and the tangents will be automatically calculated.
            	<p/>
            	Derivation of the hermite polynomial can be found here: 
            	<a href="http://www.cs.unc.edu/~hoff/projects/comp236/curves/papers/hermite.html">Hermite splines.</a>
            </remarks>
        </member>
        <member name="F:Axiom.MathLib.PositionalSpline.pointList">
            <summary>Collection of control points.</summary>
        </member>
        <member name="F:Axiom.MathLib.PositionalSpline.tangentList">
            <summary>Collection of generated tangents for the spline controls points.</summary>
        </member>
        <member name="F:Axiom.MathLib.PositionalSpline.autoCalculateTangents">
            <summary>Specifies whether or not to recalculate tangents as each control point is added.</summary>
        </member>
        <member name="M:Axiom.MathLib.PositionalSpline.Interpolate(System.Single)">
            <summary>
            	Returns an interpolated point based on a parametric value over the whole series.
            </summary>
            <remarks>
            	Given a t value between 0 and 1 representing the parametric distance along the
            	whole length of the spline, this method returns an interpolated point.
            </remarks>
            <param name="t">Parametric value.</param>
            <returns>An interpolated point along the spline.</returns>
        </member>
        <member name="M:Axiom.MathLib.PositionalSpline.Interpolate(System.Int32,System.Single)">
            <summary>
            	Interpolates a single segment of the spline given a parametric value.
            </summary>
            <param name="index">The point index to treat as t=0. index + 1 is deemed to be t=1</param>
            <param name="t">Parametric value</param>
            <returns>An interpolated point along the spline.</returns>
        </member>
        <member name="M:Axiom.MathLib.PositionalSpline.RecalculateTangents">
            <summary>
            	Recalculates the tangents associated with this spline. 
            </summary>
            <remarks>
            	If you tell the spline not to update on demand by setting AutoCalculate to false,
            	then you must call this after completing your updates to the spline points.
            </remarks>
        </member>
        <member name="P:Axiom.MathLib.PositionalSpline.Points">
            <summary>
            	Exposes the collection of points.  Can be added to, cleared, and accessed by index.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.PositionalSpline.AutoCalculate">
            <summary>
            	Specifies whether or not to recalculate tangents as each control point is added.
            </summary>
        </member>
        <member name="T:Axiom.MathLib.Quaternion">
            <summary>
            Summary description for Quaternion.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.op_Multiply(Axiom.MathLib.Quaternion,Axiom.MathLib.Quaternion)">
            <summary>
            Used to multiply 2 Quaternions together.
            </summary>
            <remarks>
            	Quaternion multiplication is not communative in most cases.
            	i.e. p*q != q*p
            </remarks>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.op_Multiply(Axiom.MathLib.Quaternion,Axiom.MathLib.Vector3)">
            <summary>
            
            </summary>
            <param name="quat"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.op_Multiply(System.Single,Axiom.MathLib.Quaternion)">
            <summary>
            Used when a float value is multiplied by a Quaternion.
            </summary>
            <param name="scalar"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.op_Multiply(Axiom.MathLib.Quaternion,System.Single)">
            <summary>
            Used when a Quaternion is multiplied by a float value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.op_Addition(Axiom.MathLib.Quaternion,Axiom.MathLib.Quaternion)">
            <summary>
            Used when a Quaternion is added to another Quaternion.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.Slerp(System.Single,Axiom.MathLib.Quaternion,Axiom.MathLib.Quaternion)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="quatA"></param>
            <param name="quatB"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.FromAngleAxis(System.Single,Axiom.MathLib.Vector3)">
            <summary>
            Creates a Quaternion from a supplied angle and axis.
            </summary>
            <param name="angle">Value of an angle in radians.</param>
            <param name="axis">Arbitrary axis vector.</param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.Squad(System.Single,Axiom.MathLib.Quaternion,Axiom.MathLib.Quaternion,Axiom.MathLib.Quaternion,Axiom.MathLib.Quaternion)">
            <summary>
            	Performs spherical quadratic interpolation.
            </summary>
            <param name="t"></param>
            <param name="p"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.Dot(Axiom.MathLib.Quaternion)">
            <summary>
            Performs a Dot Product operation on 2 Quaternions.
            </summary>
            <param name="quat"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.ToRotationMatrix">
            <summary>
            Gets a 3x3 rotation matrix from this Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.Inverse">
            <summary>
            Computes the inverse of a Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.ToAxes(Axiom.MathLib.Vector3@,Axiom.MathLib.Vector3@,Axiom.MathLib.Vector3@)">
            <summary>
            
            </summary>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <param name="zAxis"></param>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.FromAxes(Axiom.MathLib.Vector3,Axiom.MathLib.Vector3,Axiom.MathLib.Vector3)">
            <summary>
            
            </summary>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <param name="zAxis"></param>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.FromRotationMatrix(Axiom.MathLib.Matrix3)">
            <summary>
            
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.Log">
            <summary>
            	Calculates the logarithm of a Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.Exp">
            <summary>
            	Calculates the Exponent of a Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Quaternion.ToString">
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Quaternion.
            </summary>
            <returns>A string representation of a Quaternion.</returns>
        </member>
        <member name="P:Axiom.MathLib.Quaternion.Identity">
            <summary>
            An Identity Quaternion.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Quaternion.Zero">
            <summary>
            A Quaternion with all elements set to 0.0f;
            </summary>
        </member>
        <member name="T:Axiom.MathLib.RotationalSpline">
            <summary>
            	A class used to interpolate orientations (rotations) along a spline using 
            	derivatives of quaternions.
            </summary>
            <remarks>
            	Like the PositionalSpline class, this class is about interpolating values 
            	smoothly over a spline. Whilst PositionalSpline deals with positions (the normal
            	sense we think about splines), this class interpolates orientations. The
            	theory is identical, except we're now in 4-dimensional space instead of 3.
            	<p/>
            	In positional splines, we use the points and tangents on those points to generate
            	control points for the spline. In this case, we use quaternions and derivatives
            	of the quaternions (i.e. the rate and direction of change at each point). This is the
            	same as PositionalSpline since a tangent is a derivative of a position. We effectively 
            	generate an extra quaternion in between each actual quaternion which when take with 
            	the original quaternion forms the 'tangent' of that quaternion.
            </remarks>
            TESTME: Done but not tested
        </member>
        <member name="F:Axiom.MathLib.RotationalSpline.pointList">
            <summary>Collection of control points.</summary>
        </member>
        <member name="F:Axiom.MathLib.RotationalSpline.tangentList">
            <summary>Collection of generated tangents for the spline controls points.</summary>
        </member>
        <member name="F:Axiom.MathLib.RotationalSpline.autoCalculateTangents">
            <summary>Specifies whether or not to recalculate tangents as each control point is added.</summary>
        </member>
        <member name="M:Axiom.MathLib.RotationalSpline.Interpolate(System.Single)">
            <summary>
            	Returns an interpolated point based on a parametric value over the whole series.
            </summary>
            <remarks>
            	Given a t value between 0 and 1 representing the parametric distance along the
            	whole length of the spline, this method returns an interpolated point.
            </remarks>
            <param name="t">Parametric value.</param>
            <returns>An interpolated point along the spline.</returns>
        </member>
        <member name="M:Axiom.MathLib.RotationalSpline.Interpolate(System.Int32,System.Single)">
            <summary>
            	Interpolates a single segment of the spline given a parametric value.
            </summary>
            <param name="index">The point index to treat as t=0. index + 1 is deemed to be t=1</param>
            <param name="t">Parametric value</param>
            <returns>An interpolated point along the spline.</returns>
        </member>
        <member name="M:Axiom.MathLib.RotationalSpline.RecalculateTangents">
            <summary>
            	Recalculates the tangents associated with this spline. 
            </summary>
            <remarks>
            	If you tell the spline not to update on demand by setting AutoCalculate to false,
            	then you must call this after completing your updates to the spline points.
            </remarks>
        </member>
        <member name="P:Axiom.MathLib.RotationalSpline.Points">
            <summary>
            	Exposes the collection of points.  Can be added to, cleared, and accessed by index.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.RotationalSpline.AutoCalculate">
            <summary>
            	Specifies whether or not to recalculate tangents as each control point is added.
            </summary>
        </member>
        <member name="T:Axiom.MathLib.Vector2">
            <summary>
            Summary description for Vector2.
            </summary>
        </member>
        <member name="T:Axiom.MathLib.Vector3">
            <summary>
            Standard 3-dimensional vector.
            </summary>
            <remarks>
            A direction in 3D space represented as distances along the 3
            orthoganal axes (x, y, z). Note that positions, directions and
            scaling factors can be represented by a vector, depending on how
            you interpret the values.
            </remarks>
        </member>
        <member name="F:Axiom.MathLib.Vector3.x">
            <summary></summary>
        </member>
        <member name="F:Axiom.MathLib.Vector3.y">
            <summary></summary>
        </member>
        <member name="F:Axiom.MathLib.Vector3.z">
            <summary></summary>
        </member>
        <member name="M:Axiom.MathLib.Vector3.op_Equality(Axiom.MathLib.Vector3,Axiom.MathLib.Vector3)">
            <summary>
            	User to compare two Vector3 instances for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true or false</returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.op_Inequality(Axiom.MathLib.Vector3,Axiom.MathLib.Vector3)">
            <summary>
            	User to compare two Vector3 instances for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true or false</returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.op_Multiply(Axiom.MathLib.Vector3,Axiom.MathLib.Vector3)">
            <summary>
            	Used when a Vector3 is multiplied by another vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.op_Division(Axiom.MathLib.Vector3,System.Single)">
            <summary>
            Used to divide a vector by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.op_Addition(Axiom.MathLib.Vector3,Axiom.MathLib.Vector3)">
            <summary>
            	Used when a Vector3 is added to another Vector3.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.op_Multiply(Axiom.MathLib.Vector3,System.Single)">
            <summary>
            	Used when a Vector3 is multiplied by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.op_Multiply(System.Single,Axiom.MathLib.Vector3)">
            <summary>
            	Used when a scalar value is multiplied by a Vector3.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.op_Subtraction(Axiom.MathLib.Vector3,Axiom.MathLib.Vector3)">
            <summary>
            	Used to subtract a Vector3 from another Vector3.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.op_UnaryNegation(Axiom.MathLib.Vector3)">
            <summary>
            	Used to negate the elements of a vector.
            </summary>
            <remarks>
            	Uses unsafe pointer arithmetic to reduce the code required.
            </remarks>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.Dot(Axiom.MathLib.Vector3)">
            <summary>
            	Performs a Dot Product operation on 2 vectors, which produces the angle between them.
            </summary>
            <param name="vector">The vector to perform the Dot Product against.</param>
            <returns>The angle between the 2 vectors.</returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.Cross(Axiom.MathLib.Vector3)">
            <summary>
            	Performs a Cross Product operation on 2 vectors, which returns a vector that is perpendicular
            	to the intersection of the 2 vectors.  Useful for finding face normals.
            </summary>
            <param name="vector">A vector to perform the Cross Product against.</param>
            <returns>A new Vector3 perpedicular to the 2 original vectors.</returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.Perpendicular">
            <summary>
            	Finds a vector perpendicular to this one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.RandomDeviant(System.Single,Axiom.MathLib.Vector3)">
            <summary>
            
            </summary>
            <param name="angle"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.MidPoint(Axiom.MathLib.Vector3)">
            <summary>
            	Finds the midpoint between the supplied Vector and this vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.Ceil(Axiom.MathLib.Vector3)">
            <summary>
            	Compares the supplied vector and updates it's x/y/z components of they are higher in value.
            </summary>
            <param name="compare"></param>
        </member>
        <member name="M:Axiom.MathLib.Vector3.Floor(Axiom.MathLib.Vector3)">
            <summary>
            	Compares the supplied vector and updates it's x/y/z components of they are lower in value.
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.GetRotationTo(Axiom.MathLib.Vector3)">
            <summary>
            	Gets the shortest arc quaternion to rotate this vector to the destination vector. 
            </summary>
            <remarks>
            	Don't call this if you think the dest vector can be close to the inverse
            	of this vector, since then ANY axis of rotation is ok.
            </remarks>
        </member>
        <member name="M:Axiom.MathLib.Vector3.Normalize">
            <summary>
            	Normalizes the vector.
            </summary>
            <remarks>
            	This method normalises the vector such that it's
            	length / magnitude is 1. The result is called a unit vector.
            	<p/>
            	This function will not crash for zero-sized vectors, but there
            	will be no changes made to their components.
            </remarks>
        </member>
        <member name="M:Axiom.MathLib.Vector3.ToString">
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Vector3.
            </summary>
            <returns>A string representation of a vector3.</returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.GetHashCode">
            <summary>
            	Provides a unique hash code based on the member variables of this
            	class.  This should be done because the equality operators (==, !=)
            	have been overriden by this class.
            	<p/>
            	The standard implementation is a simple XOR operation between all local
            	member variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector3.Equals(System.Object)">
            <summary>
            	Compares this Vector to another object.  This should be done because the 
            	equality operators (==, !=) have been overriden by this class.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Axiom.MathLib.Vector3.Item(System.Int32)">
            <summary>
            	Used to access a Vector by index 0 = x, 1 = y, 2 = z.  
            </summary>
            <remarks>
            	Uses unsafe pointer arithmetic to reduce the code required.
            </remarks>
        </member>
        <member name="P:Axiom.MathLib.Vector3.Length">
            <summary>
            Gets the length (magnitude) of this Vector3.  The Sqrt operation is expensive, so 
            only use this if you need the exact length of the Vector.  If vector lengths are only going
            to be compared, use LengthSquared instead.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Vector3.LengthSquared">
            <summary>
            Returns the length (magnitude) of the vector squared.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Vector3.Zero">
            <summary>
            	Gets a Vector3 with all components set to 0.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Vector3.UnitScale">
            <summary>
            	Gets a Vector3 with all components set to 1.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Vector3.UnitX">
            <summary>
            	Gets a Vector3 with the X set to 1, and the others set to 0.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Vector3.UnitY">
            <summary>
            	Gets a Vector3 with the Y set to 1, and the others set to 0.
            </summary>
        </member>
        <member name="P:Axiom.MathLib.Vector3.UnitZ">
            <summary>
            	Gets a Vector3 with the Z set to 1, and the others set to 0.
            </summary>
        </member>
        <member name="T:Axiom.MathLib.Vector4">
            <summary>
            4D homogeneous vector.
            </summary>
        </member>
        <member name="M:Axiom.MathLib.Vector4.op_Multiply(Axiom.MathLib.Vector4,Axiom.MathLib.Matrix4)">
            <summary>
            	
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector4.op_Equality(Axiom.MathLib.Vector4,Axiom.MathLib.Vector4)">
            <summary>
            	User to compare two Vector4 instances for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true or false</returns>
        </member>
        <member name="M:Axiom.MathLib.Vector4.op_Inequality(Axiom.MathLib.Vector4,Axiom.MathLib.Vector4)">
            <summary>
            	User to compare two Vector4 instances for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true or false</returns>
        </member>
        <member name="M:Axiom.MathLib.Vector4.ToString">
            <summary>
            	Overrides the Object.ToString() method to provide a text representation of 
            	a Vector4.
            </summary>
            <returns>A string representation of a Vector4.</returns>
        </member>
        <member name="M:Axiom.MathLib.Vector4.GetHashCode">
            <summary>
            	Provides a unique hash code based on the member variables of this
            	class.  This should be done because the equality operators (==, !=)
            	have been overriden by this class.
            	<p/>
            	The standard implementation is a simple XOR operation between all local
            	member variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.MathLib.Vector4.Equals(System.Object)">
            <summary>
            	Compares this Vector to another object.  This should be done because the 
            	equality operators (==, !=) have been overriden by this class.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Axiom.MathLib.Vector4.Item(System.Int32)">
            <summary>
            	Used to access a Vector by index 0 = this.x, 1 = this.y, 2 = this.z, 3 = this.w.  
            </summary>
            <remarks>
            	Uses unsafe pointer arithmetic to reduce the code required.
            </remarks>
        </member>
    </members>
</doc>
