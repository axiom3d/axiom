<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="fc7f1857-8c16-4606-934c-4204eec78980" revisionNumber="5">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.EventHandler`1">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <clsCompliantAlternative>
          <codeEntityReference>T:System.EventHandler</codeEntityReference>
          <content>
          </content>
        </clsCompliantAlternative>
        <summary>
          <para>Represents the method that will handle an event. The generic type argument specifies the type of the event data generated by the event. This class cannot be inherited.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>sender</parameterReference>
            <content>
              <para>The source of the event.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>e</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.EventArgs</codeEntityReference> that contains the event data. </para>
            </content>
          </parameter>
        </parameters>
        <remarks>
          <content>
            <para>The event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: </para>
            <list class="bullet">
              <listItem>
                <para>A delegate that refers to a method that provides the response to the event. </para>
              </listItem>
              <listItem>
                <para>A class that holds the event data. </para>
              </listItem>
            </list>
            <para>The delegate is a type that defines a signature, that is, the return value type and parameter list types for a method. You can use the delegate type to declare a variable that can refer to any method with the same signature as the delegate. </para>
            <para>The standard signature of an event handler delegate defines a method that does not return a value, whose first parameter is of type <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> and refers to the instance that raises the event, and whose second parameter is derived from type <codeEntityReference autoUpgrade="true">T:System.EventArgs</codeEntityReference> and holds the event data. If the event does not generate event data, the second parameter is simply an instance of <codeEntityReference autoUpgrade="true">T:System.EventArgs</codeEntityReference>. Otherwise, the second parameter is a custom type derived from <codeEntityReference autoUpgrade="true">T:System.EventArgs</codeEntityReference> and supplies any fields or properties needed to hold the event data.</para>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.EventHandler`1</codeEntityReference> is a predefined delegate that represents an event handler method for an event, regardless of whether the event generates event data. If your event does not generate event data, substitute <codeEntityReference autoUpgrade="true">T:System.EventArgs</codeEntityReference> for the generic type parameter; otherwise, supply your own custom event data type and substitute it for the generic type parameter.</para>
            <para>The advantage of using <codeEntityReference autoUpgrade="true">T:System.EventHandler`1</codeEntityReference> is that you do not need to code your own custom delegate if your event generates event data. Additionally, the .NET Framework needs only one implementation to support <codeEntityReference autoUpgrade="true">T:System.EventHandler`1</codeEntityReference> regardless of the event data type you substitute for the generic type parameter.</para>
            <para>To associate the event with the method that will handle the event, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. </para>
            <para>For more information about event handler delegates, see <link xlink:href="d98fd58b-fa4f-4598-8378-addf4355a115">Events and Delegates (.NET Framework Guide)</link>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example declares event data and a generic <codeEntityReference autoUpgrade="true">T:System.EventHandler`1</codeEntityReference> delegate that uses the event data, and shows how the event is raised.</para>
                <codeReference>EventHandlerOfT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.EventHandler</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.EventArgs</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Delegate</codeEntityReference>
          <link xlink:href="d98fd58b-fa4f-4598-8378-addf4355a115">Events and Delegates (.NET Framework Guide)</link>
        </relatedTopics>
      </dduexml>
    </member>
  </members>
</doc>