<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="bfaca16d-5814-4bb5-8d8d-27766a3457ab" revisionNumber="5">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.ValueType">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Provides the base class for value types.</para>
        </summary>
        <remarks>
          <content>
            <para>
              <languageKeyword>ValueType</languageKeyword> overrides the virtual methods from <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> with more appropriate implementations for value types. See also <codeEntityReference autoUpgrade="true">T:System.Enum</codeEntityReference>, which inherits from <languageKeyword>ValueType</languageKeyword>.</para>
            <para>Data types are separated into value types and reference types. Value types are either stack-allocated or allocated inline in a structure. Reference types are heap-allocated. Both reference and value types are derived from the ultimate base class <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>. In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it. The wrapper is marked so the system knows that it contains a value type. This process is known as boxing, and the reverse process is known as unboxing. Boxing and unboxing allow any type to be treated as an object.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Enum</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Indicates whether this instance and a specified object are equal.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>obj</parameterReference>
            <content>
              <para>Another object to compare to. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>obj</parameterReference> and this instance are the same type and represent the same value; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The default implementation of the <codeEntityReference autoUpgrade="true">M:System.ValueType.Equals(System.Object)</codeEntityReference> method uses reflection to compare the corresponding fields of <parameterReference>obj</parameterReference> and this instance. Override the <codeEntityReference autoUpgrade="true">M:System.ValueType.Equals(System.Object)</codeEntityReference> method for a particular type to improve the performance of the method and more closely represent the concept of equality for the type.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates how the <codeEntityReference autoUpgrade="true">M:System.ValueType.Equals(System.Object)</codeEntityReference> method can be overridden by a derived value type.</para>
                <codeReference>ValueType.Equals Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the hash code for this instance.</para>
        </summary>
        <returnValue>
          <para>A 32-bit signed integer that is the hash code for this instance.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.ValueType.GetHashCode</codeEntityReference> method applies to types derived from <codeEntityReference autoUpgrade="true">T:System.ValueType</codeEntityReference>. One or more fields of the derived type is used to calculate the return value. If you call the derived type's <languageKeyword>GetHashCode</languageKeyword> method, the return value is not likely to be suitable for use as a key in a hash table. Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table. In either case, consider writing your own implementation of the <codeEntityReference autoUpgrade="true">M:System.ValueType.GetHashCode</codeEntityReference> method that more closely represents the concept of a hash code for the type. </para>
            <para>For more information, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.GetHashCode</codeEntityReference>, and <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.Hashtable</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates how the <codeEntityReference autoUpgrade="true">M:System.ValueType.GetHashCode</codeEntityReference> method can be overridden by a derived value type.</para>
                <codeReference>ValueType.Equals Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.ValueType.ToString">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the fully qualified type name of this instance.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a fully qualified type name.</para>
        </returnValue>
      </dduexml>
    </member>
  </members>
</doc>