<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="774ce0c8-5385-494e-8d55-8fcd51adc5fc" revisionNumber="6">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Converter`2">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents a method that converts an object from one type to another type.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>TInput</parameterReference>
            <content>
              <para>The type of object that is to be converted.</para>
            </content>
          </genericParameter>
          <genericParameter>
            <parameterReference>TOutput</parameterReference>
            <content>
              <para>The type the input object is to be converted to.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>input</parameterReference>
            <content>
              <para>The object to convert.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <parameterReference>TOutput</parameterReference> that represents the converted <parameterReference>TInput</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This delegate is used by the <codeEntityReference autoUpgrade="true">M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})</codeEntityReference> method of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> class and the <codeEntityReference autoUpgrade="true">M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})</codeEntityReference> method of the <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.List`1</codeEntityReference> class to convert each element of the collection from one type to another.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This section contains two code examples. The first demonstrates the <codeEntityReference autoUpgrade="true">T:System.Converter`2</codeEntityReference> delegate with the <codeEntityReference autoUpgrade="true">M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})</codeEntityReference> method of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> class, and the second demonstrates the delegate with the <codeEntityReference autoUpgrade="true">M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})</codeEntityReference> method of the <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.List`1</codeEntityReference> generic class.</para>
                <para>Example 1</para>
                <para>The following code example defines a method named <codeInline>PointFToPoint</codeInline> that converts a <codeEntityReference autoUpgrade="true">T:System.Drawing.PointF</codeEntityReference> structure to a <codeEntityReference autoUpgrade="true">T:System.Drawing.Point</codeEntityReference> structure. The example then creates an array of <codeEntityReference autoUpgrade="true">T:System.Drawing.PointF</codeEntityReference> structures, creates a <codeInline>Converter&lt;PointF, Point&gt;</codeInline> delegate (<codeInline>Converter(Of PointF, Point)</codeInline> in Visual Basic) to represent the <codeInline>PointFToPoint</codeInline> method, and passes the delegate to the <codeEntityReference autoUpgrade="true">M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})</codeEntityReference> method. The <codeEntityReference autoUpgrade="true">M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})</codeEntityReference> method passes each element of the input list to the <codeInline>PointFToPoint</codeInline> method and puts the converted elements into a new list of <codeEntityReference autoUpgrade="true">T:System.Drawing.Point</codeEntityReference> structures. Both lists are displayed.</para>
                <codeReference>Array_ConvertAll#1</codeReference>
                <para>Example 2</para>
                <para>The following code example defines a method named <codeInline>PointFToPoint</codeInline> that converts a <codeEntityReference autoUpgrade="true">T:System.Drawing.PointF</codeEntityReference> structure to a <codeEntityReference autoUpgrade="true">T:System.Drawing.Point</codeEntityReference> structure. The example then creates a <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.List`1</codeEntityReference> of <codeEntityReference autoUpgrade="true">T:System.Drawing.PointF</codeEntityReference> structures, creates a <codeInline>Converter&lt;PointF, Point&gt;</codeInline> delegate (<codeInline>Converter(Of PointF, Point)</codeInline> in Visual Basic) to represent the <codeInline>PointFToPoint</codeInline> method, and passes the delegate to the <codeEntityReference autoUpgrade="true">M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})</codeEntityReference> method. The <codeEntityReference autoUpgrade="true">M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})</codeEntityReference> method passes each element of the input list to the <codeInline>PointFToPoint</codeInline> method and puts the converted elements into a new list of <codeEntityReference autoUpgrade="true">T:System.Drawing.Point</codeEntityReference> structures. Both lists are displayed.</para>
                <codeReference>List`1_ConvertAll#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
  </members>
</doc>