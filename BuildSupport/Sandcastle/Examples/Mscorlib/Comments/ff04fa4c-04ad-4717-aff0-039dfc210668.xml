<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="ff04fa4c-04ad-4717-aff0-039dfc210668" revisionNumber="26">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Activator">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Contains methods to create types of objects locally or remotely, or obtain references to existing remote objects. This class cannot be inherited.</para>
        </summary>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</codeEntityReference> method creates an instance of a type defined in an assembly by invoking the constructor that best matches the specified arguments. If no arguments are specified then the constructor that takes no parameters, that is, the default constructor, is invoked.</para>
            <para>You must have sufficient permission to search for and call a constructor, otherwise an exception is thrown. By default, only public constructors are considered during the search for a constructor. If no constructor or default constructor can be found, an exception is thrown.</para>
            <para>A binder parameter specifies an object that searches an assembly for a suitable constructor. You can specify your own binder and search criteria, but if no binder is specified a default binder is used. For more information, see the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Reflection.Binder</codeEntityReference> and <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Reflection.BindingFlags</codeEntityReference> classes.</para>
            <para>An evidence parameter affects the security policy and permissions for the constructor. For more information, see the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Security.Policy.Evidence</codeEntityReference> class.</para>
            <para>An instance of a type can be created at a local or remote site. If the type is created remotely, an activation attribute parameter specifies the URI of the remote site. The call to create the instance might pass through intermediary sites before it reaches the remote site. Other activation attributes can modify the environment, or context, in which the call operates at the remote and intermediary sites.</para>
            <para>If the instance is created locally, a reference to that object is returned. If the instance is created remotely, a reference to a proxy is returned. The remote object is manipulated through the proxy as if it were a local object.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Activator.GetObject(System.Type,System.String)</codeEntityReference> method creates a proxy to a currently running remote object, server-activated well-known object, or XML Web service. You can specify the connection medium, that is, the channel. For more information, see the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Runtime.Remoting.Channels.ChannelServices</codeEntityReference> class.</para>
            <para>Assemblies contain type definitions. The <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</codeEntityReference> method creates an instance of a type from a currently running assembly. The <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstanceFrom(System.String,System.String)</codeEntityReference> method creates an instance from a file that contains an assembly. The <codeEntityReference autoUpgrade="true">M:System.Activator.CreateComInstanceFrom(System.String,System.String)</codeEntityReference> method creates an instance of a COM object from a file that contains an assembly.</para>
            <para>For more information about server-activated and client-activated objects, see the <link xlink:href="77ded6e2-4ca8-448b-acf2-562d27fd4396">Server Activation</link> topic</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example shows how to use the <codeEntityReference autoUpgrade="true">T:System.Activator</codeEntityReference> class to dynamically construct objects at runtime.</para>
                <codeReference>ActivatorX#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="eccb1d31-0a22-417a-97fd-f4f1f3aa4462">.NET Remoting Overview</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Activator.CreateComInstanceFrom">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the COM object whose name is specified.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateComInstanceFrom(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the COM object whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>assemblyName</parameterReference>
            <content>
              <para>The name of a file that contains an assembly where the type named <parameterReference>typeName</parameterReference> is sought. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>An instance cannot be created through COM. </para>
              <para>-or-</para>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyName</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is not found, or the module you are trying to load does not specify a file name extension. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>The caller cannot provide activation attributes for an object that does not inherit from <codeEntityReference autoUpgrade="true">T:System.MarshalByRefObject</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is the empty string (""). </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> method to unwrap the return value.</para>
            <para>A <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Runtime.InteropServices.ComVisibleAttribute</codeEntityReference> attribute with a value of <languageKeyword>true</languageKeyword> must be applied either explicitly or by default to the COM type so the <codeEntityReference autoUpgrade="true">M:System.Activator.CreateComInstanceFrom(System.String,System.String)</codeEntityReference> method can create an instance of that type; otherwise, <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference> is thrown.</para>
            <para>For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Reflection.Assembly.LoadFrom(System.String)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</codeEntityReference> methods.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      <overload>
        <summary>
          <para>Creates an instance of the COM object whose name is specified.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the COM object whose name is specified, using the named assembly file and the default constructor.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>assemblyName</parameterReference>
            <content>
              <para>The name of a file that contains an assembly where the type named <parameterReference>typeName</parameterReference> is sought. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>hashValue</parameterReference>
            <content>
              <para>The value of the computed hash code. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>hashAlgorithm</parameterReference>
            <content>
              <para>The hash algorithm used for hashing files and generating the strong name. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeName</parameterReference> or <parameterReference>assemblyName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is the empty string (""). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.PathTooLongException</codeEntityReference>
            <content>
              <para>An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is not found, or the module you are trying to load does not specify a file name extension. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is found but cannot be loaded. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.BadImageFormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is not a valid assembly. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>A code base that does not start with "file://" was specified without the required <languageKeyword>WebPermission</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>An instance cannot be created through COM.</para>
              <para>-or- </para>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyName</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>An instance of an abstract class cannot be created or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>The caller cannot provide activation attributes for an object that does not inherit from <codeEntityReference autoUpgrade="true">T:System.MarshalByRefObject</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> method to unwrap the return value.</para>
            <para>A <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Runtime.InteropServices.ComVisibleAttribute</codeEntityReference> attribute with a value of <languageKeyword>true</languageKeyword> must be applied either explicitly or by default to the COM type so the <codeEntityReference autoUpgrade="true">M:System.Activator.CreateComInstanceFrom(System.String,System.String)</codeEntityReference> method can create an instance of that type; otherwise, <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference> is thrown.</para>
            <para>For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Reflection.Assembly.LoadFrom(System.String)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</codeEntityReference> methods.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>when invoked late-bound through mechanisms such as <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</codeEntityReference>. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess</codeEntityReference>. </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>
            <content>
              <para>for reading a URI that begins with "file://". Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.FileIOPermissionAccess.Read</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Net.WebPermission</codeEntityReference>
            <content>
              <para>for reading a URI that does not begin with "file://". </para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="Overload:System.Activator.CreateInstance">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the specified type using the constructor that best matches the specified parameters.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.ActivationContext)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type designated by the specified <codeEntityReference autoUpgrade="true">T:System.ActivationContext</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>activationContext</parameterReference>
            <content>
              <para>An activation context object that specifies the object to create.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created object.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> method to unwrap the return value.</para>
            <para>The activation context is used during manifest-based activation to set up the domain policy and provide an application-based security model. The <codeEntityReference autoUpgrade="true">T:System.ActivationContext</codeEntityReference> class contains an <codeEntityReference autoUpgrade="true">T:System.ApplicationIdentity</codeEntityReference> object that provides access to the application manifest. For more information, see the <codeEntityReference autoUpgrade="true">T:System.Security.Policy.ApplicationSecurityManager</codeEntityReference> class.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.ActivationContext</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.ApplicationIdentity</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Security.Policy.ApplicationSecurityManager</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Creates an instance of the specified type using the constructor that best matches the specified parameters.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.ActivationContext,System.String[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type designated by the specified <codeEntityReference autoUpgrade="true">T:System.ActivationContext</codeEntityReference> object and activated with the specified custom activation data.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>activationContext</parameterReference>
            <content>
              <para>An activation context object that specifies the object to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>activationCustomData</parameterReference>
            <content>
              <para>An array of Unicode strings that contain custom activation data.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created object.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> method to unwrap the return value.</para>
            <para>The activation context is used during manifest-based activation to set up the domain policy and provide an application-based security model. The <codeEntityReference autoUpgrade="true">T:System.ActivationContext</codeEntityReference> class contains an <codeEntityReference autoUpgrade="true">T:System.ApplicationIdentity</codeEntityReference> object that provides access to the application manifest. For more information, see the <codeEntityReference autoUpgrade="true">T:System.Security.Policy.ApplicationSecurityManager</codeEntityReference> class.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.ActivationContext</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.ApplicationIdentity</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Security.Policy.ApplicationSecurityManager</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and default constructor.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>domain</parameterReference>
            <content>
              <para>The remote domain where the type named <parameterReference>typeName</parameterReference> is created.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>assemblyName</parameterReference>
            <content>
              <para>The name of the assembly where the type named <parameterReference>typeName</parameterReference> is sought. If <parameterReference>assemblyName</parameterReference> is <languageKeyword>null</languageKeyword>, the executing assembly is searched. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeName</parameterReference> or <parameterReference>domain</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching public constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyName</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> was not found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>You cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor, which was invoked through reflection, threw an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.BadImageFormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is not a valid assembly. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileLoadException</codeEntityReference>
            <content>
              <para>An assembly or module was loaded twice with two different evidences. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String)</codeEntityReference> when a host needs to execute code in an AppDomain with restricted security permissions.</para>
            <para>Use <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> to unwrap the return value.</para>
            <alert class="note">
              <para>This method uses <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.SecurityAction.LinkDemand</codeEntityReference> to require the immediate caller to have full trust. For important limitations on using the <languageKeyword>LinkDemand</languageKeyword> member, see <link xlink:href="1AB877F2-70F4-4E0D-8116-943999DFE8F5">[&lt;topic://cpcondemandvslinkdemand&gt;]</link>.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and the constructor that best matches the specified parameters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>domain</parameterReference>
            <content>
              <para>The domain where the type named <parameterReference>typeName</parameterReference> is created.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>assemblyName</parameterReference>
            <content>
              <para>The name of the assembly where the type named <parameterReference>typeName</parameterReference> is sought. If <parameterReference>assemblyName</parameterReference> is <languageKeyword>null</languageKeyword>, the executing assembly is searched. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ignoreCase</parameterReference>
            <content>
              <para>
                <languageKeyword>true</languageKeyword> to specify the search for <parameterReference>typeName</parameterReference> is not case-sensitive; <languageKeyword>false</languageKeyword> to specify the search is case-sensitive. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>bindingAttr</parameterReference>
            <content>
              <para>A combination of zero or more bit flags that affect the search for the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>bindingAttr</parameterReference> is zero, a case-sensitive search for public constructors is conducted. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>binder</parameterReference>
            <content>
              <para>An object that uses <parameterReference>bindingAttr</parameterReference> and <parameterReference>args</parameterReference> to seek and identify the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>binder</parameterReference> is <languageKeyword>null</languageKeyword>, the default binder is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <parameterReference>args</parameterReference> is an empty array or <languageKeyword>null</languageKeyword>, the constructor that takes no parameters (the default constructor) is invoked. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>Culture-specific information that governs the coercion of <parameterReference>args</parameterReference> to the formal types declared for the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>, the <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> for the current thread is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>activationAttributes</parameterReference>
            <content>
              <para>An array of one or more attributes that can participate in activation. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>securityAttributes</parameterReference>
            <content>
              <para>Information used to make security policy decisions and grant code permissions. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>domain</parameterReference> or <parameterReference>typeName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyName</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> was not found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor, which was invoked through reflection, threw an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported.</para>
              <para>-or- </para>
              <para>
                <parameterReference>activationAttributes</parameterReference> is not an empty array and the type being created does not derive from <codeEntityReference autoUpgrade="true">T:System.MarshalByRefObject</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.BadImageFormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is not a valid assembly. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileLoadException</codeEntityReference>
            <content>
              <para>An assembly or module was loaded twice with two different evidences. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)</codeEntityReference> when a host needs to execute code in an AppDomain with restricted security permissions.</para>
            <para>Use <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> to unwrap the return value.</para>
            <alert class="note">
              <para>This method uses <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.SecurityAction.LinkDemand</codeEntityReference> to require the immediate caller to have full trust. For important limitations on using the <languageKeyword>LinkDemand</languageKeyword> member, see <link xlink:href="1AB877F2-70F4-4E0D-8116-943999DFE8F5">[&lt;topic://cpcondemandvslinkdemand&gt;]</link>.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <link xlink:href="eccb1d31-0a22-417a-97fd-f4f1f3aa4462">.NET Remoting Overview</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified, using the named assembly and default constructor.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>assemblyName</parameterReference>
            <content>
              <para>The name of the assembly where the type named <parameterReference>typeName</parameterReference> is sought. If <parameterReference>assemblyName</parameterReference> is <languageKeyword>null</languageKeyword>, the executing assembly is searched. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching public constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyName</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> was not found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>You cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor, which was invoked through reflection, threw an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.BadImageFormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is not a valid assembly. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileLoadException</codeEntityReference>
            <content>
              <para>An assembly or module was loaded twice with two different evidences. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> to unwrap the return value.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>assemblyName</parameterReference>
            <content>
              <para>The name of the assembly where the type named <parameterReference>typeName</parameterReference> is sought. If <parameterReference>assemblyName</parameterReference> is <languageKeyword>null</languageKeyword>, the executing assembly is searched. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ignoreCase</parameterReference>
            <content>
              <para>
                <languageKeyword>true</languageKeyword> to specify the search for <parameterReference>typeName</parameterReference> is not case-sensitive; <languageKeyword>false</languageKeyword> to specify the search is case-sensitive. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>bindingAttr</parameterReference>
            <content>
              <para>A combination of zero or more bit flags that affect the search for the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>bindingAttr</parameterReference> is zero, a case-sensitive search for public constructors is conducted. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>binder</parameterReference>
            <content>
              <para>An object that uses <parameterReference>bindingAttr</parameterReference> and <parameterReference>args</parameterReference> to seek and identify the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>binder</parameterReference> is <languageKeyword>null</languageKeyword>, the default binder is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <parameterReference>args</parameterReference> is an empty array or <languageKeyword>null</languageKeyword>, the constructor that takes no parameters (the default constructor) is invoked. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>Culture-specific information that governs the coercion of <parameterReference>args</parameterReference> to the formal types declared for the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>, the <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> for the current thread is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>activationAttributes</parameterReference>
            <content>
              <para>An array of one or more attributes that can participate in activation. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>securityInfo</parameterReference>
            <content>
              <para>Information used to make security policy decisions and grant code permissions. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyName</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> was not found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor, which was invoked through reflection, threw an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported.</para>
              <para>-or- </para>
              <para>
                <parameterReference>activationAttributes</parameterReference> is not an empty array and the type being created does not derive from <codeEntityReference autoUpgrade="true">T:System.MarshalByRefObject</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.BadImageFormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is not a valid assembly. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileLoadException</codeEntityReference>
            <content>
              <para>An assembly or module was loaded twice with two different evidences. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> to unwrap the return value.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates an overload of the <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</codeEntityReference> method.</para>
                <para>For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <link xlink:href="8f8c2c90-f15d-400e-87e7-a757e4f04d0e">Assembly Names</link>.</para>
                <codeReference>Activator#12</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <link xlink:href="eccb1d31-0a22-417a-97fd-f4f1f3aa4462">.NET Remoting Overview</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Object[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified, using the named assembly and default constructor.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>assemblyName</parameterReference>
            <content>
              <para>The name of the assembly where the type named <parameterReference>typeName</parameterReference> is sought. If <parameterReference>assemblyName</parameterReference> is <languageKeyword>null</languageKeyword>, the executing assembly is searched. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>activationAttributes</parameterReference>
            <content>
              <para>An array of one or more attributes that can participate in activation. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching public constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyName</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> was not found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported.</para>
              <para>-or- </para>
              <para>
                <parameterReference>activationAttributes</parameterReference> is not an empty array and the type being created does not derive from <codeEntityReference autoUpgrade="true">T:System.MarshalByRefObject</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.BadImageFormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyName</parameterReference> is not a valid assembly. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileLoadException</codeEntityReference>
            <content>
              <para>An assembly or module was loaded twice with two different evidences. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> to unwrap the return value.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <link xlink:href="eccb1d31-0a22-417a-97fd-f4f1f3aa4462">.NET Remoting Overview</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the specified type using the constructor that best matches the specified parameter.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type of object to create. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the newly created object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a <languageKeyword>RuntimeType</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> cannot be a <codeEntityReference autoUpgrade="true">T:System.Reflection.Emit.TypeBuilder</codeEntityReference>.</para>
              <para>-or- </para>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor being called throws an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching public constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.COMException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a valid type. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The constructor to be invoked must be accessible.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates calling the <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance</codeEntityReference> method. This code example is part of a larger example provided for the <codeEntityReference autoUpgrade="true">T:System.Activator</codeEntityReference> class.</para>
                <codeReference>ActivatorX#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the specified type using the constructor that best matches the specified parameters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type of object to create. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>nonPublic</parameterReference>
            <content>
              <para>
                <languageKeyword>true</languageKeyword> if a public or nonpublic default constructor can match; <languageKeyword>false</languageKeyword> if only a public default constructor can match. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the newly created object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a <languageKeyword>RuntimeType</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> cannot be a <codeEntityReference autoUpgrade="true">T:System.Reflection.Emit.TypeBuilder</codeEntityReference>.</para>
              <para>-or- </para>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor being called throws an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching public constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.COMException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a valid type. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The constructor to be invoked must be accessible.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the specified type using the constructor that best matches the specified parameters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type of object to create. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <parameterReference>args</parameterReference> is an empty array or <languageKeyword>null</languageKeyword>, the constructor that takes no parameters (the default constructor) is invoked. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the newly created object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a <languageKeyword>RuntimeType</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> cannot be a <codeEntityReference autoUpgrade="true">T:System.Reflection.Emit.TypeBuilder</codeEntityReference>.</para>
              <para>-or- </para>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor being called throws an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching public constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.COMException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a valid type. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The constructor to be invoked must be accessible and provide the most specific match with the specified argument list.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess </para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the specified type using the constructor that best matches the specified parameters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type of object to create. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <parameterReference>args</parameterReference> is an empty array or <languageKeyword>null</languageKeyword>, the constructor that takes no parameters (the default constructor) is invoked. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>activationAttributes</parameterReference>
            <content>
              <para>An array of one or more attributes that can participate in activation. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the newly created object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a <languageKeyword>RuntimeType</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> cannot be a <codeEntityReference autoUpgrade="true">T:System.Reflection.Emit.TypeBuilder</codeEntityReference>.</para>
              <para>-or- </para>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported.</para>
              <para>-or- </para>
              <para>
                <parameterReference>activationAttributes</parameterReference> is not an empty array and the type being created does not derive from <codeEntityReference autoUpgrade="true">T:System.MarshalByRefObject</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor being called throws an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching public constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.COMException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a valid type. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The constructor to be invoked must be accessible and provide the most specific match with the specified argument list.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess </para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <link xlink:href="eccb1d31-0a22-417a-97fd-f4f1f3aa4462">.NET Remoting Overview</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the specified type using the constructor that best matches the specified parameters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type of object to create. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>bindingAttr</parameterReference>
            <content>
              <para>A combination of zero or more bit flags that affect the search for the <parameterReference>type</parameterReference> constructor. If <parameterReference>bindingAttr</parameterReference> is zero, a case-sensitive search for public constructors is conducted. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>binder</parameterReference>
            <content>
              <para>An object that uses <parameterReference>bindingAttr</parameterReference> and <parameterReference>args</parameterReference> to seek and identify the <parameterReference>type</parameterReference> constructor. If <parameterReference>binder</parameterReference> is <languageKeyword>null</languageKeyword>, the default binder is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <parameterReference>args</parameterReference> is an empty array or <languageKeyword>null</languageKeyword>, the constructor that takes no parameters (the default constructor) is invoked. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>Culture-specific information that governs the coercion of <parameterReference>args</parameterReference> to the formal types declared for the <parameterReference>type</parameterReference> constructor. If <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>, the <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> for the current thread is used. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the newly created object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a <languageKeyword>RuntimeType</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> cannot be a <codeEntityReference autoUpgrade="true">T:System.Reflection.Emit.TypeBuilder</codeEntityReference>.</para>
              <para>-or- </para>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor being called throws an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.COMException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a valid type. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The constructor to be invoked must be accessible and provide the most specific match with the specified argument list under the constraints of the specified binder and binding attributes.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess </para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the specified type using the constructor that best matches the specified parameters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type of object to create. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>bindingAttr</parameterReference>
            <content>
              <para>A combination of zero or more bit flags that affect the search for the <parameterReference>type</parameterReference> constructor. If <parameterReference>bindingAttr</parameterReference> is zero, a case-sensitive search for public constructors is conducted. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>binder</parameterReference>
            <content>
              <para>An object that uses <parameterReference>bindingAttr</parameterReference> and <parameterReference>args</parameterReference> to seek and identify the <parameterReference>type</parameterReference> constructor. If <parameterReference>binder</parameterReference> is <languageKeyword>null</languageKeyword>, the default binder is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <parameterReference>args</parameterReference> is an empty array or <languageKeyword>null</languageKeyword>, the constructor that takes no parameters (the default constructor) is invoked. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>Culture-specific information that governs the coercion of <parameterReference>args</parameterReference> to the formal types declared for the <parameterReference>type</parameterReference> constructor. If <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>, the <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> for the current thread is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>activationAttributes</parameterReference>
            <content>
              <para>An array of one or more attributes that can participate in activation. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the newly created object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a <languageKeyword>RuntimeType</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> cannot be a <codeEntityReference autoUpgrade="true">T:System.Reflection.Emit.TypeBuilder</codeEntityReference>.</para>
              <para>-or- </para>
              <para>Creation of <codeEntityReference autoUpgrade="true">T:System.TypedReference</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ArgIterator</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.RuntimeArgumentHandle</codeEntityReference> types, or arrays of those types, is not supported.</para>
              <para>-or- </para>
              <para>
                <parameterReference>activationAttributes</parameterReference> is not an empty array and the type being created does not derive from <codeEntityReference autoUpgrade="true">T:System.MarshalByRefObject</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor being called throws an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.InvalidComObjectException</codeEntityReference>
            <content>
              <para>The COM type was not obtained through <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromProgID</codeEntityReference> or <codeEntityReference autoUpgrade="true">Overload:System.Type.GetTypeFromCLSID</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.COMException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not a valid type. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The constructor to be invoked must be accessible and provide the most specific match with the specified argument list under the constraints of the specified binder and binding attributes.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess </para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <link xlink:href="eccb1d31-0a22-417a-97fd-f4f1f3aa4462">.NET Remoting Overview</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <clsCompliantAlternative>
          <codeEntityReference>M:System.Activator.CreateInstance(System.Type)</codeEntityReference>
          <content>
          </content>
        </clsCompliantAlternative>
        <summary>
          <para>Creates an instance of the type designated by the specified generic type parameter.</para>
        </summary>
        <returnValue>
          <para>A reference to the newly created object.</para>
        </returnValue>
        <remarks>
          <content>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Activator.CreateInstanceFrom">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and default constructor.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>domain</parameterReference>
            <content>
              <para>The remote domain where the type named <parameterReference>typeName</parameterReference> is created.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>assemblyFile</parameterReference>
            <content>
              <para>The name of a file that contains an assembly where the type named <parameterReference>typeName</parameterReference> is sought. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>domain</parameterReference> or <parameterReference>typeName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching public constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyFile</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyFile</parameterReference> was not found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor, which was invoked through reflection, threw an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does have the required <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)</codeEntityReference> when a host needs to execute code in an AppDomain with restricted security permissions.</para>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> method to unwrap the return value.</para>
            <alert class="note">
              <para>This method uses <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.SecurityAction.LinkDemand</codeEntityReference> to require the immediate caller to have full trust. For important limitations on using the <languageKeyword>LinkDemand</languageKeyword> member, see <link xlink:href="1AB877F2-70F4-4E0D-8116-943999DFE8F5">[&lt;topic://cpcondemandvslinkdemand&gt;]</link>.</para>
            </alert>
            <para>For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Reflection.Assembly.LoadFrom(System.String)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</codeEntityReference> methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and the constructor that best matches the specified parameters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>domain</parameterReference>
            <content>
              <para>The remote domain where the type named <parameterReference>typeName</parameterReference> is created.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>assemblyFile</parameterReference>
            <content>
              <para>The name of a file that contains an assembly where the type named <parameterReference>typeName</parameterReference> is sought. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ignoreCase</parameterReference>
            <content>
              <para>
                <languageKeyword>true</languageKeyword> to specify the search for <parameterReference>typeName</parameterReference> is not case-sensitive; <languageKeyword>false</languageKeyword> to specify the search is case-sensitive. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>bindingAttr</parameterReference>
            <content>
              <para>A combination of zero or more bit flags that affect the search for the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>bindingAttr</parameterReference> is zero, a case-sensitive search for public constructors is conducted. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>binder</parameterReference>
            <content>
              <para>An object that uses <parameterReference>bindingAttr</parameterReference> and <parameterReference>args</parameterReference> to seek and identify the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>binder</parameterReference> is <languageKeyword>null</languageKeyword>, the default binder is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <parameterReference>args</parameterReference> is an empty array or <languageKeyword>null</languageKeyword>, the constructor that takes no parameters (the default constructor) is invoked. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>Culture-specific information that governs the coercion of <parameterReference>args</parameterReference> to the formal types declared for the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>, the <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> for the current thread is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>activationAttributes</parameterReference>
            <content>
              <para>An array of one or more attributes that can participate in activation. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>securityAttributes</parameterReference>
            <content>
              <para>Information used to make security policy decisions and grant code permissions. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>domain</parameterReference> or <parameterReference>typeName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyFile</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyFile</parameterReference> was not found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor, which was invoked through reflection, threw an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does have the required <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>activationAttributes</parameterReference> is not an empty array and the type being created does not derive from <codeEntityReference autoUpgrade="true">T:System.MarshalByRefObject</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)</codeEntityReference> when a host needs to execute code in an AppDomain with restricted security permissions.</para>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> method to unwrap the return value.</para>
            <alert class="note">
              <para>This method uses <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.SecurityAction.LinkDemand</codeEntityReference> to require the immediate caller to have full trust. For important limitations on using the <languageKeyword>LinkDemand</languageKeyword> member, see <link xlink:href="1AB877F2-70F4-4E0D-8116-943999DFE8F5">[&lt;topic://cpcondemandvslinkdemand&gt;]</link>.</para>
            </alert>
            <para>For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Reflection.Assembly.LoadFrom(System.String)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</codeEntityReference> methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>
            <content>
              <para>for the ability to search directory paths and read their contents. Associated enumerations: FileIOPermissionAccess/PathDiscovery and Read </para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <link xlink:href="eccb1d31-0a22-417a-97fd-f4f1f3aa4462">.NET Remoting Overview</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified, using the named assembly file and default constructor.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>assemblyFile</parameterReference>
            <content>
              <para>The name of a file that contains an assembly where the type named <parameterReference>typeName</parameterReference> is sought. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching public constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyFile</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyFile</parameterReference> was not found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor, which was invoked through reflection, threw an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does have the required <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> method to unwrap the return value.</para>
            <para>For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Reflection.Assembly.LoadFrom(System.String)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</codeEntityReference> methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates calling the <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstanceFrom(System.String,System.String)</codeEntityReference> method. This code example is part of a larger example provided for the <codeEntityReference autoUpgrade="true">T:System.Activator</codeEntityReference> class.</para>
                <codeReference>ActivatorX#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>
            <content>
              <para>for the ability to search directory paths and read their contents. Associated enumerations: FileIOPermissionAccess/PathDiscovery and Read </para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>assemblyFile</parameterReference>
            <content>
              <para>The name of a file that contains an assembly where the type named <parameterReference>typeName</parameterReference> is sought. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ignoreCase</parameterReference>
            <content>
              <para>
                <languageKeyword>true</languageKeyword> to specify the search for <parameterReference>typeName</parameterReference> is not case-sensitive; <languageKeyword>false</languageKeyword> to specify the search is case-sensitive. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>bindingAttr</parameterReference>
            <content>
              <para>A combination of zero or more bit flags that affect the search for the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>bindingAttr</parameterReference> is zero, a case-sensitive search for public constructors is conducted. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>binder</parameterReference>
            <content>
              <para>An object that uses <parameterReference>bindingAttr</parameterReference> and <parameterReference>args</parameterReference> to seek and identify the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>binder</parameterReference> is <languageKeyword>null</languageKeyword>, the default binder is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <parameterReference>args</parameterReference> is an empty array or <languageKeyword>null</languageKeyword>, the constructor that takes no parameters (the default constructor) is invoked. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>Culture-specific information that governs the coercion of <parameterReference>args</parameterReference> to the formal types declared for the <parameterReference>typeName</parameterReference> constructor. If <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>, the <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> for the current thread is used. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>activationAttributes</parameterReference>
            <content>
              <para>An array of one or more attributes that can participate in activation. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>securityInfo</parameterReference>
            <content>
              <para>Information used to make security policy decisions and grant code permissions. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyFile</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyFile</parameterReference> was not found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor, which was invoked through reflection, threw an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does have the required <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>activationAttributes</parameterReference> is not an empty array and the type being created does not derive from <codeEntityReference autoUpgrade="true">T:System.MarshalByRefObject</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> method to unwrap the return value.</para>
            <para>For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Reflection.Assembly.LoadFrom(System.String)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</codeEntityReference> methods.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>
            <content>
              <para>for the ability to search directory paths and read their contents. Associated enumerations: FileIOPermissionAccess/PathDiscovery and Read </para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <link xlink:href="eccb1d31-0a22-417a-97fd-f4f1f3aa4462">.NET Remoting Overview</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates an instance of the type whose name is specified, using the named assembly file and default constructor.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>assemblyFile</parameterReference>
            <content>
              <para>The name of a file that contains an assembly where the type named <parameterReference>typeName</parameterReference> is sought. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeName</parameterReference>
            <content>
              <para>The name of the preferred type. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>activationAttributes</parameterReference>
            <content>
              <para>An array of one or more attributes that can participate in activation. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A handle that must be unwrapped to access the newly created instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeName</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MissingMethodException</codeEntityReference>
            <content>
              <para>No matching public constructor was found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.TypeLoadException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typename</parameterReference> was not found in <parameterReference>assemblyFile</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>
            <content>
              <para>
                <parameterReference>assemblyFile</parameterReference> was not found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MethodAccessException</codeEntityReference>
            <content>
              <para>The caller does not have permission to call this constructor. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.TargetInvocationException</codeEntityReference>
            <content>
              <para>The constructor, which was invoked through reflection, threw an exception. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>activationAttributes</parameterReference> is not an empty array and the type being created does not derive from <codeEntityReference autoUpgrade="true">T:System.MarshalByRefObject</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does have the required <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.ObjectHandle.Unwrap</codeEntityReference> method to unwrap the return value.</para>
            <para>For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Reflection.Assembly.LoadFrom(System.String)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</codeEntityReference> methods.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>
            <content>
              <para>for the ability to search directory paths and read their contents. Associated enumerations: FileIOPermissionAccess/PathDiscovery and Read </para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <link xlink:href="eccb1d31-0a22-417a-97fd-f4f1f3aa4462">.NET Remoting Overview</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Activator.GetObject">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a proxy for a currently running remote object, server-activated well-known object, or XML Web service.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Activator.GetObject(System.Type,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a proxy for the well-known object indicated by the specified type and URL.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type of the well-known object to which you want to connect. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>url</parameterReference>
            <content>
              <para>The URL of the well-known object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A proxy that points to an endpoint served by the requested well-known object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> or <parameterReference>url</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.Remoting.RemotingException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not marshaled by reference or an interface. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>This member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Call the proxy to send messages to the remote object. No messages are sent over the network until a method is called on the proxy.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to configure Remoting types and channels. Associated enumeration: SecurityPermissionFlag/RemotingConfiguration </para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Runtime.Remoting.WellKnownObjectMode</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Runtime.Remoting.RemotingConfiguration</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Creates a proxy for a currently running remote object, server-activated well-known object, or XML Web service.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Activator.GetObject(System.Type,System.String,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a proxy for the well-known object indicated by the specified type, URL, and channel data.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type of the well-known object to which you want to connect. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>url</parameterReference>
            <content>
              <para>The URL of the well-known object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>state</parameterReference>
            <content>
              <para>Channel-specific data or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A proxy that points to an endpoint served by the requested well-known object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> or <parameterReference>url</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.Remoting.RemotingException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not marshaled by reference or an interface. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.MemberAccessException</codeEntityReference>
            <content>
              <para>This member was invoked with a late-binding mechanism. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Call the proxy to send messages to the remote object. No messages are sent over the network until a method is called on the proxy.</para>
            <para>The <parameterReference>state</parameterReference> parameter communicates information to the channel, and is passed to the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink(System.String,System.Object,System.String@)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.ReflectionPermission</codeEntityReference>
            <content>
              <para>for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess </para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to configure Remoting types and channels. Associated enumeration: SecurityPermissionFlag/RemotingConfiguration </para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Runtime.Remoting.WellKnownObjectMode</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Runtime.Remoting.RemotingConfiguration</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Activator.System.Runtime.InteropServices._Activator.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Maps a set of names to a corresponding set of dispatch identifiers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>riid</parameterReference>
            <content>
              <para>Reserved for future use. Must be IID_NULL.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>rgszNames</parameterReference>
            <content>
              <para>The passed-in array of names to map.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>cNames</parameterReference>
            <content>
              <para>The count of the names to map.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>lcid</parameterReference>
            <content>
              <para>The locale context in which to interpret the names.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>rgDispId</parameterReference>
            <content>
              <para>The caller-allocated array that receives the IDs corresponding to the names.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotImplementedException</codeEntityReference>
            <content>
              <para>Late-bound access using the COM <unmanagedCodeEntityReference>IDispatch</unmanagedCodeEntityReference> interface is not supported.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <unmanagedCodeEntityReference>IDispatch::GetIDsOfNames</unmanagedCodeEntityReference>, see the MSDN Library.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Activator.System.Runtime.InteropServices._Activator.GetTypeInfoCount(System.UInt32@)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>pcTInfo</parameterReference>
            <content>
              <para>When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotImplementedException</codeEntityReference>
            <content>
              <para>Late-bound access using the COM <unmanagedCodeEntityReference>IDispatch</unmanagedCodeEntityReference> interface is not supported.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <unmanagedCodeEntityReference>IDispatch::GetTypeInfoCount</unmanagedCodeEntityReference>, see the MSDN Library.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Activator.System.Runtime.InteropServices._Activator.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves the type information for an object, which can then be used to get the type information for an interface.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>iTInfo</parameterReference>
            <content>
              <para>The type information to return.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>lcid</parameterReference>
            <content>
              <para>The locale identifier for the type information.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ppTInfo</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IntPtr</codeEntityReference> object that receives a pointer to the requested type information object.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotImplementedException</codeEntityReference>
            <content>
              <para>Late-bound access using the COM <unmanagedCodeEntityReference>IDispatch</unmanagedCodeEntityReference> interface is not supported.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <unmanagedCodeEntityReference>IDispatch::GetTypeInfo</unmanagedCodeEntityReference>, see the MSDN Library.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Activator.System.Runtime.InteropServices._Activator.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Provides access to properties and methods exposed by an object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>dispIdMember</parameterReference>
            <content>
              <para>A dispatch identifier that identifies the member.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>riid</parameterReference>
            <content>
              <para>Reserved for future use. Must be IID_NULL.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>lcid</parameterReference>
            <content>
              <para>The locale context in which to interpret arguments.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>wFlags</parameterReference>
            <content>
              <para>Flags describing the context of the call.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>pDispParams</parameterReference>
            <content>
              <para>A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>pVarResult</parameterReference>
            <content>
              <para>A pointer to the location where the result is to be stored.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>pExcepInfo</parameterReference>
            <content>
              <para>A pointer to a structure that contains exception information.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>puArgErr</parameterReference>
            <content>
              <para>The index of the first argument that has an error.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotImplementedException</codeEntityReference>
            <content>
              <para>Late-bound access using the COM <unmanagedCodeEntityReference>IDispatch</unmanagedCodeEntityReference> interface is not supported.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <unmanagedCodeEntityReference>IDispatch::Invoke</unmanagedCodeEntityReference>, see the MSDN Library.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
  </members>
</doc>