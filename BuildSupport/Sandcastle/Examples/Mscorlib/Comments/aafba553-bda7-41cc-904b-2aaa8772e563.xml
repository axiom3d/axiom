<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="aafba553-bda7-41cc-904b-2aaa8772e563" revisionNumber="16">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Exception">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents errors that occur during application execution.</para>
        </summary>
        <remarks>
          <content>
            <para>This class is the base class for all exceptions. When an error occurs, either the system or the currently executing application reports it by throwing an exception containing information about the error. Once thrown, an exception is handled by the application or by the default exception handler.</para>
            <para>The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into <languageKeyword>try</languageKeyword> blocks and <languageKeyword>catch</languageKeyword> blocks, respectively. There can be one or more <languageKeyword>catch</languageKeyword> blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.</para>
            <para>If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a <languageKeyword>try</languageKeyword> statement. Application code within a <languageKeyword>try</languageKeyword> statement is a <languageKeyword>try</languageKeyword> block. Application code that handles exceptions thrown by a <languageKeyword>try</languageKeyword> block is placed within a <languageKeyword>catch</languageKeyword> statement, and is called a <languageKeyword>catch</languageKeyword> block. Zero or more <languageKeyword>catch</languageKeyword> blocks are associated with a <languageKeyword>try</languageKeyword> block, and each <languageKeyword>catch</languageKeyword> block includes a type filter that determines the types of exceptions it handles.</para>
            <para>When an exception occurs in a <languageKeyword>try</languageKeyword> block, the system searches the associated <languageKeyword>catch</languageKeyword> blocks in the order they appear in application code, until it locates a <languageKeyword>catch</languageKeyword> block that handles the exception. A <languageKeyword>catch</languageKeyword> block handles an exception of type <languageKeyword>T</languageKeyword> if the type filter of the catch block specifies <languageKeyword>T</languageKeyword> or any type that <languageKeyword>T</languageKeyword> derives from. The system stops searching after it finds the first <languageKeyword>catch</languageKeyword> block that handles the exception. For this reason, in application code, a <languageKeyword>catch</languageKeyword> block that handles a type must be specified before a <languageKeyword>catch</languageKeyword> block that handles its base types, as demonstrated in the example that follows this section. A catch block that handles <languageKeyword>System.Exception</languageKeyword> is specified last.</para>
            <para>If none of the <languageKeyword>catch</languageKeyword> blocks associated with the current <languageKeyword>try</languageKeyword> block handle the exception, and the current <languageKeyword>try</languageKeyword> block is nested within other <languageKeyword>try</languageKeyword> blocks in the current call, the <languageKeyword>catch</languageKeyword> blocks associated with the next enclosing <languageKeyword>try</languageKeyword> block are searched. If no <languageKeyword>catch</languageKeyword> block for the exception is found, the system searches previous nesting levels in the current call. If no <languageKeyword>catch</languageKeyword> block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a <languageKeyword>catch</languageKeyword> block that handles the exception. The search of the call stack continues until the exception is handled or until no more frames exist on the call stack. If the top of the call stack is reached without finding a <languageKeyword>catch</languageKeyword> block that handles the exception, the default exception handler handles it and the application terminates.</para>
            <para>Exception types support the following features: </para>
            <list class="bullet">
              <listItem>
                <para>Human-readable text that describes the error. When an exception occurs, the runtime makes available a text message to inform the user of the nature of the error and to suggest action to resolve the problem. This text message is held in the <codeEntityReference autoUpgrade="true">P:System.Exception.Message</codeEntityReference> property of the exception object. During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception. If no error message argument is supplied to the constructor, the default error message is used.</para>
              </listItem>
              <listItem>
                <para>The state of the call stack when the exception was thrown. The <codeEntityReference autoUpgrade="true">P:System.Exception.StackTrace</codeEntityReference> property carries a stack trace that can be used to determine where in the code the error occurs. The stack trace lists all the called methods, and the line numbers in the source file where the calls are made.</para>
              </listItem>
            </list>
            <para>Two categories of exceptions exist under the base class <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference>: </para>
            <list class="bullet">
              <listItem>
                <para>The pre-defined common language runtime exception classes derived from <codeEntityReference autoUpgrade="true">T:System.SystemException</codeEntityReference>.</para>
              </listItem>
              <listItem>
                <para>The user-defined application exception classes derived from <codeEntityReference autoUpgrade="true">T:System.ApplicationException</codeEntityReference>.</para>
              </listItem>
            </list>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference> includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <codeEntityReference autoUpgrade="true">P:System.Exception.StackTrace</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Exception.Message</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Exception.HelpLink</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Exception.HResult</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Exception.Source</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Exception.TargetSite</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Exception.Data</codeEntityReference>.</para>
            <para>When a causal relationship exists between two or more exceptions, the <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference> property maintains this information. The outer exception is thrown in response to this inner exception. The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately. Supplementary information about the exception can be stored in the <codeEntityReference autoUpgrade="true">P:System.Exception.Data</codeEntityReference> property.</para>
            <para>The error message string passed to the constructor during the creation of the exception object should be localized, and can be supplied from a resource file using the <codeEntityReference autoUpgrade="true">T:System.Resources.ResourceManager</codeEntityReference>. For more information on localized resources, see the <codeEntityReference autoUpgrade="true">N:System.Resources</codeEntityReference> namespace overview and <link xlink:href="b224d7c0-35f8-4e82-a705-dd76795e8d16">Packaging and Deploying Resources</link>.</para>
            <para>To provide the user with extensive information concerning why the exception occurred, the <codeEntityReference autoUpgrade="true">P:System.Exception.HelpLink</codeEntityReference> property can hold a URL (or URN) to a help file.</para>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference> uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.</para>
            <para>For a list of initial property values for an instance of <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference>, see the <languageKeyword>Exception</languageKeyword> constructors.</para>
          </content>
          <sections>
            <section>
              <title>Performance Considerations</title>
              <content>
                <para>A significant amount of system resources and execution time are used when you throw or handle an exception. Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control. For example, your application can reasonably throw an exception if a method argument is invalid because you expect to call your method with valid parameters. An invalid method argument means something extraordinary has occurred. Conversely, do not throw an exception if user input is invalid because you can expect users to occasionally enter invalid data. In such a case, provide a retry mechanism so users can enter valid input. </para>
                <para>Throw exceptions only for extraordinary conditions, then catch exceptions in a general purpose exception handler that applies to the majority of your application, not a handler that applies to a specific exception. The rationale for this approach is that most errors can be handled by validation and error handling code in proximity to the error; no exception needs to be thrown or caught. The general purpose exception handler catches truly unexpected exceptions thrown anywhere in the application.</para>
                <para>In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, then continue processing. </para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates a <languageKeyword>catch</languageKeyword> block that is defined to handle <codeEntityReference autoUpgrade="true">T:System.ArithmeticException</codeEntityReference> errors. This <languageKeyword>catch</languageKeyword> block also catches <codeEntityReference autoUpgrade="true">T:System.DivideByZeroException</codeEntityReference> errors because <languageKeyword>DivideByZeroException</languageKeyword> derives from <languageKeyword>ArithmeticException</languageKeyword>, and there is no <languageKeyword>catch</languageKeyword> block explicitly defined for <languageKeyword>DivideByZeroException</languageKeyword> errors.</para>
                <codeReference>CatchException#1</codeReference>
                <para>The C# code has the following output: </para>
                <code>ArithmeticException Handler: System.DivideByZeroException: Attempted to divide by zero. at ExceptionTestClass.Main()</code>
                <para>The Visual Basic code has the following output: </para>
                <code>ArithmeticException Handler: System.OverflowException: Exception of type System.OverflowException was thrown. at ExceptionTestClass.Main()</code>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="F99A1D29-A2A8-47AF-9707-9909F9010735">[&lt;topic://cpconHandlingThrowingExceptions&gt;]</link>
          <link xlink:href="B224D7C0-35F8-4E82-A705-DD76795E8D16">[&lt;topic://cpconpackagingdeployingresources&gt;]</link>
          <codeEntityReference autoUpgrade="true">T:System.SystemException</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.ApplicationException</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Exception.#ctor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference> class.</para>
        </summary>
        <remarks>
          <content>
            <para>This constructor initializes the <codeEntityReference autoUpgrade="true">P:System.Exception.Message</codeEntityReference> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.</para>
            <para>All the derived classes should provide this default constructor. The following table shows the initial property values for an instance of <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference>.</para>
            <table>
              <tableHeader>
                <row>
                  <entry>
                    <para>Property </para>
                  </entry>
                  <entry>
                    <para>Value </para>
                  </entry>
                </row>
              </tableHeader>
              <row>
                <entry>
                  <para>
                    <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference>
                  </para>
                </entry>
                <entry>
                  <para>A null reference (<languageKeyword>Nothing</languageKeyword> in Visual Basic). </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <codeEntityReference autoUpgrade="true">P:System.Exception.Message</codeEntityReference>
                  </para>
                </entry>
                <entry>
                  <para>A system-supplied localized description. </para>
                </entry>
              </row>
            </table>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example derives an <languageKeyword>Exception</languageKeyword> that uses a predefined message. The code demonstrates the use of the parameterless constructor for the derived class and the base <languageKeyword>Exception</languageKeyword> class.</para>
                <codeReference>System.Exception.Ctor#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference> class.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="Overload:System.Exception.#ctor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference> class.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference> class with serialized data.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>info</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.SerializationInfo</codeEntityReference> that holds the serialized object data about the exception being thrown. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>context</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.StreamingContext</codeEntityReference> that contains contextual information about the source or destination. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>The <parameterReference>info</parameterReference> parameter is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.SerializationException</codeEntityReference>
            <content>
              <para>The class name is <languageKeyword>null</languageKeyword> or <codeEntityReference autoUpgrade="true">P:System.Exception.HResult</codeEntityReference> is zero (0). </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see <link xlink:href="832AC524-21BC-419A-A27B-CA8BFC45840F">[&lt;topic://cpconSerialization&gt;]</link>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a derived serializable <languageKeyword>Exception</languageKeyword> class. The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.SerializationInfo</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.StreamingContext</codeEntityReference>) constructor. The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</para>
                <codeReference>System.Exception.GetObjectData#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.SerializationInfo</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.StreamingContext</codeEntityReference>
          <link xlink:href="832AC524-21BC-419A-A27B-CA8BFC45840F">[&lt;topic://cpconSerialization&gt;]</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference> class with a specified error message.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>message</parameterReference>
            <content>
              <para>The message that describes the error. </para>
            </content>
          </parameter>
        </parameters>
        <remarks>
          <content>
            <para>This constructor initializes the <codeEntityReference autoUpgrade="true">P:System.Exception.Message</codeEntityReference> property of the new instance using the <parameterReference>message</parameterReference> parameter.</para>
            <para>The following table shows the initial property values for an instance of <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference>.</para>
            <table>
              <tableHeader>
                <row>
                  <entry>
                    <para>Property </para>
                  </entry>
                  <entry>
                    <para>Value </para>
                  </entry>
                </row>
              </tableHeader>
              <row>
                <entry>
                  <para>
                    <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference>
                  </para>
                </entry>
                <entry>
                  <para>A null reference (<languageKeyword>Nothing</languageKeyword> in Visual Basic). </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <codeEntityReference autoUpgrade="true">P:System.Exception.Message</codeEntityReference>
                  </para>
                </entry>
                <entry>
                  <para>The error message string. </para>
                </entry>
              </row>
            </table>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example derives an <languageKeyword>Exception</languageKeyword> for a specific condition. The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base <languageKeyword>Exception</languageKeyword> class.</para>
                <codeReference>System.Exception.Ctor#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference> class with a specified error message and a reference to the inner exception that is the cause of this exception.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>message</parameterReference>
            <content>
              <para>The error message that explains the reason for the exception. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>innerException</parameterReference>
            <content>
              <para>The exception that is the cause of the current exception, or a null reference (<languageKeyword>Nothing</languageKeyword> in Visual Basic) if no inner exception is specified. </para>
            </content>
          </parameter>
        </parameters>
        <remarks>
          <content>
            <para>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference> property. The <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference> property returns the same value that is passed into the constructor, or a null reference (<languageKeyword>Nothing</languageKeyword> in Visual Basic) if the <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference> property does not supply the inner exception value to the constructor.</para>
            <para>The following table shows the initial property values for an instance of <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference>.</para>
            <table>
              <tableHeader>
                <row>
                  <entry>
                    <para>Property </para>
                  </entry>
                  <entry>
                    <para>Value </para>
                  </entry>
                </row>
              </tableHeader>
              <row>
                <entry>
                  <para>
                    <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference>
                  </para>
                </entry>
                <entry>
                  <para>The inner exception reference. </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <codeEntityReference autoUpgrade="true">P:System.Exception.Message</codeEntityReference>
                  </para>
                </entry>
                <entry>
                  <para>The error message string. </para>
                </entry>
              </row>
            </table>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example derives an <languageKeyword>Exception</languageKeyword> for a specific condition. The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base <languageKeyword>Exception</languageKeyword> class.</para>
                <codeReference>System.Exception.Ctor#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Exception.Data">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a collection of key/value pairs that provide additional, user-defined information about the exception.</para>
        </summary>
        <returnValue>
          <para>An object that implements the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.IDictionary</codeEntityReference> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.IDictionary</codeEntityReference> object returned by the <codeEntityReference autoUpgrade="true">P:System.Exception.Data</codeEntityReference> property to store and retrieve supplementary information relevant to the exception. The information is in the form of an arbitrary number of user-defined key/value pairs. The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object. </para>
          </content>
          <sections>
            <section>
              <title>Key/Value Pair Security</title>
              <content>
                <para>The key/value pairs stored in the collection returned by the <codeEntityReference autoUpgrade="true">P:System.Exception.Data</codeEntityReference> property are not secure. If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers. If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler. This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted. </para>
              </content>
            </section>
            <section>
              <title>Key Conflicts</title>
              <content>
                <para>A key conflict occurs when different exception handlers specify the same key to access a key/value pair. Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors. However, if you are cautious you can use key conflicts to enhance your application.</para>
              </content>
            </section>
            <section>
              <title>Avoiding Key Conflicts</title>
              <content>
                <para>Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs. For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier. </para>
                <para>Suppose two applications, named Products and Suppliers, each has a method named Sales. The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product. The Sales method in the Suppliers application provides the identification number, or SID, of a supplier. Consequently, the naming convention for this example yields the keys, "Products.Sales.SKU" and "Suppliers.Sales.SID".</para>
              </content>
            </section>
            <section>
              <title>Exploiting Key Conflicts</title>
              <content>
                <para>Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing. Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers. If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <codeEntityReference autoUpgrade="true">T:System.Collections.IDictionary</codeEntityReference> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.</para>
                <para>Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler. In addition, each exception handler knows the collection returned by the <codeEntityReference autoUpgrade="true">P:System.Exception.Data</codeEntityReference> property contains a set of key/value pairs that can be accessed with a prearranged set of keys. </para>
                <para>Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler. After the update process is complete, the exception handler throws the exception to the next higher-level exception handler. Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.</para>
                <alert class="note">
                  <para>The <codeEntityReference autoUpgrade="true">T:System.ExecutionEngineException</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.OutOfMemoryException</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.StackOverflowException</codeEntityReference> and <codeEntityReference autoUpgrade="true">T:System.Threading.ThreadAbortException</codeEntityReference> classes always return <languageKeyword>null</languageKeyword> for the value of the <codeEntityReference autoUpgrade="true">P:System.Exception.Data</codeEntityReference> property.</para>
                </alert>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates how to add and retrieve information using the <codeEntityReference autoUpgrade="true">P:System.Exception.Data</codeEntityReference> property.</para>
                <codeReference>exception.data#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.DictionaryEntry</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>When overridden in a derived class, returns the <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference> that is the root cause of one or more subsequent exceptions.</para>
        </summary>
        <returnValue>
          <para>The first exception thrown in a chain of exceptions. If the <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference> property of the current exception is a null reference (<languageKeyword>Nothing</languageKeyword> in Visual Basic), this property returns the current exception.</para>
        </returnValue>
        <remarks>
          <content>
            <para>A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its <languageKeyword>InnerException</languageKeyword> property. For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain. This exception is called the base exception and its <languageKeyword>InnerException</languageKeyword> property always contains a null reference.</para>
            <para>For all exceptions in a chain of exceptions, the <languageKeyword>GetBaseException</languageKeyword> method must return the same object (the base exception).</para>
            <para>Use the <languageKeyword>GetBaseException</languageKeyword> method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</para>
          </content>
        </remarks>
        <notesForInheritors>
          <para>The <languageKeyword>GetBaseException</languageKeyword> method is overridden in classes that require control over the exception content or format.</para>
        </notesForInheritors>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines two derived <languageKeyword>Exception</languageKeyword> classes. It forces an exception and then throws it again with each of the derived classes. The code shows the use of the <languageKeyword>GetBaseException</languageKeyword> method to retrieve the original exception.</para>
                <codeReference>System.Exception.GetBaseException#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>When overridden in a derived class, sets the <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.SerializationInfo</codeEntityReference> with information about the exception.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>info</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.SerializationInfo</codeEntityReference> that holds the serialized object data about the exception being thrown. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>context</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.StreamingContext</codeEntityReference> that contains contextual information about the source or destination. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>The <parameterReference>info</parameterReference> parameter is a null reference (<languageKeyword>Nothing</languageKeyword> in Visual Basic). </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <languageKeyword>GetObjectData</languageKeyword> sets a <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.SerializationInfo</codeEntityReference> with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the <languageKeyword>SerializationInfo</languageKeyword> transmitted over the stream.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a derived serializable <languageKeyword>Exception</languageKeyword> class that implements <languageKeyword>GetObjectData</languageKeyword>, which makes minor changes to two properties and then calls the base class to perform the serialization. The example forces a divide-by-0 error and then creates an instance of the derived exception. The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</para>
                <codeReference>System.Exception.GetObjectData#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to provide serialization services. Demand value: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityAction.LinkDemand</codeEntityReference>; Permission value: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.SerializationInfo</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.StreamingContext</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Exception.GetType">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the runtime type of the current instance.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> object that represents the exact runtime type of the current instance.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Exception.GetType</codeEntityReference> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.GetType</codeEntityReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Exception.HelpLink">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets a link to the help file associated with this exception.</para>
        </summary>
        <returnValue>
          <para>The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</para>
        </returnValue>
        <remarks>
          <content>
            <para>The return value, which represents a help file, is a URN or URL. For example, the <languageKeyword>HelpLink</languageKeyword> value could be: </para>
            <para>"file:///C:/Applications/Bazzal/help.html#ErrorNum42" </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example throws an <languageKeyword>Exception</languageKeyword> that sets the <languageKeyword>HelpLink</languageKeyword> property in its constructor and then catches the exception and displays <languageKeyword>HelpLink</languageKeyword>.</para>
                <codeReference>System.Exception.Properties#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Exception.HResult">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</para>
        </summary>
        <returnValue>
          <para>The HRESULT value.</para>
        </returnValue>
        <remarks>
          <content>
            <para>HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code. The severity code indicates whether the return value represents information, warning, or error. The facility code identifies the area of the system responsible for the error. The error code is a unique number that is assigned to represent the exception. Each exception is mapped to a distinct HRESULT. When managed code throws an exception, the runtime passes the HRESULT to the COM client. When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a derived <languageKeyword>Exception</languageKeyword> class that sets the <languageKeyword>HResult</languageKeyword> property in its constructor.</para>
                <codeReference>System.Exception.HResult#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Exception.InnerException">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference> instance that caused the current exception.</para>
        </summary>
        <returnValue>
          <para>An instance of <languageKeyword>Exception</languageKeyword> that describes the error that caused the current exception. The <languageKeyword>InnerException</languageKeyword> property returns the same value as was passed into the constructor, or a null reference (<languageKeyword>Nothing</languageKeyword> in Visual Basic) if the inner exception value was not supplied to the constructor. This property is read-only.</para>
        </returnValue>
        <remarks>
          <content>
            <para>When an exception <parameterReference>X</parameterReference> is thrown as a direct result of a previous exception <parameterReference>Y</parameterReference>, the <languageKeyword>InnerException</languageKeyword> property of <parameterReference>X</parameterReference> should contain a reference to <parameterReference>Y</parameterReference>.</para>
            <para>Use the <languageKeyword>InnerException</languageKeyword> property to obtain the set of exceptions that led to the current exception.</para>
            <para>You can create a new exception that catches an earlier exception. The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.</para>
            <para>Suppose that there is a function that reads a file and formats the data from that file. In this example, as the code tries to read the file, an <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference> is thrown. The function catches the <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference> and throws a <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>. The <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference> could be saved in the <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference> property of the <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference>, enabling the code that catches the <codeEntityReference autoUpgrade="true">T:System.IO.FileNotFoundException</codeEntityReference> to examine what causes the initial error.</para>
            <para>The <codeEntityReference autoUpgrade="true">P:System.Exception.InnerException</codeEntityReference> property, which holds a reference to the inner exception, is set upon initialization of the exception object.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates throwing and catching an exception that references an inner exception.</para>
                <codeReference>InnerEx#1</codeReference>
                <para>This code has the following output: </para>
                <code>In Main
  catch block. Caught: Error caused by trying ThrowInner. Inner Exception is
  MyAppException: ExceptExample inner exception at ExceptExample.ThrowInner() at
  ExceptExample.CatchInner()</code>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Exception.Message">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a message that describes the current exception.</para>
        </summary>
        <returnValue>
          <para>The error message that explains the reason for the exception, or an empty string("").</para>
        </returnValue>
        <remarks>
          <content>
            <para>The text of <languageKeyword>Message</languageKeyword> should completely describe the error and should, when possible, explain how to correct it. The value of the <languageKeyword>Message</languageKeyword> property is included in the information returned by <codeEntityReference autoUpgrade="true">M:System.Exception.ToString</codeEntityReference>.</para>
            <para>The <languageKeyword>Message</languageKeyword> property is set only when creating an <codeEntityReference autoUpgrade="true">T:System.Exception</codeEntityReference>. If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.</para>
          </content>
        </remarks>
        <notesForInheritors>
          <para>The <languageKeyword>Message</languageKeyword> property is overridden in classes that require control over message content or format. Application code typically accesses this property when it needs to display information about an exception that has been caught.</para>
          <para>The error message should be localized.</para>
        </notesForInheritors>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example throws and then catches an <languageKeyword>Exception</languageKeyword> and displays the exception's text message using the <languageKeyword>Message</languageKeyword> property.</para>
                <codeReference>System.Exception.Properties#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Exception.Source">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the name of the application or the object that causes the error.</para>
        </summary>
        <returnValue>
          <para>The name of the application or the object that causes the error.</para>
        </returnValue>
        <remarks>
          <content>
            <para>If <codeEntityReference autoUpgrade="true">P:System.Exception.Source</codeEntityReference> is not set, the name of the assembly where the exception originated is returned.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example throws an <languageKeyword>Exception</languageKeyword> that sets the <languageKeyword>Source</languageKeyword> property in its constructor and then catches the exception and displays <languageKeyword>Source</languageKeyword>.</para>
                <codeReference>System.Exception.Properties#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Exception.StackTrace">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a string representation of the frames on the call stack at the time the current exception was thrown.</para>
        </summary>
        <returnValue>
          <para>A string that describes the contents of the call stack, with the most recent method call appearing first.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The execution stack keeps track of all the methods that are in execution at a given instant. A trace of the method calls is called a stack trace. The stack trace listing provides a means to follow the call sequence to the line number in the method where the exception occurs.</para>
            <para>
              <languageKeyword>StackTrace</languageKeyword> may not report as many method calls as expected, due to code transformations, such as inlining, that occur during optimization.</para>
          </content>
        </remarks>
        <notesForInheritors>
          <para>The <languageKeyword>StackTrace</languageKeyword> property is overridden in classes that require control over the stack trace content or format.</para>
          <para>By default, the stack trace is captured immediately before an exception object is thrown. Use <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Environment.StackTrace</codeEntityReference> to get stack trace information when no exception is being thrown.</para>
        </notesForInheritors>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example throws an <languageKeyword>Exception</languageKeyword> and then catches it and displays a stack trace using the <languageKeyword>StackTrace</languageKeyword> property.</para>
                <codeReference>System.Exception.Properties#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Environment.StackTrace</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Exception.TargetSite">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the method that throws the current exception.</para>
        </summary>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.Reflection.MethodBase</codeEntityReference> that threw the current exception.</para>
        </returnValue>
        <remarks>
          <content>
            <para>If the method that throws this exception is not available and the stack trace is not a null reference (<languageKeyword>Nothing</languageKeyword> in Visual Basic), <codeEntityReference autoUpgrade="true">P:System.Exception.TargetSite</codeEntityReference> obtains the method from the stack trace. If the stack trace is a null reference, <codeEntityReference autoUpgrade="true">P:System.Exception.TargetSite</codeEntityReference> also returns a null reference.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example throws an <languageKeyword>Exception</languageKeyword> and then catches it and displays the originating method using the <languageKeyword>TargetSite</languageKeyword> property.</para>
                <codeReference>System.Exception.Properties#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Exception.ToString">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates and returns a string representation of the current exception.</para>
        </summary>
        <returnValue>
          <para>A string representation of the current exception.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">M:System.Exception.ToString</codeEntityReference> returns a representation of the current exception that is intended to be understood by humans. Where the exception contains culture-sensitive data, the string representation returned by <languageKeyword>ToString</languageKeyword> is required to take into account the current system culture. Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.</para>
            <para>The default implementation of <codeEntityReference autoUpgrade="true">M:System.Exception.ToString</codeEntityReference> obtains the name of the class that threw the current exception, the message, the result of calling <codeEntityReference autoUpgrade="true">M:System.Exception.ToString</codeEntityReference> on the inner exception, and the result of calling <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Environment.StackTrace</codeEntityReference>. If any of these members is <languageKeyword>null</languageKeyword>, its value is not included in the returned string.</para>
            <para>If there is no error message or if it is an empty string (""), then no error message is returned. The name of the inner exception and the stack trace are returned only if they are not <languageKeyword>null</languageKeyword>.</para>
            <para>This method overrides <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example causes an exception and displays the result of calling <languageKeyword>ToString</languageKeyword> on that exception.</para>
                <codeReference>ExToString#1</codeReference>
                <para>This code has the following output: </para>
                <code>Error: System.ArgumentException: Object must be of type String. at System.String.CompareTo(Object value) at ArgExceptionExample.Main()</code>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
  </members>
</doc>