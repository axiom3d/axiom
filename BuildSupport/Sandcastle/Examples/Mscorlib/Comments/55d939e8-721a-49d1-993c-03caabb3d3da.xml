<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="55d939e8-721a-49d1-993c-03caabb3d3da" revisionNumber="8">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.WeakReference">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents a weak reference, which references an object while still allowing that object to be garbage collected.</para>
        </summary>
        <remarks>
          <content>
            <para>The common language runtime garbage collection mechanism reclaims inaccessible objects from memory. An object becomes inaccessible if all direct and indirect references to that object become invalid (for example, by setting those references to <languageKeyword>null</languageKeyword>). A reference to an accessible object is called a strong reference.</para>
            <para>A weak reference also references an accessible object, which is called the target. A user creates a strong reference to the target by assigning the value of the <codeEntityReference autoUpgrade="true">P:System.WeakReference.Target</codeEntityReference> property to a variable. However, if there are no strong references to the target, the target becomes eligible for garbage collection even though there is a weak reference to the object.</para>
            <para>There can be a delay between the time an object becomes eligible for garbage collection and the time it is collected. If the user attempts to retrieve the target after it has been collected, only a null reference is retrieved. If the target has not yet been collected, a valid reference is retrieved.</para>
            <para>Garbage collection calls an object's <codeEntityReference autoUpgrade="true">M:System.Object.Finalize</codeEntityReference> method (that is, performs finalization), if there is such a method and if instructed to do so. Once finalization is complete, <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference> is thrown if the user attempts to access the object with the <codeEntityReference autoUpgrade="true">P:System.WeakReference.IsAlive</codeEntityReference> or <codeEntityReference autoUpgrade="true">P:System.WeakReference.Target</codeEntityReference> properties of the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object. </para>
          </content>
          <sections>
            <section>
              <title>Terminology</title>
              <content>
                <para>It is useful to know some of the jargon used to describe objects and garbage collection. An object that is accessible and can be used is said to be alive. An object that is unused and eligible for garbage collection is said to be dead. If a strong reference is acquired to a dead object, the object becomes alive again and the object is said to be resurrected. </para>
                <para>A <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object can specify whether the reference to its target be maintained after finalization (that is, whether the weak reference should track the target's resurrection). A weak reference that does not track resurrection is called a short weak reference, and a weak reference that tracks resurrection is called a long weak reference.</para>
              </content>
            </section>
            <section>
              <title>Performance Considerations</title>
              <content>
                <para>The <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> class is frequently cited in code examples where a cache of <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> objects maintains references to a set of objects used by an application. If, for example, the object dies because the object falls out of scope, the garbage collection mechanism can still reclaim the allocated memory. </para>
                <para>This example is used to illustrate a clever memory management scheme, but it is misleading because the <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> class cannot be treated as an automatic solution to memory management problems. You still have to establish rules for your application, that is, a caching policy, about what entries are kept or removed from a cache. </para>
              </content>
            </section>
          </sections>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code. Demand value: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityAction.InheritanceDemand</codeEntityReference>; Permission value: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.GC</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.WeakReference.#ctor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> class.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> class, referencing the specified object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>target</parameterReference>
            <content>
              <para>The object to track or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <remarks>
          <content>
            <para>This constructor creates a short weak reference to <parameterReference>target</parameterReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> class.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> class, referencing the specified object and using the specified resurrection tracking.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>target</parameterReference>
            <content>
              <para>An object to track. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>trackResurrection</parameterReference>
            <content>
              <para>Indicates when to stop tracking the object. If <languageKeyword>true</languageKeyword>, the object is tracked after finalization; if <languageKeyword>false</languageKeyword>, the object is only tracked until finalization. </para>
            </content>
          </parameter>
        </parameters>
        <remarks>
          <content>
            <para>If <parameterReference>trackResurrection</parameterReference> is <languageKeyword>false</languageKeyword>, a short weak reference is created. If <parameterReference>trackResurrection</parameterReference> is <languageKeyword>true</languageKeyword>, a long weak reference is created. Typically, only short weak references are needed.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Runtime.InteropServices.GCHandle</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> class, using deserialized data from the specified serialization and stream objects.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>info</parameterReference>
            <content>
              <para>An object that holds all the data needed to serialize or deserialize the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>context</parameterReference>
            <content>
              <para>(Reserved) Describes the source and destination of the serialized stream specified by <parameterReference>info</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>info</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>context</parameterReference> parameter is reserved, and does not currently participate in this operation.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Discards the reference to the target represented by the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object.</para>
        </summary>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.GC</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Object.Finalize</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Populates a <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.SerializationInfo</codeEntityReference> object with all the data needed to serialize the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>info</parameterReference>
            <content>
              <para>An object that holds all the data needed to serialize or deserialize the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>context</parameterReference>
            <content>
              <para>(Reserved) The location where serialized data is stored and retrieved. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>info</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method stores all the information in <parameterReference>info</parameterReference> necessary to serialize the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object.</para>
            <para>The <parameterReference>context</parameterReference> parameter is reserved and is not currently used in the execution of this method.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Runtime.Serialization.SerializationInfo</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets an indication whether the object referenced by the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object has been garbage collected.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the object referenced by the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object has not been garbage collected and is still accessible; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>The reference to the target object is invalid. This can occur if the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object has been finalized.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.GC</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.WeakReference.Target">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the object (the target) referenced by the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>null</languageKeyword> if the object referenced by the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object has been garbage collected; otherwise, a reference to the object referenced by the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>The reference to the target object is invalid. This can occur if the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object has been finalized.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.GC</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets an indication whether the object referenced by the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object is tracked after it is finalized.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the object the current <codeEntityReference autoUpgrade="true">T:System.WeakReference</codeEntityReference> object refers to is tracked after finalization; or <languageKeyword>false</languageKeyword> if the object is only tracked until finalization.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.GC</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
  </members>
</doc>