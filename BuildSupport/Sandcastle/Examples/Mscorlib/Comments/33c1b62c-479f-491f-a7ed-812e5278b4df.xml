<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="33c1b62c-479f-491f-a7ed-812e5278b4df" revisionNumber="7">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.CharEnumerator">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Supports iterating over a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object and reading its individual characters. This class cannot be inherited.</para>
        </summary>
        <remarks>
          <content>
            <para>A <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> provides read-only access to the characters in a referenced <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. For example, the <languageKeyword>foreach</languageKeyword> statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> from a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object in order to iterate through the characters in that object.</para>
            <para>There is no public constructor for <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference>. Instead, call a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object's <codeEntityReference autoUpgrade="true">M:System.String.GetEnumerator</codeEntityReference> method to obtain a <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> that is initialized to reference the string.</para>
            <para>A <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> maintains an internal index to the characters in the string the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> references. The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string. The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete. An exception is thrown if you attempt to access a character while the index is invalid.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.MoveNext</codeEntityReference> method increments the index by one, so the first and subsequent characters are accessed in turn. The <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.Reset</codeEntityReference> method sets the index to a position logically before the first character. The <codeEntityReference autoUpgrade="true">P:System.CharEnumerator.Current</codeEntityReference> property retrieves the character currently referenced by index. The <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.Clone</codeEntityReference> method creates a copy of the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference>.</para>
            <alert class="note">
              <para>Several independent instances of <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> across one or more threads can have access to a single instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. This class is implemented to support the <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerator</codeEntityReference> interface. For more information regarding the use of an enumerator, see the <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerator</codeEntityReference> topic.</para>
            </alert>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerator</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Collections.ICollection</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.CharEnumerator.Clone">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a copy of the current <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object.</para>
        </summary>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that is a copy of the current <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The return value is a copy of this instance of <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> and its current state. This is useful for saving your state while iterating through a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
            <para>For example, suppose your application uses an original instance of <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> to iterate through each character in a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. When some unique character is encountered, your application pauses processing and invokes the <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.Clone</codeEntityReference> method. In effect, this saves the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object's index in the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
            <para>Your application uses the clone to navigate to another part of the <languageKeyword>String</languageKeyword> to perform some auxiliary processing. The side-effect of this navigation is the clone loses track of the position where processing stopped. However, when the auxiliary processing is complete, your application discards the clone and uses the original <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> instance to resume working on the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> where the original processing stopped.</para>
            <alert class="note">
              <para>This method is implemented to support the <codeEntityReference autoUpgrade="true">T:System.ICloneable</codeEntityReference> interface.</para>
            </alert>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="P:System.CharEnumerator.Current">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the currently referenced character in the string enumerated by this <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object.</para>
        </summary>
        <returnValue>
          <para>The Unicode character currently referenced by this <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>The index is invalid; that is, it is before the first or after the last character of the enumerated string. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> class maintains an internal index to the enumerated string, and the <codeEntityReference autoUpgrade="true">P:System.CharEnumerator.Current</codeEntityReference> property returns the character that is currently referenced by the index. This property should be invoked only when the index is valid; otherwise, an exception is thrown. </para>
            <para>The index is always invalid for an empty string (""). The index is also invalid after the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.String.GetEnumerator</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.Reset</codeEntityReference> method is called. After either of these methods is called, invoke the <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.MoveNext</codeEntityReference> method to adjust the index to the first character in the enumerated string. The index is valid whenever the <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.MoveNext</codeEntityReference> method returns <languageKeyword>true</languageKeyword>.</para>
            <para>
              <codeEntityReference autoUpgrade="true">P:System.CharEnumerator.Current</codeEntityReference> does not move the index, and consecutive calls to <codeEntityReference autoUpgrade="true">P:System.CharEnumerator.Current</codeEntityReference> return the same character until <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.MoveNext</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.Reset</codeEntityReference>, or <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.String.GetEnumerator</codeEntityReference> is called.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.CharEnumerator.MoveNext">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Increments the internal index of the current <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object to the next character of the enumerated string.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the index is successfully incremented and within the enumerated string; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> class maintains an internal index to the enumerated string, and the <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.MoveNext</codeEntityReference> method increments the index by one. Call <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.MoveNext</codeEntityReference> after calling <codeEntityReference autoUpgrade="true">M:System.String.GetEnumerator</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.Reset</codeEntityReference> to increment the current character position to the first character in the enumerated string. Check that the return value is <languageKeyword>true</languageKeyword> to determine that the current character position is valid.</para>
            <para>If the index is already beyond the last character of the enumerated string, the index is not changed and <languageKeyword>false</languageKeyword> is returned.</para>
            <para>Notice that if the enumerated string is empty (""), the state of the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> is always invalid. This is because the internal index for the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> is initially before the first character of the enumerated string and is therefore invalid. <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.MoveNext</codeEntityReference> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.CharEnumerator.Reset">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes the index to a position logically before the first character of the enumerated string.</para>
        </summary>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> class maintains an internal index to the enumerated string, and the <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.Reset</codeEntityReference> method sets the index to the invalid state.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="P:System.CharEnumerator.System.Collections.IEnumerator.Current">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Gets the currently referenced character in the string enumerated by this <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object. For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.IEnumerator.Current</codeEntityReference>. </para>
        </summary>
        <returnValue>
          <para>The boxed Unicode character currently referenced by this <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerator</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.CharEnumerator.System.IDisposable.Dispose">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Releases all resources used by the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> class.</para>
        </summary>
        <remarks>
          <content>
            <para>Call <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.System.IDisposable.Dispose</codeEntityReference> when you are finished using the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> class. The <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.System.IDisposable.Dispose</codeEntityReference> method leaves the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> class in an unusable state. After calling <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.System.IDisposable.Dispose</codeEntityReference>, you must release all references to the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> class so the garbage collector can reclaim the memory that the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> class was occupying.</para>
            <para>For more information, see <link xlink:href="a17b0066-71c2-4ba4-9822-8e19332fc213">Cleaning Up Unmanaged Resources</link> and <link xlink:href="eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9">Implementing a Dispose Method</link>.</para>
            <alert class="note">
              <para>Always call <codeEntityReference autoUpgrade="true">M:System.CharEnumerator.System.IDisposable.Dispose</codeEntityReference> before you release your last reference to the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> class. Otherwise, the resources it is using will not be freed until the garbage collector calls the <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object's <codeEntityReference autoUpgrade="true">M:System.Object.Finalize</codeEntityReference> method.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
  </members>
</doc>