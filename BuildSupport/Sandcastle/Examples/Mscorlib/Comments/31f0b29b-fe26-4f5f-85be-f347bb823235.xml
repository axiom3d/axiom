<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="31f0b29b-fe26-4f5f-85be-f347bb823235" revisionNumber="38">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Console">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents the standard input, output, and error streams for console applications. This class cannot be inherited.</para>
        </summary>
        <threadSafety>
          <para>This type is safe for multithreaded operations.</para>
        </threadSafety>
        <remarks>
          <content>
            <para>The console is an operating system window where users interact with the operating system or a text-based console application by entering text input through the computer keyboard, and reading text output from the computer terminal. For example, in Windows the console is called the command prompt window and accepts MS-DOS commands. The <codeEntityReference autoUpgrade="true">T:System.Console</codeEntityReference> class provides basic support for applications that read characters from, and write characters to, the console. </para>
          </content>
          <sections>
            <section>
              <title>Console I/O Streams</title>
              <content>
                <para>When a console application starts, the operating system automatically associates three I/O streams with the console. Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream. These streams are presented to your application as the values of the <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference> properties.</para>
                <para>By default, the value of the <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference> property is a <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.IO.TextReader</codeEntityReference> object, and the values of the <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference> properties are <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.IO.TextWriter</codeEntityReference> objects. However, you can set these properties to streams that do not represent the console; for example, you can set these properties to streams that represent files. I/O operations using these streams are synchronized, which means multiple threads can read from, or write to, the streams. </para>
                <para>
                  <codeEntityReference autoUpgrade="true">T:System.Console</codeEntityReference> class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file. Consequently, program your application to catch <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.IO.IOException</codeEntityReference> if you redirect a standard stream.</para>
                <para>It is sometimes useful to explicitly invoke the members of the stream objects represented by the <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference> properties. For example, by default, the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method writes data to the standard output stream followed by the default line termination string; that is, data is followed by a carriage return and line feed ("\r\n"). However, the <codeEntityReference autoUpgrade="true">T:System.Console</codeEntityReference> class does not provide a method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream. </para>
                <para>You can solve this problem by setting the <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.IO.TextWriter.NewLine</codeEntityReference> property of the <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference> or <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference> property to another line termination string. For example, the C# statement, <codeInline>Console.Error.NewLine = "\r\n\r\n";</codeInline>, sets the line termination string for the standard error output stream to two carriage return and line feed sequences. Then you can explicitly call the <codeEntityReference autoUpgrade="true">Overload:System.IO.TextWriter.WriteLine</codeEntityReference> method of the error output stream object, as in the C# statement, <codeInline>Console.Error.WriteLine();</codeInline>.</para>
              </content>
            </section>
            <section>
              <title>Screen Buffer and Console Window</title>
              <content>
                <para>Two closely related features of the console are the screen buffer and the console window. Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer. The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character. Each character has its own foreground color and each character cell has its own background color.</para>
                <para>The screen buffer is viewed through a rectangular region called the console window. The console window is another attribute of the console; it is not the console itself, which is an operating system window. The console window is also arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer. If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.</para>
                <para>A cursor indicates the screen buffer position where text is currently read or written. The cursor can be hidden or made visible, and its height can be changed. If the cursor is visible, the console window position is moved automatically so the cursor is always in view.</para>
                <para>The origin for character cell coordinates in the screen buffer is the upper left corner, and the position of the cursor and the console window are measured relative to that origin. Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0. The maximum value for the row and column indexes is <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>.</para>
              </content>
            </section>
            <section>
              <title>Functionality</title>
              <content>
                <para>The <codeEntityReference autoUpgrade="true">T:System.Console</codeEntityReference> class contains methods that read individual characters or entire lines from the console; and several write methods that automatically convert an instance of a value type, an array of characters, or sets of objects to a formatted or unformatted string, and then writes that string, optionally followed by a line termination string, to the console. The <codeEntityReference autoUpgrade="true">T:System.Console</codeEntityReference> class also contains methods and properties to get or set the size of the screen buffer, console window, and cursor; to change the position of the console window and cursor; to move or clear data in the screen buffer; to change foreground and background colors; to change the text displayed in the console title bar; and to play the sound of a beep.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This code sample demonstrates how to read from and write to the standard input and output streams. Note that these streams can be redirected using the <codeEntityReference autoUpgrade="true">M:System.Console.SetIn(System.IO.TextReader)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Console.SetOut(System.IO.TextWriter)</codeEntityReference> methods.</para>
                <codeReference>Classic Console Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="E:System.Console.CancelKeyPress">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Occurs when the <codeEntityReference autoUpgrade="true">F:System.ConsoleModifiers.Control</codeEntityReference> modifier key (CTRL) and <codeEntityReference autoUpgrade="true">F:System.ConsoleKey.C</codeEntityReference> console key (C) are pressed simultaneously (CTRL+C).</para>
        </summary>
        <remarks>
          <content>
            <para>This event is used in conjunction with <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.ConsoleCancelEventHandler</codeEntityReference> and <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.ConsoleCancelEventArgs</codeEntityReference>. The <codeEntityReference autoUpgrade="true">E:System.Console.CancelKeyPress</codeEntityReference> event enables a console application to intercept the CTRL+C signal so the application can decide whether to continue executing or terminate. For more information about handling events, see <link xlink:href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</link>.</para>
            <para>Use this event to explicitly control how your application responds to the CTRL+C signal. If your application has simple requirements, you can use the <codeEntityReference autoUpgrade="true">P:System.Console.TreatControlCAsInput</codeEntityReference> property instead of this event.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how the <codeEntityReference autoUpgrade="true">E:System.Console.CancelKeyPress</codeEntityReference> event is used.</para>
                <codeReference>console.cancelkeypress#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.ConsoleCancelEventArgs</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.ConsoleCancelEventHandler</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.TreatControlCAsInput</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Console.Beep">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Plays the sound of a beep through the console speaker.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Console.Beep">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Plays the sound of a beep through the console speaker.</para>
        </summary>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.HostProtectionException</codeEntityReference>
            <content>
              <para>This method was executed on a server, such as SQL Server, that does not permit access to a user interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds. </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Console.Beep</codeEntityReference> method. The example accepts a number from 1 through 9 as a command line argument, and plays the beep that number of times.</para>
                <codeReference>console.beep#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Plays the sound of a beep through the console speaker.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Console.Beep(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Plays the sound of a beep of a specified frequency and duration through the console speaker.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>frequency</parameterReference>
            <content>
              <para>The frequency of the beep, ranging from 37 to 32767 hertz.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>duration</parameterReference>
            <content>
              <para>The duration of the beep measured in milliseconds.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>frequency</parameterReference> is less than 37 or more than 32767 hertz.</para>
              <para>-or-</para>
              <para>
                <parameterReference>duration</parameterReference> is less than or equal to zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.HostProtectionException</codeEntityReference>
            <content>
              <para>This method was executed on a server, such as SQL Server, that does not permit access to the console.</para>
            </content>
          </exception>
        </exceptions>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>Win9xFamily</platform>
            </platforms>
            <content>
              <para>The <parameterReference>frequency</parameterReference> and <parameterReference>duration</parameterReference> parameters are ignored for these operating systems.</para>
            </content>
          </platformNote>
        </platformNotes>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Console.Beep(System.Int32,System.Int32)</codeEntityReference> method by playing the first few notes of a song through the console speaker.</para>
                <codeReference>console.beep2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Console.Clear">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Clears the console buffer and corresponding console window of display information.</para>
        </summary>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Using the <codeEntityReference autoUpgrade="true">M:System.Console.Clear</codeEntityReference> method is equivalent invoking the MS-DOS <languageKeyword>cls</languageKeyword> command in the command prompt window. When the <codeEntityReference autoUpgrade="true">M:System.Console.Clear</codeEntityReference> method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.CursorLeft</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.CursorTop</codeEntityReference> properties, and the <codeEntityReference autoUpgrade="true">M:System.Console.SetCursorPosition(System.Int32,System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Console.Clear</codeEntityReference> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "|", and "-" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.</para>
                <codeReference>console.cursorLTS#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Console.MoveBufferArea">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies a specified source area of the screen buffer to a specified destination area.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies a specified source area of the screen buffer to a specified destination area.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>sourceLeft</parameterReference>
            <content>
              <para>The leftmost column of the source area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceTop</parameterReference>
            <content>
              <para>The topmost row of the source area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceWidth</parameterReference>
            <content>
              <para>The number of columns in the source area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceHeight</parameterReference>
            <content>
              <para>The number of rows in the source area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>targetLeft</parameterReference>
            <content>
              <para>The leftmost column of the destination area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>targetTop</parameterReference>
            <content>
              <para>The topmost row of the destination area. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>One or more of the parameters is less than zero.</para>
              <para>-or- </para>
              <para>
                <parameterReference>sourceLeft</parameterReference> or <parameterReference>targetLeft</parameterReference> is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>sourceTop</parameterReference> or <parameterReference>targetTop</parameterReference> is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>sourceTop</parameterReference> + <parameterReference>sourceHeight</parameterReference> is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>sourceLeft</parameterReference> + <parameterReference>sourceWidth</parameterReference> is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)</codeEntityReference> method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors. Otherwise, the intersected portion of the source area is not filled.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      <overload>
        <summary>
          <para>Copies a specified source area of the screen buffer to a specified destination area.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies a specified source area of the screen buffer to a specified destination area.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>sourceLeft</parameterReference>
            <content>
              <para>The leftmost column of the source area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceTop</parameterReference>
            <content>
              <para>The topmost row of the source area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceWidth</parameterReference>
            <content>
              <para>The number of columns in the source area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceHeight</parameterReference>
            <content>
              <para>The number of rows in the source area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>targetLeft</parameterReference>
            <content>
              <para>The leftmost column of the destination area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>targetTop</parameterReference>
            <content>
              <para>The topmost row of the destination area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceChar</parameterReference>
            <content>
              <para>The character used to fill the source area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceForeColor</parameterReference>
            <content>
              <para>The foreground color used to fill the source area. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceBackColor</parameterReference>
            <content>
              <para>The background color used to fill the source area. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>One or more of the parameters is less than zero.</para>
              <para>-or- </para>
              <para>
                <parameterReference>sourceLeft</parameterReference> or <parameterReference>targetLeft</parameterReference> is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>sourceTop</parameterReference> or <parameterReference>targetTop</parameterReference> is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>sourceTop</parameterReference> + <parameterReference>sourceHeight</parameterReference> is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>sourceLeft</parameterReference> + <parameterReference>sourceWidth</parameterReference> is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>One or both of the color parameters is not a member of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.ConsoleColor</codeEntityReference> enumeration. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)</codeEntityReference> method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with the character specified by <parameterReference>sourceChar</parameterReference>, using the colors specified by <parameterReference>sourceForeColor</parameterReference> and <parameterReference>sourceBackColor</parameterReference>. Otherwise, the intersected portion of the source area is not filled.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)</codeEntityReference> method performs no operation if <parameterReference>sourceWidth</parameterReference> or <parameterReference>sourceHeight</parameterReference> is zero.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="Overload:System.Console.OpenStandardError">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Acquires the standard error stream.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Console.OpenStandardError">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Acquires the standard error stream.</para>
        </summary>
        <returnValue>
          <para>The standard error stream.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method can be used to reacquire the standard error stream after it has been changed by the <codeEntityReference autoUpgrade="true">M:System.Console.SetError(System.IO.TextWriter)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.SetError(System.IO.TextWriter)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Acquires the standard error stream.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Console.OpenStandardError(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Acquires the standard error stream, which is set to a specified buffer size.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>bufferSize</parameterReference>
            <content>
              <para>The internal stream buffer size. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The standard error stream.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>bufferSize</parameterReference> is less than or equal to zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method can be used to reacquire the standard error stream after it has been changed by the <codeEntityReference autoUpgrade="true">M:System.Console.SetError(System.IO.TextWriter)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.SetError(System.IO.TextWriter)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Console.OpenStandardInput">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Acquires the standard input stream.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Console.OpenStandardInput">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Acquires the standard input stream.</para>
        </summary>
        <returnValue>
          <para>The standard input stream.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method can be used to reacquire the standard input stream after it has been changed by the <codeEntityReference autoUpgrade="true">M:System.Console.SetIn(System.IO.TextReader)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>OpenStandardInput</languageKeyword> property. </para>
                <codeReference>System.Console.OpenStandartInput#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.SetIn(System.IO.TextReader)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Acquires the standard input stream.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Console.OpenStandardInput(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Acquires the standard input stream, which is set to a specified buffer size.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>bufferSize</parameterReference>
            <content>
              <para>The internal stream buffer size. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The standard input stream.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>bufferSize</parameterReference> is less than or equal to zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method can be used to reacquire the standard output stream after it has been changed by the <codeEntityReference autoUpgrade="true">M:System.Console.SetIn(System.IO.TextReader)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>OpenStandardInput</languageKeyword> property. </para>
                <codeReference>System.Console.OpenStandartInput#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.SetIn(System.IO.TextReader)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Console.OpenStandardOutput">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Acquires the standard output stream.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Console.OpenStandardOutput">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Acquires the standard output stream.</para>
        </summary>
        <returnValue>
          <para>The standard output stream.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method can be used to reacquire the standard output stream after it has been changed by the <codeEntityReference autoUpgrade="true">M:System.Console.SetOut(System.IO.TextWriter)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>OpenStandardOutput</languageKeyword> method. </para>
                <codeReference>System.Console-INSERTTABS#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.SetOut(System.IO.TextWriter)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Acquires the standard output stream.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Console.OpenStandardOutput(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Acquires the standard output stream, which is set to a specified buffer size.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>bufferSize</parameterReference>
            <content>
              <para>The internal stream buffer size. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The standard output stream.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>bufferSize</parameterReference> is less than or equal to zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method can be used to reacquire the standard output stream after it has been changed by the <codeEntityReference autoUpgrade="true">M:System.Console.SetOut(System.IO.TextWriter)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>OpenStandardOutput</languageKeyword> method. </para>
                <codeReference>System.Console-INSERTTABS#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.SetOut(System.IO.TextWriter)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Read">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reads the next character from the standard input stream.</para>
        </summary>
        <returnValue>
          <para>The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference> method blocks its return while you type input characters; it terminates when you press the <codeEntityReference autoUpgrade="true">F:System.ConsoleKey.Enter</codeEntityReference> key. Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence). Subsequent calls to the <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference> method retrieve your input one character at a time. After the final character is retrieved, <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference> blocks its return again and the cycle repeats.</para>
            <para>Note that you will not get a property value of -1 unless you perform one of the following actions: simultaneously press the <codeEntityReference autoUpgrade="true">F:System.ConsoleModifiers.Control</codeEntityReference> modifier key and <codeEntityReference autoUpgrade="true">F:System.ConsoleKey.Z</codeEntityReference> console key (CTRL+Z), which signals the end-of-file condition; press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows; or  redirect the input stream to a source, such as a text file, that has an actual end-of-file character.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference> method, or the <codeEntityReference autoUpgrade="true">P:System.Console.KeyAvailable</codeEntityReference> property and <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method are preferable to using the <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference> method.</para>
                <codeReference>console.read#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Console.ReadKey">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Obtains the next character or function key pressed by the user.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Console.ReadKey">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.ConsoleKeyInfo</codeEntityReference> object that describes the <codeEntityReference autoUpgrade="true">T:System.ConsoleKey</codeEntityReference> constant and Unicode character, if any, that correspond to the pressed console key. The <codeEntityReference autoUpgrade="true">T:System.ConsoleKeyInfo</codeEntityReference> object also describes, in a bitwise combination of <codeEntityReference autoUpgrade="true">T:System.ConsoleModifiers</codeEntityReference> values, whether one or more SHIFT, ALT, or CTRL modifier keys was pressed simultaneously with the console key.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference> property is redirected from some stream other than the console.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method waits, that is, blocks on the thread issuing the <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more ALT, CTRL, or SHIFT modifier keys. However, pressing a modifier key by itself will not cause the <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method to return.</para>
            <para>Depending on your application, you might want to use the <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method in conjunction with the <codeEntityReference autoUpgrade="true">P:System.Console.KeyAvailable</codeEntityReference> property.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method reads from the keyboard even if the standard input is redirected to a file with the <codeEntityReference autoUpgrade="true">M:System.Console.SetIn(System.IO.TextReader)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the parameterless <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method.</para>
                <codeReference>console.readkey1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.ConsoleKey</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.KeyAvailable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.TreatControlCAsInput</codeEntityReference>
          <codeEntityReference autoUpgrade="true">E:System.Console.CancelKeyPress</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Obtains the next character or function key pressed by the user.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Console.ReadKey(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>intercept</parameterReference>
            <content>
              <para>Determines whether to display the pressed key in the console window. <languageKeyword>true</languageKeyword> to not display the pressed key; otherwise, <languageKeyword>false</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.ConsoleKeyInfo</codeEntityReference> object that describes the <codeEntityReference autoUpgrade="true">T:System.ConsoleKey</codeEntityReference> constant and Unicode character, if any, that correspond to the pressed console key. The <codeEntityReference autoUpgrade="true">T:System.ConsoleKeyInfo</codeEntityReference> object also describes, in a bitwise combination of <codeEntityReference autoUpgrade="true">T:System.ConsoleModifiers</codeEntityReference> values, whether one or more SHIFT, ALT, or CTRL modifier keys was pressed simultaneously with the console key.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference> property is redirected from some stream other than the console.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method waits, that is, blocks on the thread issuing the <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more ALT, CTRL, or SHIFT modifier keys. However, pressing a modifier key by itself will not cause the <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method to return.</para>
            <para>If the <parameterReference>intercept</parameterReference> parameter is <languageKeyword>true</languageKeyword>, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.</para>
            <para>Depending on your application, you might want to use the <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method in conjunction with the <codeEntityReference autoUpgrade="true">P:System.Console.KeyAvailable</codeEntityReference> property.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method reads from the keyboard even if the standard input is redirected to a file with the <codeEntityReference autoUpgrade="true">M:System.Console.SetIn(System.IO.TextReader)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method that takes a <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference> parameter.</para>
                <codeReference>console.readkey2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.ConsoleKey</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.KeyAvailable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.TreatControlCAsInput</codeEntityReference>
          <codeEntityReference autoUpgrade="true">E:System.Console.CancelKeyPress</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.ReadLine">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reads the next line of characters from the standard input stream.</para>
        </summary>
        <returnValue>
          <para>The next line of characters from the input stream, or <languageKeyword>null</languageKeyword> if no more lines are available.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OutOfMemoryException</codeEntityReference>
            <content>
              <para>There is insufficient memory to allocate a buffer for the returned string. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The number of characters in the next line of characters is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Environment.NewLine</codeEntityReference> property. The returned string does not contain the terminating character(s).</para>
            <para>If this method throws <codeEntityReference autoUpgrade="true">T:System.OutOfMemoryException</codeEntityReference>, the reader's position in the underlying <codeEntityReference autoUpgrade="true">T:System.IO.Stream</codeEntityReference> is advanced by the number of characters the method was able to read, but the characters already read into the internal <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference> buffer are discarded. Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <codeEntityReference autoUpgrade="true">T:System.IO.TextReader</codeEntityReference>. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <codeEntityReference autoUpgrade="true">T:System.IO.Stream</codeEntityReference> also needs to be reinitialized.</para>
            <para>To avoid such a situation and produce robust code you should use the <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference> method and store the read characters in a preallocated buffer.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the usage of the <languageKeyword>ReadLine</languageKeyword> method. </para>
                <codeReference>System.Console-INSERTTABS#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.ResetColor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets the foreground and background console colors to their defaults.</para>
        </summary>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The foreground and background colors are restored to the colors that existed when the current process began. For more information, see the <codeEntityReference autoUpgrade="true">P:System.Console.ForegroundColor</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.BackgroundColor</codeEntityReference> properties.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.ConsoleColor</codeEntityReference> enumeration in conjunction with the <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Console.ForegroundColor</codeEntityReference> and <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Console.BackgroundColor</codeEntityReference> properties, and the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Console.ResetColor</codeEntityReference> method. You must run the example on a console to see the described color effects.</para>
                <para>Two constants, <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.Black</codeEntityReference> and <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.White</codeEntityReference>, are used directly, and all the other constants (<codeEntityReference autoUpgrade="true">F:System.ConsoleColor.Blue</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.DarkRed</codeEntityReference>, and so on) are used indirectly in a loop. First the names of the constants are obtained by using the <codeEntityReference autoUpgrade="true">M:System.Enum.GetNames(System.Type)</codeEntityReference> method, which is inherited from the <codeEntityReference autoUpgrade="true">T:System.Enum</codeEntityReference> class. Then the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Enum.Parse(System.Type,System.String)</codeEntityReference> method uses each name to create the corresponding enumerated constant.</para>
                <codeReference>ConsoleColors.class#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets the height and width of the screen buffer area to the specified values.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>width</parameterReference>
            <content>
              <para>The width of the buffer area measured in columns. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>height</parameterReference>
            <content>
              <para>The height of the buffer area measured in rows. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>height</parameterReference> or <parameterReference>width</parameterReference> is less than or equal to zero.</para>
              <para>-or- </para>
              <para>
                <parameterReference>height</parameterReference> or <parameterReference>width</parameterReference> is greater than or equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>width</parameterReference> is less than <codeEntityReference autoUpgrade="true">P:System.Console.WindowLeft</codeEntityReference> + <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>height</parameterReference> is less than <codeEntityReference autoUpgrade="true">P:System.Console.WindowTop</codeEntityReference> + <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred.</para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.WindowLeft</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowTop</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Console.CursorVisible</codeEntityReference> properties; and the <codeEntityReference autoUpgrade="true">M:System.Console.SetWindowPosition(System.Int32,System.Int32)</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.Console.SetBufferSize(System.Int32,System.Int32)</codeEntityReference>, and <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.</para>
                <codeReference>console.windowLT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets the position of the cursor.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>left</parameterReference>
            <content>
              <para>The column position of the cursor. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>top</parameterReference>
            <content>
              <para>The row position of the cursor. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>left</parameterReference> or <parameterReference>top</parameterReference> is less than zero.</para>
              <para>-or- </para>
              <para>
                <parameterReference>left</parameterReference> is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>top</parameterReference> is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use the <codeEntityReference autoUpgrade="true">M:System.Console.SetCursorPosition(System.Int32,System.Int32)</codeEntityReference> method to specify where the next write operation in the console window is to begin. If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.</para>
            <para>The cursor automatically moves to the next character position each time a character is written to the console window. If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible. If you want to write a character to the bottom right character position without causing the console window to scroll, use the <codeEntityReference autoUpgrade="true">Overload:System.Console.MoveBufferArea</codeEntityReference> method to move a character to that position. </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.CursorLeft</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.CursorTop</codeEntityReference> properties, and the <codeEntityReference autoUpgrade="true">M:System.Console.SetCursorPosition(System.Int32,System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Console.Clear</codeEntityReference> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "|", and "-" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings. </para>
                <codeReference>console.cursorLTS#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Console.SetError(System.IO.TextWriter)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets the <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference> property to the specified <codeEntityReference autoUpgrade="true">T:System.IO.TextWriter</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>newError</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.IO.TextWriter</codeEntityReference> stream that is the new standard error output. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>newError</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the required permission. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>By default, the <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference> property is set to the standard error output stream.</para>
            <para>A <codeEntityReference autoUpgrade="true">T:System.IO.StreamWriter</codeEntityReference> that encapsulates a <codeEntityReference autoUpgrade="true">T:System.IO.FileStream</codeEntityReference> can be used to send error messages to a file.</para>
          </content>
        </remarks>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for calling unmanaged code. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IO.TextWriter</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.SetIn(System.IO.TextReader)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets the <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference> property to the specified <codeEntityReference autoUpgrade="true">T:System.IO.TextReader</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>newIn</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.IO.TextReader</codeEntityReference> stream that is the new standard input. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>newIn</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the required permission. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>By default, the <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference> property is set to the standard input stream.</para>
            <para>A <codeEntityReference autoUpgrade="true">T:System.IO.StreamReader</codeEntityReference> that encapsulates a <codeEntityReference autoUpgrade="true">T:System.IO.FileStream</codeEntityReference> can be used to receive input from a file.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>SetIn</languageKeyword> method. </para>
                <codeReference>System.Console-INSERTTABS#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for calling unmanaged code. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IO.TextReader</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.SetOut(System.IO.TextWriter)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets the <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference> property to the specified <codeEntityReference autoUpgrade="true">T:System.IO.TextWriter</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>newOut</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.IO.TextWriter</codeEntityReference> stream that is the new standard output. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>newOut</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the required permission. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>By default, the <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference> property is set to the standard output stream.</para>
            <para>A <codeEntityReference autoUpgrade="true">T:System.IO.StreamWriter</codeEntityReference> that encapsulates a <codeEntityReference autoUpgrade="true">T:System.IO.FileStream</codeEntityReference> can be used to send output to a file. For example: </para>
            <code language="c#">Console.WriteLine("Hello World");
  FileStream fs1 = new FileStream("Test.txt", FileMode.Create);
  // First, save the standard output.
  TextWriter tmp = Console.Out;
  StreamWriter sw1 = new StreamWriter(fs1);
  Console.SetOut(sw1);
  Console.WriteLine("Hello file");
  Console.SetOut(tmp);
  Console.WriteLine("Hello World");
    sw1.Close();</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>SetOut</languageKeyword> method. </para>
                <codeReference>System.Console-INSERTTABS#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for calling unmanaged code. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IO.TextWriter</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets the position of the console window relative to the screen buffer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>left</parameterReference>
            <content>
              <para>The column position of the upper left  corner of the console window. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>top</parameterReference>
            <content>
              <para>The row position of the upper left corner of the console window. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>left</parameterReference> or <parameterReference>top</parameterReference> is less than zero.</para>
              <para>-or- </para>
              <para>
                <parameterReference>left</parameterReference> + <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference> is greater than <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>top</parameterReference> + <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference> is greater than <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The operating system window displays the console window, and the console window displays a portion of the screen buffer. The <codeEntityReference autoUpgrade="true">M:System.Console.SetWindowPosition(System.Int32,System.Int32)</codeEntityReference> method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.</para>
            <para>The console and operating system windows generally do not affect each other. However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window. In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the <codeEntityReference autoUpgrade="true">M:System.Console.SetWindowPosition(System.Int32,System.Int32)</codeEntityReference> method affects the position of the operating system window scroll bars.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.WindowLeft</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowTop</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Console.CursorVisible</codeEntityReference> properties; and the <codeEntityReference autoUpgrade="true">M:System.Console.SetWindowPosition(System.Int32,System.Int32)</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.Console.SetBufferSize(System.Int32,System.Int32)</codeEntityReference>, and <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.</para>
                <codeReference>console.windowLT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets the height and width of the console window to the specified values.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>width</parameterReference>
            <content>
              <para>The width of the console window measured in columns. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>height</parameterReference>
            <content>
              <para>The height of the console window measured in rows. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>width</parameterReference> or <parameterReference>height</parameterReference> is less than or equal to zero.</para>
              <para>-or- </para>
              <para>
                <parameterReference>width</parameterReference> plus <codeEntityReference autoUpgrade="true">P:System.Console.WindowLeft</codeEntityReference> or <parameterReference>height</parameterReference> plus <codeEntityReference autoUpgrade="true">P:System.Console.WindowTop</codeEntityReference> is greater than or equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>. </para>
              <para>-or-</para>
              <para>
                <parameterReference>width</parameterReference> or <parameterReference>height</parameterReference> is greater than the largest possible window width or height for the current screen resolution and console font.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred.</para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Console.SetWindowSize(System.Int32,System.Int32)</codeEntityReference> method, and the <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference> properties. You must run the example to see the full effect of changing the console window size.</para>
                <para>The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key to be pressed. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed, the console window is restored to its original dimensions and the example terminates.</para>
                <codeReference>console.setwindowsize#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="Overload:System.Console.Write">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified value or values to the standard output stream.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified Boolean value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Boolean.ToString</codeEntityReference>, which outputs either <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Boolean.TrueString</codeEntityReference> or <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Boolean.FalseString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Writes the text representation of the specified value or values to the standard output stream.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Console.Write(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the specified Unicode character value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.Char[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the specified array of Unicode characters to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>buffer</parameterReference>
            <content>
              <para>A Unicode character array. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the specified subarray of Unicode characters to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>buffer</parameterReference>
            <content>
              <para>An array of Unicode characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting position in <parameterReference>buffer</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of characters to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>buffer</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> or <parameterReference>count</parameterReference> is less than zero. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> plus <parameterReference>count</parameterReference> specify a position that is not within <parameterReference>buffer</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method writes <parameterReference>count</parameterReference> characters starting at position <parameterReference>index</parameterReference> of <parameterReference>buffer</parameterReference> to the standard output stream.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Decimal.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Double.ToString</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int32.ToString</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int64.ToString</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified object to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write, or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>, nothing is written and no exception is thrown. Otherwise, the <languageKeyword>ToString</languageKeyword> method of <parameterReference>value</parameterReference> is called to produce its string representation, and the resulting string is written to the standard output stream.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Single.ToString</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the specified string value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If value is <languageKeyword>null</languageKeyword>, nothing is written to the standard output stream.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified object to the standard output stream using the specified format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>The format string. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>Object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format specification in <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
            <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <languageKeyword>WriteLine</languageKeyword> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>console.writelineFmt1#1</codeReference>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">Formatting Overview</link>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified objects to the standard output stream using the specified format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>The format string. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format specification in <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
            <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <languageKeyword>WriteLine</languageKeyword> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>console.writelineFmt1#1</codeReference>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">Formatting Overview</link>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified objects to the standard output stream using the specified format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>The format string. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg2</parameterReference>
            <content>
              <para>The third object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format specification in <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
            <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <languageKeyword>WriteLine</languageKeyword> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>console.writelineFmt1#1</codeReference>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">FormattingOverview</link>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <clsCompliantAlternative>
          <codeEntityReference>M:System.Console.Write(System.String,System.Object[])</codeEntityReference>
          <content>
          </content>
        </clsCompliantAlternative>
        <summary>
          <para>Writes the text representation of the specified objects and variable length parameter list to the standard output stream using the specified format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>The format string. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg2</parameterReference>
            <content>
              <para>The third object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg3</parameterReference>
            <content>
              <para>The fourth object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>…</parameterReference>
            <content>
              <para>A comma-delimited list of one or more additional objects to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format specification in <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
            <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <languageKeyword>WriteLine</languageKeyword> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>console.writelineFmt1#1</codeReference>
                <para>The following code example illustrates the use of the <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)</codeEntityReference> method. </para>
                <codeReference>console.writelineFmt2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">FormattingOverview</link>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>The format string. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg</parameterReference>
            <content>
              <para>An array of objects to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> or <parameterReference>arg</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format specification in <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
            <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <languageKeyword>WriteLine</languageKeyword> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>console.writelineFmt1#1</codeReference>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">Formatting Overview</link>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt32.ToString</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write</languageKeyword> method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.Write(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt64.ToString</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Write </languageKeyword>method. </para>
                <codeReference>System.Console-REFORMAT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Console.WriteLine">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the specified data, followed by the current line terminator, to the standard output stream.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the current line terminator to the standard output stream.</para>
        </summary>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The default line terminator is a string whose value is a carriage return followed by a line feed ("\r\n"). Change the line terminator by setting the <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.IO.TextWriter.NewLine</codeEntityReference> property of the <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference> property to another string.</para>
            <para>For example, in C#, set the line terminator to two carriage return and line feed sequences with the statement, <codeInline>Console.Out.NewLine = "\r\n\r\n";</codeInline>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.IO.TextWriter.NewLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Writes the specified data, followed by the current line terminator, to the standard output stream.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Boolean.ToString</codeEntityReference> method.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>buffer</parameterReference>
            <content>
              <para>A Unicode character array. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>buffer</parameterReference>
            <content>
              <para>An array of Unicode characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting position in <parameterReference>buffer</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of characters to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>buffer</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> or <parameterReference>count</parameterReference> is less than zero. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> plus <parameterReference>count</parameterReference> specify a position that is not within <parameterReference>buffer</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method writes <parameterReference>count</parameterReference> characters starting at position <parameterReference>index</parameterReference> of <parameterReference>buffer</parameterReference> to the standard output stream.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Decimal.ToString</codeEntityReference> method.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Double.ToString</codeEntityReference> method.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int32.ToString</codeEntityReference> method.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method.</para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int64.ToString</codeEntityReference> method.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method.</para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>, only the line terminator is written. Otherwise, the <languageKeyword>ToString</languageKeyword> method of <parameterReference>value</parameterReference> is called to produce its string representation, and the resulting string is written to the standard output stream.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Single.ToString</codeEntityReference> method.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method.</para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the specified string value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If value is <languageKeyword>null</languageKeyword>, only the line terminator is written to the standard output stream.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>The format string. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>Object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format specification in <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
            <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>console.writelineFmt1#1</codeReference>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">FormattingOverview</link>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>The format string. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format specification in <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
            <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>console.writelineFmt1#1</codeReference>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">FormattingOverview</link>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>The format string. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg2</parameterReference>
            <content>
              <para>The third object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format specification in <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
            <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>console.writelineFmt1#1</codeReference>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">FormattingOverview</link>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <clsCompliantAlternative>
          <codeEntityReference>M:System.Console.WriteLine(System.String,System.Object[])</codeEntityReference>
          <content>
          </content>
        </clsCompliantAlternative>
        <summary>
          <para>Writes the text representation of the specified objects and variable length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>The format string. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg2</parameterReference>
            <content>
              <para>The third object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg3</parameterReference>
            <content>
              <para>The fourth object to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>…</parameterReference>
            <content>
              <para>A comma-delimited list of one or more additional objects to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format specification in <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
            <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>console.writelineFmt1#1</codeReference>
                <para>The following code example illustrates the use of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)</codeEntityReference> method. </para>
                <codeReference>console.writelineFmt2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">FormattingOverview</link>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>The format string. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg</parameterReference>
            <content>
              <para>An array of objects to write using <parameterReference>format</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> or <parameterReference>arg</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format specification in <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
            <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>console.writelineFmt1#1</codeReference>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">FormattingOverview</link>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt32.ToString</codeEntityReference> method.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method. </para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Console.WriteLine(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The value to write. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The text representation of <parameterReference>value</parameterReference> is produced by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt64.ToString</codeEntityReference> method.</para>
            <para>For more information about the line terminator, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.Console.WriteLine</codeEntityReference> method that takes no parameters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>WriteLine</languageKeyword> method.</para>
                <codeReference>System.Console.WriteLine#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.Write(System.String,System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Console.BackgroundColor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the background color of the console.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.ConsoleColor</codeEntityReference> that specifies the background color of the console; that is, the color that appears behind each character. The default is black.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The color specified in a set operation is not a valid member of <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.ConsoleColor</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>A get operation for a Windows-based application, in which a console does not exist, returns <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.Black</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.ConsoleColor</codeEntityReference> enumeration in conjunction with the <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Console.ForegroundColor</codeEntityReference> and <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Console.BackgroundColor</codeEntityReference> properties, and the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Console.ResetColor</codeEntityReference> method. You must run the example on a console to see the described color effects.</para>
                <para>Two constants in the example, <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.Black</codeEntityReference> and <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.White</codeEntityReference>, are specified explicitly and all the other constants (<codeEntityReference autoUpgrade="true">F:System.ConsoleColor.Blue</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.DarkRed</codeEntityReference>, and so on) are specified indirectly. First the names of the constants are obtained by using the <codeEntityReference autoUpgrade="true">M:System.Enum.GetNames(System.Type)</codeEntityReference> method, which is inherited from the <codeEntityReference autoUpgrade="true">T:System.Enum</codeEntityReference> class. Then the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Enum.Parse(System.Type,System.String)</codeEntityReference> method uses each name to create the corresponding enumerated constant.</para>
                <codeReference>ConsoleColors.class#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Console.BufferHeight">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the height of the buffer area.</para>
        </summary>
        <returnValue>
          <para>The current height, in rows, of the buffer area.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The value in a set operation is less than or equal to zero.</para>
              <para>-or- </para>
              <para>The value in a set operation is greater than or equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>.</para>
              <para>-or- </para>
              <para>The value in a set operation is less than <codeEntityReference autoUpgrade="true">P:System.Console.WindowTop</codeEntityReference> + <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference> properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.</para>
                <codeReference>console.bufferHW#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Console.BufferWidth">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the width of the buffer area.</para>
        </summary>
        <returnValue>
          <para>The current width, in columns, of the buffer area.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The value in a set operation is less than or equal to zero.</para>
              <para>-or- </para>
              <para>The value in a set operation is greater than or equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>.</para>
              <para>-or- </para>
              <para>The value in a set operation is less than <codeEntityReference autoUpgrade="true">P:System.Console.WindowLeft</codeEntityReference> + <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference> properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.</para>
                <codeReference>console.bufferHW#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Console.CapsLock">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if CAPS LOCK is turned on; <languageKeyword>false</languageKeyword> if CAPS LOCK is turned off.</para>
        </returnValue>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>Win9xFamily</platform>
            </platforms>
            <content>
              <para>This operation is not supported on this platform.</para>
            </content>
          </platformNote>
        </platformNotes>
      </dduexml>
    </member>
    <member name="P:System.Console.CursorLeft">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the column position of the cursor within the buffer area.</para>
        </summary>
        <returnValue>
          <para>The current position, in columns, of the cursor.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The value in a set operation is less than zero.</para>
              <para>-or- </para>
              <para>The value in a set operation is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.CursorLeft</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.CursorTop</codeEntityReference> properties, and the <codeEntityReference autoUpgrade="true">M:System.Console.SetCursorPosition(System.Int32,System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Console.Clear</codeEntityReference> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "|", and "-" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings. </para>
                <codeReference>console.cursorLTS#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Console.CursorSize">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the height of the cursor within a character cell.</para>
        </summary>
        <returnValue>
          <para>The size of the cursor expressed as a percentage of the height of a character cell. The property value ranges from 1 to 100.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The value specified in a set operation is less than 1 or greater than 100. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.</para>
          </content>
        </remarks>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>Win9xFamily</platform>
            </platforms>
            <content>
              <para>In a set operation, the operating system produces an approximation of the specified value. </para>
              <para>The effect of a set operation persists until the termination of the application that performs the operation. The cursor size reverts to its original value after the application terminates.</para>
            </content>
          </platformNote>
        </platformNotes>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.CursorSize</codeEntityReference> property. The example increases the size of the cursor each time any console key is pressed, then restores the cursor to its original size before terminating.</para>
                <codeReference>console.cursorsize#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Console.CursorTop">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the row position of the cursor within the buffer area.</para>
        </summary>
        <returnValue>
          <para>The current position, in rows, of the cursor.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The value in a set operation is less than zero.</para>
              <para>-or- </para>
              <para>The value in a set operation is greater than or equal to <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred.</para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.CursorLeft</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.CursorTop</codeEntityReference> properties, and the <codeEntityReference autoUpgrade="true">M:System.Console.SetCursorPosition(System.Int32,System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Console.Clear</codeEntityReference> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "|", and "-" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings. </para>
                <codeReference>console.cursorLTS#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Console.CursorVisible">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets a value indicating whether the cursor is visible.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the cursor is visible; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred.</para>
            </content>
          </exception>
        </exceptions>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>Win9xFamily</platform>
            </platforms>
            <content>
              <para>The effect of a set operation persists until the termination of the application that performs the operation. The cursor visibility reverts to its original value after the application terminates.</para>
            </content>
          </platformNote>
        </platformNotes>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.CursorVisible</codeEntityReference> property. The example makes the cursor visible if the first column of input is a '+' character or invisible if the input is a '-' character.</para>
                <codeReference>console.cursorvis#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Console.Error">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the standard error output stream.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.IO.TextWriter</codeEntityReference> that represents the standard error output stream.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This property is set to the standard error stream by default. This property can be set to another stream with the <codeEntityReference autoUpgrade="true">M:System.Console.SetError(System.IO.TextWriter)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Error</languageKeyword> property. </para>
                <codeReference>Console-EXPANDTABSEX#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.SetError(System.IO.TextWriter)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Console.ForegroundColor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the foreground color of the console.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.ConsoleColor</codeEntityReference> that specifies the foreground color of the console; that is, the color of each character that is displayed. The default is gray.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The color specified in a set operation is not a valid member of <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.ConsoleColor</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The user does not have permission to perform this action. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>A get operation for a Windows-based application, in which a console does not exist, returns <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.Gray</codeEntityReference>. </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.ConsoleColor</codeEntityReference> enumeration in conjunction with the <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Console.ForegroundColor</codeEntityReference> and <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Console.BackgroundColor</codeEntityReference> properties, and the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Console.ResetColor</codeEntityReference> method. You must run the example on a console to see the described color effects.</para>
                <para>Two constants in the example, <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.Black</codeEntityReference> and <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.White</codeEntityReference>, are specified explicitly and all the other constants (<codeEntityReference autoUpgrade="true">F:System.ConsoleColor.Blue</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.ConsoleColor.DarkRed</codeEntityReference>, and so on) are specified indirectly. First the names of the constants are obtained by using the <codeEntityReference autoUpgrade="true">M:System.Enum.GetNames(System.Type)</codeEntityReference> method, which is inherited from the <codeEntityReference autoUpgrade="true">T:System.Enum</codeEntityReference> class. Then the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Enum.Parse(System.Type,System.String)</codeEntityReference> method uses each name to create the corresponding enumerated constant.</para>
                <codeReference>ConsoleColors.class#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Console.In">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the standard input stream.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.IO.TextReader</codeEntityReference> that represents the standard input stream.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This property is set to the standard input stream by default. This property can be set to another stream with the <codeEntityReference autoUpgrade="true">M:System.Console.SetIn(System.IO.TextReader)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following sample illustrates the use of the <languageKeyword>In</languageKeyword> property. </para>
                <codeReference>consolein#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.Out</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.SetIn(System.IO.TextReader)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Console.InputEncoding">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the encoding the console uses to read input. </para>
        </summary>
        <returnValue>
          <para>The encoding used to read console input.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>The property value in a set operation is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.PlatformNotSupportedException</codeEntityReference>
            <content>
              <para>This property's set operation is not supported on Windows 98, Windows 98 Second Edition, or Windows Millennium Edition.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An error occurred during the execution of this operation.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>Your application does not have permission to perform this operation.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The console uses the input encoding to translate keyboard input into a corresponding character. The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters. Different code pages include different special characters, typically customized for a language or a group of languages.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for reading and writing to top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Text.Encoding</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Console.KeyAvailable">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a value indicating whether a key press is available in the input stream.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if a key press is available; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>Standard input is redirected to a file instead of the keyboard. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The property value is returned immediately; that is, the <codeEntityReference autoUpgrade="true">P:System.Console.KeyAvailable</codeEntityReference> property does not block input until a key press is available.</para>
            <para>Use the <codeEntityReference autoUpgrade="true">P:System.Console.KeyAvailable</codeEntityReference> property in conjunction with only the <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> method, not the <codeEntityReference autoUpgrade="true">M:System.Console.Read</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.Console.ReadLine</codeEntityReference> methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>console.keyavailable#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Console.LargestWindowHeight">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the largest possible number of console window rows, based on the current font and screen resolution.</para>
        </summary>
        <returnValue>
          <para>The height of the largest possible console window measured in rows.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="P:System.Console.LargestWindowWidth">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the largest possible number of console window columns, based on the current font and screen resolution.</para>
        </summary>
        <returnValue>
          <para>The width of the largest possible console window measured in columns.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="P:System.Console.NumberLock">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if NUM LOCK is turned on; <languageKeyword>false</languageKeyword> if NUM LOCK is turned off.</para>
        </returnValue>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>Win9xFamily</platform>
            </platforms>
            <content>
              <para>This operation is not supported on this platform.</para>
            </content>
          </platformNote>
        </platformNotes>
      </dduexml>
    </member>
    <member name="P:System.Console.Out">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the standard output stream.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.IO.TextWriter</codeEntityReference> that represents the standard output stream.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This property is set to the standard output stream by default. This property can be set to another stream with the <codeEntityReference autoUpgrade="true">M:System.Console.SetOut(System.IO.TextWriter)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <languageKeyword>Out</languageKeyword> property. </para>
                <codeReference>System.Console-INSERTTABS#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Console.Error</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Console.In</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Console.SetOut(System.IO.TextWriter)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Console.OutputEncoding">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the encoding the console uses to write output. </para>
        </summary>
        <returnValue>
          <para>The encoding used to write console output.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>The property value in a set operation is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.PlatformNotSupportedException</codeEntityReference>
            <content>
              <para>This property's set operation is not supported on Windows 98, Windows 98 Second Edition, or Windows Millennium Edition.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An error occurred during the execution of this operation.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>Your application does not have permission to perform this operation.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The console uses the output encoding to translate characters written by an application into corresponding console display characters. The output encoding incorporates a code page that maps 256 characters to individual console display characters. Different code pages include different special characters, typically customized for a language or a group of languages.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for reading and writing to top-level windows and subwindows.  Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Console.Title">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the title to display in the console title bar.</para>
        </summary>
        <returnValue>
          <para>The string to be displayed in the title bar of the console. The maximum length of the title string is 24500 characters.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>In a get operation, the retrieved title is longer than 24500 characters. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>In a set operation, the specified title is longer than 24500 characters. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>In a set operation, the specified title is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
        </exceptions>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>Win9xFamily</platform>
            </platforms>
            <content>
              <para>The maximum length of the title string is 127 ANSI characters. Unicode characters are not supported.</para>
            </content>
          </platformNote>
        </platformNotes>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.Title</codeEntityReference> property. The example displays the current title of the operating system window, waits for a key press, then displays a new title.</para>
                <codeReference>console.title#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Console.TreatControlCAsInput">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets a value indicating whether the combination of the <codeEntityReference autoUpgrade="true">F:System.ConsoleModifiers.Control</codeEntityReference> modifier key and <codeEntityReference autoUpgrade="true">F:System.ConsoleKey.C</codeEntityReference> console key (CTRL+C) is treated as ordinary input or as an interruption that is handled by the operating system.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if CTRL+C is treated as ordinary input; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>Unable to get or set the input mode of the console input buffer. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the value of a get operation for the <codeEntityReference autoUpgrade="true">P:System.Console.TreatControlCAsInput</codeEntityReference> property is <languageKeyword>false</languageKeyword> and CTRL+C is pressed, then the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process.</para>
            <alert class="caution">
              <para>Use this property judiciously because setting it to <languageKeyword>true</languageKeyword> has such a dramatic effect. Most users expect CTRL+C to terminate a console application. If you disable the effect of CTRL+C, the user must remember to use CTRL+BREAK to terminate the application, which is a less familiar key combination. </para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.TreatControlCAsInput</codeEntityReference> property.</para>
                <codeReference>console.readkey1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.UIPermission</codeEntityReference>
            <content>
              <para>for modifying safe top-level windows and subwindows. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">F:System.ConsoleModifiers.Control</codeEntityReference>
          <codeEntityReference autoUpgrade="true">F:System.ConsoleKey.C</codeEntityReference>
          <codeEntityReference autoUpgrade="true">E:System.Console.CancelKeyPress</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Console.WindowHeight">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the height of the console window area.</para>
        </summary>
        <returnValue>
          <para>The height of the console window measured in rows.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference> property or the value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference> property is less than or equal to 0.</para>
              <para>-or-</para>
              <para>The value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference> property plus the value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowTop</codeEntityReference> property is greater than or equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>.</para>
              <para>-or-</para>
              <para>The value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference> property or the value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference> property is greater than the largest possible window width or height for the current screen resolution and console font.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>Error reading or writing information.</para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Console.SetWindowSize(System.Int32,System.Int32)</codeEntityReference> method, and the <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference> properties. You must run the example to see the full effect of changing the console window size.</para>
                <para>The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.</para>
                <codeReference>console.setwindowsize#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Console.WindowLeft">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the leftmost position of the console window area relative to the screen buffer.</para>
        </summary>
        <returnValue>
          <para>The leftmost console window position measured in columns.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>Error reading or writing information.</para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.WindowLeft</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowTop</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Console.CursorVisible</codeEntityReference> properties; and the <codeEntityReference autoUpgrade="true">M:System.Console.SetWindowPosition(System.Int32,System.Int32)</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.Console.SetBufferSize(System.Int32,System.Int32)</codeEntityReference>, and <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.</para>
                <codeReference>console.windowLT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Console.WindowTop">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the top position of the console window area relative to the screen buffer.</para>
        </summary>
        <returnValue>
          <para>The uppermost console window position measured in rows.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>Error reading or writing information.</para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Console.WindowLeft</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowTop</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.BufferWidth</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Console.BufferHeight</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Console.CursorVisible</codeEntityReference> properties; and the <codeEntityReference autoUpgrade="true">M:System.Console.SetWindowPosition(System.Int32,System.Int32)</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.Console.SetBufferSize(System.Int32,System.Int32)</codeEntityReference>, and <codeEntityReference autoUpgrade="true">M:System.Console.ReadKey</codeEntityReference> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.</para>
                <codeReference>console.windowLT#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Console.WindowWidth">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the width of the console window.</para>
        </summary>
        <returnValue>
          <para>The width of the console window measured in columns.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference> property or the value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference> property is less than or equal to 0.</para>
              <para>-or-</para>
              <para>The value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference> property plus the value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowTop</codeEntityReference> property is greater than or equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>.</para>
              <para>-or-</para>
              <para>The value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference> property or the value of the <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference> property is greater than the largest possible window width or height for the current screen resolution and console font.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>Error reading or writing information.</para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Console.SetWindowSize(System.Int32,System.Int32)</codeEntityReference> method, and the <codeEntityReference autoUpgrade="true">P:System.Console.WindowWidth</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Console.WindowHeight</codeEntityReference> properties. You must run the example to see the full effect of changing the console window size.</para>
                <para>The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.</para>
                <codeReference>console.setwindowsize#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
  </members>
</doc>