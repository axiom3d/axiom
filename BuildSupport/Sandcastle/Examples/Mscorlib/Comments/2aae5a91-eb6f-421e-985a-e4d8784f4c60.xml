<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="2aae5a91-eb6f-421e-985a-e4d8784f4c60" revisionNumber="25">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Convert">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a base data type to another base data type.</para>
        </summary>
        <remarks>
          <content>
            <para>This class returns a type whose value is equivalent to the value of a specified type. The supported base types are <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.SByte</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.UInt16</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.UInt32</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.UInt64</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> and <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
            <para>A conversion method exists to convert every base type to every other base type. However, the actual conversion operation performed falls into three categories: </para>
            <list class="bullet">
              <listItem>
                <para>A conversion from a type to itself simply returns that type. No conversion is actually performed.</para>
              </listItem>
              <listItem>
                <para>A conversion which cannot yield a meaningful result throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>. No conversion is actually performed. An exception is thrown for conversions from <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> to <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> or <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>, and from those types to <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>. An exception is thrown for conversions from <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> to any type except <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, and from any type, except <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, to <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>.</para>
              </listItem>
              <listItem>
                <para>Any base type, other than those described above, can be converted to and from any other base type.</para>
              </listItem>
            </list>
            <para>An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits). However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.</para>
            <para>For example, when a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> is converted to a <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>, a loss of precision might occur but no exception is thrown. However, if the magnitude of the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> is too large to be represented by a <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>, an overflow exception is thrown.</para>
            <para>A set of methods support converting an array of bytes to and from a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> or array of Unicode characters consisting of base 64 digit characters. Data expressed as base 64 digits can be easily conveyed over data channels that can only transmit 7-bit characters.</para>
            <para>Some of the methods in this class take a parameter object that implements the <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface. This parameter can supply culture-specific formatting information to assist the conversion process. The base value types ignore this parameter, but any user-defined type that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> can honor it.</para>
            <para>For more information about the base value types, see the appropriate topic listed in the See Also section.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates some of the conversion methods in the <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference> class, including <codeEntityReference autoUpgrade="true">Overload:System.Convert.ToInt32</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Convert.ToBoolean</codeEntityReference>, and <codeEntityReference autoUpgrade="true">Overload:System.Convert.ToString</codeEntityReference>.</para>
                <codeReference>System.Convert#1</codeReference>
                <para>The following code example demonstrates several of the conversion methods in the <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference> class.</para>
                <codeReference>convert.class#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.SByte</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.UInt16</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.UInt32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.UInt64</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ChangeType">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> with a specified type and whose value is equivalent to a specified object.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> with the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> and whose value is equivalent to the specified object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>conversionType</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An object whose <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> is <parameterReference>conversionType</parameterReference> and whose value is equivalent to <parameterReference>value</parameterReference>.</para>
          <para>-or-</para>
          <para>
            <languageKeyword>null</languageKeyword>, if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword> and <parameterReference>conversionType</parameterReference> is not a value type.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported.  </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword> and <parameterReference>conversionType</parameterReference> is a value type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>conversionType</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the current thread's culture for the conversion.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Convert.ChangeType</codeEntityReference> method. </para>
                <codeReference>convertchangetype#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Returns an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> with a specified type and whose value is equivalent to a specified object.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> with the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> and whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>conversionType</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An object whose <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> is <parameterReference>conversionType</parameterReference> and whose value is equivalent to <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>
            <parameterReference>value</parameterReference>, if the <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> of <parameterReference>value</parameterReference> and <parameterReference>conversionType</parameterReference> are equal.</para>
          <para>-or- </para>
          <para>
            <languageKeyword>null</languageKeyword>, if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword> and <parameterReference>conversionType</parameterReference> is not a value type.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword> and <parameterReference>conversionType</parameterReference> is a value type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>conversionType</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Convert.ChangeType</codeEntityReference> method. </para>
                <codeReference>convertchangetype#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> with the specified <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference> and whose value is equivalent to the specified object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeCode</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference></para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An object whose underlying <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference> is <parameterReference>typeCode</parameterReference> and whose value is equivalent to <parameterReference>value</parameterReference>.</para>
          <para>-or-</para>
          <para>
            <languageKeyword>null</languageKeyword>, if <parameterReference>value</parameterReference> equals <languageKeyword>null</languageKeyword> and <parameterReference>typeCode</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.TypeCode.Empty</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.TypeCode.String</codeEntityReference>, or <codeEntityReference autoUpgrade="true">F:System.TypeCode.Object</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported.  </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword> and <parameterReference>typeCode</parameterReference> specifies a value type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeCode</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Convert.ChangeType</codeEntityReference> method, changing the passed <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to the type specified by the <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference> parameter, if possible.</para>
                <codeReference>convertchangetype#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> with the specified <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference> and whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>typeCode</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An object whose underlying <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference> is <parameterReference>typeCode</parameterReference> and whose value is equivalent to <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>
            <languageKeyword>null</languageKeyword>, if <parameterReference>value</parameterReference> equals <languageKeyword>null</languageKeyword> and <parameterReference>typeCode</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.TypeCode.Empty</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.TypeCode.String</codeEntityReference>, or <codeEntityReference autoUpgrade="true">F:System.TypeCode.Object</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported.  </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword> and <parameterReference>typeCode</parameterReference> specifies a value type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>typeCode</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Convert.ChangeType</codeEntityReference> method. </para>
                <codeReference>convertchangetype#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="F:System.Convert.DBNull">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>A constant representing a database column absent of data; that is, database null.</para>
        </summary>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.DBNull</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a subset of a Unicode character array, which encodes binary data as base 64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>inArray</parameterReference>
            <content>
              <para>A Unicode character array. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>offset</parameterReference>
            <content>
              <para>A position within <parameterReference>inArray</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements in <parameterReference>inArray</parameterReference> to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An array of 8-bit unsigned integers equivalent to <parameterReference>length</parameterReference> elements at position <parameterReference>offset</parameterReference> in <parameterReference>inArray</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>inArray</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>offset</parameterReference> or <parameterReference>length</parameterReference> is less than 0.</para>
              <para>-or- </para>
              <para>
                <parameterReference>offset</parameterReference> plus <parameterReference>length</parameterReference> indicates a position not within <parameterReference>inArray</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The length of <parameterReference>inArray</parameterReference>, ignoring white space characters, is not zero or a multiple of 4. </para>
              <para>-or-</para>
              <para>The format of <parameterReference>inArray</parameterReference> is invalid. <parameterReference>inArray</parameterReference> contains a non-base 64 character, more than two padding characters, or a non-white space character among the padding characters. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>inArray</parameterReference> is composed of base 64 digits, white space characters, and trailing padding characters. The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', lowercase characters 'a' to 'z', numerals '0' to '9', and the symbols '+' and '/'.</para>
            <para>The white space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white space characters can appear in <parameterReference>inArray</parameterReference> because all white space characters are ignored.</para>
            <para>The valueless character, '=', is used for trailing padding. The end of <parameterReference>inArray</parameterReference> can consist of zero, one, or two padding characters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of the <codeEntityReference autoUpgrade="true">M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)</codeEntityReference> method to decode UUencoded (base 64) data and save it as binary output.</para>
                <codeReference>System.Convert UUEncodeDecode functions#3</codeReference>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)</codeEntityReference> methods. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base 64 digits, 'A', 'A', 'E', and 'C', at the beginning of the output.</para>
                <para>If there isn't an integral number of 3-byte groups, the remaining bytes are effectively padded with zeroes to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base 64 digit '/' at the end of the output, and the next 2 bits are padded with zeroes to yield decimal 48, which corresponds to the base 64 digit, 'w'. The last two 6-bit values are padding and correspond to the valueless padding character, '='.</para>
                <codeReference>convert.tobase64chararray#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, which encodes binary data as base 64 digits, to an equivalent 8-bit unsigned integer array.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>s</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An array of 8-bit unsigned integers equivalent to <parameterReference>s</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The length of <parameterReference>s</parameterReference>, ignoring white space characters, is not zero or a multiple of 4. </para>
              <para>-or-</para>
              <para>The format of <parameterReference>s</parameterReference> is invalid. <parameterReference>s</parameterReference> contains a non-base 64 character, more than two padding characters, or a non-white space character among the padding characters.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>s</parameterReference> is composed of base 64 digits, white space characters, and trailing padding characters. The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', lowercase characters 'a' to 'z', numerals '0' to '9', and the symbols '+' and '/'.</para>
            <para>The white space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white space characters can appear in <parameterReference>s</parameterReference> because all white space characters are ignored.</para>
            <para>The valueless character, '=', is used for trailing padding. The end of <parameterReference>s</parameterReference> can consist of zero, one, or two padding characters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of the <codeEntityReference autoUpgrade="true">M:System.Convert.FromBase64String(System.String)</codeEntityReference> method to decode UUencoded (base 64) data and save it as binary output.</para>
                <codeReference>System.Convert UUEncodeDecode functions#4</codeReference>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Convert.FromBase64String(System.String)</codeEntityReference> methods. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base 64 digits, 'A', 'A', 'E', and 'C', at the beginning of the output.</para>
                <para>If there isn't an integral number of 3-byte groups, the remaining bytes are effectively padded with zeroes to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base 64 digit '/' at the end of the output, and the next 2 bits are padded with zeroes to yield decimal 48, which corresponds to the base 64 digit, 'w'. The last two 6-bit values are padding and correspond to the valueless padding character, '='.</para>
                <codeReference>convert.tobase64string#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference> for the specified object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.TypeCode</codeEntityReference> for <parameterReference>value</parameterReference>, or <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.TypeCode.Empty</codeEntityReference> if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns an indication whether the specified object is of type <codeEntityReference autoUpgrade="true">F:System.TypeCode.DBNull</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is of type <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.TypeCode.DBNull</codeEntityReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToBase64CharArray">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base 64 digits.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base 64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>inArray</parameterReference>
            <content>
              <para>An input array of 8-bit unsigned integers. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>offsetIn</parameterReference>
            <content>
              <para>A position within <parameterReference>inArray</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements of <parameterReference>inArray</parameterReference> to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>outArray</parameterReference>
            <content>
              <para>An output array of Unicode characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>offsetOut</parameterReference>
            <content>
              <para>A position within <parameterReference>outArray</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer containing the number of bytes in <parameterReference>outArray</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>inArray</parameterReference> or <parameterReference>outArray</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>offsetIn</parameterReference>, <parameterReference>offsetOut,</parameterReference> or <parameterReference>length</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>offsetIn</parameterReference> plus <parameterReference>length</parameterReference> is greater than the length of <parameterReference>inArray</parameterReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>offsetOut</parameterReference> plus the number of elements to return is greater than the length of <parameterReference>outArray</parameterReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The subset of <parameterReference>length</parameterReference> elements of <parameterReference>inArray</parameterReference> starting at position <parameterReference>offsetIn</parameterReference>, are taken as a numeric value and converted to a subset of elements in <parameterReference>outArray</parameterReference> starting at position <parameterReference>offsetOut</parameterReference>. The return value indicates the number of converted elements in <parameterReference>outArray</parameterReference>. The subset of <parameterReference>outArray</parameterReference> consists of base 64 digits.</para>
            <para>The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', the lowercase characters 'a' to 'z', the numerals '0' to '9', and the symbols '+' and '/'. The valueless character, '=', is used for trailing padding.</para>
            <para>The <parameterReference>offset</parameterReference> and <parameterReference>length</parameterReference> parameters are 32-bit signed numbers. The <parameterReference>offsetIn</parameterReference> and <parameterReference>offsetOut</parameterReference> parameters are zero-based array positions.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates using the <codeEntityReference autoUpgrade="true">M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)</codeEntityReference> method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.</para>
                <codeReference>System.Convert UUEncodeDecode functions#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base 64 digits.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base 64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>inArray</parameterReference>
            <content>
              <para>An input array of 8-bit unsigned integers. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>offsetIn</parameterReference>
            <content>
              <para>A position within <parameterReference>inArray</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements of <parameterReference>inArray</parameterReference> to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>outArray</parameterReference>
            <content>
              <para>An output array of Unicode characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>offsetOut</parameterReference>
            <content>
              <para>A position within <parameterReference>outArray</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>insertLineBreaks</parameterReference>
            <content>
              <para>
                <languageKeyword>true</languageKeyword> to insert a line break every 76 characters; otherwise, <languageKeyword>false</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer containing the number of bytes in <parameterReference>outArray</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>inArray</parameterReference> or <parameterReference>outArray</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>offsetIn</parameterReference>, <parameterReference>offsetOut,</parameterReference> or <parameterReference>length</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>offsetIn</parameterReference> plus <parameterReference>length</parameterReference> is greater than the length of <parameterReference>inArray</parameterReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>offsetOut</parameterReference> plus the number of elements to return is greater than the length of <parameterReference>outArray</parameterReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The subset of <parameterReference>length</parameterReference> elements of the <parameterReference>inArray</parameterReference> parameter starting at position <parameterReference>offsetIn</parameterReference> are taken as a numeric value and converted to a subset of elements in the <parameterReference>outArray</parameterReference> parameter starting at position <parameterReference>offsetOut</parameterReference>. The return value indicates the number of converted elements in <parameterReference>outArray</parameterReference>. The subset of <parameterReference>outArray</parameterReference> consists of base 64 digits.</para>
            <para>The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', the lowercase characters 'a' to 'z', the numerals '0' to '9', and the symbols '+' and '/'. The valueless character '=' is used for trailing padding.</para>
            <para>The <parameterReference>offset</parameterReference> and <parameterReference>length</parameterReference> parameters are 32-bit signed numbers. The <parameterReference>offsetIn</parameterReference> and <parameterReference>offsetOut</parameterReference> parameters are zero-based array positions.</para>
            <para>If the <parameterReference>insertLineBreaks</parameterReference> parameter is <languageKeyword>true</languageKeyword> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <externalLink><linkText>http://www.rfc-editor.org/</linkText><linkUri>http://www.rfc-editor.org/</linkUri></externalLink>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)</codeEntityReference> method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base 64 digits 'A', 'A', 'E', and 'C' at the beginning of the output.</para>
                <para>If there is not an integral number of 3-byte groups, the remaining bytes are effectively padded with zeroes to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base 64 digit '/' at the end of the output, and the next 2 bits are padded with zeroes to yield decimal 48, which corresponds to the base 64 digit 'w'. The last two 6-bit values are padding and correspond to the valueless padding character '='.</para>
                <codeReference>convert.tobase64chararray#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base 64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>inArray</parameterReference>
            <content>
              <para>An input array of 8-bit unsigned integers. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>offsetIn</parameterReference>
            <content>
              <para>A position within <parameterReference>inArray</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements of <parameterReference>inArray</parameterReference> to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>outArray</parameterReference>
            <content>
              <para>An output array of Unicode characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>offsetOut</parameterReference>
            <content>
              <para>A position within <parameterReference>outArray</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>options</parameterReference>
            <content>
              <para>
                <codeEntityReference autoUpgrade="true">F:System.Base64FormattingOptions.InsertLineBreaks</codeEntityReference> to insert a line break every 76 characters, or <codeEntityReference autoUpgrade="true">F:System.Base64FormattingOptions.None</codeEntityReference> to not insert line breaks.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer containing the number of bytes in <parameterReference>outArray</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>inArray</parameterReference> or <parameterReference>outArray</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>offsetIn</parameterReference>, <parameterReference>offsetOut,</parameterReference> or <parameterReference>length</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>offsetIn</parameterReference> plus <parameterReference>length</parameterReference> is greater than the length of <parameterReference>inArray</parameterReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>offsetOut</parameterReference> plus the number of elements to return is greater than the length of <parameterReference>outArray</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>options</parameterReference> is not a valid <codeEntityReference autoUpgrade="true">T:System.Base64FormattingOptions</codeEntityReference> value. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The subset of <parameterReference>length</parameterReference> elements of the <parameterReference>inArray</parameterReference> parameter starting at position <parameterReference>offsetIn</parameterReference>, are taken as a numeric value and converted to a subset of elements in the <parameterReference>outArray</parameterReference> parameter starting at position <parameterReference>offsetOut</parameterReference>. The return value indicates the number of converted elements in <parameterReference>outArray</parameterReference>. The subset of <parameterReference>outArray</parameterReference> consists of base 64 digits.</para>
            <para>The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', the lowercase characters 'a' to 'z', the numerals '0' to '9', and the symbols '+' and '/'. The valueless character '=' is used for trailing padding.</para>
            <para>The <parameterReference>offset</parameterReference> and <parameterReference>length</parameterReference> parameters are 32-bit signed numbers. The <parameterReference>offsetIn</parameterReference> and <parameterReference>offsetOut</parameterReference> parameters are zero-based array positions.</para>
            <para>If the <parameterReference>options</parameterReference> parameter is set to <codeEntityReference autoUpgrade="true">F:System.Base64FormattingOptions.InsertLineBreaks</codeEntityReference> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <externalLink><linkText>http://www.rfc-editor.org/</linkText><linkUri>http://www.rfc-editor.org/</linkUri></externalLink>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)</codeEntityReference> method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base 64 digits 'A', 'A', 'E', and 'C' at the beginning of the output.</para>
                <para>If there is not an integral number of 3-byte groups, the remaining bytes are effectively padded with zeroes to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base 64 digit '/' at the end of the output, and the next 2 bits are padded with zeroes to yield decimal 48, which corresponds to the base 64 digit 'w'. The last two 6-bit values are padding and correspond to the valueless padding character, '='.</para>
                <codeReference>convert.tobase64chararray#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToBase64String">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of an array of 8-bit unsigned integers to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation encoded with base 64 digits.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of an array of 8-bit unsigned integers to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation encoded with base 64 digits.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>inArray</parameterReference>
            <content>
              <para>An array of 8-bit unsigned integers. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation, in base 64, of the contents of <parameterReference>inArray</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>inArray</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The elements of <parameterReference>inArray</parameterReference> are taken as a numeric value and converted to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation encoded with base 64 digits.</para>
            <para>The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', the lowercase characters 'a' to 'z', the numerals '0' to '9', and the symbols '+' and '/'. The valueless character, '=', is used for trailing padding.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates using the <codeEntityReference autoUpgrade="true">M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)</codeEntityReference> method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.</para>
                <codeReference>System.Convert UUEncodeDecode functions#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Converts the value of an array of 8-bit unsigned integers to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation encoded with base 64 digits.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a subset of an array of 8-bit unsigned integers to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation encoded with base 64 digits. A parameter specifies whether to insert line breaks in the return value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>inArray</parameterReference>
            <content>
              <para>An array of 8-bit unsigned integers. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>insertLineBreaks</parameterReference>
            <content>
              <para>
                <languageKeyword>true</languageKeyword> to insert a line break every 76 characters; otherwise, <languageKeyword>false</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in base 64 of the elements in <parameterReference>inArray</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>inArray</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The elements of the <parameterReference>inArray</parameterReference> parameter are taken as a numeric value and converted to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in base 64.</para>
            <para>The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', the lowercase characters 'a' to 'z', the numerals '0' to '9', and the symbols '+' and '/'. The valueless character '=' is used for trailing padding.</para>
            <para>If the <parameterReference>insertLineBreaks</parameterReference> parameter is <languageKeyword>true</languageKeyword> and the output of the conversion is longer than 76 characters, then a line break is inserted every 76 characters. For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <externalLink><linkText>http://www.rfc-editor.org/</linkText><linkUri>http://www.rfc-editor.org/</linkUri></externalLink>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Convert.ToBase64String(System.Byte[])</codeEntityReference> method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base 64 digits 'A', 'A', 'E', and 'C' at the beginning of the output.</para>
                <para>If there is not an integral number of 3-byte groups, the remaining bytes are effectively padded with zeroes to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base 64 digit '/' at the end of the output, and the next 2 bits are padded with zeroes to yield decimal 48, which corresponds to the base 64 digit 'w'. The last two 6-bit values are padding and correspond to the valueless padding character '='.</para>
                <codeReference>convert.tobase64string#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a subset of an array of 8-bit unsigned integers to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation encoded with base 64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>inArray</parameterReference>
            <content>
              <para>An array of 8-bit unsigned integers. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>offset</parameterReference>
            <content>
              <para>An offset in <parameterReference>inArray</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements of <parameterReference>inArray</parameterReference> to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in base 64 of <parameterReference>length</parameterReference> elements of <parameterReference>inArray</parameterReference> starting at position <parameterReference>offset</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>inArray</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>offset</parameterReference> or <parameterReference>length</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>offset</parameterReference> plus <parameterReference>length</parameterReference> is greater than the length of <parameterReference>inArray</parameterReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The elements of <parameterReference>inArray</parameterReference> are taken as a numeric value and converted to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in base 64.</para>
            <para>The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', the lowercase characters 'a' to 'z', the numerals '0' to '9', and the symbols '+' and '/'. The valueless character, '=', is used for trailing padding.</para>
            <para>The <parameterReference>offset</parameterReference> and <parameterReference>length</parameterReference> parameters are 32-bit signed numbers. The <parameterReference>offset</parameterReference> parameter is zero-based.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a subset of an array of 8-bit unsigned integers to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation encoded with base 64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>inArray</parameterReference>
            <content>
              <para>An array of 8-bit unsigned integers. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>offset</parameterReference>
            <content>
              <para>An offset in <parameterReference>inArray</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements of <parameterReference>inArray</parameterReference> to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>insertLineBreaks</parameterReference>
            <content>
              <para>
                <languageKeyword>true</languageKeyword> to insert a line break every 76 characters; otherwise, <languageKeyword>false</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in base 64 of <parameterReference>length</parameterReference> elements of <parameterReference>inArray</parameterReference> starting at position <parameterReference>offset</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>inArray</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>offset</parameterReference> or <parameterReference>length</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>offset</parameterReference> plus <parameterReference>length</parameterReference> is greater than the length of <parameterReference>inArray</parameterReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The elements of the <parameterReference>inArray</parameterReference> parameter are taken as a numeric value and converted to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in base 64.</para>
            <para>The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', the lowercase characters 'a' to 'z', the numerals '0' to '9', and the symbols '+' and '/'. The valueless character '=' is used for trailing padding.</para>
            <para>The <parameterReference>offset</parameterReference> and <parameterReference>length</parameterReference> parameters are 32-bit signed numbers. The <parameterReference>offset</parameterReference> parameter is zero-based.</para>
            <para>If the <parameterReference>insertLineBreaks</parameterReference> parameter is <languageKeyword>true</languageKeyword> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <externalLink><linkText>http://www.rfc-editor.org/</linkText><linkUri>http://www.rfc-editor.org/</linkUri></externalLink>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Convert.ToBase64String(System.Byte[])</codeEntityReference> method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base 64 digits 'A', 'A', 'E', and 'C' at the beginning of the output.</para>
                <para>If there is not an integral number of 3-byte groups, the remaining bytes are effectively padded with zeroes to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base 64 digit '/' at the end of the output, and the next 2 bits are padded with zeroes to yield decimal 48, which corresponds to the base 64 digit 'w'. The last two 6-bit values are entirely padding and correspond to the valueless padding character '='.</para>
                <codeReference>convert.tobase64string#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a subset of an array of 8-bit unsigned integers to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation encoded with base 64 digits. A parameter specifies whether to insert line breaks in the return value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>inArray</parameterReference>
            <content>
              <para>An array of 8-bit unsigned integers. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>options</parameterReference>
            <content>
              <para>
                <codeEntityReference autoUpgrade="true">F:System.Base64FormattingOptions.InsertLineBreaks</codeEntityReference> to insert a line break every 76 characters, or <codeEntityReference autoUpgrade="true">F:System.Base64FormattingOptions.None</codeEntityReference> to not insert line breaks.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in base 64 of the elements in <parameterReference>inArray</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>inArray</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>options</parameterReference> is not a valid <codeEntityReference autoUpgrade="true">T:System.Base64FormattingOptions</codeEntityReference> value. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The elements of the <parameterReference>inArray</parameterReference> parameter are taken as a numeric value and converted to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in base 64.</para>
            <para>The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', the lowercase characters 'a' to 'z', the numerals '0' to '9', and the symbols '+' and '/'. The valueless character '=' is used for trailing padding.</para>
            <para>If the <parameterReference>options</parameterReference> parameter is set to <codeEntityReference autoUpgrade="true">F:System.Base64FormattingOptions.InsertLineBreaks</codeEntityReference> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <externalLink><linkText>http://www.rfc-editor.org/</linkText><linkUri>http://www.rfc-editor.org/</linkUri></externalLink>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)</codeEntityReference> method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base 64 digits 'A', 'A', 'E', and 'C' at the beginning of the output.</para>
                <para>If there is not an integral number of 3-byte groups, the remaining bytes are effectively padded with zeroes to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base 64 digit '/' at the end of the output, and the next 2 bits are padded with zeroes to yield decimal 48, which corresponds to the base 64 digit 'w'. The last two 6-bit values are padding and correspond to the valueless padding character '='.</para>
                <codeReference>convert.tobase64string#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a subset of an array of 8-bit unsigned integers to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation encoded with base 64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>inArray</parameterReference>
            <content>
              <para>An array of 8-bit unsigned integers. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>offset</parameterReference>
            <content>
              <para>An offset in <parameterReference>inArray</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements of <parameterReference>inArray</parameterReference> to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>options</parameterReference>
            <content>
              <para>
                <codeEntityReference autoUpgrade="true">F:System.Base64FormattingOptions.InsertLineBreaks</codeEntityReference> to insert a line break every 76 characters, or <codeEntityReference autoUpgrade="true">F:System.Base64FormattingOptions.None</codeEntityReference> to not insert line breaks.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in base 64 of <parameterReference>length</parameterReference> elements of <parameterReference>inArray</parameterReference> starting at position <parameterReference>offset</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>inArray</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>offset</parameterReference> or <parameterReference>length</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>offset</parameterReference> plus <parameterReference>length</parameterReference> is greater than the length of <parameterReference>inArray</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>options</parameterReference> is not a valid <codeEntityReference autoUpgrade="true">T:System.Base64FormattingOptions</codeEntityReference> value. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The elements of the <parameterReference>inArray</parameterReference> parameter are taken as a numeric value and converted to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in base 64.</para>
            <para>The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', the lowercase characters 'a' to 'z', the numerals '0' to '9', and the symbols '+' and '/'. The valueless character '=' is used for trailing padding.</para>
            <para>The <parameterReference>offset</parameterReference> and <parameterReference>length</parameterReference> parameters are 32-bit signed numbers. The <parameterReference>offset</parameterReference> parameter is zero-based.</para>
            <para>If the <parameterReference>options</parameterReference> parameter is set to <codeEntityReference autoUpgrade="true">F:System.Base64FormattingOptions.InsertLineBreaks</codeEntityReference> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <externalLink><linkText>http://www.rfc-editor.org/</linkText><linkUri>http://www.rfc-editor.org/</linkUri></externalLink>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)</codeEntityReference> method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base 64 digits 'A', 'A', 'E', and 'C' at the beginning of the output.</para>
                <para>If there is not an integral number of 3-byte groups, the remaining bytes are effectively padded with zeroes to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base 64 digit '/' at the end of the output, and the next 2 bits are padded with zeroes to yield decimal 48, which corresponds to the base 64 digit 'w'. The last two 6-bit values are padding and correspond to the valueless padding character '='.</para>
                <codeReference>convert.tobase64string#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToBoolean">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to an equivalent Boolean value.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified Boolean value; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Converts a specified value to an equivalent Boolean value.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample demonstrates that an attempt to convert a <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> value to a Boolean type throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
                <codeReference>System.Convert Snippets#20</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Convert.ToBoolean</codeEntityReference> method, taking a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> as a parameter.</para>
                <codeReference>System.Convert Snippets#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of a specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>false</languageKeyword> if <parameterReference>value</parameterReference> equals <languageKeyword>null</languageKeyword>.</para>
          <para>-or- </para>
          <para>
            <languageKeyword>true</languageKeyword> or <languageKeyword>false</languageKeyword>; the result of invoking the <languageKeyword>IConvertible.ToBoolean</languageKeyword> method for the underlying type of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Convert.ToBoolean</codeEntityReference> method, converting a string value to a Boolean type.</para>
                <codeReference>System.Convert Snippets#12</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to an equivalent Boolean value using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>false</languageKeyword> if <parameterReference>value</parameterReference> equals <languageKeyword>null</languageKeyword>.</para>
          <para>-or- </para>
          <para>
            <languageKeyword>true</languageKeyword> or <languageKeyword>false</languageKeyword>; the result of invoking the <languageKeyword>ToBoolean</languageKeyword> method for the underlying type of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToBoolean</languageKeyword> method. This method returns true if any of the non-discarded array values are non-zero. The <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object determines how elements are discarded for this calculation.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.SByte</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a logical value to its Boolean equivalent.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that contains the value of either <codeEntityReference autoUpgrade="true">F:System.Boolean.TrueString</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Boolean.FalseString</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Boolean.TrueString</codeEntityReference>, or <languageKeyword>false</languageKeyword> if <parameterReference>value</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Boolean.FalseString</codeEntityReference> or <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is not equal to <codeEntityReference autoUpgrade="true">F:System.Boolean.TrueString</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Boolean.FalseString</codeEntityReference></para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToBoolean</languageKeyword>, taking a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> parameter.</para>
                <codeReference>System.Convert Snippets#12</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a logical value to its Boolean equivalent using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A string that contains the value of either <codeEntityReference autoUpgrade="true">F:System.Boolean.TrueString</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Boolean.FalseString</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>(Reserved) An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Boolean.TrueString</codeEntityReference>, or <languageKeyword>false</languageKeyword> if <parameterReference>value</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Boolean.FalseString</codeEntityReference> or <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is not equal to <codeEntityReference autoUpgrade="true">F:System.Boolean.TrueString</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Boolean.FalseString</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> is ignored; it does not participate in this operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToBoolean</languageKeyword>, taking a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> parameter.</para>
                <codeReference>System.Convert Snippets#12</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.UInt16</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.UInt32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is not zero; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.UInt64</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToByte">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to an 8-bit unsigned integer.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
      <overload>
        <summary>
          <para>Converts a specified value to an 8-bit unsigned integer.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit unsigned integer equivalent to <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 8-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The following code sample illustrates the use of <languageKeyword>ToByte</languageKeyword>, converting a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> : </para>
            <codeReference>System.Convert Snippets#18</codeReference>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 8-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToByte</languageKeyword>, converting a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> : </para>
                <codeReference>System.Convert Snippets#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference> or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference> or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference> or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToByte</languageKeyword>, converting an <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference> (long) value to a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> : </para>
                <codeReference>System.Convert Snippets#9</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to an 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToByte</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToByte</languageKeyword>, converting a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> : </para>
                <codeReference>System.Convert Snippets#13</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to an 8-bit unsigned integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToByte</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 8-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToByte</languageKeyword>, converting a <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference> (float) value to a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> : </para>
                <codeReference>System.Convert Snippets#19</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToByte</languageKeyword>, converting a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> : </para>
                <codeReference>System.Convert Snippets#13</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Byte.Parse(System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 8-bit signed integer using specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of unsigned <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> values with the <languageKeyword>ToByte</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToUInts_String#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Byte.Parse(System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number in a specified base to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>fromBase</parameterReference>
            <content>
              <para>The base of the number in <parameterReference>value</parameterReference>, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the number in <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>fromBase</parameterReference> is not 2, 8, 10, or 16. </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> contains a character that is not a valid digit in the base specified by <parameterReference>fromBase</parameterReference>. The exception message indicates there are no digits to convert if the first character in <parameterReference>value</parameterReference> is invalid; otherwise, the message indicates <parameterReference>value</parameterReference> contains invalid trailing characters.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference>, which represents a base 10 unsigned number, is prefixed with a negative sign.</para>
              <para>-or-</para>
              <para>The return value is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference> or larger than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>fromBase</parameterReference> is 16, you can prefix the number specified by the <parameterReference>value</parameterReference> parameter with "0x" or "0X".</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToChar">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a Unicode character.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference> value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      <overload>
        <summary>
          <para>Converts a specified value to a Unicode character.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified Unicode character value; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample attempts to convert a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> to <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>, throwing <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference> on failure.</para>
                <codeReference>System.Convert Snippets#17</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating-point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Char.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Char.MinValue</codeEntityReference> or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Char.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Char.MinValue</codeEntityReference> or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Char.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample attempts to convert an <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference> to <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>, throwing <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference> on failure.</para>
                <codeReference>System.Convert Snippets#8</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>
            <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Char.MinValue</codeEntityReference> if <parameterReference>value</parameterReference> equals <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToChar</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToByte</languageKeyword>, by attempting to convert a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> : </para>
                <codeReference>System.Convert Snippets#14</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to its equivalent Unicode character using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>
            <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Char.MinValue</codeEntityReference> if <parameterReference>value</parameterReference> equals <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToChar</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToChar</languageKeyword> method. This method returns a character whose Unicode value is the average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Char.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating-point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the first character of a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to a Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> of length 1 or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the first and only character in <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The length of <parameterReference>value</parameterReference> is not 1. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>value</parameterReference> must be <languageKeyword>null</languageKeyword> or a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a single character.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToByte</languageKeyword>, by attempting to convert a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> : </para>
                <codeReference>System.Convert Snippets#14</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the first character of a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to a Unicode character using specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> of length 1 or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>(Reserved) An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the first and only character in <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The length of <parameterReference>value</parameterReference> is not 1. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>value</parameterReference> must be <languageKeyword>null</languageKeyword> or a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a single character.</para>
            <para>
              <parameterReference>provider</parameterReference> is ignored; it does not participate in this operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> value with the <languageKeyword>ToChar</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object that displays the type of the format provider for which it is called. The example shows that the format provider is not referenced.</para>
                <codeReference>System.Convert.ToNonNum_String#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Char.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The Unicode character equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Char.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToDateTime">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Converts a specified value to a <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> equivalent to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.DateTime.MinValue</codeEntityReference> if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToDateTime</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> equivalent to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.DateTime.MinValue</codeEntityReference> if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToDateTime</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a date, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that date.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToDateTime</languageKeyword> method. This method calculates an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average. The method returns the sum of this average, taken as seconds, and the current date and time.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a date and time to an equivalent <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a date and time to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> equivalent to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.DateTime.MinValue</codeEntityReference> if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is not a properly formatted date and time. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.DateTime.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference> using the current culture.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Globalization.CultureInfo.CurrentCulture</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a date and time to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> equivalent to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.DateTime.MinValue</codeEntityReference> if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is not a properly formatted date and time. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.DateTime.Parse(System.String,System.IFormatProvider)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> is an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.DateTimeFormatInfo</codeEntityReference> object. The <codeEntityReference autoUpgrade="true">T:System.Globalization.DateTimeFormatInfo</codeEntityReference> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <codeEntityReference autoUpgrade="true">T:System.Globalization.DateTimeFormatInfo</codeEntityReference> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of date values with the <languageKeyword>ToDateTime</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToNonNum_String#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.UInt16</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.UInt32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.UInt64</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToDecimal">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Converts a specified value to a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to the equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> one, using <languageKeyword>ToDecimal</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#18</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample attempts to convert a <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> value to <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>, throwing <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference> upon failure.</para>
                <codeReference>System.Convert Snippets#17</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>. The <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> contains 15 significant digits and is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The numeric value of <parameterReference>value</parameterReference> is greater than <codeEntityReference autoUpgrade="true">F:System.Decimal.MaxValue</codeEntityReference> or less than <codeEntityReference autoUpgrade="true">F:System.Decimal.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> one, using <languageKeyword>ToDecimal</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#5</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to an equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of an <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> one, using <languageKeyword>ToDecimal</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#10</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToDecimal</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToDecimal</languageKeyword>, by attempting to convert a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> and throwing any of the possible exceptions that may arise during the conversion.</para>
                <codeReference>System.Convert Snippets#15</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to an <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToDecimal</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToDecimal</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to the equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to the equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>. The <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> contains 7 significant digits and is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine) and an optional decimal point symbol. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Decimal.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Decimal.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Decimal.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>ToDecimal</languageKeyword>, by attempting to convert a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> and throwing any of the possible exceptions that may arise during the conversion.</para>
                <codeReference>System.Convert Snippets#15</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine) and an optional decimal point symbol. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Decimal.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Decimal.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Decimal.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> values with the <languageKeyword>ToDecimal</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToReals_String#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to the equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToDouble">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a double-precision floating point number.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> one, using <languageKeyword>ToDouble</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Converts a specified value to a double-precision floating point number.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> one, using <languageKeyword>ToDouble</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> one, using <languageKeyword>ToDouble</languageKeyword>. Note that if the <languageKeyword>Decimal</languageKeyword> passed is larger than <codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>, an <languageKeyword>OverflowException</languageKeyword> will result.</para>
                <codeReference>System.Convert Snippets#5</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified double-precision floating point number; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of an <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> one, using <languageKeyword>ToDouble</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToDouble</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> using <languageKeyword>ToDouble</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#7</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to an double-precision floating point number using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToDouble</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToDouble</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to an equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> one, using <languageKeyword>ToDouble</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#6</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Double.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Double.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> one, using <languageKeyword>ToDouble</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#6,7</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent double-precision floating point number using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Double.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Double.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values with the <languageKeyword>ToDouble</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToReals_String#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToInt16">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a 16-bit signed integer.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
      <overload>
        <summary>
          <para>Converts a specified value to a 16-bit signed integer.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 16-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 16-bit signed integer equivalent to <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 16-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 16-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified 16-bit signed integer; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 16-bit signed integer equivalent of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToInt16</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 16-bit signed integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToInt16</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to an equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 16-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 16-bit integers with the <languageKeyword>ToInt16</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToSInts_String#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int16.Parse(System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 16-bit signed integer using specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 16-bit integers with the <languageKeyword>ToInt16</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToSInts_String#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int16.Parse(System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number in a specified base to an equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>fromBase</parameterReference>
            <content>
              <para>The base of the number in <parameterReference>value</parameterReference>, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit signed integer equivalent to the number in <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>fromBase</parameterReference> is not 2, 8, 10, or 16. </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference>, which represents a non-base 10 signed number, is prefixed with a negative sign. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> contains a character that is not a valid digit in the base specified by <parameterReference>fromBase</parameterReference>. The exception message indicates there are no digits to convert if the first character in <parameterReference>value</parameterReference> is invalid; otherwise, the message indicates <parameterReference>value</parameterReference> contains invalid trailing characters.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference>, which represents a base 10 signed number, is prefixed with a negative sign.</para>
              <para>-or-</para>
              <para>The return value is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference> or larger than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>fromBase</parameterReference> is 16, you can prefix the number specified by the <parameterReference>value</parameterReference> parameter with "0x" or "0X".</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 16-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToInt32">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a 32-bit signed integer.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
      <overload>
        <summary>
          <para>Converts a specified value to a 32-bit signed integer.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 32-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 32-bit signed integer equivalent to <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 32-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 32-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> value to an <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>, using <languageKeyword>ToInt32</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified 32-bit signed integer; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToInt32</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 32-bit signed integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToInt32</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToInt32</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to an equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 32-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int32.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 32-bit integers with the <languageKeyword>ToInt32</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToSInts_String#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 32-bit signed integer using specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int32.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 32-bit integers with the <languageKeyword>ToInt32</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToSInts_String#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number in a specified base to an equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>fromBase</parameterReference>
            <content>
              <para>The base of the number in <parameterReference>value</parameterReference>, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer equivalent to the number in <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>fromBase</parameterReference> is not 2, 8, 10, or 16. </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference>, which represents a non-base 10 signed number, is prefixed with a negative sign. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> contains a character that is not a valid digit in the base specified by <parameterReference>fromBase</parameterReference>. The exception message indicates there are no digits to convert if the first character in <parameterReference>value</parameterReference> is invalid; otherwise, the message indicates <parameterReference>value</parameterReference> contains invalid trailing characters.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference>, which represents a base 10 signed number, is prefixed with a negative sign.</para>
              <para>-or-</para>
              <para>The return value is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> or larger than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>fromBase</parameterReference> is 16, you can prefix the number specified by the <parameterReference>value</parameterReference> parameter with "0x" or "0X".</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 32-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToInt64">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a 64-bit signed integer.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
      <overload>
        <summary>
          <para>Converts a specified value to a 64-bit signed integer.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> value to an <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference>, using <languageKeyword>ToInt64</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#9</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit signed integer equivalent to <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> value to an <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference>, using <languageKeyword>ToInt64</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#8</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 64-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int64.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 64-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int64.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified 64-bit signed integer; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToInt64</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 64-bit signed integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToInt64</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToInt64</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to an equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 64-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int64.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference> value to an <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference>, using <languageKeyword>ToInt64</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#11</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int64.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int64.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 64-bit integers with the <languageKeyword>ToInt64</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToSInts_String#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int64.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int64.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 64-bit integers with the <languageKeyword>ToInt64</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToSInts_String#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number in a specified base to an equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>fromBase</parameterReference>
            <content>
              <para>The base of the number in <parameterReference>value</parameterReference>, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit signed integer equivalent to the number in <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>fromBase</parameterReference> is not 2, 8, 10, or 16. </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference>, which represents a non-base 10 signed number, is prefixed with a negative sign. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> contains a character that is not a valid digit in the base specified by <parameterReference>fromBase</parameterReference>. The exception message indicates there are no digits to convert if the first character in <parameterReference>value</parameterReference> is invalid; otherwise, the message indicates <parameterReference>value</parameterReference> contains invalid trailing characters.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference>, which represents a base 10 signed number, is prefixed with a negative sign.</para>
              <para>-or-</para>
              <para>The return value is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int64.MinValue</codeEntityReference> or larger than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>fromBase</parameterReference> is 16, you can prefix the number specified by the <parameterReference>value</parameterReference> parameter with "0x" or "0X".</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToSByte">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to an 8-bit signed integer.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
      <overload>
        <summary>
          <para>Converts a specified value to an 8-bit signed integer.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit signed integer equivalent to <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 8-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 8-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit signed integer equivalent of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to an 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToSByte</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to an 8-bit signed integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToSByte</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified 8-bit signed integer; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to an equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 8-bit signed integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if value is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of <codeEntityReference autoUpgrade="true">T:System.SByte</codeEntityReference> (signed byte) values with the <languageKeyword>ToSByte</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToSInts_String#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.SByte.Parse(System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 8-bit signed integer using specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of <codeEntityReference autoUpgrade="true">T:System.SByte</codeEntityReference> (signed byte) values with the <languageKeyword>ToSByte</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToSInts_String#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.SByte.Parse(System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number in a specified base to an equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>fromBase</parameterReference>
            <content>
              <para>The base of the number in <parameterReference>value</parameterReference>, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit signed integer equivalent to the number in <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>fromBase</parameterReference> is not 2, 8, 10, or 16. </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference>, which represents a non-base 10 signed number, is prefixed with a negative sign. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> contains a character that is not a valid digit in the base specified by <parameterReference>fromBase</parameterReference>. The exception message indicates there are no digits to convert if the first character in <parameterReference>value</parameterReference> is invalid; otherwise, the message indicates <parameterReference>value</parameterReference> contains invalid trailing characters.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference>, which represents a base 10 signed number, is prefixed with a negative sign.</para>
              <para>-or-</para>
              <para>The return value is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference> or larger than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>fromBase</parameterReference> is 16, you can prefix the number specified by the <parameterReference>value</parameterReference> parameter with "0x" or "0X".</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference> or less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToSingle">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a single-precision floating point number.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
      <overload>
        <summary>
          <para>Converts a specified value to a single-precision floating point number.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> to <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>, using <languageKeyword>ToSingle</languageKeyword>.</para>
            <codeReference>System.Convert Snippets#19</codeReference>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>
            <parameterReference>value</parameterReference> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>
            <parameterReference>value</parameterReference> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> to <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>, using <languageKeyword>ToSingle</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#6</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of an <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference> to <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>, using <languageKeyword>ToSingle</languageKeyword>. Note that large <languageKeyword>Int64</languageKeyword> values can cause <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference> to be thrown.</para>
                <codeReference>System.Convert Snippets#11</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToSingle</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>, using <languageKeyword>ToSingle</languageKeyword> : </para>
                <codeReference>System.Convert Snippets#16</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to an single-precision floating point number using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToSingle</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToSingle</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified single-precision floating point number; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Single.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Single.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Single.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>, using <languageKeyword>ToSingle</languageKeyword> : </para>
                <codeReference>System.Convert Snippets#16</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent single-precision floating point number using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Single.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Single.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Single.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference> values with the <languageKeyword>ToSingle</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToReals_String#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating point number equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToString">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified value to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Boolean.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, using <languageKeyword>ToString</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#12</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Converts the specified value to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>(Reserved) An instance of an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Boolean.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object that displays the type of the format provider for which it is called. The example shows that the <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object is not referenced.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Byte.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, using <languageKeyword>ToString</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#13</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Byte.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts an unsigned <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of an 8-bit unsigned integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in a specified base.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>toBase</parameterReference>
            <content>
              <para>The base of the return value, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of <parameterReference>value</parameterReference> in base <parameterReference>toBase</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>toBase</parameterReference> is not 2, 8, 10, or 16. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts several <codeEntityReference autoUpgrade="true">T:System.Byte</codeEntityReference> values to <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> s with the <languageKeyword>ToString</languageKeyword> method in the radixes supported by the method.</para>
                <codeReference>System.Convert.ToString.Radix#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Unicode character to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Char.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, using <languageKeyword>ToString</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#14</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Unicode character to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Char.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object that displays the type of the format provider for which it is called. The example shows that the <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object is not referenced.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.DateTime.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.DateTime.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Decimal.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, using <languageKeyword>ToString</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#15</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Decimal.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Double.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, using <languageKeyword>ToString</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#7</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
          <para>
            <parameterReference>provider</parameterReference> is ignored; it does not participate in this operation.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Double.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int16.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a 16-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int16.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a 16-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of a 16-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in a specified base.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>toBase</parameterReference>
            <content>
              <para>The base of the return value, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of <parameterReference>value</parameterReference> in base <parameterReference>toBase</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>toBase</parameterReference> is not 2, 8, 10, or 16. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts several 16-bit integers to <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> s with the <languageKeyword>ToString</languageKeyword> method in the radixes supported by the method.</para>
                <codeReference>System.Convert.ToString.Radix#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int32.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a 32-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int32.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a 32-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of a 32-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in a specified base.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>toBase</parameterReference>
            <content>
              <para>The base of the return value, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of <parameterReference>value</parameterReference> in base <parameterReference>toBase</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>toBase</parameterReference> is not 2, 8, 10, or 16. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts several 32-bit integers to <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> s with the <languageKeyword>ToString</languageKeyword> method in the radixes supported by the method.</para>
                <codeReference>System.Convert.ToString.Radix#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int64.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a 64-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int64.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a 64-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of a 64-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation in a specified base.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>toBase</parameterReference>
            <content>
              <para>The base of the return value, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of <parameterReference>value</parameterReference> in base <parameterReference>toBase</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>toBase</parameterReference> is not 2, 8, 10, or 16. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts several 64-bit integers to <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> s with the <languageKeyword>ToString</languageKeyword> method in the radixes supported by the method.</para>
                <codeReference>System.Convert.ToString.Radix#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to its <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of the value of <parameterReference>value</parameterReference>, or <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.String.Empty</codeEntityReference> if value is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>ToString</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a non-numeric <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> and a boxed numeric value to <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> s with the <languageKeyword>ToString</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of the value of <parameterReference>value</parameterReference>, or <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.String.Empty</codeEntityReference> if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>If the <parameterReference>value</parameterReference> parameter implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface, the return value is produced by the implemented <codeEntityReference qualifyHint="true" autoUpgrade="false">M:System.IConvertible.ToString(System.IFormatProvider)</codeEntityReference> method. Otherwise, if the <parameterReference>value</parameterReference> parameter implements the <codeEntityReference autoUpgrade="true">T:System.IFormattable</codeEntityReference> interface, the return value is produced by the implemented <codeEntityReference qualifyHint="true" autoUpgrade="false">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> method. Otherwise, the return value is produced by the <parameterReference>value</parameterReference> parameter's <languageKeyword>ToString()</languageKeyword> method.</para>
            <para>The <parameterReference>provider</parameterReference> parameter is used if the <parameterReference>value</parameterReference> parameter implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> or <codeEntityReference autoUpgrade="true">T:System.IFormattable</codeEntityReference> interface. The <parameterReference>provider</parameterReference> parameter specifies culture-specific information used in the conversion of <parameterReference>value</parameterReference>. For example, if the <parameterReference>value</parameterReference> parameter is a negative decimal number, the <parameterReference>provider</parameterReference> parameter can supply culture-specific information about the notation used for the negative sign and decimal separator.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a non-numeric <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> and a boxed numeric value to <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> s with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object that displays the type of the format provider for which it is called. The example shows that for the non-numeric <languageKeyword>Object</languageKeyword>, the <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object is not referenced.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.SByte.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts an <codeEntityReference autoUpgrade="true">T:System.SByte</codeEntityReference> (signed byte) value to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.SByte.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts an <codeEntityReference autoUpgrade="true">T:System.SByte</codeEntityReference> (signed byte) value to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Single.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the conversion of a <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference> to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, using <languageKeyword>ToString</languageKeyword>.</para>
                <codeReference>System.Convert Snippets#16</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Single.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference> value to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows that the <languageKeyword>ToString</languageKeyword> method, when called with a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> argument, returns the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> unmodified.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method ignores the <parameterReference>provider</parameterReference> parameter.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows that the <languageKeyword>ToString</languageKeyword> method, when called with a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> argument, returns the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> unmodified and does not reference the <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt16.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts an unsigned 16-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt16.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts an unsigned 16-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt32.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts an unsigned 32-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt32.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts an unsigned 32-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt64.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts an unsigned 64-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This implementation is identical to <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt64.ToString</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts an unsigned 64-bit integer to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the <languageKeyword>ToString</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToString.IFormatProvider#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToUInt16">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a 16-bit unsigned integer.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
      <overload>
        <summary>
          <para>Converts a specified value to a 16-bit unsigned integer.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 16-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 16-bit unsigned integer equivalent to <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 16-bit unsigned integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 16-bit unsigned integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 16-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 16-bit unsigned integer equivalent of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToUInt16</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 16-bit unsigned integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToUInt16</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToUInt16</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 16-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to an equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 16-bit unsigned integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt16.Parse(System.String)</codeEntityReference> on <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 16-bit unsigned integers with the <languageKeyword>ToUInt16</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToUInts_String#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 16-bit unsigned integer using specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt16.Parse(System.String)</codeEntityReference> on <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 16-bit unsigned integers with the <languageKeyword>ToUInt16</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToUInts_String#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number in a specified base to an equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>fromBase</parameterReference>
            <content>
              <para>The base of the number in <parameterReference>value</parameterReference>, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit unsigned integer equivalent to the number in <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>fromBase</parameterReference> is not 2, 8, 10, or 16. </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> contains a character that is not a valid digit in the base specified by <parameterReference>fromBase</parameterReference>. The exception message indicates there are no digits to convert if the first character in <parameterReference>value</parameterReference> is invalid; otherwise, the message indicates <parameterReference>value</parameterReference> contains invalid trailing characters.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference>, which represents a base 10 unsigned number, is prefixed with a negative sign.</para>
              <para>-or-</para>
              <para>The return value is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt16.MinValue</codeEntityReference> or larger than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt16.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>fromBase</parameterReference> is 16, you can prefix the number specified by the <parameterReference>value</parameterReference> parameter with "0x" or "0X".</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt16.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToUInt32">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a 32-bit unsigned integer.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
      <overload>
        <summary>
          <para>Converts a specified value to a 32-bit unsigned integer.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 32-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 32-bit unsigned integer equivalent to <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 32-bit unsigned integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 32-bit unsigned integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 32-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 32-bit unsigned integer equivalent of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToUInt32</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 32-bit unsigned integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToUInt32</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToUInt32</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 8-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to an equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 32-bit unsigned integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int32.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 32-bit unsigned integers with the <languageKeyword>ToUInt32</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToUInts_String#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt32.Parse(System.String)</codeEntityReference> on <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 32-bit unsigned integers with the <languageKeyword>ToUInt32</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToUInts_String#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number in a specified base to an equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>fromBase</parameterReference>
            <content>
              <para>The base of the number in <parameterReference>value</parameterReference>, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit unsigned integer equivalent to the number in <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>fromBase</parameterReference> is not 2, 8, 10, or 16. </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> contains a character that is not a valid digit in the base specified by <parameterReference>fromBase</parameterReference>. The exception message indicates there are no digits to convert if the first character in <parameterReference>value</parameterReference> is invalid; otherwise, the message indicates <parameterReference>value</parameterReference> contains invalid trailing characters.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference>, which represents a base 10 unsigned number, is prefixed with a negative sign.</para>
              <para>-or-</para>
              <para>The return value is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt32.MinValue</codeEntityReference> or larger than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt32.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>fromBase</parameterReference> is 16, you can prefix the number specified by the <parameterReference>value</parameterReference> parameter with "0x" or "0X".</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 32-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt32.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="Overload:System.Convert.ToUInt64">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts a specified value to a 64-bit unsigned integer.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Boolean value to the equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Boolean value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number 1 if <parameterReference>value</parameterReference> is <languageKeyword>true</languageKeyword>; otherwise, 0.</para>
        </returnValue>
      <overload>
        <summary>
          <para>Converts a specified value to a 64-bit unsigned integer.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit unsigned integer equivalent to <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calling this method always throws <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.DateTime</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This conversion is not supported. No value is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>This conversion is not supported. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is reserved for future use.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number to an equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 64-bit unsigned integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt64.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified double-precision floating point number to an equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 64-bit unsigned integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt64.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit unsigned integer equivalent of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToUInt64</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to a 64-bit unsigned integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>, or zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <languageKeyword>IConvertible.ToUInt64</languageKeyword> method of the underlying type of <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> enables the user to specify culture-specific conversion information about the contents of <parameterReference>value</parameterReference>. For example, if <parameterReference>value</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that represents a number, <parameterReference>provider</parameterReference> could supply culture-specific information about the notation used to represent that number.</para>
            <para>The base types ignore <parameterReference>provider</parameterReference>; however, it is honored if <parameterReference>value</parameterReference> is a user-defined type that implements the <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> and a class that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>. Objects of the class that implements <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> hold an array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values. An object of each class is passed to the <languageKeyword>ToUInt64</languageKeyword> method. This method returns an average of the array of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> values, using the object that implements <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> to determine how to calculate the average.</para>
                <codeReference>System.Convert.ToXXX_Object_IFP#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An 8-bit signed integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified single-precision floating point number to an equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A single-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <parameterReference>value</parameterReference> rounded to the nearest 64-bit unsigned integer. If <parameterReference>value</parameterReference> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt64.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit signed integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int64.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Int64.Parse(System.String)</codeEntityReference> method on <parameterReference>value</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 64-bit unsigned integers with the <languageKeyword>ToUInt64</languageKeyword> method, using default formatting.</para>
                <codeReference>System.Convert.ToUInts_String#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> interface implementation that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not consist of an optional sign followed by a sequence of digits (zero through nine). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Int64.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value is the result of invoking <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.UInt64.Parse(System.String)</codeEntityReference> on <parameterReference>value</parameterReference>.</para>
            <para>
              <parameterReference>provider</parameterReference> is an <languageKeyword>IFormatProvider</languageKeyword> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object. The <languageKeyword>NumberFormatInfo</languageKeyword> object provides culture-specific information about the format of <parameterReference>value</parameterReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the <languageKeyword>NumberFormatInfo</languageKeyword> for the current culture is used.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of 64-bit unsigned integers with the <languageKeyword>ToUInt64</languageKeyword> method, using an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
                <codeReference>System.Convert.ToUInts_String#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a number in a specified base to an equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing a number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>fromBase</parameterReference>
            <content>
              <para>The base of the number in <parameterReference>value</parameterReference>, which must be 2, 8, 10, or 16. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit unsigned integer equivalent to the number in <parameterReference>value</parameterReference>.</para>
          <para>-or- </para>
          <para>Zero if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>fromBase</parameterReference> is not 2, 8, 10, or 16. </para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> contains a character that is not a valid digit in the base specified by <parameterReference>fromBase</parameterReference>. The exception message indicates there are no digits to convert if the first character in <parameterReference>value</parameterReference> is invalid; otherwise, the message indicates <parameterReference>value</parameterReference> contains invalid trailing characters.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference>, which represents a base 10 unsigned number, is prefixed with a negative sign.</para>
              <para>-or-</para>
              <para>The return value is less than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt64.MinValue</codeEntityReference> or larger than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.UInt64.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>fromBase</parameterReference> is 16, you can prefix the number specified by the <parameterReference>value</parameterReference> parameter with "0x" or "0X".</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 16-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit unsigned integer equivalent to the value of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 32-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The 64-bit unsigned integer equivalent of <parameterReference>value</parameterReference>.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A 64-bit unsigned integer. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
      </dduexml>
    </member>
  </members>
</doc>