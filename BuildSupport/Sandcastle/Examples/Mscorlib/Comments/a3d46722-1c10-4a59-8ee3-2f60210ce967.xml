<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="a3d46722-1c10-4a59-8ee3-2f60210ce967" revisionNumber="47">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Environment">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.</para>
        </summary>
        <remarks>
          <content>
            <para>Use the <codeEntityReference autoUpgrade="true">T:System.Environment</codeEntityReference> class to retrieve information such as command line arguments, the exit code, environment variable settings, contents of the call stack, time since last system boot, and the version of the common language runtime.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>environment.class#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Terminates this process and gives the underlying operating system the specified exit code.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>exitCode</parameterReference>
            <content>
              <para>Exit code to be given to the operating system. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have sufficient security permission to perform this function. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows the use of the <codeEntityReference autoUpgrade="true">M:System.Environment.Exit(System.Int32)</codeEntityReference> method to terminate program execution and return an exit code to the operating system.</para>
                <codeReference>System.Environment.Exit#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>name</parameterReference>
            <content>
              <para>A string containing the names of zero or more environment variables. Each environment variable is quoted with the percent sign character (%). </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A string with each environment variable replaced by its value.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>name</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>COM interop is used to retrieve the environment variables from the operating system. If the environment variables cannot be retrieved due to a COM error, the HRESULT that explains the cause of the failure is used to generate one of several possible exceptions; that is, the exception depends on the HRESULT. For more information about how the HRESULT is processed, see the Remarks section of the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)</codeEntityReference> method.</para>
            <para>Replacement only occurs for environment variables that are set. For example, suppose <parameterReference>name</parameterReference> is "MyENV = %MyENV%". If the environment variable, MyENV, is set to 42, this method returns "MyENV = 42". If MyENV is not set, no change occurs; this method returns "MyENV = %MyENV%".</para>
            <para>The size of the return value is limited to 32K on Windows NT 4.0 and earlier, and Windows 2000 and later. There is no size restriction on Windows 98 and Windows Me.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Environment.ExpandEnvironmentVariables#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for the ability to access the environment variables in <parameterReference>name</parameterReference>. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a string array containing the command line arguments for the current process.</para>
        </summary>
        <returnValue>
          <para>An array of string where each element contains a command line argument. The first element is the executable file name, and the following zero or more elements contain the remaining command line arguments.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>The system does not support command line arguments. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The first element in the array contains the file name of the executing program. If the file name is not available, the first element is equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.String.Empty</codeEntityReference>. The remaining elements contain any additional tokens entered on the command line.</para>
            <para>The program file name can, but is not required to, include path information.</para>
            <para>To obtain the command line as a single string, use the <codeEntityReference autoUpgrade="true">P:System.Environment.CommandLine</codeEntityReference> property.</para>
          </content>
        </remarks>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>WinNt4Family</platform>
              <platform>Win2kFamily</platform>
            </platforms>
            <content>
              <para>The name of the executable file does not include the path. </para>
            </content>
          </platformNote>
          <platformNote>
            <platforms>
              <platform>Win98</platform>
              <platform>WinMe</platform>
            </platforms>
            <content>
              <para>The name of the executable file includes the path. Long file names (non-8dot3 names) can be shortened to their 8dot3 representation. </para>
            </content>
          </platformNote>
        </platformNotes>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Environment.GetCommandLineArgs#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for the ability to access the "Path" environment variable. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Environment.CommandLine</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Environment.GetEnvironmentVariable">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves the value of an environment variable.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves the value of an environment variable from the current process.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>variable</parameterReference>
            <content>
              <para>The name of the environment variable. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The value of the environment variable specified by <parameterReference>variable</parameterReference>, or <languageKeyword>null</languageKeyword> if the environment variable is not found.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>variable</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the required permission to perform this operation.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Environment variable names are not case-sensitive.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Environment.GetEnvironmentVariable(System.String)</codeEntityReference> method.</para>
                <codeReference>System.Environment#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for the ability to read the value of <parameterReference>variable</parameterReference>. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Environment.GetEnvironmentVariables</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Environment.SetEnvironmentVariable(System.String,System.String)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Retrieves the value of an environment variable.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves the value of an environment variable from the current process or from the Windows operating system registry key for the current user or local machine.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>variable</parameterReference>
            <content>
              <para>The name of an environment variable.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>target</parameterReference>
            <content>
              <para>One of the <codeEntityReference autoUpgrade="true">T:System.EnvironmentVariableTarget</codeEntityReference> values.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The value of the environment variable specified by the <parameterReference>variable</parameterReference> and <parameterReference>target</parameterReference> parameters, or <languageKeyword>null</languageKeyword> if the environment variable is not found.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>variable</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.User</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Machine</codeEntityReference> and the current operating system is Windows 95, Windows 98, or Windows Me.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>target</parameterReference> is not a valid <codeEntityReference autoUpgrade="true">T:System.EnvironmentVariableTarget</codeEntityReference> value.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the required permission to perform this operation.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>target</parameterReference> parameter specifies whether the environment variable is retrieved from the current process or from the Windows operating system registry key for the current user or local machine.</para>
            <para>Environment variable names are not case-sensitive.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.</para>
                <codeReference>environment.getsetenvar#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for the ability to read the value of <parameterReference>variable</parameterReference> if <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Process</codeEntityReference> (Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference>), </para>
              <para>or</para>
              <para>for full access to environment variables if <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.User</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Machine</codeEntityReference> (Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.PermissionState.Unrestricted</codeEntityReference>).</para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Environment.GetEnvironmentVariables</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Environment.GetEnvironmentVariables">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves all environment variable names and their values.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves all environment variable names and their values from the current process.</para>
        </summary>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Collections.IDictionary</codeEntityReference> that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the required permission to perform this operation.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The names and values for the environment variables are stored as key-value pairs in the returned <codeEntityReference autoUpgrade="true">T:System.Collections.IDictionary</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Environment.GetEnvironmentVariables</codeEntityReference> method.</para>
                <codeReference>Environment.GetEnvironmentVariables#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for the ability to read the names and values of environment variables. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Environment.GetEnvironmentVariable(System.String)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Retrieves all environment variable names and their values.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves all environment variable names and their values from the current process, or from the Windows operating system registry key for the current user or local machine.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>target</parameterReference>
            <content>
              <para>One of the <codeEntityReference autoUpgrade="true">T:System.EnvironmentVariableTarget</codeEntityReference> values.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Collections.IDictionary</codeEntityReference> object that contains all environment variable names and their values from the source specified by the <parameterReference>target</parameterReference> parameter; otherwise, an empty dictionary if no environment variables are found.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the required permission to perform this operation for the specified value of <parameterReference>target</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>target</parameterReference> parameter specifies whether the source is the current process, the registry key for the current user, or the registry key for the local machine.</para>
            <para>The names and values of the environment variables are stored as key/value pairs in the returned <codeEntityReference autoUpgrade="true">T:System.Collections.IDictionary</codeEntityReference> object.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.</para>
                <codeReference>environment.getsetenvar#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for the ability to read the names and values of environment variables if <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Process</codeEntityReference> (Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference>),</para>
              <para> or </para>
              <para>for full access to environment variables if <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.User</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Machine</codeEntityReference> (Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.PermissionState.Unrestricted</codeEntityReference>).</para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.EnvironmentVariableTarget</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the path to the system special folder identified by the specified enumeration.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>folder</parameterReference>
            <content>
              <para>An enumerated constant that identifies a system special folder. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, the empty string ("").</para>
          <para>A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>folder</parameterReference> is not a member of <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Environment.SpecialFolder</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method retrieves the path to a system special folder, such as Program Files, Programs, System, or Startup, which can be used to access common information. Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.</para>
            <para>The <parameterReference>folder</parameterReference> parameter designates the special folder to retrieve and must be one of the values in the <codeEntityReference autoUpgrade="true">T:System.Environment.SpecialFolder</codeEntityReference> enumeration; any other value throws an exception.</para>
            <para>For more information about special folders, see the CSIDL Values topic at http://msdn.microsoft.com/library/en-us/shellcc/platform/Shell/reference/enums/csidl.asp.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Environment.GetFolderPath#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>
            <content>
              <para>for reading directory paths. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns an array of string containing the names of the logical drives on the current computer.</para>
        </summary>
        <returnValue>
          <para>An array of string where each element contains the name of a logical drive. For example, if the computer's hard drive is the first logical drive, the first element returned is "C:\".</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurs. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the required permissions. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Environment.GetLogicalDrives#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for full access to the resource protected by this permission. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.PermissionState.Unrestricted</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="Overload:System.Environment.SetEnvironmentVariable">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates, modifies, or deletes an environment variable. </para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates, modifies, or deletes an environment variable stored in the current process.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>variable</parameterReference>
            <content>
              <para>The name of an environment variable. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A value to assign to <parameterReference>variable</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>variable</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>variable</parameterReference> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign ("="). </para>
              <para>-or-</para>
              <para>The length of <parameterReference>variable</parameterReference> or <parameterReference>value</parameterReference> is greater than or equal to 32,767 characters.</para>
              <para>-or-</para>
              <para>An error occurred during the execution of this operation.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the required permission to perform this operation. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the <parameterReference>value</parameterReference> parameter is not empty<languageKeyword></languageKeyword>and the environment variable named by the <parameterReference>variable</parameterReference> parameter does not exist, the environment variable is created and assigned the contents of <parameterReference>value</parameterReference>. Solely for purposes of this operation, <parameterReference>value</parameterReference> is considered empty if it is <languageKeyword>null</languageKeyword>, contains a zero-length string, or contains an initial hexadecimal zero character (0x00).</para>
            <para>If <parameterReference>value</parameterReference> contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable, and all subsequent characters are omitted.</para>
            <para>If <parameterReference>value</parameterReference> is empty and the environment variable named by <parameterReference>variable</parameterReference> exists, the environment variable is deleted. If <parameterReference>variable</parameterReference> does not exist, no error occurs even though the operation cannot be performed.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.</para>
                <codeReference>environment.getsetenvar#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for full access to environment variables. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.PermissionState.Unrestricted</codeEntityReference>. </para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Environment.GetEnvironmentVariable(System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Environment.GetEnvironmentVariables</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Creates, modifies, or deletes an environment variable. </para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates, modifies, or deletes an environment variable stored in the current process or in the Windows operating system registry key reserved for the current user or local machine.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>variable</parameterReference>
            <content>
              <para>The name of an environment variable.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A value to assign to <parameterReference>variable</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>target</parameterReference>
            <content>
              <para>One of the <codeEntityReference autoUpgrade="true">T:System.EnvironmentVariableTarget</codeEntityReference> values.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>variable</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>variable</parameterReference> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign ("="). </para>
              <para>-or-</para>
              <para>The length of <parameterReference>variable</parameterReference> is greater than or equal to 32,767 characters.</para>
              <para>-or-</para>
              <para>
                <parameterReference>target</parameterReference> is not a member of the <codeEntityReference autoUpgrade="true">T:System.EnvironmentVariableTarget</codeEntityReference> enumeration. </para>
              <para>-or-</para>
              <para>
                <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Machine</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.User</codeEntityReference> and the length of <parameterReference>variable</parameterReference> is greater than or equal to 255.</para>
              <para>-or-</para>
              <para>
                <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Process</codeEntityReference> and the length of <parameterReference>value</parameterReference> is greater than or equal to 32,767 characters. </para>
              <para>-or-</para>
              <para>An error occurred during the execution of this operation.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.User</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Machine</codeEntityReference> and the current operating system is Windows 95, Windows 98, or Windows Me.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the required permission to perform this operation. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the <parameterReference>value</parameterReference> parameter is not empty<languageKeyword></languageKeyword>and the environment variable named by the <parameterReference>variable</parameterReference> parameter does not exist, the environment variable is created and assigned the contents of <parameterReference>value</parameterReference>. Solely for the purposes of this operation, <parameterReference>value</parameterReference> is considered empty if it is <languageKeyword>null</languageKeyword>, contains a zero-length string, or contains an initial hexadecimal zero character (0x00).</para>
            <para>If <parameterReference>value</parameterReference> contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable, and all subsequent characters are omitted.</para>
            <para>If <parameterReference>value</parameterReference> is empty and the environment variable named by <parameterReference>variable</parameterReference> exists, the environment variable is deleted. If <parameterReference>variable</parameterReference> does not exist, no error occurs even though the operation cannot be performed. Exercise caution when <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Machine</codeEntityReference> because you can delete an environment variable that affects your entire local machine, not just the current process or user.</para>
            <para>If the <parameterReference>target</parameterReference> parameter is not <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Process</codeEntityReference>, the environment variable is not automatically copied to the current process. If <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.User</codeEntityReference>, the environment variable is stored in the Windows operating system registry key reserved for the current user, and is copied to the current process when the user who stored the variable starts a new process. If <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Machine</codeEntityReference>, the environment variable is stored in the Windows operating system registry key reserved for the local machine, and is copied to the current process when any user on the local machine starts a new process.</para>
            <para>If <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.User</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Machine</codeEntityReference>, other applications are notified of the set operation by a Windows WM_SETTINGCHANGE message.</para>
            <para>If <parameterReference>target</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.User</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.EnvironmentVariableTarget.Machine</codeEntityReference>, it is recommended that the length of <parameterReference>value</parameterReference> be less than 2048 characters.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.</para>
                <codeReference>environment.getsetenvar#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for full access to environment variables. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.PermissionState.Unrestricted</codeEntityReference>. </para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.EnvironmentVariableTarget</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Environment.CommandLine">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the command line for this process.</para>
        </summary>
        <returnValue>
          <para>A string containing command-line arguments.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This property provides access to the program name and any arguments specified on the command line when the current process was started.</para>
            <para>The program name can  include path information, but is not required to do so. Use the <codeEntityReference autoUpgrade="true">M:System.Environment.GetCommandLineArgs</codeEntityReference> method to retrieve the command-line information parsed and stored in an array of strings.</para>
          </content>
        </remarks>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>WinNt4Family</platform>
              <platform>Win2kFamily</platform>
              <platform>WinXpFamily</platform>
            </platforms>
            <content>
              <para>The name of the executable file does not include the path. </para>
            </content>
          </platformNote>
          <platformNote>
            <platforms>
              <platform>Win98</platform>
              <platform>WinMe</platform>
            </platforms>
            <content>
              <para>The name of the executable file includes the path. Long file names (non-8dot3 names) can be shortened to their 8dot3 representation. </para>
            </content>
          </platformNote>
        </platformNotes>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays its own command line.</para>
                <codeReference>environment.commandline#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for the ability to access the "Path" environment variable. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Environment.GetCommandLineArgs</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the fully qualified path of the current directory; that is, the directory from which this process starts.</para>
        </summary>
        <returnValue>
          <para>A string containing a directory path.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>Attempted to set to an empty string (""). </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>Attempted to set to <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.IOException</codeEntityReference>
            <content>
              <para>An I/O error occurred. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IO.DirectoryNotFoundException</codeEntityReference>
            <content>
              <para>Attempted to set a local path that cannot be found. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Security.SecurityException</codeEntityReference>
            <content>
              <para>The caller does not have the appropriate permission. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>By definition, if this process starts in the root directory of a local or network drive, the value of this property is the drive name followed by a trailing slash (for example, "C:\"). If this process starts in a subdirectory, the value of this property is the drive and subdirectory path, without a trailing slash (for example, "C:\mySubDirectory").</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates setting the <codeEntityReference autoUpgrade="true">P:System.Environment.CurrentDirectory</codeEntityReference> property.</para>
                <codeReference>System.Environment#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for writing to files or directories in a set operation. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>
            <content>
              <para>for access to the information in the path itself in a get operation. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Environment.ExitCode">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the exit code of the process.</para>
        </summary>
        <returnValue>
          <para>A 32-bit signed integer containing the exit code. The default value is zero.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This property can be used to return a success code from an application. For example, it can be used to control the execution of a set of applications invoked in a script. If the value of this property is not set by an application, zero is returned.</para>
            <conditionalSection>
              <conditions>
                <programmingLanguage>cpp#</programmingLanguage>
              </conditions>
              <conditionalContent>
                <para>The system exit code is set to the return value of the function, <languageKeyword>main</languageKeyword>, or zero if <languageKeyword>main</languageKeyword> returns <languageKeyword>void</languageKeyword>, regardless of whether the user sets this property.</para>
              </conditionalContent>
            </conditionalSection>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays its own exit code.</para>
                <codeReference>environment.exitcode#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a value indicating whether the common language runtime is shutting down or the current application domain is unloading.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the common language runtime is shutting down or the current <codeEntityReference autoUpgrade="true">T:System.AppDomain</codeEntityReference> is unloading; otherwise, <languageKeyword>false</languageKeyword>.</para>
          <para>The current application domain is the <codeEntityReference autoUpgrade="true">T:System.AppDomain</codeEntityReference> that contains the object that is calling <codeEntityReference autoUpgrade="true">P:System.Environment.HasShutdownStarted</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The finalization method for an object provides you an opportunity to perform any necessary cleanup operations before the object is garbage collected. After finalization, the object is accessible but in an invalid state and therefore unusable. Eventually, garbage collection completes and reclaims the object.</para>
            <para>An object's finalization method is called in one of the following situations: during garbage collection, when the application domain that contains the object is unloaded, or when the common language runtime is shutting down.</para>
            <para>While executing in your finalization method, you might want to access another object that is referenced by a static field and has a finalization method. However, you cannot reliably do so because the accessed object might already have been finalized.</para>
            <alert class="note">
              <para>An exception to this rule is the <codeEntityReference autoUpgrade="true">T:System.Console</codeEntityReference> class, which contains static fields that reference stream objects, but is implemented specially so you can always write to the system console, even during domain unloading or system shutdown.</para>
            </alert>
            <para>Use this method in an object's finalization method to determine whether the common language runtime is shutting down or the application domain is unloading. If that is the case, you cannot reliably access any object that has a finalization method and is referenced by a static field.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays whether the common language runtime is shutting down. </para>
                <codeReference>environment.hasshutdownstarted#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.AppDomain.IsFinalizingForUnload</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Environment.MachineName">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the NetBIOS name of this local computer.</para>
        </summary>
        <returnValue>
          <para>A string containing the name of this computer.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>The name of this computer cannot be obtained. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The name of this computer is established at system startup when the name is read from the registry. If this computer is a node in a cluster, the name of the node is returned.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays the name of the computer running the code example. (The machine name is omitted from the code example output for security reasons.) </para>
                <codeReference>environment.machinename#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for full access to the COMPUTERNAME environment variable. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference></para>
            </content>
          </permission>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for access to the computer name. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Environment.NewLine">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the newline string defined for this environment.</para>
        </summary>
        <returnValue>
          <para>A string containing "\r\n" for non-Unix platforms, </para>
          <para> or </para>
          <para>a string containing "\n" for Unix platforms.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The property value of <codeEntityReference autoUpgrade="true">P:System.Environment.NewLine</codeEntityReference> is a constant customized specifically for the current platform and implementation of the .NET Framework. For more information about the escape characters in the property value, see <link xlink:href="f49cc9cc-db7d-4058-8b8a-422bc08b29b0">Character Escapes</link>.</para>
            <para>The functionality provided by <codeEntityReference autoUpgrade="true">P:System.Environment.NewLine</codeEntityReference> is often what is meant by the terms newline, line feed, line break, carriage return, CRLF, and end of line. </para>
            <para>
              <codeEntityReference autoUpgrade="true">P:System.Environment.NewLine</codeEntityReference> can be used in conjunction with language-specific newline support such as the escape characters '\r' and '\n' in Microsoft C# and C/C++, or <languageKeyword>vbCrLf</languageKeyword> in Microsoft Visual Basic.</para>
            <para>
              <codeEntityReference autoUpgrade="true">P:System.Environment.NewLine</codeEntityReference> is automatically appended to text processed by the <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference><languageKeyword></languageKeyword>and <codeEntityReference qualifyHint="true" autoUpgrade="true">Overload:System.Text.StringBuilder.AppendLine</codeEntityReference> methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays three lines separated by newlines.</para>
                <codeReference>environment.newline#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Environment.OSVersion">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets an <codeEntityReference autoUpgrade="true">T:System.OperatingSystem</codeEntityReference> object that contains the current platform identifier and version number.</para>
        </summary>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.OperatingSystem</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>This property was unable to obtain the system version.</para>
              <para>-or- </para>
              <para>The obtained platform identifier is not a member of <codeEntityReference autoUpgrade="true">T:System.PlatformID</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>NETCF</platform>
            </platforms>
            <content>
              <para>The version revision field for this property is always -1.</para>
            </content>
          </platformNote>
        </platformNotes>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays the platform identifier and version number of the computer that runs the code example.</para>
                <codeReference>environment.osversion#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the number of processors on the current machine.</para>
        </summary>
        <returnValue>
          <para>The 32-bit signed integer that specifies the number of processors on the current machine. There is no default.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Environment.ProcessorCount</codeEntityReference> property.</para>
                <codeReference>environment.processorcount#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for read-only access to environment variables. Associated enumeration: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Environment.StackTrace">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets current stack trace information.</para>
        </summary>
        <returnValue>
          <para>A string containing stack trace information. This value can be <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.String.Empty</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The requested stack trace information is out of range. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">P:System.Environment.StackTrace</codeEntityReference> property lists method calls in reverse chronological order, that is, the most recent method call is described first, and one line of stack trace information is listed for each method call on the stack. However, the <codeEntityReference autoUpgrade="true">P:System.Environment.StackTrace</codeEntityReference> property might not report as many method calls as expected due to code transformations that occur during optimization.</para>
            <para>The stack trace information for each method call is formatted as follows: </para>
            <para>"at <parameterReference>FullClassName</parameterReference>. <parameterReference>MethodName</parameterReference> (<parameterReference>MethodParams</parameterReference>) in <parameterReference>FileName</parameterReference> :line <parameterReference>LineNumber</parameterReference> " </para>
            <para>The literal "at" is preceded by three spaces, and the literals "in" and ":line" are omitted if debug symbols are not available. The placeholders, <parameterReference>FullClassName</parameterReference>, <parameterReference>MethodName</parameterReference>, <parameterReference>MethodParms</parameterReference>, <parameterReference>FileName</parameterReference>, and <parameterReference>LineNumber</parameterReference>, are replaced by actual values defined as follows: </para>
            <definitionTable>
              <definedTerm> FullClassName</definedTerm>
              <definition>
                <para>The full name of the class, including the namespace. </para>
              </definition>
              <definedTerm> MethodName</definedTerm>
              <definition>
                <para>The name of the method. </para>
              </definition>
              <definedTerm> MethodParms</definedTerm>
              <definition>
                <para>The list of parameter type/name pairs. Each pair is separated by a comma (","). This information is omitted if <parameterReference>MethodName</parameterReference> takes zero parameters. </para>
              </definition>
              <definedTerm> FileName</definedTerm>
              <definition>
                <para>The name of the source file where the <parameterReference>MethodName</parameterReference> method is declared. This information is omitted if debug symbols are not available. </para>
              </definition>
              <definedTerm> LineNumber</definedTerm>
              <definition>
                <para>The number of the line in <parameterReference>FileName</parameterReference> that contains the source code from <parameterReference>MethodName</parameterReference> for the instruction that is on the call stack. This information is omitted if debug symbols are not available. </para>
              </definition>
            </definitionTable>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">P:System.Environment.StackTrace</codeEntityReference> property.</para>
                <codeReference>environment.stacktrace#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for full access to the resource protected by the permission. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.PermissionState.Unrestricted</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the fully qualified path of the system directory.</para>
        </summary>
        <returnValue>
          <para>A string containing a directory path.</para>
        </returnValue>
        <remarks>
          <content>
            <para>An example of the value returned is the string "C:\WinNT\System32".</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays the system directory of the computer running the code example. (The system directory is omitted from the code example output for security reasons.) </para>
                <codeReference>environment.systemdirectory#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.FileIOPermission</codeEntityReference>
            <content>
              <para>for access to the information in the path itself. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Environment.TickCount">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the number of milliseconds elapsed since the system started.</para>
        </summary>
        <returnValue>
          <para>A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The value of this property is derived from the system timer and is stored as a 32-bit signed integer. Consequently, if the system runs continuously, <codeEntityReference autoUpgrade="true">P:System.Environment.TickCount</codeEntityReference> will increment from zero to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference> for approximately 24.9 days, then jump to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference>, which is a negative number, then increment back to zero during the next 24.9 days.</para>
            <para>The resolution of the <codeEntityReference autoUpgrade="true">P:System.Environment.TickCount</codeEntityReference> property cannot be less than 500 milliseconds.</para>
            <para>
              <codeEntityReference autoUpgrade="true">P:System.Environment.TickCount</codeEntityReference> is different from the <codeEntityReference autoUpgrade="true">P:System.DateTime.Ticks</codeEntityReference> property, which is the number of 100-nanosecond intervals that have elapsed since 1/1/0001, 12:00am.</para>
            <para>Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.DateTime.Now</codeEntityReference> property to obtain the current local date and time on this computer.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to retrieve the positive range of values returned by the <codeEntityReference autoUpgrade="true">P:System.Environment.TickCount</codeEntityReference> property. The <codeEntityReference autoUpgrade="true">P:System.Environment.TickCount</codeEntityReference> property cycles between <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference>, which is a negative number, and <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference> once every 49.8 days. This code sample removes the sign bit to yield a nonnegative number that cycles between zero and <codeEntityReference autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference> once every 24.9 days.</para>
                <codeReference>environment.tickcount#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the network domain name associated with the current user.</para>
        </summary>
        <returnValue>
          <para>The network domain name of the host computer.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.PlatformNotSupportedException</codeEntityReference>
            <content>
              <para>The operating system does not support retrieving the network domain name. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>The network domain name cannot be retrieved. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">P:System.Environment.UserDomainName</codeEntityReference> property first attempts to get the domain name component of the Windows NT 4.0 account name for the current user. The account name is formatted as domain name, the '\' character, and user name. If that attempt fails, this property attempts to get the domain name associated with the user name provided by the <codeEntityReference autoUpgrade="true">P:System.Environment.UserName</codeEntityReference> property. If that attempt fails because the host computer is not joined to a domain, then the host computer name is returned.</para>
          </content>
        </remarks>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>Win9xFamily</platform>
            </platforms>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">P:System.Environment.UserDomainName</codeEntityReference> property is not supported for this platform.</para>
            </content>
          </platformNote>
        </platformNotes>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays the user domain name of the computer running the code example. (The user domain name is omitted from the code example output for security reasons.) </para>
                <codeReference>environment.userdomainname#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for reading an environment variable. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a value indicating whether the current process is running in user interactive mode.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the current process is running in user interactive mode; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">P:System.Environment.UserInteractive</codeEntityReference> property reports <languageKeyword>false</languageKeyword> for a Windows process or a service like IIS that runs without a user interface. If this property is <languageKeyword>false</languageKeyword>, do not display modal dialogs or message boxes because there is no graphical user interface for the user to interact with.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays whether the current process is running in user interactive mode.</para>
                <codeReference>Environment.UserInteractive#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Windows.Forms.SystemInformation</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Environment.UserName">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the user name of the person who started the current thread.</para>
        </summary>
        <returnValue>
          <para>The name of the person logged on to the system who started the current thread.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This property can be used to identify the current user to the system and application for security or access purposes. It can also be used to customize a particular application for each user.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays the user name of the person who started the current thread. (The user name is omitted from the code example output for security reasons.) </para>
                <codeReference>Environment.UserName#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for the ability to obtain the user name. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.EnvironmentPermissionAccess.Read</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="P:System.Environment.Version">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object that describes the major, minor, build, and revision numbers of the common language runtime.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays the version of the common language runtime. (The version is omitted from the code example output for security reasons.) </para>
                <codeReference>Environment.Version#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the amount of physical memory mapped to the process context.</para>
        </summary>
        <returnValue>
          <para>A 64-bit signed integer containing the number of bytes of physical memory mapped to the process context.</para>
        </returnValue>
        <platformNotes>
          <platformNote>
            <platforms>
              <platform>Win98</platform>
              <platform>WinMe</platform>
            </platforms>
            <content>
              <para>This property always returns zero. </para>
            </content>
          </platformNote>
        </platformNotes>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays the size of the working set of the computer running the code example. </para>
                <codeReference>Environment.WorkingSet#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.EnvironmentPermission</codeEntityReference>
            <content>
              <para>for full access to the resource protected by this permission. Associated enumeration: <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Security.Permissions.PermissionState.Unrestricted</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Terminates a process but does not execute any active try-finally blocks or finalizers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>message</parameterReference>
            <content>
              <para>A message that explains why the process was terminated, or <languageKeyword>null</languageKeyword> if no explanation is provided. </para>
            </content>
          </parameter>
        </parameters>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Environment.FailFast(System.String)</codeEntityReference> method writes a log entry to the Windows Application event log using the <parameterReference>message</parameterReference> parameter, creates a dump of your application, and then terminates the current process.</para>
            <para>Use the <codeEntityReference autoUpgrade="true">M:System.Environment.FailFast(System.String)</codeEntityReference> method instead of the <codeEntityReference autoUpgrade="true">M:System.Environment.Exit(System.Int32)</codeEntityReference> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's try-finally blocks and finalizers will corrupt program resources. The <codeEntityReference autoUpgrade="true">M:System.Environment.FailFast(System.String)</codeEntityReference> method terminates the current process and executes any <codeEntityReference autoUpgrade="true">T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject</codeEntityReference> objects, but does not execute any active try-finally blocks or finalizers. </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example writes a log entry to the Windows Application event log and terminates the current process.</para>
                <codeReference>environment.FailFast#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <permissions>
          <permission>
            <codeEntityReference autoUpgrade="true">T:System.Security.Permissions.SecurityPermission</codeEntityReference>
            <content>
              <para>for the ability to call unmanaged code. Demand value: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityAction.LinkDemand</codeEntityReference>; Permission value: <codeEntityReference autoUpgrade="true">F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode</codeEntityReference></para>
            </content>
          </permission>
        </permissions>
      </dduexml>
    </member>
  </members>
</doc>