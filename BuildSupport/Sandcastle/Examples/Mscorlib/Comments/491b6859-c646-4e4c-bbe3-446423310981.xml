<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="491b6859-c646-4e4c-bbe3-446423310981" revisionNumber="18">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Math">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</para>
        </summary>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample uses several mathematical and trigonometric functions from the <codeEntityReference autoUpgrade="true">T:System.Math</codeEntityReference> class to calculate the inner angles of a trapezoid.</para>
                <codeReference>MathSample#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="F:System.Math.E">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents the natural logarithmic base, specified by the constant, <languageKeyword>e</languageKeyword>.</para>
        </summary>
        <remarks>
          <content>
            <para>The value of this field is 2.7182818284590452354.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example compares <codeEntityReference autoUpgrade="true">F:System.Math.E</codeEntityReference> with the value calculated from a power series.</para>
                <codeReference>System.Math.E#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="F:System.Math.PI">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, <math>π</math>.</para>
        </summary>
        <remarks>
          <content>
            <para>The value of this field is 3.14159265358979323846.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample uses <codeEntityReference autoUpgrade="true">F:System.Math.PI</codeEntityReference> to assist in the computation of the inner angles of a given trapezoid.</para>
                <codeReference>MathSample#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Math.Abs">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the absolute value of a specified number.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the absolute value of a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A number in the range <codeEntityReference autoUpgrade="true">F:System.Decimal.MinValue</codeEntityReference><math>≤</math> value <math>≤</math><codeEntityReference autoUpgrade="true">F:System.Decimal.MaxValue</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>, x, such that 0 <math>≤</math> x <math>≤</math><codeEntityReference autoUpgrade="true">F:System.Decimal.MaxValue</codeEntityReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>math.abs#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Returns the absolute value of a specified number.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the absolute value of a double-precision floating-point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A number in the range <codeEntityReference autoUpgrade="true">F:System.Double.MinValue</codeEntityReference><math>≤</math><parameterReference>value</parameterReference><math>≤</math><codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating-point number, x, such that 0 <math>≤</math> x <math>≤</math><codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>If <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, the return value is <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>. If <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, the return value is <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample uses <languageKeyword>Abs</languageKeyword> to assist in the computation of the inner angles of a given trapezoid.</para>
                <codeReference>MathSample#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the absolute value of a 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A number in the range <codeEntityReference autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference> &lt; <parameterReference>value</parameterReference><math>≤</math><codeEntityReference autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 16-bit signed integer, x, such that 0 <math>≤</math> x <math>≤</math><codeEntityReference autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>math.abs#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the absolute value of a 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A number in the range <codeEntityReference autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> &lt; <parameterReference>value</parameterReference><math>≤</math><codeEntityReference autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer, x, such that 0 <math>≤</math> x <math>≤</math><codeEntityReference autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>math.abs#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the absolute value of a 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A number in the range <codeEntityReference autoUpgrade="true">F:System.Int64.MinValue</codeEntityReference> &lt; <parameterReference>value</parameterReference><math>≤</math><codeEntityReference autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit signed integer, x, such that 0 <math>≤</math> x <math>≤</math><codeEntityReference autoUpgrade="true">F:System.Int64.MaxValue</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Int64.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>math.abs#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the absolute value of an 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A number in the range <codeEntityReference autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference> &lt; <parameterReference>value</parameterReference><math>≤</math><codeEntityReference autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An 8-bit signed integer, x, such that 0 <math>≤</math> x <math>≤</math><codeEntityReference autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>math.abs#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the absolute value of a single-precision floating-point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A number in the range <codeEntityReference autoUpgrade="true">F:System.Single.MinValue</codeEntityReference><math>≤</math><parameterReference>value</parameterReference><math>≤</math><codeEntityReference autoUpgrade="true">F:System.Single.MaxValue</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A single-precision floating-point number, x, such that 0 <math>≤</math> x <math>≤</math><codeEntityReference autoUpgrade="true">F:System.Single.MaxValue</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>If <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Single.NegativeInfinity</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Single.PositiveInfinity</codeEntityReference>, the return value is <codeEntityReference autoUpgrade="true">F:System.Single.PositiveInfinity</codeEntityReference>. If <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Single.NaN</codeEntityReference>, the return value is <codeEntityReference autoUpgrade="true">F:System.Single.NaN</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample uses <languageKeyword>Abs</languageKeyword> to assist in the computation of the inner angles of a given trapezoid.</para>
                <codeReference>MathSample#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the angle whose cosine is the specified number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A number representing a cosine, where -1 <math>≤</math><parameterReference>d</parameterReference><math>≤</math> 1. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An angle, <math>θ</math>, measured in radians, such that 0 <math>≤</math><math>θ</math><math>≤</math><math>π</math></para>
          <para>-or- </para>
          <para>
            <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> if <parameterReference>d</parameterReference> &lt; -1 or <parameterReference>d</parameterReference> &gt; 1.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Multiply the return value by 180/<math>π</math> to convert from radians to degrees.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample uses <languageKeyword>Acos</languageKeyword> to assist in the computation of the inner angles of a given trapezoid.</para>
                <codeReference>MathSample#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the angle whose sine is the specified number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A number representing a sine, where -1 <math>≤</math><parameterReference>d</parameterReference><math>≤</math> 1. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An angle, <math>θ</math>, measured in radians, such that -<math>π</math>/2 <math>≤</math><math>θ</math><math>≤</math><math>π</math>/2 </para>
          <para>-or- </para>
          <para>
            <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> if <parameterReference>d</parameterReference> &lt; -1 or <parameterReference>d</parameterReference> &gt; 1.</para>
        </returnValue>
        <remarks>
          <content>
            <para>A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</para>
            <para>Multiply the return value by 180/<math>π</math> to convert from radians to degrees.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample uses <languageKeyword>Asin</languageKeyword> to assist in the computation of the inner angles of a given trapezoid.</para>
                <codeReference>MathSample#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the angle whose tangent is the specified number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A number representing a tangent. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An angle, <math>θ</math>, measured in radians, such that -<math>π</math>/2 <math>≤</math><math>θ</math><math>≤</math><math>π</math>/2.</para>
          <para>-or- </para>
          <para>
            <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> if <parameterReference>d</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, -<math>π</math>/2 rounded to double precision (-1.5707963267949) if <parameterReference>d</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, or <math>π</math>/2 rounded to double precision (1.5707963267949) if <parameterReference>d</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</para>
            <para>Multiply the return value by 180/<math>π</math> to convert from radians to degrees.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>math.atanx#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the angle whose tangent is the quotient of two specified numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>y</parameterReference>
            <content>
              <para>The y coordinate of a point. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>x</parameterReference>
            <content>
              <para>The x coordinate of a point. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An angle, <math>θ</math>, measured in radians, such that -<math>π</math><math>≤</math><math>θ</math><math>≤</math><math>π</math>, and tan(<math>θ</math>) = <parameterReference>y</parameterReference> / <parameterReference>x</parameterReference>, where (<parameterReference>x</parameterReference>, <parameterReference>y</parameterReference>) is a point in the Cartesian plane. Observe the following: </para>
          <list class="bullet">
            <listItem>
              <para>For (<parameterReference>x</parameterReference>, <parameterReference>y</parameterReference>) in quadrant 1, 0 &lt; <math>θ</math> &lt; <math>π</math>/2.</para>
            </listItem>
            <listItem>
              <para>For (<parameterReference>x</parameterReference>, <parameterReference>y</parameterReference>) in quadrant 2, <math>π</math>/2 &lt; <math>θ</math><math>≤</math><math>π</math>.</para>
            </listItem>
            <listItem>
              <para>For (<parameterReference>x</parameterReference>, <parameterReference>y</parameterReference>) in quadrant 3, -<math>π</math> &lt; <math>θ</math> &lt; -<math>π</math>/2.</para>
            </listItem>
            <listItem>
              <para>For (<parameterReference>x</parameterReference>, <parameterReference>y</parameterReference>) in quadrant 4, -<math>π</math>/2 &lt; <math>θ</math> &lt; 0.</para>
            </listItem>
          </list>
        </returnValue>
        <remarks>
          <content>
            <para>The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (<parameterReference>x,y</parameterReference>).</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>math.atanx#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.BigMul(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Produces the full product of two 32-bit numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference> to multiply. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>b</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference> to multiply. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.Int64</codeEntityReference> containing the product of the specified numbers.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>math.bigmul#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Math.Ceiling">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smallest integer greater than or equal to the specified number.</para>
        </summary>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smallest integer greater than or equal to the specified decimal number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A decimal number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The smallest integer greater than or equal to <parameterReference>d</parameterReference>. </para>
        </returnValue>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Floor(System.Decimal)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns the smallest integer greater than or equal to the specified number.</para>
        </summary>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity.</para>
          </content>
        </remarks>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smallest integer greater than or equal to the specified double-precision floating-point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>A double-precision floating-point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The smallest integer greater than or equal to <parameterReference>a</parameterReference>. If <parameterReference>a</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, or <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, that value is returned.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">Overload:System.Math.Ceiling</codeEntityReference> and <codeEntityReference autoUpgrade="true">Overload:System.Math.Floor</codeEntityReference> methods.</para>
                <codeReference>Math.Ceiling_Floor#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Floor(System.Double)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the cosine of the specified angle.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>An angle, measured in radians. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The cosine of <parameterReference>d</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The angle, <parameterReference>d</parameterReference>, must be in radians. Multiply by <math>π</math>/180 to convert degrees to radians.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example uses <codeEntityReference autoUpgrade="true">M:System.Math.Cos(System.Double)</codeEntityReference> to evaluate certain trigonometric identities for selected angles.</para>
                <codeReference>System.Math.SinCos#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the hyperbolic cosine of the specified angle.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An angle, measured in radians. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The hyperbolic cosine of <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference> is returned. If <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> is returned.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The angle, <parameterReference>value</parameterReference>, must be in radians. Multiply by <math>π</math>/180 to convert degrees to radians.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example uses <codeEntityReference autoUpgrade="true">M:System.Math.Cosh(System.Double)</codeEntityReference> to evaluate certain hyperbolic identities for selected values.</para>
                <codeReference>System.Math.SinhCosh#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Math.DivRem">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calculates the quotient of two numbers and also returns the remainder in an output parameter.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Int32</codeEntityReference> that contains the dividend. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>b</parameterReference>
            <content>
              <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Int32</codeEntityReference> that contains the divisor. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>result</parameterReference>
            <content>
              <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Int32</codeEntityReference> that receives the remainder. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Int32</codeEntityReference> containing the quotient of the specified numbers.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.DivideByZeroException</codeEntityReference>
            <content>
              <para>
                <parameterReference>b</parameterReference> is zero.</para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">Overload:System.Math.DivRem</codeEntityReference> method.</para>
                <codeReference>Math.DivRem#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Calculates the quotient of two numbers and also returns the remainder in an output parameter.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Int64</codeEntityReference> that contains the dividend. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>b</parameterReference>
            <content>
              <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Int64</codeEntityReference> that contains the divisor. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>result</parameterReference>
            <content>
              <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Int64</codeEntityReference> that receives the remainder. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Int64</codeEntityReference> containing the quotient of the specified numbers.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.DivideByZeroException</codeEntityReference>
            <content>
              <para>
                <parameterReference>b</parameterReference> is zero.</para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">Overload:System.Math.DivRem</codeEntityReference> method.</para>
                <codeReference>Math.DivRem#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns <languageKeyword>e</languageKeyword> raised to the specified power.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A number specifying a power. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number <languageKeyword>e</languageKeyword> raised to the power <parameterReference>d</parameterReference>. If <parameterReference>d</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, that value is returned. If <parameterReference>d</parameterReference> equals <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, 0 is returned.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Use the <codeEntityReference autoUpgrade="true">M:System.Math.Pow(System.Double,System.Double)</codeEntityReference> method to calculate powers of other bases.</para>
            <para>
              <languageKeyword>Exp</languageKeyword> is the inverse of <codeEntityReference autoUpgrade="true">M:System.Math.Log(System.Double)</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example uses <codeEntityReference autoUpgrade="true">M:System.Math.Exp(System.Double)</codeEntityReference> to evaluate certain exponential and logarithmic identities for selected values.</para>
                <codeReference>System.Math.Exp#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">F:System.Math.E</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Pow(System.Double,System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Log(System.Double)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Math.Floor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the largest integer less than or equal to the specified number.</para>
        </summary>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the largest integer less than or equal to the specified decimal number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A decimal number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The largest integer less than or equal to <parameterReference>d</parameterReference>. </para>
        </returnValue>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Ceiling(System.Decimal)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns the largest integer less than or equal to the specified number.</para>
        </summary>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity.</para>
          </content>
        </remarks>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the largest integer less than or equal to the specified double-precision floating-point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A double-precision floating-point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The largest integer less than or equal to <parameterReference>d</parameterReference>. If <parameterReference>d</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, or <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, that value is returned.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">Overload:System.Math.Ceiling</codeEntityReference> and <codeEntityReference autoUpgrade="true">Overload:System.Math.Floor</codeEntityReference> methods.</para>
                <codeReference>Math.Ceiling_Floor#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Ceiling(System.Double)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the remainder resulting from the division of a specified number by another specified number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>x</parameterReference>
            <content>
              <para>A dividend. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>y</parameterReference>
            <content>
              <para>A divisor. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A number equal to <parameterReference>x</parameterReference> - (<parameterReference>y</parameterReference> Q), where Q is the quotient of <parameterReference>x</parameterReference> / <parameterReference>y</parameterReference> rounded to the nearest integer (if <parameterReference>x</parameterReference> / <parameterReference>y</parameterReference> falls halfway between two integers, the even integer is returned).</para>
          <para>If <parameterReference>x</parameterReference> - (<parameterReference>y</parameterReference> Q) is zero, the value +0 is returned if <parameterReference>x</parameterReference> is positive, or -0 if <parameterReference>x</parameterReference> is negative.</para>
          <para>If <parameterReference>y</parameterReference> = 0, <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> (Not-A-Number) is returned.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.DivRem#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Math.Log">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the logarithm of a specified number.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the natural (base <languageKeyword>e</languageKeyword>) logarithm of a specified number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A number whose logarithm is to be found. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Sign of <parameterReference>d</parameterReference></para>
                </entry>
                <entry>
                  <para>Returns </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Positive </para>
              </entry>
              <entry>
                <para>The natural logarithm of <parameterReference>d</parameterReference>; that is, ln <parameterReference>d</parameterReference>, or log <subscript>e</subscript><parameterReference>d</parameterReference></para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>
                  <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Negative </para>
              </entry>
              <entry>
                <para>
                  <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>
                </para>
              </entry>
            </row>
          </table>
          <para>If <parameterReference>d</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, returns <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>. If <parameterReference>d</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, returns <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Parameter <parameterReference>d</parameterReference> is specified as a base 10 number.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example uses <codeEntityReference autoUpgrade="true">M:System.Math.Log(System.Double)</codeEntityReference> to evaluate certain logarithmic identities for selected values.</para>
                <codeReference>System.Math.Log_Overloads#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">F:System.Math.E</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Exp(System.Double)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns the logarithm of a specified number.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the logarithm of a specified number in a specified base.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>A number whose logarithm is to be found. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>newBase</parameterReference>
            <content>
              <para>The base of the logarithm. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>In the following table +Infinity denotes <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, -Infinity denotes <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, and NaN denotes <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>
                    <parameterReference>a</parameterReference>
                  </para>
                </entry>
                <entry>
                  <para>
                    <parameterReference>newBase</parameterReference>
                  </para>
                </entry>
                <entry>
                  <para>Return Value</para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference>
                  <math>&gt;</math> 0</para>
              </entry>
              <entry>
                <para>(0 <math>&lt;</math><parameterReference>newBase</parameterReference><math>&lt;</math> 1) -or-(<parameterReference>newBase</parameterReference><math>&gt;</math> 1)</para>
              </entry>
              <entry>
                <para>log<subscript>newBase</subscript>(a)</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference>
                  <math>&lt;</math> 0</para>
              </entry>
              <entry>
                <para>(any value)</para>
              </entry>
              <entry>
                <para>NaN</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>(any value)</para>
              </entry>
              <entry>
                <para>
                  <parameterReference>newBase</parameterReference>
                  <math>&lt;</math> 0</para>
              </entry>
              <entry>
                <para>NaN</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference> != 1</para>
              </entry>
              <entry>
                <para>
                  <parameterReference>newBase</parameterReference> = 0</para>
              </entry>
              <entry>
                <para>NaN</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference> != 1</para>
              </entry>
              <entry>
                <para>
                  <parameterReference>newBase</parameterReference> = +Infinity</para>
              </entry>
              <entry>
                <para>NaN</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference> = NaN</para>
              </entry>
              <entry>
                <para>(any value)</para>
              </entry>
              <entry>
                <para>NaN</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>(any value)</para>
              </entry>
              <entry>
                <para>
                  <parameterReference>newBase</parameterReference> = NaN</para>
              </entry>
              <entry>
                <para>NaN</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>(any value)</para>
              </entry>
              <entry>
                <para>
                  <parameterReference>newBase</parameterReference> = 1</para>
              </entry>
              <entry>
                <para>NaN</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference> = 0</para>
              </entry>
              <entry>
                <para>0 <math>&lt;</math><parameterReference>newBase</parameterReference><math>&lt;</math> 1 </para>
              </entry>
              <entry>
                <para>+Infinity</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference> = 0</para>
              </entry>
              <entry>
                <para>
                  <parameterReference>newBase</parameterReference>
                  <math>&gt;</math> 1</para>
              </entry>
              <entry>
                <para>-Infinity</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference> =  +Infinity</para>
              </entry>
              <entry>
                <para>0 <math>&lt;</math><parameterReference>newBase</parameterReference><math>&lt;</math> 1</para>
              </entry>
              <entry>
                <para>-Infinity</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference> =  +Infinity</para>
              </entry>
              <entry>
                <para>
                  <parameterReference>newBase</parameterReference>
                  <math>&gt;</math> 1</para>
              </entry>
              <entry>
                <para>+Infinity</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference> = 1</para>
              </entry>
              <entry>
                <para>
                  <parameterReference>newBase</parameterReference> = 0</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>a</parameterReference> = 1</para>
              </entry>
              <entry>
                <para>
                  <parameterReference>newBase</parameterReference> = +Infinity</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
            </row>
          </table>
        </returnValue>
        <remarks>
          <content>
            <para>Parameters <parameterReference>a</parameterReference> and <parameterReference>newBase</parameterReference> are specified as base 10 numbers.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example uses <codeEntityReference autoUpgrade="true">M:System.Math.Log(System.Double)</codeEntityReference> to evaluate certain logarithmic identities for selected values.</para>
                <codeReference>System.Math.Log_Overloads#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the base 10 logarithm of a specified number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A number whose logarithm is to be found. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Sign of <parameterReference>d</parameterReference></para>
                </entry>
                <entry>
                  <para>Returns </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Positive </para>
              </entry>
              <entry>
                <para>The base 10 log of <parameterReference>d</parameterReference>; that is, log <subscript>10</subscript><parameterReference>d</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>
                  <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Negative </para>
              </entry>
              <entry>
                <para>
                  <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>
                </para>
              </entry>
            </row>
          </table>
          <para>If <parameterReference>d</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, this method returns <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>. If <parameterReference>d</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, this method returns <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Parameter <parameterReference>d</parameterReference> is specified as a base 10 number.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example uses <codeEntityReference autoUpgrade="true">M:System.Math.Log10(System.Double)</codeEntityReference> to evaluate certain logarithmic identities for selected values.</para>
                <codeReference>System.Math.Log10#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Math.Max">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two specified numbers.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two 8-bit unsigned integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 8-bit unsigned integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 8-bit unsigned integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Returns the larger of two specified numbers.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two decimal numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> numbers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> numbers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two double-precision floating-point numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two double-precision floating-point numbers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two double-precision floating-point numbers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger. If <parameterReference>val1</parameterReference>, <parameterReference>val2</parameterReference>, or both <parameterReference>val1</parameterReference> and <parameterReference>val2</parameterReference> are equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> is returned.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two 16-bit signed integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 16-bit signed integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 16-bit signed integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two 32-bit signed integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 32-bit signed integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 32-bit signed integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two 64-bit signed integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 64-bit signed integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 64-bit signed integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two 8-bit signed integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 8-bit unsigned integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 8-bit unsigned integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two single-precision floating-point numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two single-precision floating-point numbers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two single-precision floating-point numbers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger. If <parameterReference>val1</parameterReference>, or <parameterReference>val2</parameterReference>, or both <parameterReference>val1</parameterReference> and <parameterReference>val2</parameterReference> are equal to <codeEntityReference autoUpgrade="true">F:System.Single.NaN</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Single.NaN</codeEntityReference> is returned.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two 16-bit unsigned integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 16-bit unsigned integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 16-bit unsigned integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two 32-bit unsigned integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 32-bit unsigned integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 32-bit unsigned integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the larger of two 64-bit unsigned integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 64-bit unsigned integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 64-bit unsigned integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is larger.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Max#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Math.Min">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two numbers.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two 8-bit unsigned integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 8-bit unsigned integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 8-bit unsigned integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Returns the smaller of two numbers.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two decimal numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> numbers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> numbers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two double-precision floating-point numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two double-precision floating-point numbers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two double-precision floating-point numbers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller. If <parameterReference>val1</parameterReference>, <parameterReference>val2</parameterReference>, or both <parameterReference>val1</parameterReference> and <parameterReference>val2</parameterReference> are equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> is returned.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two 16-bit signed integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 16-bit signed integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 16-bit signed integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two 32-bit signed integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 32-bit signed integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 32-bit signed integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two 64-bit signed integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 64-bit signed integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 64-bit signed integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two 8-bit signed integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 8-bit signed integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 8-bit signed integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two single-precision floating-point numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two single-precision floating-point numbers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two single-precision floating-point numbers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller. If <parameterReference>val1</parameterReference>, <parameterReference>val2</parameterReference>, or both <parameterReference>val1</parameterReference> and <parameterReference>val2</parameterReference> are equal to <codeEntityReference autoUpgrade="true">F:System.Single.NaN</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Single.NaN</codeEntityReference> is returned.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two 16-bit unsigned integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 16-bit unsigned integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 16-bit unsigned integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two 32-bit unsigned integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 32-bit unsigned integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 32-bit unsigned integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the smaller of two 64-bit unsigned integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>val1</parameterReference>
            <content>
              <para>The first of two 64-bit unsigned integers to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>val2</parameterReference>
            <content>
              <para>The second of two 64-bit unsigned integers to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>Parameter <parameterReference>val1</parameterReference> or <parameterReference>val2</parameterReference>, whichever is smaller.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Min#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a specified number raised to the specified power.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>x</parameterReference>
            <content>
              <para>A double-precision floating-point number to be raised to a power. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>y</parameterReference>
            <content>
              <para>A double-precision floating-point number that specifies a power. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number <parameterReference>x</parameterReference> raised to the power <parameterReference>y</parameterReference>.</para>
          <para>The following table indicates the return value when various values or ranges of values are specified for the <parameterReference>x</parameterReference> and <parameterReference>y</parameterReference> parameters. For more information, see <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, and <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Double.NaN</codeEntityReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Parameters </para>
                </entry>
                <entry>
                  <para>Return Value </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> or <parameterReference>y</parameterReference> = NaN </para>
              </entry>
              <entry>
                <para>NaN </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> = Any value except NaN; <parameterReference>y</parameterReference> = 0 </para>
              </entry>
              <entry>
                <para>1 </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> = NegativeInfinity; <parameterReference>y</parameterReference> &lt; 0 </para>
              </entry>
              <entry>
                <para>0 </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> = NegativeInfinity; <parameterReference>y</parameterReference> is a positive odd integer </para>
              </entry>
              <entry>
                <para>NegativeInfinity </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> = NegativeInfinity; <parameterReference>y</parameterReference> is positive but not an odd integer </para>
              </entry>
              <entry>
                <para>PositiveInfinity </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> &lt; 0 but not NegativeInfinity; <parameterReference>y</parameterReference> is not an integer, NegativeInfinity, or PositiveInfinity</para>
              </entry>
              <entry>
                <para>NaN </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> = -1; <parameterReference>y</parameterReference> = NegativeInfinity or PositiveInfinity </para>
              </entry>
              <entry>
                <para>NaN </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>-1 &lt; <parameterReference>x</parameterReference> &lt; 1; <parameterReference>y</parameterReference> = NegativeInfinity </para>
              </entry>
              <entry>
                <para>PositiveInfinity </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>-1 &lt; <parameterReference>x</parameterReference> &lt; 1; <parameterReference>y</parameterReference> = PositiveInfinity </para>
              </entry>
              <entry>
                <para>0 </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> &lt; -1 or <parameterReference>x</parameterReference> &gt; 1; <parameterReference>y</parameterReference> = NegativeInfinity </para>
              </entry>
              <entry>
                <para>0 </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> &lt; -1 or <parameterReference>x</parameterReference> &gt; 1; <parameterReference>y</parameterReference> = PositiveInfinity </para>
              </entry>
              <entry>
                <para>PositiveInfinity </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> = 0; <parameterReference>y</parameterReference> &lt; 0 </para>
              </entry>
              <entry>
                <para>PositiveInfinity </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> = 0; <parameterReference>y</parameterReference> &gt; 0 </para>
              </entry>
              <entry>
                <para>0 </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> = 1; <parameterReference>y</parameterReference> is any value except NaN </para>
              </entry>
              <entry>
                <para>1 </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> = PositiveInfinity; <parameterReference>y</parameterReference> &lt; 0 </para>
              </entry>
              <entry>
                <para>0 </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <parameterReference>x</parameterReference> = PositiveInfinity; <parameterReference>y</parameterReference> &gt; 0 </para>
              </entry>
              <entry>
                <para>PositiveInfinity </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample uses <codeEntityReference autoUpgrade="true">M:System.Math.Pow(System.Double,System.Double)</codeEntityReference> to assist in the computation of the inner angles of a given trapezoid.</para>
                <codeReference>MathSample#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Math.Round">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Rounds a value to the nearest integer or specified number of decimal places.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Rounds a decimal value to the nearest integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A decimal number to be rounded. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The integer nearest parameter <parameterReference>d</parameterReference>. If <parameterReference>d</parameterReference> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The result is outside the range of a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding to nearest, or banker's rounding.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates rounding to nearest.</para>
                <codeReference>Classic Math.Round Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Math.Ceiling(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Floor(System.Double)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Rounds a value to the nearest integer or specified number of decimal places.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Rounds a decimal value to a specified precision.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A decimal number to be rounded. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>decimals</parameterReference>
            <content>
              <para>The number of significant decimal places  (precision) in the return value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number nearest <parameterReference>d</parameterReference> with a precision equal to <parameterReference>decimals</parameterReference>. If <parameterReference>d</parameterReference> is halfway between two numbers, one of which is even and the other odd, then the even number is returned. If the precision of <parameterReference>d</parameterReference> is less than <parameterReference>decimals</parameterReference>, then <parameterReference>d</parameterReference> is returned unchanged.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>decimals</parameterReference> is less than 0 or greater than 28. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The result is outside the range of a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>decimals</parameterReference> parameter specifies the number of significant decimal places  in the return value and ranges from 0 to 28. If <parameterReference>decimals</parameterReference> is zero, an integer is returned.</para>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding to nearest, or banker's rounding. </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates rounding to nearest.</para>
                <codeReference>Classic Math.Round2 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Math.Ceiling(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Floor(System.Double)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Rounds a decimal value to a specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A decimal number to be rounded. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>decimals</parameterReference>
            <content>
              <para>The number of significant decimal places  (precision) in the return value. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>mode</parameterReference>
            <content>
              <para>Specification for how to round <parameterReference>d</parameterReference> if it is midway between two other numbers.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number nearest <parameterReference>d</parameterReference> with a precision equal to <parameterReference>decimals</parameterReference>. If <parameterReference>d</parameterReference> is halfway between two numbers, one of which is even and the other odd, then <parameterReference>mode</parameterReference> determines which of the two numbers is returned. If the precision of <parameterReference>d</parameterReference> is less than <parameterReference>decimals</parameterReference>, then <parameterReference>d</parameterReference> is returned unchanged.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>decimals</parameterReference> is less than 0 or greater than 28. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>mode</parameterReference> is not a valid value of <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.MidpointRounding</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The result is outside the range of a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>decimals</parameterReference> parameter specifies the number of significant decimal places  in the return value and ranges from 0 to 28. If <parameterReference>decimals</parameterReference> is zero, an integer is returned.</para>
            <para>The behavior of this method follows IEEE Standard 754, section 4. The kind of rounding that is performed if <parameterReference>mode</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.MidpointRounding.ToEven</codeEntityReference> is sometimes called rounding to nearest, or banker's rounding.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)</codeEntityReference>  method in conjunction with the <codeEntityReference autoUpgrade="true">T:System.MidpointRounding</codeEntityReference> enumeration.</para>
                <codeReference>math.midpointrounding#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A decimal number to be rounded. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>mode</parameterReference>
            <content>
              <para>Specification for how to round <parameterReference>d</parameterReference> if it is midway between two other numbers.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The integer nearest <parameterReference>d</parameterReference>. If <parameterReference>d</parameterReference> is halfway between two numbers, one of which is even and the other odd, then <parameterReference>mode</parameterReference> determines which of the two is returned. </para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>mode</parameterReference> is not a valid value of <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.MidpointRounding</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The result is outside the range of a <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding to nearest, or banker's rounding. The kind of rounding that is performed if <parameterReference>mode</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.MidpointRounding.ToEven</codeEntityReference> is sometimes called rounding to nearest, or banker's rounding.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)</codeEntityReference>  method in conjunction with the <codeEntityReference autoUpgrade="true">T:System.MidpointRounding</codeEntityReference> enumeration.</para>
                <codeReference>math.midpointrounding#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Rounds a double-precision floating-point value to the nearest integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>A double-precision floating-point number to be rounded. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The integer nearest <parameterReference>a</parameterReference>. If <parameterReference>a</parameterReference> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding to nearest, or banker's rounding.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates rounding to nearest integer value.</para>
                <codeReference>Classic Math.Round Example#1</codeReference>
                <para>The following code sample uses <languageKeyword>Round</languageKeyword> to assist in the computation of the inner angles of a given trapezoid.</para>
                <codeReference>MathSample#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Math.Ceiling(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Floor(System.Double)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Rounds a double-precision floating-point value to the specified precision.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating-point number to be rounded. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>digits</parameterReference>
            <content>
              <para>The number of significant digits (precision) in the return value. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number nearest <parameterReference>value</parameterReference> with a precision equal to <parameterReference>digits</parameterReference>. If <parameterReference>value</parameterReference> is halfway between two numbers, one of which is even and the other odd, then the even number is returned. If the precision of <parameterReference>value</parameterReference> is less than <parameterReference>digits</parameterReference>, then <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>digits</parameterReference> is less than 0 or greater than 15. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>digits</parameterReference> parameter specifies the number of significant digits in the return value and ranges from 0 to 15. If <parameterReference>digits</parameterReference> is zero, then a integer is returned.</para>
            <para>The maximum total number of integral and fractional digits that can be returned is 15. If the rounded value contains more than 15 digits, the 15 most significant digits are returned. If the rounded value contains 15 or fewer digits, the integral digits and as many fractional digits as the <parameterReference>digits</parameterReference> parameter specifies are returned.</para>
            <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding to nearest, or banker's rounding. </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example demonstrates rounding to nearest.</para>
                <codeReference>Classic Math.Round2 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Math.Ceiling(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Floor(System.Double)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Rounds a double-precision floating-point value to the specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating-point number to be rounded. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>digits</parameterReference>
            <content>
              <para>The number of significant digits (precision) in the return value. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>mode</parameterReference>
            <content>
              <para>Specification for how to round <parameterReference>value</parameterReference> if it is midway between two other numbers.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The number nearest <parameterReference>value</parameterReference> with a precision equal to <parameterReference>digits</parameterReference>. If <parameterReference>value</parameterReference> is halfway between two numbers, one of which is even and the other odd, then the <parameterReference>mode</parameterReference> parameter determines which number is returned. If the precision of <parameterReference>value</parameterReference> is less than <parameterReference>digits</parameterReference>, then <parameterReference>value</parameterReference> is returned unchanged.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>digits</parameterReference> is less than 0 or greater than 15. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>mode</parameterReference> is not a valid value of <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.MidpointRounding</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>digits</parameterReference> parameter specifies the number of significant digits in the return value and ranges from 0 to 15. If <parameterReference>digits</parameterReference> is zero, then a integer is returned.</para>
            <para>The maximum total number of integral and fractional digits that can be returned is 15. If the rounded value contains more than 15 digits, the 15 most significant digits are returned. If the rounded value contains 15 or fewer digits, the integral digits and as many fractional digits as the <parameterReference>digits</parameterReference> parameter specifies are returned.</para>
            <para>The behavior of this method follows IEEE Standard 754, section 4. The kind of rounding that is performed if <parameterReference>mode</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.MidpointRounding.ToEven</codeEntityReference> is sometimes called rounding to nearest, or banker's rounding.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)</codeEntityReference>  method in conjunction with the <codeEntityReference autoUpgrade="true">T:System.MidpointRounding</codeEntityReference> enumeration. Although the code example rounds decimal numbers, the <codeEntityReference autoUpgrade="true">M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)</codeEntityReference> method rounds double-precision floating-point numbers in a similar way.</para>
                <codeReference>math.midpointrounding#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating-point number to be rounded. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>mode</parameterReference>
            <content>
              <para>Specification for how to round <parameterReference>value</parameterReference> if it is midway between two other numbers.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The integer nearest <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is halfway between two integers, one of which is even and the other odd, then <parameterReference>mode</parameterReference> determines which of the two is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>mode</parameterReference> is not a valid value of <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.MidpointRounding</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The behavior of this method follows IEEE Standard 754, section 4. The kind of rounding that is performed if <parameterReference>mode</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.MidpointRounding.ToEven</codeEntityReference> is sometimes called rounding to nearest, or banker's rounding.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)</codeEntityReference>  method in conjunction with the <codeEntityReference autoUpgrade="true">T:System.MidpointRounding</codeEntityReference> enumeration. Although the code example rounds decimal numbers, the <codeEntityReference autoUpgrade="true">M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)</codeEntityReference> method rounds double-precision floating-point numbers in a similar way.</para>
                <codeReference>math.midpointrounding#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Math.Sign">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating the sign of a number.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating the sign of a decimal number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A signed <codeEntityReference autoUpgrade="true">T:System.Decimal</codeEntityReference> number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A number indicating the sign of <parameterReference>value</parameterReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Number </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>-1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is less than zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>0 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is equal to zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is greater than zero. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Sign#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Returns a value indicating the sign of a number.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating the sign of a double-precision floating-point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A signed number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A number indicating the sign of <parameterReference>value</parameterReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Number </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>-1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is less than zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>0 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is equal to zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is greater than zero. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArithmeticException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Sign#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating the sign of a 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A signed number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A number indicating the sign of <parameterReference>value</parameterReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Number </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>-1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is less than zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>0 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is equal to zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is greater than zero. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Sign#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating the sign of a 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A signed number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A number indicating the sign of <parameterReference>value</parameterReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Number </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>-1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is less than zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>0 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is equal to zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is greater than zero. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Sign#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating the sign of a 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A signed number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A number indicating the sign of <parameterReference>value</parameterReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Number </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>-1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is less than zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>0 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is equal to zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is greater than zero. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Sign#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating the sign of an 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A signed number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A number indicating the sign of <parameterReference>value</parameterReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Number </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>-1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is less than zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>0 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is equal to zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is greater than zero. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Sign#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating the sign of a single-precision floating-point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A signed number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A number indicating the sign of <parameterReference>value</parameterReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Number </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>-1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is less than zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>0 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is equal to zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1 </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>value</parameterReference> is greater than zero. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArithmeticException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Single.NaN</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>Math.Sign#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the sine of the specified angle.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>An angle, measured in radians. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The sine of <parameterReference>a</parameterReference>. If <parameterReference>a</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, or <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, this method returns <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The angle, <parameterReference>a</parameterReference>, must be in radians. Multiply by <math>π</math>/180 to convert degrees to radians.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example uses <codeEntityReference autoUpgrade="true">M:System.Math.Sin(System.Double)</codeEntityReference> to evaluate certain trigonometric identities for selected angles.</para>
                <codeReference>System.Math.SinCos#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the hyperbolic sine of the specified angle.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An angle, measured in radians. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The hyperbolic sine of <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, or <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, this method returns a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> equal to <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The angle, <parameterReference>value</parameterReference>, must be in radians. Multiply by <math>π</math>/180 to convert degrees to radians.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example uses <codeEntityReference autoUpgrade="true">M:System.Math.Sinh(System.Double)</codeEntityReference> to evaluate certain hyperbolic identities for selected values.</para>
                <codeReference>System.Math.SinhCosh#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the square root of a specified number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value of <parameterReference>d</parameterReference></para>
                </entry>
                <entry>
                  <para>Returns </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Zero, or positive </para>
              </entry>
              <entry>
                <para>The positive square root of <parameterReference>d</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Negative </para>
              </entry>
              <entry>
                <para>
                  <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>
                </para>
              </entry>
            </row>
          </table>
          <para>If <parameterReference>d</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, that value is returned.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample uses <languageKeyword>Sqrt</languageKeyword> to assist in the computation of the inner angles of a given trapezoid.</para>
                <codeReference>MathSample#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the tangent of the specified angle.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>An angle, measured in radians. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The tangent of <parameterReference>a</parameterReference>. If <parameterReference>a</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, or <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, this method returns <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The angle, <parameterReference>a</parameterReference>, must be in radians. Multiply by <math>π</math>/180 to convert degrees to radians.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <codeReference>math.atanx#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the hyperbolic tangent of the specified angle.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An angle, measured in radians. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The hyperbolic tangent of <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, this method returns -1. If value is equal to <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, this method returns 1. If <parameterReference>value</parameterReference> is equal to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, this method returns <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The angle, <parameterReference>value</parameterReference>, must be in radians. Multiply by <math>π</math>/180 to convert degrees to radians.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example uses <codeEntityReference autoUpgrade="true">M:System.Math.Tanh(System.Double)</codeEntityReference> to evaluate certain hyperbolic tangent identities for selected values.</para>
                <codeReference>System.Math.Tanh#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Math.Truncate">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calculates the integral part of a number. </para>
        </summary>
        <remarks>
          <content>
            <para>The number is rounded to the nearest integer towards zero.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calculates the integral part of a specified decimal number. </para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A number to truncate.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The integral part of <parameterReference>d</parameterReference>; that is, the number that remains after any fractional digits have been discarded.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">M:System.Math.Truncate(System.Decimal)</codeEntityReference> rounds <parameterReference>d</parameterReference> to the nearest integer towards zero.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Ceiling(System.Decimal)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Floor(System.Decimal)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Calculates the integral part of a number. </para>
        </summary>
        <remarks>
          <content>
            <para>The number is rounded to the nearest integer towards zero.</para>
          </content>
        </remarks>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Calculates the integral part of a specified double-precision floating-point number. </para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A number to truncate.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The integral part of <parameterReference>d</parameterReference>; that is, the number that remains after any fractional digits have been discarded.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">M:System.Math.Truncate(System.Double)</codeEntityReference> rounds <parameterReference>d</parameterReference> to the nearest integer towards zero.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Math.Round</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Ceiling(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Math.Floor(System.Double)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
  </members>
</doc>