<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="874bd404-f7a8-4147-ac57-2d2c5994e1ea" revisionNumber="20">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Double">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents a double-precision floating point number.</para>
        </summary>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> value type represents a double-precision 64-bit number with values ranging from negative 1.79769313486232e308 to positive 1.79769313486232e308, as well as positive or negative zero, <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, and Not-a-Number (<codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>).</para>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.</para>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> provides methods to compare instances of this type, convert the value of an instance to its string representation, and convert the string representation of a number to an instance of this type. For information about how format specification codes control the string representation of value types, see <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>, <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link>, and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
          </content>
          <sections>
            <section>
              <title>Using Floating-Point Numbers</title>
              <content>
                <para>When performing binary operations, if one of the operands is a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>, then the other operand is required to be an integral type or a floating-point type (<codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> or <codeEntityReference autoUpgrade="true">T:System.Single</codeEntityReference>). Prior to performing the operation, if the other operand is not a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>, it is converted to <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>, and the operation is performed using at least <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> range and precision. If the operation produces a numeric result, the type of the result is <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>.</para>
                <para>The floating-point operators, including the assignment operators, do not throw exceptions. Instead, in exceptional situations the result of a floating-point operation is zero, infinity, or NaN, as described below: </para>
                <list class="bullet">
                  <listItem>
                    <para>If the result of a floating-point operation is too small for the destination format, the result of the operation is zero.</para>
                  </listItem>
                  <listItem>
                    <para>If the magnitude of the result of a floating-point operation is too large for the destination format, the result of the operation is <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>, as appropriate for the sign of the result.</para>
                  </listItem>
                  <listItem>
                    <para>If a floating-point operation is invalid, the result of the operation is <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>.</para>
                  </listItem>
                  <listItem>
                    <para>If one or both operands of a floating-point operation are <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>, the result of the operation is <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>.</para>
                  </listItem>
                </list>
                <para>Remember that a floating-point number can only approximate a decimal number, and that the precision of a floating-point number determines how accurately that number approximates a decimal number. By default, a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> value contains 15 decimal digits of precision, although a maximum of 17 digits is maintained internally. The precision of a floating-point number has several consequences:</para>
                <list class="bullet">
                  <listItem>
                    <para>Two floating-point numbers that appear equal for a particular precision might not compare equal because their least significant digits are different. </para>
                  </listItem>
                  <listItem>
                    <para>A mathematical or comparison operation that uses a floating-point number might not yield the same result if a decimal number is used because the floating-point number might not exactly approximate the decimal number. </para>
                  </listItem>
                  <listItem>
                    <para>A value might not roundtrip if a floating-point number is involved. A value is said to roundtrip if an operation converts an original floating-point number to another form, an inverse operation transforms the converted form back to a floating-point number, and the final floating-point number is equal to the original floating-point number. The roundtrip might fail because one or more least significant digits are lost or changed in a conversion. </para>
                  </listItem>
                </list>
              </content>
            </section>
            <section>
              <title>Interface Implementations</title>
              <content>
                <para>This type implements the interfaces <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.IFormattable</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>. Use the <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference> class for conversions instead of this type's explicit interface member implementation of <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>: </para>
                <codeReference>Double Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="F:System.Double.Epsilon">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents the smallest positive <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> greater than zero. This field is constant.</para>
        </summary>
        <remarks>
          <content>
            <para>The value of this constant is 4.94065645841247e-324.</para>
            <para>Two apparently equivalent floating point numbers might not compare equal because of differences in their least significant digits. For example, the C# expression, <codeInline>(double)1/3 == (double)0.33333</codeInline>, does not compare equal because the division operation on the left-hand side has maximum precision while the constant on the right-hand side is only precise to the visible digits.</para>
            <para>Instead, determine if the two sides of a comparison are close enough to equal for your purposes by comparing whether the absolute value of the difference between the left and right-hand sides is less than <languageKeyword>Epsilon</languageKeyword>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.Parse(System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="F:System.Double.MaxValue">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents the largest possible value of a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>. This field is constant.</para>
        </summary>
        <remarks>
          <content>
            <para>The value of this constant is positive 1.79769313486232e308.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>: </para>
                <codeReference>Double Example#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="F:System.Double.MinValue">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents the smallest possible value of a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>. This field is constant.</para>
        </summary>
        <remarks>
          <content>
            <para>The value of this constant is negative 1.79769313486232e308.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">F:System.Double.MinValue</codeEntityReference>: </para>
                <codeReference>Double Example#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="F:System.Double.NaN">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents a value that is not a number (<languageKeyword>NaN</languageKeyword>). This field is constant.</para>
        </summary>
        <remarks>
          <content>
            <para>The value of this constant is the result of dividing zero by zero.</para>
            <para>This constant is returned when the result of an operation is undefined.</para>
            <para>Use <codeEntityReference autoUpgrade="true">M:System.Double.IsNaN(System.Double)</codeEntityReference> to determine whether a value is not a number. It is not possible to determine whether a value is not a number by comparing it to another value equal to <languageKeyword>NaN</languageKeyword>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>: </para>
                <codeReference>System.Double#7</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsNaN(System.Double)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents negative infinity. This field is constant.</para>
        </summary>
        <remarks>
          <content>
            <para>The value of this constant is the result of dividing a negative number by zero.</para>
            <para>This constant is returned when the result of an operation is less than <codeEntityReference autoUpgrade="true">F:System.Double.MinValue</codeEntityReference>.</para>
            <para>Use <codeEntityReference autoUpgrade="true">M:System.Double.IsNegativeInfinity(System.Double)</codeEntityReference> to determine whether a value evaluates to negative infinity. It is not possible to determine whether a value evaluates to negative infinity by comparing it to another value equal to <languageKeyword>NegativeInfinity</languageKeyword>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>: </para>
                <codeReference>System.Double#9</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsNegativeInfinity(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsInfinity(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents positive infinity. This field is constant.</para>
        </summary>
        <remarks>
          <content>
            <para>The value of this constant is the result of dividing a positive number by zero.</para>
            <para>This constant is returned when the result of an operation is greater than <codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>.</para>
            <para>Use <codeEntityReference autoUpgrade="true">M:System.Double.IsPositiveInfinity(System.Double)</codeEntityReference> to determine whether a value evaluates to positive infinity. It is not possible to determine whether a value evaluates to positive infinity by comparing it to another value equal to <languageKeyword>PositiveInfinity</languageKeyword>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>: </para>
                <codeReference>System.Double#10</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsPositiveInfinity(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsInfinity(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Double.CompareTo">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares this instance to a specified object or <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> and returns an indication of their relative values.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares this instance to a specified double-precision floating-point number and returns an indication of their relative values.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A double-precision floating-point number to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A signed number indicating the relative values of this instance and <parameterReference>value</parameterReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Return Value </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>This instance is less than <parameterReference>value</parameterReference>.</para>
                <para>-or- </para>
                <para>This instance is not a number (<codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>) and <parameterReference>value</parameterReference> is a number. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>This instance is equal to <parameterReference>value</parameterReference>.</para>
                <para>-or- </para>
                <para>Both this instance and <parameterReference>value</parameterReference> are not a number (<codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>), <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, or <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>This instance is greater than <parameterReference>value</parameterReference>.</para>
                <para>-or- </para>
                <para>This instance is a number and <parameterReference>value</parameterReference> is not a number (<codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>). </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <remarks>
          <content>
            <para>This method implements the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.IComparable`1</codeEntityReference> interface and performs slightly better than the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Double.CompareTo(System.Object)</codeEntityReference> method because it does not have to convert the <parameterReference>value</parameterReference> parameter to an object.</para>
            <para>Note that, although an object whose value is <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> is not considered equal to another object whose value is <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> (even itself), the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> interface requires that <codeInline>A.CompareTo(A)</codeInline> return zero.</para>
          </content>
          <sections>
            <section>
              <title>Widening Conversions</title>
              <content>
                <para>Depending on your programming language, it might be possible to code a <codeEntityReference autoUpgrade="true">M:System.Double.CompareTo(System.Double)</codeEntityReference> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</para>
                <para>For example, suppose the instance type is <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> and the parameter type is <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>. The Microsoft C# compiler generates instructions to represent the value of the parameter as a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> object, then generates a <codeEntityReference qualifyHint="true" autoUpgrade="false">M:System.Double.CompareTo(System.Double)</codeEntityReference> method that compares the values of the instance and the widened representation of the parameter.</para>
                <para>Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types. For more information, see the <link xlink:href="0ea65c59-85eb-4a52-94ca-c36d3bd13058">Type Conversion Tables</link> topic.</para>
              </content>
            </section>
            <section>
              <title>Precision in Comparisons</title>
              <content>
                <para>The precision of floating point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates generic and nongeneric versions of the <codeEntityReference autoUpgrade="true">Overload:System.Double.CompareTo</codeEntityReference> method for several value and reference types.</para>
                <codeReference>T.CompareTo#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.Equals(System.Object)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Compares this instance to a specified object or <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> and returns an indication of their relative values.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An object to compare, or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A signed number indicating the relative values of this instance and <parameterReference>value</parameterReference>.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>A negative integer </para>
              </entry>
              <entry>
                <para>This instance is less than <parameterReference>value</parameterReference>.</para>
                <para>-or- </para>
                <para>This instance is not a number (<codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>) and <parameterReference>value</parameterReference> is a number. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>This instance is equal to <parameterReference>value</parameterReference>.</para>
                <para>-or- </para>
                <para>This instance and <parameterReference>value</parameterReference> are both <languageKeyword>Double.NaN</languageKeyword>, <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>, or <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference></para>
              </entry>
            </row>
            <row>
              <entry>
                <para>A positive integer </para>
              </entry>
              <entry>
                <para>This instance is greater than <parameterReference>value</parameterReference>.</para>
                <para>-or- </para>
                <para>This instance is a number and <parameterReference>value</parameterReference> is not a number (<codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>).</para>
                <para>-or- </para>
                <para>
                  <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Any instance of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>, regardless of its value, is considered greater than <languageKeyword>null</languageKeyword>.</para>
            <para>The <parameterReference>value</parameterReference> parameter must be <languageKeyword>null</languageKeyword> or an instance of <languageKeyword>Double</languageKeyword>; otherwise, an exception is thrown.</para>
            <para>This method is implemented to support the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface. Note that, although a <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> is not considered to be equal to another <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> (even itself), the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface requires that <codeInline>A.CompareTo(A)</codeInline> return zero.</para>
          </content>
          <sections>
            <section>
              <title>Precision in Comparisons</title>
              <content>
                <para>The precision of floating point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <languageKeyword>CompareTo</languageKeyword> in the context of <languageKeyword>Double</languageKeyword>.</para>
                <codeReference>System.Double#16</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.Equals(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Double.Equals">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether two instances of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> represent the same value.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether this instance and a specified <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> object represent the same value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>obj</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> object to compare to this instance.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>obj</parameterReference> is equal to this instance; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method implements the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.IEquatable`1</codeEntityReference> interface, and performs slightly better than <codeEntityReference autoUpgrade="true">M:System.Double.Equals(System.Object)</codeEntityReference> because it does not have to convert the <parameterReference>obj</parameterReference> parameter to an object.</para>
          </content>
          <sections>
            <section>
              <title>Widening Conversions</title>
              <content>
                <para>Depending on your programming language, it might be possible to code a <codeEntityReference autoUpgrade="true">M:System.Double.Equals(System.Double)</codeEntityReference> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</para>
                <para>For example, suppose the instance type is <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> and the parameter type is <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>. The Microsoft C# compiler generates instructions to represent the value of the parameter as a <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> object, then generates a <codeEntityReference qualifyHint="true" autoUpgrade="false">M:System.Double.Equals(System.Double)</codeEntityReference> method that compares the values of the instance and the widened representation of the parameter.</para>
                <para>Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types. For more information, see the <link xlink:href="0ea65c59-85eb-4a52-94ca-c36d3bd13058">Type Conversion Tables</link> topic.</para>
              </content>
            </section>
            <section>
              <title>Precision in Comparisons</title>
              <content>
                <para>The precision of floating point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.Equals(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Double.CompareTo</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns a value indicating whether two instances of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> represent the same value.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether this instance is equal to a specified object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>obj</parameterReference>
            <content>
              <para>An object to compare with this instance. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>obj</parameterReference> is an instance of <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> and equals the value of this instance; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The precision of floating point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Double.Equals(System.Object)</codeEntityReference> method.</para>
                <codeReference>System.Double#17</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Double.GetHashCode">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the hash code for this instance.</para>
        </summary>
        <returnValue>
          <para>A 32-bit signed integer hash code.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference> for value type <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>The enumerated constant, <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.TypeCode.Double</codeEntityReference>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether the specified number evaluates to negative or positive infinity </para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>d</parameterReference> evaluates to <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Floating-point operations return <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference> to signal an overflow condition.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">M:System.Double.IsInfinity(System.Double)</codeEntityReference>: </para>
                <codeReference>System.Double#11</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsPositiveInfinity(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsNegativeInfinity(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>
          <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether the specified number evaluates to a value that is not a number (<codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>).</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>d</parameterReference> evaluates to <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Floating-point operations return <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference> to signal that that result of the operation is undefined. For example, dividing 0.0 by 0.0 results in <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">M:System.Double.IsNaN(System.Double)</codeEntityReference>: </para>
                <codeReference>System.Double#8</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">F:System.Double.NaN</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether the specified number evaluates to negative infinity.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>d</parameterReference> evaluates to <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Floating-point operations return <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference> to signal an overflow condition.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">M:System.Double.IsNegativeInfinity(System.Double)</codeEntityReference>: </para>
                <codeReference>System.Double#13,4,9</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsInfinity(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsPositiveInfinity(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>
          <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether the specified number evaluates to positive infinity.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>d</parameterReference>
            <content>
              <para>A double-precision floating point number. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>d</parameterReference> evaluates to <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Floating-point operations return <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference> to signal an overflow condition.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">M:System.Double.IsPositiveInfinity(System.Double)</codeEntityReference>: </para>
                <codeReference>System.Double#12</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsInfinity(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Double.IsNegativeInfinity(System.Double)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">F:System.Double.PositiveInfinity</codeEntityReference>
          <codeEntityReference autoUpgrade="true">F:System.Double.NegativeInfinity</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Double.Parse">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the string representation of a number to its double-precision floating point number equivalent.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the string representation of a number to its double-precision floating point number equivalent.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>s</parameterReference>
            <content>
              <para>A string containing a number to convert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the numeric value or symbol specified in <parameterReference>s</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> is not a number in a valid format. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Double.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>s</parameterReference> parameter can contain <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NaNSymbol</codeEntityReference>, or a string of the form: </para>
            <para>[ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws] </para>
            <para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
            <definitionTable>
              <definedTerm> ws</definedTerm>
              <definition>
                <para>A series of white space characters. </para>
              </definition>
              <definedTerm> sign</definedTerm>
              <definition>
                <para>A negative sign or positive sign symbol. </para>
              </definition>
              <definedTerm> integral-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the integral part of the number. Runs of integral-digits can be partitioned by a group-separator symbol. (For example, in some cultures a comma (,) separates groups of thousands.) Integral-digits can be absent if there are fractional-digits. </para>
              </definition>
              <definedTerm> '.' </definedTerm>
              <definition>
                <para>A culture-specific decimal point symbol. </para>
              </definition>
              <definedTerm> fractional-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the fractional part of the number. </para>
              </definition>
              <definedTerm> 'e' </definedTerm>
              <definition>
                <para>An uppercase or lowercase character 'e', indicating exponential (scientific) notation. </para>
              </definition>
              <definedTerm> exponential-digits</definedTerm>
              <definition>
                <para>A series of digits specifying an exponent. </para>
              </definition>
            </definitionTable>
            <para>Some examples of <parameterReference>s</parameterReference> are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</para>
            <para>This version of the <codeEntityReference autoUpgrade="true">M:System.Double.Parse(System.String)</codeEntityReference> method implicitly uses the <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> values, <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.Float</codeEntityReference> and <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.AllowThousands</codeEntityReference>, and the culture-specific <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> data associated with the current thread.</para>
            <para>For more information about numeric formats, see the <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link> topic.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>Parse</languageKeyword>, taking a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> as a parameter: </para>
                <codeReference>Double Example#5</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>
          <codeEntityReference autoUpgrade="true">M:System.Double.ToString</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Converts the string representation of a number to its double-precision floating point number equivalent.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the string representation of a number in a specified style to its double-precision floating point number equivalent.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>s</parameterReference>
            <content>
              <para>A string containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>style</parameterReference>
            <content>
              <para>A bitwise combination of <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> values that indicates the permitted format of <parameterReference>s</parameterReference>. A typical value to specify is <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.Float</codeEntityReference> combined with <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.AllowThousands</codeEntityReference>.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the numeric value or symbol specified in <parameterReference>s</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> is not a number in a valid format. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Double.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>style</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> value. </para>
              <para>-or-</para>
              <para>
                <parameterReference>style</parameterReference> is the <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.AllowHexSpecifier</codeEntityReference> value.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>s</parameterReference> parameter can contain <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NaNSymbol</codeEntityReference>, or a string of the form: </para>
            <para>[ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws] </para>
            <para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
            <definitionTable>
              <definedTerm> ws</definedTerm>
              <definition>
                <para>A series of white space characters. </para>
              </definition>
              <definedTerm> sign</definedTerm>
              <definition>
                <para>A negative sign or positive sign symbol. </para>
              </definition>
              <definedTerm> integral-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the integral part of the number. Runs of integral-digits can be partitioned by a group-separator symbol. (For example, in some cultures a comma (,) separates groups of thousands.) Integral-digits can be absent if there are fractional-digits. </para>
              </definition>
              <definedTerm> '.' </definedTerm>
              <definition>
                <para>A culture-specific decimal point symbol. </para>
              </definition>
              <definedTerm> fractional-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the fractional part of the number. </para>
              </definition>
              <definedTerm> 'e' </definedTerm>
              <definition>
                <para>An uppercase or lowercase character 'e', indicating exponential (scientific) notation. </para>
              </definition>
              <definedTerm> exponential-digits</definedTerm>
              <definition>
                <para>A series of digits specifying an exponent. </para>
              </definition>
            </definitionTable>
            <para>Some examples of <parameterReference>s</parameterReference> are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</para>
            <para>This version of the <codeEntityReference autoUpgrade="true">M:System.Double.Parse(System.String,System.Globalization.NumberStyles)</codeEntityReference> method implicitly uses the culture-specific <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> data associated with the current thread.</para>
            <para>For more information about numeric formats, see the <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link> topic.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>Parse</languageKeyword>, taking a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> and an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> as parameters: </para>
                <codeReference>Double Example#6</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>
          <codeEntityReference autoUpgrade="true">M:System.Double.ToString</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating point number equivalent.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>s</parameterReference>
            <content>
              <para>A string containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>style</parameterReference>
            <content>
              <para>A bitwise combination of <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> values that indicates the permitted format of <parameterReference>s</parameterReference>. A typical value to specify is <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.Float</codeEntityReference> combined with <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.AllowThousands</codeEntityReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> that supplies culture-specific formatting information about <parameterReference>s</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the numeric value or symbol specified in <parameterReference>s</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> is not a numeric value. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>style</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> value. </para>
              <para>-or-</para>
              <para>
                <parameterReference>style</parameterReference> is the <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.AllowHexSpecifier</codeEntityReference> value.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Double.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>s</parameterReference> parameter can contain <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NaNSymbol</codeEntityReference>, or a string of the form: </para>
            <para>[ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws] </para>
            <para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
            <definitionTable>
              <definedTerm> ws</definedTerm>
              <definition>
                <para>A series of white space characters. </para>
              </definition>
              <definedTerm> sign</definedTerm>
              <definition>
                <para>A negative sign or positive sign symbol. </para>
              </definition>
              <definedTerm> integral-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the integral part of the number. Runs of integral-digits can be partitioned by a group-separator symbol. (For example, in some cultures a comma (,) separates groups of thousands.) Integral-digits can be absent if there are fractional-digits. </para>
              </definition>
              <definedTerm> '.' </definedTerm>
              <definition>
                <para>A culture-specific decimal point symbol. </para>
              </definition>
              <definedTerm> fractional-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the fractional part of the number. </para>
              </definition>
              <definedTerm> 'e' </definedTerm>
              <definition>
                <para>An uppercase or lowercase character 'e', indicating exponential (scientific) notation. </para>
              </definition>
              <definedTerm> exponential-digits</definedTerm>
              <definition>
                <para>A series of digits specifying an exponent. </para>
              </definition>
            </definitionTable>
            <para>Some examples of <parameterReference>s</parameterReference> are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</para>
            <para>This version of the <codeEntityReference autoUpgrade="true">M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)</codeEntityReference> method uses the specified <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> and number formatting information. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword> or a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> cannot be obtained, the formatting information for the current system culture is used.</para>
            <para>For more information about numeric formats, see the <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link> topic.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>Parse</languageKeyword>, taking a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference>, and a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> as parameters: </para>
                <codeReference>Double Example#8</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>
          <codeEntityReference autoUpgrade="true">M:System.Double.ToString</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the string representation of a number in a specified culture-specific format to its double-precision floating point number equivalent.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>s</parameterReference>
            <content>
              <para>A string containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> that supplies culture-specific formatting information about <parameterReference>s</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A double-precision floating point number equivalent to the numeric value or symbol specified in <parameterReference>s</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> is not a number in a valid format. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>
                <parameterReference>s</parameterReference> represents a number less than <codeEntityReference autoUpgrade="true">F:System.Double.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>s</parameterReference> parameter can contain <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NaNSymbol</codeEntityReference>, or a string of the form: </para>
            <para>[ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws] </para>
            <para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
            <definitionTable>
              <definedTerm> ws</definedTerm>
              <definition>
                <para>A series of white space characters. </para>
              </definition>
              <definedTerm> sign</definedTerm>
              <definition>
                <para>A negative sign or positive sign symbol. </para>
              </definition>
              <definedTerm> integral-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the integral part of the number. Runs of integral-digits can be partitioned by a group-separator symbol. (For example, in some cultures a comma (,) separates groups of thousands.) Integral-digits can be absent if there are fractional-digits. </para>
              </definition>
              <definedTerm> '.' </definedTerm>
              <definition>
                <para>A culture-specific decimal point symbol. </para>
              </definition>
              <definedTerm> fractional-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the fractional part of the number. </para>
              </definition>
              <definedTerm> 'e' </definedTerm>
              <definition>
                <para>An uppercase or lowercase character 'e', indicating exponential (scientific) notation. </para>
              </definition>
              <definedTerm> exponential-digits</definedTerm>
              <definition>
                <para>A series of digits specifying an exponent. </para>
              </definition>
            </definitionTable>
            <para>Some examples of <parameterReference>s</parameterReference> are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</para>
            <para>This version of the <codeEntityReference autoUpgrade="true">M:System.Double.Parse(System.String,System.IFormatProvider)</codeEntityReference> method implicitly uses the <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> values, <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.Float</codeEntityReference> and <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.AllowThousands</codeEntityReference>. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword> or a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> cannot be obtained, the formatting information for the current system culture is used.</para>
            <para>For more information about numeric formats, see the <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link> topic.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <languageKeyword>Parse</languageKeyword>, taking a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> and a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> as parameters: </para>
                <codeReference>Double Example#7</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>
          <codeEntityReference autoUpgrade="true">M:System.Double.ToString</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToBoolean(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToBoolean(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToByte(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToByte(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToChar(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToChar(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToDateTime(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>This conversion is not supported. Attempting to do so throws an <languageKeyword>InvalidCastException</languageKeyword>.</para>
        </summary>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>Unsupported conversion of <languageKeyword>Double</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToDecimal(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToDecimal(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToDouble(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToDouble(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToInt16(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToInt16(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToInt32(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToInt32(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToInt64(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToInt64(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToSByte(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToSByte(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToSingle(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToSingle(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToUInt16(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToUInt16(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToUInt32(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToUInt32(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Double.System.IConvertible.ToUInt64(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IConvertible.ToUInt64(System.IFormatProvider)</codeEntityReference>. </para>
        </summary>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.Double</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="Overload:System.Double.ToString">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the numeric value of this instance to its equivalent string representation.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Double.ToString">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the numeric value of this instance to its equivalent string representation.</para>
        </summary>
        <returnValue>
          <para>The string representation of the value of this instance.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The return value can be <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NaNSymbol</codeEntityReference>, or a string of the form: </para>
            <para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits] </para>
            <para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
            <definitionTable>
              <definedTerm> sign</definedTerm>
              <definition>
                <para>A negative sign or positive sign symbol. </para>
              </definition>
              <definedTerm> integral-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits. </para>
              </definition>
              <definedTerm> '.' </definedTerm>
              <definition>
                <para>A culture-specific decimal point symbol. </para>
              </definition>
              <definedTerm> fractional-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the fractional part of the number. </para>
              </definition>
              <definedTerm> 'e' </definedTerm>
              <definition>
                <para>A lowercase character 'e', indicating exponential (scientific) notation. </para>
              </definition>
              <definedTerm> exponential-digits</definedTerm>
              <definition>
                <para>A series of digits specifying an exponent. </para>
              </definition>
            </definitionTable>
            <para>Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</para>
            <para>This version of the <codeEntityReference autoUpgrade="true">Overload:System.Double.ToString</codeEntityReference> method implicitly uses the general format specifier ("G") and the <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> for the current culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">M:System.Double.ToString</codeEntityReference>: </para>
                <codeReference>System.Double#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>
          <codeEntityReference autoUpgrade="true">M:System.Double.Parse(System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Converts the numeric value of this instance to its equivalent string representation.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The string representation of the value of this instance as specified by <parameterReference>provider</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The return value can be <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NaNSymbol</codeEntityReference>, or a string of the form: </para>
            <para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits] </para>
            <para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
            <definitionTable>
              <definedTerm> sign</definedTerm>
              <definition>
                <para>A negative sign or positive sign symbol. </para>
              </definition>
              <definedTerm> integral-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits. </para>
              </definition>
              <definedTerm> '.' </definedTerm>
              <definition>
                <para>A culture-specific decimal point symbol. </para>
              </definition>
              <definedTerm> fractional-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the fractional part of the number. </para>
              </definition>
              <definedTerm> 'e' </definedTerm>
              <definition>
                <para>A lowercase character 'e', indicating exponential (scientific) notation. </para>
              </definition>
              <definedTerm> exponential-digits</definedTerm>
              <definition>
                <para>A series of digits specifying an exponent. </para>
              </definition>
            </definitionTable>
            <para>Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</para>
            <para>This instance is formatted with the general format specifier ("G").</para>
            <para>The <parameterReference>provider</parameterReference> parameter is an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object that supplies culture-specific format information. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the return value is formatted with <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> data for the current culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Double.ToString</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> and an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> as parameters: </para>
                <codeReference>Double Example#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>
          <codeEntityReference autoUpgrade="true">M:System.Double.Parse(System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>A format string. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The string representation of the value of this instance as specified by <parameterReference>format</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is invalid. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value can be <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NaNSymbol</codeEntityReference>, or a string of the form: </para>
            <para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits] </para>
            <para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
            <definitionTable>
              <definedTerm> sign</definedTerm>
              <definition>
                <para>A negative sign or positive sign symbol. </para>
              </definition>
              <definedTerm> integral-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits. </para>
              </definition>
              <definedTerm> '.' </definedTerm>
              <definition>
                <para>A culture-specific decimal point symbol. </para>
              </definition>
              <definedTerm> fractional-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the fractional part of the number. </para>
              </definition>
              <definedTerm> 'e' </definedTerm>
              <definition>
                <para>A lowercase character 'e', indicating exponential (scientific) notation. </para>
              </definition>
              <definedTerm> exponential-digits</definedTerm>
              <definition>
                <para>A series of digits specifying an exponent. </para>
              </definition>
            </definitionTable>
            <para>Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</para>
            <para>If <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword> or an empty string, the return value is formatted with the general format specifier ("G").</para>
            <para>By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally. If the value of this instance has greater than 15 digits, <codeEntityReference autoUpgrade="true">Overload:System.Double.ToString</codeEntityReference> returns <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference> or <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference> instead of the expected number. If you require more precision, specify <parameterReference>format</parameterReference> with the "G17" format specification, which always returns 17 digits of precision, or "R", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision.</para>
            <para>The return value is formatted with <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> data for the current culture.</para>
          </content>
        </remarks>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>
          <link xlink:href="FB83D6FF-12FD-4837-AD19-16A2515DE030">[&lt;topic://cpConNumericFormatStrings&gt;]</link>
          <codeEntityReference autoUpgrade="true">M:System.Double.Parse(System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>A format specification. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The string representation of the value of this instance as specified by <parameterReference>format</parameterReference> and <parameterReference>provider</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The return value can be <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NaNSymbol</codeEntityReference>, or a string of the form: </para>
            <para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits] </para>
            <para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
            <definitionTable>
              <definedTerm> sign</definedTerm>
              <definition>
                <para>A negative sign or positive sign symbol. </para>
              </definition>
              <definedTerm> integral-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits. </para>
              </definition>
              <definedTerm> '.' </definedTerm>
              <definition>
                <para>A culture-specific decimal point symbol. </para>
              </definition>
              <definedTerm> fractional-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the fractional part of the number. </para>
              </definition>
              <definedTerm> 'e' </definedTerm>
              <definition>
                <para>A lowercase character 'e', indicating exponential (scientific) notation. </para>
              </definition>
              <definedTerm> exponential-digits</definedTerm>
              <definition>
                <para>A series of digits specifying an exponent. </para>
              </definition>
            </definitionTable>
            <para>Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</para>
            <para>If <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword> or an empty string, the return value for this instance is formatted with the general format specifier ("G").</para>
            <para>By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally. If the value of this instance has greater than 15 digits, <codeEntityReference autoUpgrade="true">Overload:System.Double.ToString</codeEntityReference> returns <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference> or <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference> instead of the expected number. If you require more precision, specify <parameterReference>format</parameterReference> with the "G17" format specification, which always returns 17 digits of precision, or "R", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision.</para>
            <para>The <parameterReference>provider</parameterReference> parameter is an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> instance that obtains a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object that supplies culture-specific format information. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword>, the return value is formatted with <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> data for the current culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code sample illustrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Double.ToString</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> and an <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> as parameters: </para>
                <codeReference>Double Example#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>
          <link xlink:href="FB83D6FF-12FD-4837-AD19-16A2515DE030">[&lt;topic://cpConNumericFormatStrings&gt;]</link>
          <codeEntityReference autoUpgrade="true">M:System.Double.Parse(System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Double.TryParse">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>s</parameterReference>
            <content>
              <para>A string containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>result</parameterReference>
            <content>
              <para>When this method returns, contains the double-precision floating-point number equivalent to the <parameterReference>s</parameterReference> parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <parameterReference>s</parameterReference> parameter is <languageKeyword>null</languageKeyword>, is not a number in a valid format, or represents a number less than <codeEntityReference autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference>. This parameter is passed uninitialized. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>s</parameterReference> was converted successfully; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Double.TryParse(System.String,System.Double@)</codeEntityReference> method is like the <codeEntityReference autoUpgrade="false">M:System.Double.Parse(System.String)</codeEntityReference> method, except the <codeEntityReference autoUpgrade="true">M:System.Double.TryParse(System.String,System.Double@)</codeEntityReference> method does not throw an exception if the conversion fails.</para>
            <para>The <parameterReference>s</parameterReference> parameter can contain <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NaNSymbol</codeEntityReference>, or a string of the form: </para>
            <para>[ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws] </para>
            <para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
            <definitionTable>
              <definedTerm>ws</definedTerm>
              <definition>
                <para>A series of white-space characters. </para>
              </definition>
              <definedTerm>sign</definedTerm>
              <definition>
                <para>A negative sign or positive sign symbol. </para>
              </definition>
              <definedTerm>integral-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the integral part of the number. Runs of integral-digits can be partitioned by a group-separator symbol. (For example, in some cultures a comma (,) separates groups of thousands.) Integral-digits can be absent if there are fractional-digits. </para>
              </definition>
              <definedTerm>'.' </definedTerm>
              <definition>
                <para>A culture-specific decimal point symbol. </para>
              </definition>
              <definedTerm>fractional-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the fractional part of the number. </para>
              </definition>
              <definedTerm>'e' </definedTerm>
              <definition>
                <para>An uppercase or lowercase character 'e', indicating exponential (scientific) notation. </para>
              </definition>
              <definedTerm>exponential-digits</definedTerm>
              <definition>
                <para>A series of digits specifying an exponent. </para>
              </definition>
            </definitionTable>
            <para>Some examples of <parameterReference>s</parameterReference> are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</para>
            <para>For more information about numeric formats, see <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Double.TryParse</codeEntityReference> method for several base types, and the <codeEntityReference autoUpgrade="true">Overload:System.DateTime.TryParseExact</codeEntityReference> method.</para>
                <codeReference>T.TryParse#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Double.Parse(System.String)</codeEntityReference>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>
          <codeEntityReference autoUpgrade="true">M:System.Double.ToString</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>s</parameterReference>
            <content>
              <para>A string containing a number to convert. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>style</parameterReference>
            <content>
              <para>A bitwise combination of <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> values that indicates the permitted format of <parameterReference>s</parameterReference>. A typical value to specify is <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.Float</codeEntityReference> combined with <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.AllowThousands</codeEntityReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> that supplies culture-specific formatting information about <parameterReference>s</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>result</parameterReference>
            <content>
              <para>When this method returns, contains a double-precision floating-point number equivalent to the numeric value or symbol contained in <parameterReference>s</parameterReference>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <parameterReference>s</parameterReference> parameter is <languageKeyword>null</languageKeyword>, is not in a format compliant with <parameterReference>style</parameterReference>, represents a number less than <codeEntityReference autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference>, or if <parameterReference>style</parameterReference> is not a valid combination of <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> enumerated constants. This parameter is passed uninitialized. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>s</parameterReference> was converted successfully; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>style</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> value. </para>
              <para>-or-</para>
              <para>
                <parameterReference>style</parameterReference> is the <codeEntityReference autoUpgrade="true">F:System.Globalization.NumberStyles.AllowHexSpecifier</codeEntityReference> value.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)</codeEntityReference> method is like the <codeEntityReference autoUpgrade="false">M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)</codeEntityReference> method, except this method does not throw an exception if the conversion fails. If the conversion succeeds, the return value is <languageKeyword>true</languageKeyword> and the <parameterReference>result</parameterReference> parameter is set to the outcome of the conversion. If the conversion fails, the return value is <languageKeyword>false</languageKeyword> and the <parameterReference>result</parameterReference> parameter is set to zero.</para>
            <para>This version of the <codeEntityReference autoUpgrade="true">M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)</codeEntityReference> method uses the specified number format information. If <parameterReference>provider</parameterReference> is <languageKeyword>null</languageKeyword> or a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> cannot be obtained, the format information for the current culture is used.</para>
            <para>The conversion fails if the <parameterReference>s</parameterReference> parameter is <languageKeyword>null</languageKeyword> or not a numeric value, the <parameterReference>provider</parameterReference> parameter does not yield a <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberFormatInfo</codeEntityReference> object, or the <parameterReference>style</parameterReference> parameter is not a combination of bit flags from the <codeEntityReference autoUpgrade="true">T:System.Globalization.NumberStyles</codeEntityReference> enumeration.</para>
            <para>The <parameterReference>s</parameterReference> parameter can contain <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Globalization.NumberFormatInfo.NaNSymbol</codeEntityReference>, or a string of the form: </para>
            <para>[ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws] </para>
            <para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
            <definitionTable>
              <definedTerm>ws</definedTerm>
              <definition>
                <para>A series of white space characters. </para>
              </definition>
              <definedTerm>sign</definedTerm>
              <definition>
                <para>A negative sign or positive sign symbol. </para>
              </definition>
              <definedTerm>integral-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the integral part of the number. Runs of integral-digits can be partitioned by a group-separator symbol. (For example, in some cultures a comma (,) separates groups of thousands.) Integral-digits can be absent if there are fractional-digits. </para>
              </definition>
              <definedTerm>'.' </definedTerm>
              <definition>
                <para>A culture-specific decimal point symbol. </para>
              </definition>
              <definedTerm>fractional-digits</definedTerm>
              <definition>
                <para>A series of digits specifying the fractional part of the number. </para>
              </definition>
              <definedTerm>'e' </definedTerm>
              <definition>
                <para>An uppercase or lowercase character 'e', indicating exponential (scientific) notation. </para>
              </definition>
              <definedTerm>exponential-digits</definedTerm>
              <definition>
                <para>A series of digits specifying an exponent. </para>
              </definition>
            </definitionTable>
            <para>Some examples of <parameterReference>s</parameterReference> are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</para>
            <para>For more information about numeric formats, see the <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link> topic.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Double.TryParse</codeEntityReference> method for several base types, and the <codeEntityReference autoUpgrade="true">Overload:System.DateTime.TryParseExact</codeEntityReference> method.</para>
                <codeReference>T.TryParse#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <link xlink:href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</link>
          <codeEntityReference autoUpgrade="true">M:System.Double.ToString</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
  </members>
</doc>