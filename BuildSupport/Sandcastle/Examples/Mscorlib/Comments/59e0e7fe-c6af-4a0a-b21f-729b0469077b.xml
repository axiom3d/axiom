<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="59e0e7fe-c6af-4a0a-b21f-729b0469077b" revisionNumber="11">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Attribute">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents the base class for custom attributes.</para>
        </summary>
        <threadSafety>
          <para>This type is safe for multithreaded operations.</para>
        </threadSafety>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> class associates predefined system information or user-defined custom information with a target element. A target element can be an assembly, class, constructor, delegate, enum, event, field, interface, method, portable executable file module, parameter, property, return value, struct, or another attribute.</para>
            <para>Information provided by an attribute is also known as metadata. Metadata can be examined at run time by your application to control how your program processes data, or before run time by external tools to control how your application itself is processed or maintained. For example, the .NET Framework predefines and uses attribute types to control run-time behavior, and some programming languages use attribute types to represent language features not directly supported by the .NET Framework common type system. </para>
            <para>All attribute types derive directly or indirectly from the <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> class. Attributes can be applied to any target element; multiple attributes can be applied to the same target element; and attributes can be inherited by an element derived from a target element. Use the <codeEntityReference autoUpgrade="true">T:System.AttributeTargets</codeEntityReference> class to specify the target element on which the attribute is applied. </para>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> class provides convenient methods to retrieve and test custom attributes. For more information about using attributes, see <link xlink:href="30386922-1E00-4602-9EBF-526B271A8B87">Extending Metadata Using Attributes</link>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the usage of <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
                <codeReference>AnimalAttributes#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.#ctor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> class.</para>
        </summary>
        <remarks>
          <content>
            <para>This constructor is only called by classes that derive from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows the definition of a custom parameter <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> class with its constructor.</para>
                <codeReference>System.Attribute.GetCustomAttribute#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Returns a value that indicates whether this instance is equal to a specified object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>obj</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to compare with this instance or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>obj</parameterReference> equals the type and value of this instance; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines two custom parameter <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> classes, then creates several objects of each class and shows the use of the <codeEntityReference autoUpgrade="true">M:System.Attribute.Equals(System.Object)</codeEntityReference> method to compare them.</para>
                <codeReference>System.Attribute.Equals#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Attribute.GetCustomAttribute">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a custom attribute of a specified type applied to an assembly, module, type member, or method parameter.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a custom attribute applied to an assembly. Parameters specify the assembly and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> class that describes a reusable collection of modules. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the single custom attribute of type <parameterReference>attributeType</parameterReference> that is applied to <parameterReference>element</parameterReference>, or <languageKeyword>null</languageKeyword> if there is no such attribute.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.AmbiguousMatchException</codeEntityReference>
            <content>
              <para>More than one of the requested attributes was found. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Use the <codeEntityReference autoUpgrade="true">M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)</codeEntityReference> method if you expect more than one value to be returned, or <codeEntityReference autoUpgrade="true">T:System.Reflection.AmbiguousMatchException</codeEntityReference> will be thrown.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttribute</codeEntityReference> method taking an <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Retrieves a custom attribute of a specified type applied to an assembly, module, type member, or method parameter.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a custom attribute applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> class that describes a reusable collection of modules. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>This parameter is ignored, and does not affect the operation of this method. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the single custom attribute of type <parameterReference>attributeType</parameterReference> that is applied to <parameterReference>element</parameterReference>, or <languageKeyword>null</languageKeyword> if there is no such attribute.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.AmbiguousMatchException</codeEntityReference>
            <content>
              <para>More than one of the requested attributes was found. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttribute</codeEntityReference> method taking an <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> class that describes a constructor, event, field, method, or property member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the single custom attribute of type <parameterReference>attributeType</parameterReference> that is applied to <parameterReference>element</parameterReference>, or <languageKeyword>null</languageKeyword> if there is no such attribute.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is not a constructor, method, property, event, type, or field. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.AmbiguousMatchException</codeEntityReference>
            <content>
              <para>More than one of the requested attributes was found. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>A match is determined in the same way described in the Return Value section of <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Type.IsAssignableFrom(System.Type)</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttribute</codeEntityReference> method taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> class that describes a constructor, event, field, method, or property member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>If <languageKeyword>true</languageKeyword>, specifies to also search the ancestors of <parameterReference>element</parameterReference> for custom attributes. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the single custom attribute of type <parameterReference>attributeType</parameterReference> that is applied to <parameterReference>element</parameterReference>, or <languageKeyword>null</languageKeyword> if there is no such attribute.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is not a constructor, method, property, event, type, or field. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.AmbiguousMatchException</codeEntityReference>
            <content>
              <para>More than one of the requested attributes was found. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttribute</codeEntityReference> method taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> class that describes a portable executable file. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the single custom attribute of type <parameterReference>attributeType</parameterReference> that is applied to <parameterReference>element</parameterReference>, or <languageKeyword>null</languageKeyword> if there is no such attribute.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.AmbiguousMatchException</codeEntityReference>
            <content>
              <para>More than one of the requested attributes was found. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttribute</codeEntityReference> method taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> class that describes a portable executable file. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>This parameter is ignored, and does not affect the operation of this method. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the single custom attribute of type <parameterReference>attributeType</parameterReference> that is applied to <parameterReference>element</parameterReference>, or <languageKeyword>null</languageKeyword> if there is no such attribute.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.AmbiguousMatchException</codeEntityReference>
            <content>
              <para>More than one of the requested attributes was found. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of the <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttribute</codeEntityReference> method taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> class that describes a parameter of a member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the single custom attribute of type <parameterReference>attributeType</parameterReference> that is applied to <parameterReference>element</parameterReference>, or <languageKeyword>null</languageKeyword> if there is no such attribute.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.AmbiguousMatchException</codeEntityReference>
            <content>
              <para>More than one of the requested attributes was found. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>element</parameterReference> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a custom parameter <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> class and applies the custom attribute to a method in a derived class and the base of the derived class. The example shows the use of the <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttribute</codeEntityReference> method to return the attributes.</para>
                <codeReference>System.Attribute.GetCustomAttribute#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> class that describes a parameter of a member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>If <languageKeyword>true</languageKeyword>, specifies to also search the ancestors of <parameterReference>element</parameterReference> for custom attributes. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A reference to the single custom attribute of type <parameterReference>attributeType</parameterReference> that is applied to <parameterReference>element</parameterReference>, or <languageKeyword>null</languageKeyword> if there is no such attribute.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.Reflection.AmbiguousMatchException</codeEntityReference>
            <content>
              <para>More than one of the requested attributes was found. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>element</parameterReference> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a custom parameter <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> class and applies the custom attribute to a method in a derived class and the base of the derived class. The example shows the use of the <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttribute</codeEntityReference> method to return the attributes.</para>
                <codeReference>System.Attribute.GetCustomAttribute#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Attribute.GetCustomAttributes">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to an assembly, module, type member, or method parameter.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> class that describes a reusable collection of modules. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking an <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Retrieves an array of the custom attributes applied to an assembly, module, type member, or method parameter.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> class that describes a reusable collection of modules. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>This parameter is ignored, and does not affect the operation of this method. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking an <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> class that describes a reusable collection of modules. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes of type <parameterReference>attributeType</parameterReference> applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking an <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> class that describes a reusable collection of modules. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>This parameter is ignored, and does not affect the operation of this method. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes of type <parameterReference>attributeType</parameterReference> applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking an <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> class that describes a constructor, event, field, method, or property member of a class. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is not a constructor, method, property, event, type, or field. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value contains the custom attributes for ancestors of <parameterReference>element</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttribute</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> class that describes a constructor, event, field, method, or property member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>If <languageKeyword>true</languageKeyword>, specifies to also search the ancestors of <parameterReference>element</parameterReference> for custom attributes. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is not a constructor, method, property, event, type, or field. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value contains the custom attributes for ancestors of <parameterReference>element</parameterReference> if <parameterReference>inherit</parameterReference> is <languageKeyword>true</languageKeyword>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> class that describes a constructor, event, field, method, or property member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes of type <parameterReference>type</parameterReference> applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>type</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is not a constructor, method, property, event, type, or field. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value contains the custom attributes for ancestors of <parameterReference>element</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttribute</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> class that describes a constructor, event, field, method, or property member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>If <languageKeyword>true</languageKeyword>, specifies to also search the ancestors of <parameterReference>element</parameterReference> for custom attributes. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes of type <parameterReference>type</parameterReference> applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>type</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is not a constructor, method, property, event, type, or field. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value contains the custom attributes for ancestors of <parameterReference>element</parameterReference> if <parameterReference>inherit</parameterReference> is <languageKeyword>true</languageKeyword>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> class that describes a portable executable file. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an ignored search option.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> class that describes a portable executable file. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>This parameter is ignored, and does not affect the operation of this method. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value contains the custom attributes for ancestors of <parameterReference>element</parameterReference> if <parameterReference>inherit</parameterReference> is <languageKeyword>true</languageKeyword>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> class that describes a portable executable file. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes of type <parameterReference>attributeType</parameterReference> applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> class that describes a portable executable file. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>This parameter is ignored, and does not affect the operation of this method. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes of type <parameterReference>attributeType</parameterReference> applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The return value contains the custom attributes for ancestors of <parameterReference>element</parameterReference> if <parameterReference>inherit</parameterReference> is <languageKeyword>true</languageKeyword>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> class that describes a parameter of a member of a class. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>element</parameterReference> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#5</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> class that describes a parameter of a member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>If <languageKeyword>true</languageKeyword>, specifies to also search the ancestors of <parameterReference>element</parameterReference> for custom attributes. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>element</parameterReference> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#5</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> class that describes a parameter of a member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes of type <parameterReference>attributeType</parameterReference> applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>element</parameterReference> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#5</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> class that describes a parameter of a member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>If <languageKeyword>true</languageKeyword>, specifies to also search the ancestors of <parameterReference>element</parameterReference> for custom attributes. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> array that contains the custom attributes of type <parameterReference>attributeType</parameterReference> applied to <parameterReference>element</parameterReference>, or an empty array if no such custom attributes exist.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>element</parameterReference> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.GetCustomAttributes</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> as a parameter. </para>
                <codeReference>GetCustomAttributes#5</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the hash code for this instance.</para>
        </summary>
        <returnValue>
          <para>A 32-bit signed integer hash code.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">M:System.Attribute.GetHashCode</codeEntityReference> in the context of <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
                <codeReference>GetHashCode#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.IsDefaultAttribute">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>When overridden in a derived class, indicates whether the value of this instance is the default value for the derived class.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if this instance is the default attribute for the class; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The default implementation of this class returns <languageKeyword>false</languageKeyword>, and must be implemented in the derived class to be useful to that class.</para>
            <para>The implementation of this method in a derived class compares the value of this instance to a standard default value, then returns a Boolean value that indicates whether the value of this instance is equal to the standard value. The standard value is typically coded as a constant in the implementation, or stored programmatically in a field used by the implementation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">M:System.Attribute.IsDefaultAttribute</codeEntityReference>. </para>
                <codeReference>IsDefaultAttribute#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Attribute.IsDefined">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether any custom attributes of a specified type are applied to an assembly, module, type member, or method parameter.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> class that describes a reusable collection of modules. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if a custom attribute of type <parameterReference>attributeType</parameterReference> is applied to <parameterReference>element</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.IsDefined</codeEntityReference>, taking an <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Determines whether any custom attributes of a specified type are applied to an assembly, module, type member, or method parameter.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> class that describes a reusable collection of modules. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>This parameter is ignored, and does not affect the operation of this method. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if a custom attribute of type <parameterReference>attributeType</parameterReference> is applied to <parameterReference>element</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.IsDefined</codeEntityReference>, taking an <codeEntityReference autoUpgrade="true">T:System.Reflection.Assembly</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> class that describes a constructor, event, field, method, type, or property member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if a custom attribute of type <parameterReference>attributeType</parameterReference> is applied to <parameterReference>element</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is not a constructor, method, property, event, type, or field. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The ancestors of <parameterReference>element</parameterReference> are searched for custom attributes.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.IsDefined</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> class that describes a constructor, event, field, method, type, or property member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>If <languageKeyword>true</languageKeyword>, specifies to also search the ancestors of <parameterReference>element</parameterReference> for custom attributes. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if a custom attribute of type <parameterReference>attributeType</parameterReference> is applied to <parameterReference>element</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is not a constructor, method, property, event, type, or field. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.IsDefined</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.MemberInfo</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> class that describes a portable executable file. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if a custom attribute of type <parameterReference>attributeType</parameterReference> is applied to <parameterReference>element</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The ancestors of <parameterReference>element</parameterReference> are not searched for custom attributes.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.IsDefined</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option. </para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> class that describes a portable executable file. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>This parameter is ignored, and does not affect the operation of this method. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if a custom attribute of type <parameterReference>attributeType</parameterReference> is applied to <parameterReference>element</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method ignores the <parameterReference>inherit</parameterReference> parameter and does not search the ancestors of <parameterReference>element</parameterReference> for custom attributes.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.IsDefined</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.Module</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> class that describes a parameter of a member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if a custom attribute of type <parameterReference>attributeType</parameterReference> is applied to <parameterReference>element</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The ancestors of <parameterReference>element</parameterReference> are searched for custom attributes.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.IsDefined</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#5</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>element</parameterReference>
            <content>
              <para>An object derived from the <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> class that describes a parameter of a member of a class. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>attributeType</parameterReference>
            <content>
              <para>The type, or a base type, of the custom attribute to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>inherit</parameterReference>
            <content>
              <para>If <languageKeyword>true</languageKeyword>, specifies to also search the ancestors of <parameterReference>element</parameterReference> for custom attributes. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if a custom attribute of type <parameterReference>attributeType</parameterReference> is applied to <parameterReference>element</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> or <parameterReference>attributeType</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>attributeType</parameterReference> is not derived from <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ExecutionEngineException</codeEntityReference>
            <content>
              <para>
                <parameterReference>element</parameterReference> is not a method, constructor, or type. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">Overload:System.Attribute.IsDefined</codeEntityReference>, taking a <codeEntityReference autoUpgrade="true">T:System.Reflection.ParameterInfo</codeEntityReference> as a parameter.</para>
                <codeReference>IsDefined#5</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>obj</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to compare with this instance of <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if this instance equals <parameterReference>obj</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method determines if one <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> equals another. Its default implementation is the same as <codeEntityReference autoUpgrade="true">M:System.Attribute.Equals(System.Object)</codeEntityReference>, which performs a value and reference comparison. Override this method to implement support for attribute values, such as flags or bit fields, that consist of components that are meaningful in themselves.</para>
            <para>For example, consider an attribute whose value is a binary field divided into a bit field of flags. Two instances of this attribute have one flag in set in common while all the other flags differ. The <codeEntityReference autoUpgrade="true">M:System.Attribute.Equals(System.Object)</codeEntityReference> method cannot determine that the two instances have the same flag set, but the <codeEntityReference autoUpgrade="true">M:System.Attribute.Match(System.Object)</codeEntityReference> method can.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example illustrates the use of <codeEntityReference autoUpgrade="true">M:System.Attribute.Match(System.Object)</codeEntityReference> in the context of <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>. </para>
                <codeReference>Match#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Attribute.TypeId">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>When implemented in a derived class, gets a unique identifier for this <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that is a unique identifier for the attribute.</para>
        </returnValue>
        <remarks>
          <content>
            <para>As implemented, this identifier is merely the <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> of the attribute. However, it is intended that the unique identifier be used to identify two attributes of the same type.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example implements the <codeEntityReference autoUpgrade="true">P:System.Attribute.TypeId</codeEntityReference> property in a custom parameter <codeEntityReference autoUpgrade="true">T:System.Attribute</codeEntityReference> class and shows its use.</para>
                <codeReference>System.Attribute.TypeId#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Maps a set of names to a corresponding set of dispatch identifiers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>riid</parameterReference>
            <content>
              <para>Reserved for future use. Must be IID_NULL.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>rgszNames</parameterReference>
            <content>
              <para>Passed-in array of names to be mapped.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>cNames</parameterReference>
            <content>
              <para>Count of the names to be mapped.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>lcid</parameterReference>
            <content>
              <para>The locale context in which to interpret the names.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>rgDispId</parameterReference>
            <content>
              <para>Caller-allocated array that receives the IDs corresponding to the names.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotImplementedException</codeEntityReference>
            <content>
              <para>Late-bound access using the COM <unmanagedCodeEntityReference>IDispatch</unmanagedCodeEntityReference> interface is not supported.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <unmanagedCodeEntityReference>IDispatch::GetIDsOfNames</unmanagedCodeEntityReference>, see the MSDN Library.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves the type information for an object, which can be used to get the type information for an interface.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>iTInfo</parameterReference>
            <content>
              <para>The type information to return.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>lcid</parameterReference>
            <content>
              <para>The locale identifier for the type information.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ppTInfo</parameterReference>
            <content>
              <para>Receives a pointer to the requested type information object.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotImplementedException</codeEntityReference>
            <content>
              <para>Late-bound access using the COM <unmanagedCodeEntityReference>IDispatch</unmanagedCodeEntityReference> interface is not supported.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <unmanagedCodeEntityReference>IDispatch::GetTypeInfo</unmanagedCodeEntityReference>, see the MSDN Library.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32@)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>pcTInfo</parameterReference>
            <content>
              <para>Points to a location that receives the number of type information interfaces provided by the object.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotImplementedException</codeEntityReference>
            <content>
              <para>Late-bound access using the COM <unmanagedCodeEntityReference>IDispatch</unmanagedCodeEntityReference> interface is not supported.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <unmanagedCodeEntityReference>IDispatch::GetTypeInfoCount</unmanagedCodeEntityReference>, see the MSDN Library.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Provides access to properties and methods exposed by an object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>dispIdMember</parameterReference>
            <content>
              <para>Identifies the member.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>riid</parameterReference>
            <content>
              <para>Reserved for future use. Must be IID_NULL.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>lcid</parameterReference>
            <content>
              <para>The locale context in which to interpret arguments.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>wFlags</parameterReference>
            <content>
              <para>Flags describing the context of the call.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>pDispParams</parameterReference>
            <content>
              <para>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>pVarResult</parameterReference>
            <content>
              <para>Pointer to the location where the result is to be stored.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>pExcepInfo</parameterReference>
            <content>
              <para>Pointer to a structure that contains exception information.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>puArgErr</parameterReference>
            <content>
              <para>The index of the first argument that has an error.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotImplementedException</codeEntityReference>
            <content>
              <para>Late-bound access using the COM <unmanagedCodeEntityReference>IDispatch</unmanagedCodeEntityReference> interface is not supported.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <unmanagedCodeEntityReference>IDispatch::Invoke</unmanagedCodeEntityReference>, see the MSDN Library.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
  </members>
</doc>