<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="b3b899c3-9857-4db1-9340-3f73f7109778" revisionNumber="14">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Version">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents the version number for a common language runtime assembly. This class cannot be inherited.</para>
        </summary>
        <remarks>
          <content>
            <para>Version numbers consist of two to four components: major, minor, build, and revision. The major and minor components are required; the build and revision components are optional, but the build component is required if the revision component is defined. All defined components must be integers greater than or equal to 0. The format of the version number is as follows. Optional components are shown in square brackets ('[' and ']'): </para>
            <para>major.minor[.build[.revision]] </para>
            <para>The components are used by convention as follows: </para>
            <list class="bullet">
              <listItem>
                <para>
                  <parameterReference>Major</parameterReference> : Assemblies with the same name but different major versions are not interchangeable. This would be appropriate, for example, for a major rewrite of a product where backward compatibility cannot be assumed.</para>
              </listItem>
              <listItem>
                <para>
                  <parameterReference>Minor</parameterReference> : If the name and major number on two assemblies are the same, but the minor number is different, this indicates significant enhancement with the intention of backward compatibility. This would be appropriate, for example, on a point release of a product or a fully backward compatible new version of a product.</para>
              </listItem>
              <listItem>
                <para>
                  <parameterReference>Build</parameterReference> : A difference in build number represents a recompilation of the same source. This would be appropriate because of processor, platform, or compiler changes.</para>
              </listItem>
              <listItem>
                <para>
                  <parameterReference>Revision</parameterReference> : Assemblies with the same name, major, and minor version numbers but different revisions are intended to be fully interchangeable. This would be appropriate to fix a security hole in a previously released assembly.</para>
              </listItem>
            </list>
            <para>Subsequent versions of an assembly that differ only by build or revision numbers are considered to be Quick Fix Engineering (QFE) updates of the prior version.</para>
            <para>Starting with .NET Framework 2.0, the <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference> and <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference> properties enable you to identify a temporary version of your application that, for example, corrects a problem until you can release a permanent solution.  Furthermore, the WindowsÂ NT operating system uses the <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference> property to encode the service pack number.</para>
            <para>This class implements the <codeEntityReference autoUpgrade="true">T:System.ICloneable</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.IEquatable`1</codeEntityReference> interfaces.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="Overload:System.Version.#ctor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> class with the specified major, minor, build, and revision numbers.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Version.#ctor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> class.</para>
        </summary>
      <overload>
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> class with the specified major, minor, build, and revision numbers.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> class using the specified major and minor values.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>major</parameterReference>
            <content>
              <para>The major version number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>minor</parameterReference>
            <content>
              <para>The minor version number. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>major</parameterReference> or <parameterReference>minor</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> class using the specified major, minor, and build values.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>major</parameterReference>
            <content>
              <para>The major version number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>minor</parameterReference>
            <content>
              <para>The minor version number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>build</parameterReference>
            <content>
              <para>The build number. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>major</parameterReference>, <parameterReference>minor</parameterReference>, or <parameterReference>build</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> class with the specified major, minor, build, and revision numbers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>major</parameterReference>
            <content>
              <para>The major version number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>minor</parameterReference>
            <content>
              <para>The minor version number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>build</parameterReference>
            <content>
              <para>The build number. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>revision</parameterReference>
            <content>
              <para>The revision number. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>major</parameterReference>, <parameterReference>minor</parameterReference>, <parameterReference>build</parameterReference>, or <parameterReference>revision</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</codeEntityReference> constructor, and <codeEntityReference autoUpgrade="true">P:System.Version.Major</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Minor</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Build</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Revision</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference> properties.</para>
                <codeReference>system.version.revision#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> class using the specified string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>version</parameterReference>
            <content>
              <para>A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.'). </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>version</parameterReference> has fewer than two components or more than four components. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>version</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>A major, minor, build, or revision component is less than zero. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>At least one component of <parameterReference>version</parameterReference> does not parse to an integer. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>At least one component of <parameterReference>version</parameterReference> represents a number greater than <codeEntityReference autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>version</parameterReference> parameter can contain only the components major, minor, build, and revision, in that order, and all separated by periods. There must be at least two components, and at most four. The first two components are assumed to be major and minor. The value of unspecified components is undefined.</para>
            <para>The format of the version number is as follows. Optional components are shown in square brackets ('[' and ']'): </para>
            <para>major.minor[.build[.revision]] </para>
            <para>All defined components must be integers greater than or equal to 0. For example, if the major number is 6, the minor number is 2, the build number is 1, and the revision number is 3, then <parameterReference>version</parameterReference> should be "6.2.1.3".</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.Version.Clone">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a new <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object whose value is the same as the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </summary>
        <returnValue>
          <para>A new <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> whose values are a copy of the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </returnValue>
        <remarks>
          <content>
            <para>If the type of the return value is important, cast the <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> instance that is returned by this method to a <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="Overload:System.Version.CompareTo">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object to a specified object or <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> and returns an indication of their relative values.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object to a specified object and returns an indication of their relative values.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>version</parameterReference>
            <content>
              <para>An object to compare, or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Return Value </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>The current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is a version before <parameterReference>version</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>The current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is the same version as <parameterReference>version</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>The current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is a version subsequent to <parameterReference>version</parameterReference>.</para>
                <para>-or- </para>
                <para>
                  <parameterReference>version</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>version</parameterReference> is not of type <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> and is not <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The components of <languageKeyword>Version</languageKeyword> in decreasing order of importance are: major, minor, build, and revision. An unknown component is assumed to be older than any known component.</para>
            <para>For example: </para>
            <list class="bullet">
              <listItem>
                <para>version 1.1 is older than version 1.1.0 </para>
              </listItem>
              <listItem>
                <para>version 1.1 is older than version 1.1.1 </para>
              </listItem>
              <listItem>
                <para>version 1.1 is older than version 1.1.2.3 </para>
              </listItem>
              <listItem>
                <para>version 1.1.2 is older than version 1.1.2.4 </para>
              </listItem>
              <listItem>
                <para>version 1.2.5 is newer than version 1.2.3.4 </para>
              </listItem>
            </list>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Version.CompareTo(System.Version)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Version.Equals</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Compares the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object to a specified object or <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> and returns an indication of their relative values.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object to a specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object and returns an indication of their relative values.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object to compare to the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Return Value </para>
                </entry>
                <entry>
                  <para>Description </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>The current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is a version before <parameterReference>value</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>The current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is the same version as <parameterReference>value</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>The current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is a version subsequent to <parameterReference>value</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <remarks>
          <content>
            <para>This method implements part of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.IComparable`1</codeEntityReference> interface, and performs slightly better than the <codeEntityReference autoUpgrade="true">M:System.Version.CompareTo(System.Object)</codeEntityReference> method because it does not have to box the <parameterReference>value</parameterReference> parameter.</para>
            <para>The components of <languageKeyword>Version</languageKeyword> in decreasing order of importance are: major, minor, build, and revision. An unknown component is assumed to be older than any known component. For example: </para>
            <list class="bullet">
              <listItem>
                <para>Version 1.1 is older than version 1.1.0. </para>
              </listItem>
              <listItem>
                <para>Version 1.1 is older than version 1.1.1. </para>
              </listItem>
              <listItem>
                <para>Version 1.1 is older than version 1.1.2.3. </para>
              </listItem>
              <listItem>
                <para>Version 1.1.2 is older than version 1.1.2.4. </para>
              </listItem>
              <listItem>
                <para>Version 1.2.5 is newer than version 1.2.3.4. </para>
              </listItem>
            </list>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates generic and nongeneric versions of the <languageKeyword>CompareTo</languageKeyword> method for several value and reference types.</para>
                <codeReference>T.CompareTo#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Version.Equals">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether two <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object represent the same value.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is equal to a specified object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>obj</parameterReference>
            <content>
              <para>An object to compare with the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object, or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object and <parameterReference>obj</parameterReference> are both <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> objects, and every component of the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object matches the corresponding component of <parameterReference>obj</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Version.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns a value indicating whether two <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object represent the same value.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object and a specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object represent the same value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>obj</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object to compare to the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if every component of the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object matches the corresponding component of the <parameterReference>obj</parameterReference> parameter; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method implements part of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.IComparable`1</codeEntityReference> interface, and performs slightly better than the <codeEntityReference autoUpgrade="true">M:System.Version.Equals(System.Object)</codeEntityReference> method because it does not have to box the <parameterReference>obj</parameterReference> parameter.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Version.Equals(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Version.CompareTo</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Version.GetHashCode">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a hash code for the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </summary>
        <returnValue>
          <para>A 32-bit signed integer hash code.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</codeEntityReference> constructor, and <codeEntityReference autoUpgrade="true">P:System.Version.Major</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Minor</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Build</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Revision</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference> properties.</para>
                <codeReference>system.version.revision#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <equivalentCodeEntity>
          <codeEntityReference>M:System.Version.Equals(System.Object)</codeEntityReference>
          <content>
          </content>
        </equivalentCodeEntity>
        <summary>
          <para>Determines whether two specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> objects are equal.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>v1</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>v2</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>v1</parameterReference> equals <parameterReference>v2</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Version.Equals(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Version.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <equivalentCodeEntity>
          <codeEntityReference>M:System.Version.CompareTo(System.Object)</codeEntityReference>
          <content>
          </content>
        </equivalentCodeEntity>
        <summary>
          <para>Determines whether the first specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is greater than the second specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>v1</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>v2</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>v1</parameterReference> is greater than <parameterReference>v2</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Version.Equals(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Version.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <equivalentCodeEntity>
          <codeEntityReference>M:System.Version.CompareTo(System.Object)</codeEntityReference>
          <content>
          </content>
        </equivalentCodeEntity>
        <summary>
          <para>Determines whether the first specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is greater than or equal to the second specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>v1</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>v2</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>v1</parameterReference> is greater than or equal to <parameterReference>v2</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Version.Equals(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Version.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <equivalentCodeEntity>
          <codeEntityReference>M:System.Version.Equals(System.Object)</codeEntityReference>
          <content>
          </content>
        </equivalentCodeEntity>
        <summary>
          <para>Determines whether two specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> objects are not equal.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>v1</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>v2</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>v1</parameterReference> does not equal <parameterReference>v2</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Version.Equals(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Version.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <equivalentCodeEntity>
          <codeEntityReference>M:System.Version.CompareTo(System.Object)</codeEntityReference>
          <content>
          </content>
        </equivalentCodeEntity>
        <summary>
          <para>Determines whether the first specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is less than the second specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>v1</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>v2</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>v1</parameterReference> is less than <parameterReference>v2</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>v1</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Version.Equals(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Version.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <equivalentCodeEntity>
          <codeEntityReference>M:System.Version.CompareTo(System.Object)</codeEntityReference>
          <content>
          </content>
        </equivalentCodeEntity>
        <summary>
          <para>Determines whether the first specified <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object is less than or equal to the second <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>v1</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>v2</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>v1</parameterReference> is less than or equal to <parameterReference>v2</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>v1</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Version.Equals(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Version.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Version.ToString">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Version.ToString">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of the values of the major, minor, build, and revision components of the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined: </para>
          <para>major.minor[.build[.revision]] </para>
          <para>For example, if you create a <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object using the constructor <codeInline>Version(1,1)</codeInline>, the returned string is "1.1". If you create a <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object using the constructor <codeInline>Version(1,3,4,2)</codeInline>, the returned string is "1.3.4.2".</para>
        </returnValue>
      <overload>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object to its equivalent <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation. A specified count indicates the number of components to return.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>fieldCount</parameterReference>
            <content>
              <para>The number of components to return. The <parameterReference>fieldCount</parameterReference> ranges from 0 to 4. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of the values of the major, minor, build, and revision components of the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object, each separated by a period character ('.'). The <parameterReference>fieldCount</parameterReference> parameter determines how many components are returned.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>fieldCount </para>
                </entry>
                <entry>
                  <para>Return Value </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>0 </para>
              </entry>
              <entry>
                <para>An empty string (""). </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1 </para>
              </entry>
              <entry>
                <para>major </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>2 </para>
              </entry>
              <entry>
                <para>major.minor </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>3 </para>
              </entry>
              <entry>
                <para>major.minor.build </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>4 </para>
              </entry>
              <entry>
                <para>major.minor.build.revision </para>
              </entry>
            </row>
          </table>
          <para>For example, if you create <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object using the constructor <codeInline>Version(1,3,5)</codeInline>, <codeInline>ToString(2)</codeInline> returns "1.3" and <codeInline>ToString(4)</codeInline> throws an exception.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>fieldCount</parameterReference> is less than 0, or more than 4.</para>
              <para>-or- </para>
              <para>
                <parameterReference>fieldCount</parameterReference> is more than the number of components defined in the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="P:System.Version.Build">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value of the build component of the version number for the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </summary>
        <returnValue>
          <para>The build number, or -1 if the build number is undefined.</para>
        </returnValue>
        <remarks>
          <content>
            <para>For example, if the version number is 6.2.1.3, the build number is 1. If the version number is 6.2, the build number is undefined.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</codeEntityReference> constructor, and <codeEntityReference autoUpgrade="true">P:System.Version.Major</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Minor</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Build</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Revision</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference> properties.</para>
                <codeReference>system.version.revision#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Version.Major">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value of the major component of the version number for the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </summary>
        <returnValue>
          <para>The major version number.</para>
        </returnValue>
        <remarks>
          <content>
            <para>For example, if the version number is 6.2, the major version is 6.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="P:System.Version.MajorRevision">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the high 16 bits of the revision number.</para>
        </summary>
        <returnValue>
          <para>A 16-bit signed integer.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Suppose you release an interim version of your application to temporarily correct a problem until you can release a permanent solution. The temporary version does not warrant a new revision number, but it does need to be identified as a different version. In this case, encode the identification information in the high and low 16-bit portions of the 32-bit revision number. Use the <codeEntityReference autoUpgrade="true">P:System.Version.Revision</codeEntityReference> property to obtain the entire revision number, use the <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference> property to obtain the high 16 bits, and use the <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference> property to obtain the low 16 bits.</para>
            <para>Starting in the .NET Framework version 2.0, the WindowsÂ NT operating system uses the <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference> property to encode the service pack number. </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</codeEntityReference> constructor, and the <codeEntityReference autoUpgrade="true">P:System.Version.Major</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Minor</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Build</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Revision</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference> properties.</para>
                <codeReference>system.version.revision#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Version.Minor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value of the minor component of the version number for the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </summary>
        <returnValue>
          <para>The minor version number.</para>
        </returnValue>
        <remarks>
          <content>
            <para>For example, if the version number is 6.2, the minor version is 2.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</codeEntityReference> constructor, and <codeEntityReference autoUpgrade="true">P:System.Version.Major</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Minor</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Build</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Revision</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference> properties.</para>
                <codeReference>system.version.revision#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="P:System.Version.MinorRevision">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the low 16 bits of the revision number.</para>
        </summary>
        <returnValue>
          <para>A 16-bit signed integer.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Suppose you release an interim version of your application to temporarily correct a problem until you can release a permanent solution. The temporary version does not warrant a new revision number, but it does need to be identified as a different version. In this case, encode the identification information in the high and low 16-bit portions of the 32-bit revision number. Use the <codeEntityReference autoUpgrade="true">P:System.Version.Revision</codeEntityReference> property to obtain the entire revision number, use the <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference> property to obtain the high 16 bits, and use the <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference> property to obtain the low 16 bits.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</codeEntityReference> constructor, and the <codeEntityReference autoUpgrade="true">P:System.Version.Major</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Minor</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Build</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Revision</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference> properties.</para>
                <codeReference>system.version.revision#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Version.Revision">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value of the revision component of the version number for the current <codeEntityReference autoUpgrade="true">T:System.Version</codeEntityReference> object.</para>
        </summary>
        <returnValue>
          <para>The revision number, or -1 if the revision number is undefined.</para>
        </returnValue>
        <remarks>
          <content>
            <para>For example, if the version number is 6.2.1.3, the revision number is 3. If the version number is 6.2, the revision number is undefined.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</codeEntityReference> constructor, and <codeEntityReference autoUpgrade="true">P:System.Version.Major</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Minor</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Build</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.Revision</codeEntityReference>, <codeEntityReference autoUpgrade="true">P:System.Version.MajorRevision</codeEntityReference>, and <codeEntityReference autoUpgrade="true">P:System.Version.MinorRevision</codeEntityReference> properties.</para>
                <codeReference>system.version.revision#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
  </members>
</doc>