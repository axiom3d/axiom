<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="eae90abe-d38f-4836-9105-770aa9b787a3" revisionNumber="41">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Array">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.</para>
        </summary>
        <threadSafety>
          <para>Public static (<languageKeyword>Shared</languageKeyword> in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.</para>
          <para>This implementation does not provide a synchronized (thread safe) wrapper for an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>; however, .NET Framework classes based on <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> provide their own synchronized version of the collection using the <codeEntityReference autoUpgrade="true">P:System.Array.SyncRoot</codeEntityReference> property.</para>
          <para>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </threadSafety>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> class is the base class for language implementations that support arrays. However, only the system and compilers can derive explicitly from the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> class. Users should employ the array constructs provided by the language.</para>
            <para>An element is a value in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The length of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is the total number of elements it can contain. The rank of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is the number of dimensions in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The lower bound of a dimension of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is the starting index of that dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>; a multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> can have different bounds for each dimension.</para>
            <alert class="important">
              <para>In the .NET Framework version 2.0, the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> class implements the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.Generic.IList`1</codeEntityReference>, <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.Generic.ICollection`1</codeEntityReference>, and <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.Generic.IEnumerable`1</codeEntityReference> generic interfaces. The implementations are provided to arrays at run time, and therefore are not visible to the documentation build tools. As a result, the generic interfaces do not appear in the declaration syntax for the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> class, and there are no reference topics for interface members that are accessible only by casting an array to the generic interface type (explicit interface implementations). The key thing to be aware of when you cast an array to one of these interfaces is that members which add, insert, or remove elements throw <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>. </para>
            </alert>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> objects provide information about array type declarations. <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects with the same array type share the same <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> object.</para>
            <para>
              <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Type.IsArray</codeEntityReference> and <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Type.GetElementType</codeEntityReference> might not return the expected results with <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> because if an array is cast to the type <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>, the result is an object, not an array. That is, <codeInline>typeof(System.Array).IsArray</codeInline> returns <languageKeyword>false</languageKeyword>, and <codeInline>typeof(System.Array).GetElementType</codeInline> returns <languageKeyword>null</languageKeyword>.</para>
            <para>Unlike most classes, <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> provides the <codeEntityReference autoUpgrade="true">Overload:System.Array.CreateInstance</codeEntityReference> method, instead of public constructors, to allow for late bound access.</para>
            <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Array.Copy(System.Array,System.Array,System.Int32)</codeEntityReference> method copies elements not only between arrays of the same type but also between standard arrays of different types; it handles type casting automatically.</para>
            <para>Some methods, such as <codeEntityReference autoUpgrade="true">M:System.Array.CreateInstance(System.Type,System.Int32)</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.Array.Copy(System.Array,System.Array,System.Int32)</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.Array.CopyTo(System.Array,System.Int32)</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Array.GetValue</codeEntityReference>, and <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>, provide overloads that accept 64-bit integers as parameters to accommodate large capacity arrays. <codeEntityReference autoUpgrade="true">P:System.Array.LongLength</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetLongLength(System.Int32)</codeEntityReference> return 64-bit integers indicating the length of the array.</para>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is not guaranteed to be sorted.  You must sort the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> prior to performing operations (such as <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>) that require the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to be sorted.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Array.Copy(System.Array,System.Array,System.Int32)</codeEntityReference> copies elements between an array of type integer and an array of type <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>.</para>
                <codeReference>Classic Array Example#1</codeReference>
                <para>The following code example creates and initializes an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> and displays its properties and its elements.</para>
                <codeReference>Classic Array Example#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a value indicating whether the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a fixed size.</para>
        </summary>
        <returnValue>
          <para>This property is always <languageKeyword>true</languageKeyword> for all arrays.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> implements the <codeEntityReference autoUpgrade="true">P:System.Array.IsFixedSize</codeEntityReference> property because it is required by the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.IList</codeEntityReference> interface.</para>
            <para>An array with a fixed size does not allow the addition or removal of elements after the array is created, but it allows the modification of existing elements.</para>
            <para>Retrieving the value of this property is an O(1) operation.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.IList</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.Generic.IList`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a value indicating whether the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is read-only.</para>
        </summary>
        <returnValue>
          <para>This property is always <languageKeyword>false</languageKeyword> for all arrays.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> implements the <codeEntityReference autoUpgrade="true">P:System.Array.IsReadOnly</codeEntityReference> property because it is required by the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.IList</codeEntityReference> interface.</para>
            <para>If you require a read-only collection, use a <codeEntityReference autoUpgrade="true">N:System.Collections</codeEntityReference> class that implements the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.IList</codeEntityReference> interface.</para>
            <para>An array that is read-only does not allow the addition, removal, or modification of elements after the array is created.</para>
            <para>Retrieving the value of this property is an O(1) operation.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.IList</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">N:System.Collections</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.Generic.IList`1</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">N:System.Collections.Generic</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a value indicating whether access to the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is synchronized (thread safe).</para>
        </summary>
        <returnValue>
          <para>This property is always <languageKeyword>false</languageKeyword> for all arrays.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> implements the <codeEntityReference autoUpgrade="true">P:System.Array.IsSynchronized</codeEntityReference> property because it is required by the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.ICollection</codeEntityReference> interface.</para>
            <para>.NET Framework classes based on <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> provide their own synchronized version of the collection using the <codeEntityReference autoUpgrade="true">P:System.Array.SyncRoot</codeEntityReference> property.</para>
            <para>Classes that use arrays can also implement their own synchronization using the <codeEntityReference autoUpgrade="true">P:System.Array.SyncRoot</codeEntityReference> property. The synchronizing code must perform operations on the <languageKeyword>SyncRoot</languageKeyword> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection. Note that some implementations of <codeEntityReference autoUpgrade="true">P:System.Array.SyncRoot</codeEntityReference> might return the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> itself.</para>
            <para>Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
            <para>Retrieving the value of this property is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to lock a collection during the entire enumeration by using the <codeEntityReference autoUpgrade="true">P:System.Array.SyncRoot</codeEntityReference>. </para>
                <conditionalSection>
                  <conditions>
                    <programmingLanguage>vb#</programmingLanguage>
                    <programmingLanguage>c#</programmingLanguage>
                  </conditions>
                  <conditionalContent>
                    <code language="c#">Array myCollection = new int[];
  lock(myCollection.SyncRoot) {
  foreach (Object item in myCollection) {
  // Insert your code here.
  }
 }
Dim myCollection As New Int[]
 Dim item As Object
 SyncLock myCollection.SyncRoot
  For Each item In myCollection
  ' Insert your code here.
  Next item
 End SyncLock</code>
                  </conditionalContent>
                </conditionalSection>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Array.SyncRoot</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.ICollection</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Array.Length">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a 32-bit integer that represents the total number of elements in all the dimensions of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>A 32-bit integer that represents the total number of elements in all the dimensions of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Retrieving the value of this property is an O(1) operation.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLength(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Array.LongLength</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.ICollection.Count</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Array.Rank</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Array.LongLength">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a 64-bit integer that represents the total number of elements in all the dimensions of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>A 64-bit integer that represents the total number of elements in all the dimensions of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Retrieving the value of this property is an O(1) operation.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLongLength(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.ICollection.Count</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Array.Rank</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Array.Rank">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the rank (number of dimensions) of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>The rank (number of dimensions) of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>For example, the C# array <codeInline>int[,,] x = new int[1,1,1];</codeInline> (<codeInline>Dim x(0,0,0) As Integer</codeInline> in Visual Basic) has a rank of 3.</para>
            <para>Retrieving the value of this property is an O(1) operation.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLength(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Array.LongLength</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLongLength(System.Int32)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Array.SyncRoot">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets an object that can be used to synchronize access to the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>An object that can be used to synchronize access to the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This property implements the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.ICollection</codeEntityReference> interface.</para>
            <para>.NET Framework classes based on <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> provide their own synchronized version of the collection using the <codeEntityReference autoUpgrade="true">P:System.Array.SyncRoot</codeEntityReference> property.</para>
            <para>Classes that use arrays can also implement their own synchronization using the <codeEntityReference autoUpgrade="true">P:System.Array.SyncRoot</codeEntityReference> property. The synchronizing code must perform operations on the <languageKeyword>SyncRoot</languageKeyword> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection. Note that some implementations of <codeEntityReference autoUpgrade="true">P:System.Array.SyncRoot</codeEntityReference> might return the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> itself.</para>
            <para>Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
            <para>Retrieving the value of this property is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to lock a collection during the entire enumeration by using the <codeEntityReference autoUpgrade="true">P:System.Array.SyncRoot</codeEntityReference>.</para>
                <codeReference>System.Array.SyncRoot#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Array.IsSynchronized</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.AsReadOnly``1(``0[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a read-only wrapper for the specified array.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based array to wrap in a read-only <codeEntityReference autoUpgrade="true">T:System.Collections.ObjectModel.ReadOnlyCollection`1</codeEntityReference>  wrapper. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A read-only <codeEntityReference autoUpgrade="true">T:System.Collections.ObjectModel.ReadOnlyCollection`1</codeEntityReference> wrapper for the specified array.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>To prevent any modifications to the array, expose the array only through this wrapper.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example wraps an array in a read-only <codeEntityReference autoUpgrade="true">T:System.Collections.ObjectModel.ReadOnlyCollection`1</codeEntityReference>.</para>
                <codeReference>System.Array.AsReadOnly#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Array.BinarySearch">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches a one-dimensional sorted <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> for a value, using a binary search algorithm.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches an entire one-dimensional sorted <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> for a specific element, using the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface implemented by each element of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> and by the specified object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The sorted one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the specified <parameterReference>value</parameterReference> in the specified <parameterReference>array</parameterReference>, if <parameterReference>value</parameterReference> is found. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is less than one or more elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of the index of the first element that is larger than <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is greater than any of the elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of (the index of the last element plus 1).</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is of a type that is not compatible with the elements of <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface, and the search encounters an element that does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>array</parameterReference> must be sorted before calling this method.</para>
            <para>If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~) to the negative result (in Visual Basic, <languageKeyword>Xor</languageKeyword> the negative result with -1) to produce an index. If this index is greater than or equal to the size of the array, there are no elements larger than <parameterReference>value</parameterReference> in the array. Otherwise, it is the index of the first element that is larger than <parameterReference>value</parameterReference>. </para>
            <para>Either <parameterReference>value</parameterReference> or every element of <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface, which is used for comparisons. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation; otherwise, the result might be incorrect.</para>
            <alert class="note">
              <para>If <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface, the elements of <parameterReference>array</parameterReference> are not tested for <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> before the search begins. An exception is thrown if the search encounters an element that does not implement <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>.</para>
            </alert>
            <para>Duplicate elements are allowed. If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> contains more than one element equal to <parameterReference>value</parameterReference>, the method returns the index of only one of the occurrences, and not necessarily the first one.</para>
            <para>
              <languageKeyword>null</languageKeyword> can always be compared with any other reference type; therefore, comparisons with <languageKeyword>null</languageKeyword> do not generate an exception. When sorting, <languageKeyword>null</languageKeyword> is considered to be less than any other object.</para>
            <alert class="note">
              <para>   For every element tested, <parameterReference>value</parameterReference> is passed to the appropriate <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation, even if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. That is, the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation determines how a given element compares to <languageKeyword>null</languageKeyword>.</para>
            </alert>
            <para>This method is an O(log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to use <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference> to locate a specific object in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <alert class="note">
                  <para>The array is created with its elements in ascending sort order. The <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference> method requires the array to be sorted in ascending order.</para>
                </alert>
                <codeReference>Classic Array.BinarySearch Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.Sort</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      <overload>
        <summary>
          <para>Searches a one-dimensional sorted <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> for a value, using a binary search algorithm.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches an entire one-dimensional sorted <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> for a value using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference> interface.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The sorted one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference> implementation to use when comparing elements.</para>
              <para>-or- </para>
              <para>
                <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the specified <parameterReference>value</parameterReference> in the specified <parameterReference>array</parameterReference>, if <parameterReference>value</parameterReference> is found. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is less than one or more elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of the index of the first element that is larger than <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is greater than any of the elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of (the index of the last element plus 1).</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and <parameterReference>value</parameterReference> is of a type that is not compatible with the elements of <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface, and the search encounters an element that does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~) to the negative result (in Visual Basic, <languageKeyword>Xor</languageKeyword> the negative result with -1) to produce an index. If this index is greater than or equal to the size of the array, there are no elements larger than <parameterReference>value</parameterReference> in the array. Otherwise, it is the index of the first element that is larger than <parameterReference>value</parameterReference>. </para>
            <para>The comparer customizes how the elements are compared. For example, you can use a <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.CaseInsensitiveComparer</codeEntityReference> as the comparer to perform case-insensitive string searches.</para>
            <para>If <parameterReference>comparer</parameterReference> is not <languageKeyword>null</languageKeyword>, the elements of <parameterReference>array</parameterReference> are compared to the specified value using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference> implementation. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by <parameterReference>comparer</parameterReference>; otherwise, the result might be incorrect.</para>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, the comparison is done using the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation provided by the element itself or by the specified value. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation; otherwise, the result might be incorrect.</para>
            <alert class="note">
              <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword> and <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface, the elements of <parameterReference>array</parameterReference> are not tested for <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> before the search begins. An exception is thrown if the search encounters an element that does not implement <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>.</para>
            </alert>
            <para>Duplicate elements are allowed. If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> contains more than one element equal to <parameterReference>value</parameterReference>, the method returns the index of only one of the occurrences, and not necessarily the first one.</para>
            <para>
              <languageKeyword>null</languageKeyword> can always be compared with any other reference type; therefore, comparisons with <languageKeyword>null</languageKeyword> do not generate an exception. When sorting, <languageKeyword>null</languageKeyword> is considered to be less than any other object.</para>
            <alert class="note">
              <para>   For every element tested, <parameterReference>value</parameterReference> is passed to the appropriate <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation, even if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. That is, the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation determines how a given element compares to <languageKeyword>null</languageKeyword>.</para>
            </alert>
            <para>This method is an O(log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.Sort</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches a range of elements in a one-dimensional sorted <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> for a value, using the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface implemented by each element of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> and by the specified value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The sorted one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The length of the range to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the specified <parameterReference>value</parameterReference> in the specified <parameterReference>array</parameterReference>, if <parameterReference>value</parameterReference> is found. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is less than one or more elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of the index of the first element that is larger than <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is greater than any of the elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of (the index of the last element plus 1).</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference> is of a type that is not compatible with the elements of <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface, and the search encounters an element that does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~) to the negative result (in Visual Basic, <languageKeyword>Xor</languageKeyword> the negative result with -1) to produce an index. If this index is greater than or equal to the size of the array, there are no elements larger than <parameterReference>value</parameterReference> in the array. Otherwise, it is the index of the first element that is larger than <parameterReference>value</parameterReference>. </para>
            <para>Either <parameterReference>value</parameterReference> or every element of <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface, which is used for comparisons. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation; otherwise, the result might be incorrect.</para>
            <alert class="note">
              <para>If <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface, the elements of <parameterReference>array</parameterReference> are not tested for <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> before the search begins. An exception is thrown if the search encounters an element that does not implement <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>.</para>
            </alert>
            <para>Duplicate elements are allowed. If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> contains more than one element equal to <parameterReference>value</parameterReference>, the method returns the index of only one of the occurrences, and not necessarily the first one.</para>
            <para>
              <languageKeyword>null</languageKeyword> can always be compared with any other reference type; therefore, comparisons with <languageKeyword>null</languageKeyword> do not generate an exception. When sorting, <languageKeyword>null</languageKeyword> is considered to be less than any other object.</para>
            <alert class="note">
              <para>   For every element tested, <parameterReference>value</parameterReference> is passed to the appropriate <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation, even if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. That is, the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation determines how a given element compares to <languageKeyword>null</languageKeyword>.</para>
            </alert>
            <para>This method is an O(log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.Sort</codeEntityReference>
          <link xlink:href="f12922e1-6234-4165-8896-63f0653ab478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches a range of elements in a one-dimensional sorted <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> for a value, using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference> interface.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The sorted one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The length of the range to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference> implementation to use when comparing elements.</para>
              <para>-or- </para>
              <para>
                <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the specified <parameterReference>value</parameterReference> in the specified <parameterReference>array</parameterReference>, if <parameterReference>value</parameterReference> is found. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is less than one or more elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of the index of the first element that is larger than <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is greater than any of the elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of (the index of the last element plus 1).</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and <parameterReference>value</parameterReference> is of a type that is not compatible with the elements of <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface, and the search encounters an element that does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~) to the negative result (in Visual Basic, <languageKeyword>Xor</languageKeyword> the negative result with -1) to produce an index. If this index is greater than or equal to the size of the array, there are no elements larger than <parameterReference>value</parameterReference> in the array. Otherwise, it is the index of the first element that is larger than <parameterReference>value</parameterReference>. </para>
            <para>The comparer customizes how the elements are compared. For example, you can use a <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.CaseInsensitiveComparer</codeEntityReference> as the comparer to perform case-insensitive string searches.</para>
            <para>If <parameterReference>comparer</parameterReference> is not <languageKeyword>null</languageKeyword>, the elements of <parameterReference>array</parameterReference> are compared to the specified value using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference> implementation. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by <parameterReference>comparer</parameterReference>; otherwise, the result might be incorrect.</para>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, the comparison is done using the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation provided by the element itself or by the specified value. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation; otherwise, the result might be incorrect.</para>
            <alert class="note">
              <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword> and <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface, the elements of <parameterReference>array</parameterReference> are not tested for <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> before the search begins. An exception is thrown if the search encounters an element that does not implement <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>.</para>
            </alert>
            <para>Duplicate elements are allowed. If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> contains more than one element equal to <parameterReference>value</parameterReference>, the method returns the index of only one of the occurrences, and not necessarily the first one.</para>
            <para>
              <languageKeyword>null</languageKeyword> can always be compared with any other reference type; therefore, comparisons with <languageKeyword>null</languageKeyword> do not generate an exception when using <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>. When sorting, <languageKeyword>null</languageKeyword> is considered to be less than any other object.</para>
            <alert class="note">
              <para>   For every element tested, <parameterReference>value</parameterReference> is passed to the appropriate <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation, even if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. That is, the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation determines how a given element compares to <languageKeyword>null</languageKeyword>.</para>
            </alert>
            <para>This method is an O(log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.Sort</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches an entire one-dimensional sorted <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> for a specific element, using the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implemented by each element of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> and by the specified object.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The sorted one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the specified <parameterReference>value</parameterReference> in the specified <parameterReference>array</parameterReference>, if <parameterReference>value</parameterReference> is found. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is less than one or more elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of the index of the first element that is larger than <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is greater than any of the elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of (the index of the last element plus 1).</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface, and the search encounters an element that does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~) to the negative result (in Visual Basic, <languageKeyword>Xor</languageKeyword> the negative result with -1) to produce an index. If this index is greater than or equal to the size of the array, there are no elements larger than <parameterReference>value</parameterReference> in the array. Otherwise, it is the index of the first element that is larger than <parameterReference>value</parameterReference>. </para>
            <para>Either <parameterReference>value</parameterReference> or every element of <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface, which is used for comparisons. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation; otherwise, the result might be incorrect.</para>
            <alert class="note">
              <para>If <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface, the elements of <parameterReference>array</parameterReference> are not tested for <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> before the search begins. An exception is thrown if the search encounters an element that does not implement <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>.</para>
            </alert>
            <para>Duplicate elements are allowed. If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> contains more than one element equal to <parameterReference>value</parameterReference>, the method returns the index of only one of the occurrences, and not necessarily the first one.</para>
            <para>
              <languageKeyword>null</languageKeyword> can always be compared with any other reference type; therefore, comparisons with <languageKeyword>null</languageKeyword> do not generate an exception. When sorting, <languageKeyword>null</languageKeyword> is considered to be less than any other object.</para>
            <alert class="note">
              <para>For every element tested, <parameterReference>value</parameterReference> is passed to the appropriate <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation, even if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. That is, the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation determines how a given element compares to <languageKeyword>null</languageKeyword>.</para>
            </alert>
            <para>This method is an O(log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[])</codeEntityReference> generic method overload and the <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0)</codeEntityReference> generic method overload. An array of strings is created, in no particular order. </para>
                <para>The array is displayed, sorted, and displayed again. Arrays must be sorted in order to use the <codeEntityReference autoUpgrade="true">M:System.Array.BinarySearch``1(``0[],``0)</codeEntityReference> method.</para>
                <alert class="note">
                  <para>The calls to the <codeEntityReference autoUpgrade="true">M:System.Array.Sort``1(``0[])</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.BinarySearch``1(``0[],``0)</codeEntityReference> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <link xlink:href="db27f6b2-f1ec-499e-be3a-7eecf95ca42b">MSIL Disassembler (Ildasm.exe)</link> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0)</codeEntityReference> generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the <codeEntityReference autoUpgrade="true">M:System.Array.BinarySearch``1(``0[],``0)</codeEntityReference> method are passed to the <codeInline>ShowWhere</codeInline> generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not n the array, so the <codeInline>ShowWhere</codeInline> method takes the bitwise complement (the ~ operator in C# and Visual C++, <languageKeyword>Xor</languageKeyword> -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</para>
                <codeReference>Array_SortSearch#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.Sort</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches an entire one-dimensional sorted <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> for a value using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The sorted one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.  </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> implementation to use when comparing elements.</para>
              <para>-or- </para>
              <para>
                <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the specified <parameterReference>value</parameterReference> in the specified <parameterReference>array</parameterReference>, if <parameterReference>value</parameterReference> is found. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is less than one or more elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of the index of the first element that is larger than <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is greater than any of the elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of (the index of the last element plus 1).</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and <parameterReference>value</parameterReference> is of a type that is not compatible with the elements of <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface, and the search encounters an element that does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~) to the negative result (in Visual Basic, <languageKeyword>Xor</languageKeyword> the negative result with -1) to produce an index. If this index is greater than or equal to the size of the array, there are no elements larger than <parameterReference>value</parameterReference> in the array. Otherwise, it is the index of the first element that is larger than <parameterReference>value</parameterReference>. </para>
            <para>The comparer customizes how the elements are compared. For example, you can use a <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.CaseInsensitiveComparer</codeEntityReference> as the comparer to perform case-insensitive string searches.</para>
            <para>If <parameterReference>comparer</parameterReference> is not <languageKeyword>null</languageKeyword>, the elements of <parameterReference>array</parameterReference> are compared to the specified value using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface implementation. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by <parameterReference>comparer</parameterReference>; otherwise, the result might be incorrect.</para>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, the comparison is done using the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implementation provided by the element itself or by the specified value. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation; otherwise, the result might be incorrect.</para>
            <alert class="note">
              <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword> and <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface, the elements of <parameterReference>array</parameterReference> are not tested for <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> before the search begins. An exception is thrown if the search encounters an element that does not implement <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>.</para>
            </alert>
            <para>Duplicate elements are allowed. If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> contains more than one element equal to <parameterReference>value</parameterReference>, the method returns the index of only one of the occurrences, and not necessarily the first one.</para>
            <para>
              <languageKeyword>null</languageKeyword> can always be compared with any other reference type; therefore, comparisons with <languageKeyword>null</languageKeyword> do not generate an exception. When sorting, <languageKeyword>null</languageKeyword> is considered to be less than any other object.</para>
            <alert class="note">
              <para>For every element tested, <parameterReference>value</parameterReference> is passed to the appropriate <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation, even if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. That is, the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation determines how a given element compares to <languageKeyword>null</languageKeyword>.</para>
            </alert>
            <para>This method is an O(log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overload and the <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overload. </para>
                <para>The code example defines an alternative comparer for strings, named <codeInline>ReverseCompare</codeInline>, which implements the <codeInline>IComparer&lt;string&gt;</codeInline> (<codeInline>IComparer(Of String)</codeInline> in Visual Basic, <codeInline>IComparer&lt;String^&gt;</codeInline> in Visual C++) generic interface. The comparer calls the <codeEntityReference autoUpgrade="false">M:System.String.CompareTo(System.String)</codeEntityReference> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</para>
                <para>The array is displayed, sorted, and displayed again. Arrays must be sorted in order to use the <codeEntityReference autoUpgrade="true">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> method.</para>
                <alert class="note">
                  <para>The calls to the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})</codeEntityReference> and <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <link xlink:href="db27f6b2-f1ec-499e-be3a-7eecf95ca42b">MSIL Disassembler (Ildasm.exe)</link> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> method are passed to the <codeInline>ShowWhere</codeInline> generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not n the array, so the <codeInline>ShowWhere</codeInline> method takes the bitwise complement (the ~ operator in C# and Visual C++, <languageKeyword>Xor</languageKeyword> -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</para>
                <codeReference>Array_SortSearchComparer#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.Sort</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches a range of elements in a one-dimensional sorted <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> for a value, using the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implemented by each element of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> and by the specified value.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The sorted one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The length of the range to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the specified <parameterReference>value</parameterReference> in the specified <parameterReference>array</parameterReference>, if <parameterReference>value</parameterReference> is found. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is less than one or more elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of the index of the first element that is larger than <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is greater than any of the elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of (the index of the last element plus 1).</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>value</parameterReference> is of a type that is not compatible with the elements of <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface, and the search encounters an element that does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~) to the negative result (in Visual Basic, <languageKeyword>Xor</languageKeyword> the negative result with -1) to produce an index. If this index is greater than or equal to the size of the array, there are no elements larger than <parameterReference>value</parameterReference> in the array. Otherwise, it is the index of the first element that is larger than <parameterReference>value</parameterReference>. </para>
            <para>Either <parameterReference>value</parameterReference> or every element of <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface, which is used for comparisons. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation; otherwise, the result might be incorrect.</para>
            <alert class="note">
              <para>If <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface, the elements of <parameterReference>array</parameterReference> are not tested for <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> before the search begins. An exception is thrown if the search encounters an element that does not implement <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>.</para>
            </alert>
            <para>Duplicate elements are allowed. If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> contains more than one element equal to <parameterReference>value</parameterReference>, the method returns the index of only one of the occurrences, and not necessarily the first one.</para>
            <para>
              <languageKeyword>null</languageKeyword> can always be compared with any other reference type; therefore, comparisons with <languageKeyword>null</languageKeyword> do not generate an exception. When sorting, <languageKeyword>null</languageKeyword> is considered to be less than any other object.</para>
            <alert class="note">
              <para>For every element tested, <parameterReference>value</parameterReference> is passed to the appropriate <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation, even if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. That is, the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation determines how a given element compares to <languageKeyword>null</languageKeyword>.</para>
            </alert>
            <para>This method is an O(log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.Sort</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches a range of elements in a one-dimensional sorted <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> for a value, using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The sorted one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The length of the range to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to search for.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> implementation to use when comparing elements.</para>
              <para>-or- </para>
              <para>
                <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the specified <parameterReference>value</parameterReference> in the specified <parameterReference>array</parameterReference>, if <parameterReference>value</parameterReference> is found. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is less than one or more elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of the index of the first element that is larger than <parameterReference>value</parameterReference>. If <parameterReference>value</parameterReference> is not found and <parameterReference>value</parameterReference> is greater than any of the elements in <parameterReference>array</parameterReference>, a negative number which is the bitwise complement of (the index of the last element plus 1).</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and <parameterReference>value</parameterReference> is of a type that is not compatible with the elements of <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface, and the search encounters an element that does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~) to the negative result (in Visual Basic, <languageKeyword>Xor</languageKeyword> the negative result with -1) to produce an index. If this index is greater than or equal to the size of the array, there are no elements larger than <parameterReference>value</parameterReference> in the array. Otherwise, it is the index of the first element that is larger than <parameterReference>value</parameterReference>. </para>
            <para>The comparer customizes how the elements are compared. For example, you can use a <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.CaseInsensitiveComparer</codeEntityReference> as the comparer to perform case-insensitive string searches.</para>
            <para>If <parameterReference>comparer</parameterReference> is not <languageKeyword>null</languageKeyword>, the elements of <parameterReference>array</parameterReference> are compared to the specified value using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface implementation. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by <parameterReference>comparer</parameterReference>; otherwise, the result might be incorrect.</para>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, the comparison is done using the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implementation provided by the element itself or by the specified value. The elements of <parameterReference>array</parameterReference> must already be sorted in increasing value according to the sort order defined by the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation; otherwise, the result might be incorrect.</para>
            <alert class="note">
              <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword> and <parameterReference>value</parameterReference> does not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface, the elements of <parameterReference>array</parameterReference> are not tested for <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> before the search begins. An exception is thrown if the search encounters an element that does not implement <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>.</para>
            </alert>
            <para>Duplicate elements are allowed. If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> contains more than one element equal to <parameterReference>value</parameterReference>, the method returns the index of only one of the occurrences, and not necessarily the first one.</para>
            <para>
              <languageKeyword>null</languageKeyword> can always be compared with any other reference type; therefore, comparisons with <languageKeyword>null</languageKeyword> do not generate an exception when using <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>. When sorting, <languageKeyword>null</languageKeyword> is considered to be less than any other object.</para>
            <alert class="note">
              <para>For every element tested, <parameterReference>value</parameterReference> is passed to the appropriate <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation, even if <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. That is, the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> implementation determines how a given element compares to <languageKeyword>null</languageKeyword>.</para>
            </alert>
            <para>This method is an O(log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.Sort</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets a range of elements in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to zero, to <languageKeyword>false</languageKeyword>, or to <languageKeyword>null</languageKeyword>, depending on the element type.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> whose elements need to be cleared.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range of elements to clear.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements to clear.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>The sum of <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> is greater than the size of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Reference-type elements are set to <languageKeyword>null</languageKeyword>. Boolean-type elements are set to <languageKeyword>false</languageKeyword>. Other value-type elements are set to zero.</para>
            <para>This method only clears the values of the elements; it does not delete the elements themselves. An <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a fixed size; therefore, elements cannot be added or removed.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.ICollection.Count</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Clone">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a shallow copy of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>A shallow copy of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>A shallow copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> copies only the elements of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> point to the same objects that the references in the original <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> point to.</para>
            <para>In contrast, a deep copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> copies the elements and everything directly or indirectly referenced by the elements.</para>
            <para>The clone is of the same <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> as the original <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example clones a <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> array and demonstrates the behavior of a shallow copy.</para>
                <codeReference>System.Array.Clone#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.Copy</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies a range of elements from an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the specified source index and pastes them to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>sourceArray</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the data to copy.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceIndex</parameterReference>
            <content>
              <para>A 32-bit integer that represents the index in the <parameterReference>sourceArray</parameterReference> at which copying begins.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>destinationArray</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that receives the data.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>destinationIndex</parameterReference>
            <content>
              <para>A 32-bit integer that represents the index in the <parameterReference>destinationArray</parameterReference> at which storing begins.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>A 32-bit integer that represents the number of elements to copy.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>destinationArray</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> have different ranks.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference>
            <content>
              <para>The <parameterReference>sourceArray</parameterReference> type is neither the same as nor derived from the <parameterReference>destinationArray</parameterReference> type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>At least one element in <parameterReference>sourceArray</parameterReference> cannot be cast to the type of <parameterReference>destinationArray</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceIndex</parameterReference> is less than the lower bound of the first dimension of <parameterReference>sourceArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>destinationIndex</parameterReference> is less than the lower bound of the first dimension of <parameterReference>destinationArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>length</parameterReference> is greater than the number of elements from <parameterReference>sourceIndex</parameterReference> to the end of <parameterReference>sourceArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is greater than the number of elements from <parameterReference>destinationIndex</parameterReference> to the end of <parameterReference>destinationArray</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> parameters must have the same number of dimensions.  The <parameterReference>sourceArray</parameterReference> type must be the same as or derived from the <parameterReference>destinationArray</parameterReference> type; otherwise, an <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference> is thrown.  Unlike <codeEntityReference autoUpgrade="true">Overload:System.Array.Copy</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)</codeEntityReference> verifies the compatibility of the array types before performing any operation.</para>
            <para>When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column), <parameterReference>sourceIndex</parameterReference> must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.</para>
            <para>If <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> overlap, this method behaves as if the original values of <parameterReference>sourceArray</parameterReference> were preserved in a temporary location before <parameterReference>destinationArray</parameterReference> is overwritten.</para>
            <conditionalSection>
              <conditions>
                <programmingLanguage>cpp#</programmingLanguage>
              </conditions>
              <conditionalContent>
                <para>This method is equivalent to the standard C/C++ function <languageKeyword>memmove</languageKeyword>, not <languageKeyword>memcpy</languageKeyword>.</para>
              </conditionalContent>
            </conditionalSection>
            <para>The arrays can be reference-type arrays or value-type arrays.  If <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> are both reference-type arrays or are both arrays of type <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>, a shallow copy is performed. A shallow copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is a new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> containing references to the same elements as the original <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> copies the elements and everything directly or indirectly referenced by the elements.</para>
            <para>If this method throws an exception while copying, the <parameterReference>destinationArray</parameterReference> remains unchanged; therefore, <codeEntityReference autoUpgrade="true">M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)</codeEntityReference> can be used within a constrained execution region (<codeEntityReference autoUpgrade="true">T:System.Runtime.ConstrainedExecution.CER</codeEntityReference>).</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.Copy</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Clone</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Runtime.ConstrainedExecution.CER</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts an array of one type to an array of another type.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the source array.</para>
            </content>
          </genericParameter>
          <genericParameter>
            <parameterReference>U</parameterReference>
            <content>
              <para>The type of the elements of the target array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to convert to a target type.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>converter</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Converter`2</codeEntityReference> that converts each element from one type to another type.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An array of the target type containing the converted elements from the source array.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>converter</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Converter`2</codeEntityReference> is a delegate to a method that converts an object to the target type.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Converter`2</codeEntityReference>, and the converted elements are saved in the new array.</para>
            <para>The source <parameterReference>array</parameterReference> remains unchanged.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example defines a method named <codeInline>PointFToPoint</codeInline> that converts a <codeEntityReference autoUpgrade="true">T:System.Drawing.PointF</codeEntityReference> structure to a <codeEntityReference autoUpgrade="true">T:System.Drawing.Point</codeEntityReference> structure. The example then creates an array of <codeEntityReference autoUpgrade="true">T:System.Drawing.PointF</codeEntityReference> structures, creates a <codeInline>Converter&lt;PointF, Point&gt;</codeInline> delegate (<codeInline>Converter(Of PointF, Point)</codeInline> in Visual Basic) to represent the <codeInline>PointFToPoint</codeInline> method, and passes the delegate to the <codeEntityReference autoUpgrade="true">M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})</codeEntityReference> method. The <codeEntityReference autoUpgrade="true">M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})</codeEntityReference> method passes each element of the input list to the <codeInline>PointFToPoint</codeInline> method and puts the converted elements into a new list of <codeEntityReference autoUpgrade="true">T:System.Drawing.Point</codeEntityReference> structures. Both lists are displayed.</para>
                <codeReference>Array_ConvertAll#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Converter`2</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Array.Copy">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies a range of elements in one <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> and performs type casting and boxing as required.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies a range of elements from an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the first element and pastes them into another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the first element. The length is specified as a 32-bit integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>sourceArray</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the data to copy.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>destinationArray</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that receives the data.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>A 32-bit integer that represents the number of elements to copy.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>destinationArray</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> have different ranks.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> are of incompatible types.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>At least one element in <parameterReference>sourceArray</parameterReference> cannot be cast to the type of <parameterReference>destinationArray</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>length</parameterReference> is greater than the number of elements in <parameterReference>sourceArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is greater than the number of elements in <parameterReference>destinationArray</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> parameters must have the same number of dimensions.</para>
            <para>When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</para>
            <para>If <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> overlap, this method behaves as if the original values of <parameterReference>sourceArray</parameterReference> were preserved in a temporary location before <parameterReference>destinationArray</parameterReference> is overwritten.</para>
            <conditionalSection>
              <conditions>
                <programmingLanguage>cpp#</programmingLanguage>
              </conditions>
              <conditionalContent>
                <para>This method is equivalent to the standard C/C++ function <languageKeyword>memmove</languageKeyword>, not <languageKeyword>memcpy</languageKeyword>.</para>
              </conditionalContent>
            </conditionalSection>
            <para>The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.</para>
            <list class="bullet">
              <listItem>
                <para>When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.</para>
              </listItem>
              <listItem>
                <para>When copying from a reference-type or value-type array to an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array, an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> is created to hold each value or reference and then copied. When copying from an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array to a reference-type or value-type array and the assignment is not possible, an <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference> is thrown.</para>
              </listItem>
              <listItem>
                <para>If <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> are both reference-type arrays or are both arrays of type <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>, a shallow copy is performed. A shallow copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is a new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> containing references to the same elements as the original <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> copies the elements and everything directly or indirectly referenced by the elements.</para>
              </listItem>
            </list>
            <para>An <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows: </para>
            <list class="bullet">
              <listItem>
                <para>A type is compatible with itself.</para>
              </listItem>
              <listItem>
                <para>A value type is compatible with <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.</para>
              </listItem>
              <listItem>
                <para>Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
              </listItem>
              <listItem>
                <para>A nonintrinsic (user-defined) value type is compatible only with itself.</para>
              </listItem>
            </list>
            <para>If every element in <parameterReference>sourceArray</parameterReference> requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in <parameterReference>destinationArray</parameterReference>, an <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference> is thrown.</para>
            <para>If this method throws an exception while copying, the state of <parameterReference>destinationArray</parameterReference> is undefined.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Clone</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Copies a range of elements in one <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> and performs type casting and boxing as required.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies a range of elements from an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the first element and pastes them into another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the first element. The length is specified as a 64-bit integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>sourceArray</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the data to copy.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>destinationArray</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that receives the data.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>, inclusive.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>destinationArray</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> have different ranks.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> are of incompatible types.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>At least one element in <parameterReference>sourceArray</parameterReference> cannot be cast to the type of <parameterReference>destinationArray</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>length</parameterReference> is less than 0 or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>length</parameterReference> is greater than the number of elements in <parameterReference>sourceArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is greater than the number of elements in <parameterReference>destinationArray</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> parameters must have the same number of dimensions.</para>
            <para>When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</para>
            <para>If <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> overlap, this method behaves as if the original values of <parameterReference>sourceArray</parameterReference> were preserved in a temporary location before <parameterReference>destinationArray</parameterReference> is overwritten.</para>
            <conditionalSection>
              <conditions>
                <programmingLanguage>cpp#</programmingLanguage>
              </conditions>
              <conditionalContent>
                <para>This method is equivalent to the standard C/C++ function <languageKeyword>memmove</languageKeyword>, not <languageKeyword>memcpy</languageKeyword>.</para>
              </conditionalContent>
            </conditionalSection>
            <para>The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.</para>
            <list class="bullet">
              <listItem>
                <para>When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.</para>
              </listItem>
              <listItem>
                <para>When copying from a reference-type or value-type array to an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array, an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> is created to hold each value or reference and then copied. When copying from an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array to a reference-type or value-type array and the assignment is not possible, an <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference> is thrown.</para>
              </listItem>
              <listItem>
                <para>If <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> are both reference-type arrays or are both arrays of type <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>, a shallow copy is performed. A shallow copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is a new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> containing references to the same elements as the original <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> copies the elements and everything directly or indirectly referenced by the elements.</para>
              </listItem>
            </list>
            <para>An <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows: </para>
            <list class="bullet">
              <listItem>
                <para>A type is compatible with itself.</para>
              </listItem>
              <listItem>
                <para>A value type is compatible with <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.</para>
              </listItem>
              <listItem>
                <para>Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
              </listItem>
              <listItem>
                <para>A nonintrinsic (user-defined) value type is compatible only with itself.</para>
              </listItem>
            </list>
            <para>If every element in <parameterReference>sourceArray</parameterReference> requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in <parameterReference>destinationArray</parameterReference>, an <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference> is thrown.</para>
            <para>If this method throws an exception while copying, the state of <parameterReference>destinationArray</parameterReference> is undefined.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Clone</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies a range of elements from an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the specified source index and pastes them to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>sourceArray</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the data to copy.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceIndex</parameterReference>
            <content>
              <para>A 32-bit integer that represents the index in the <parameterReference>sourceArray</parameterReference> at which copying begins.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>destinationArray</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that receives the data.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>destinationIndex</parameterReference>
            <content>
              <para>A 32-bit integer that represents the index in the <parameterReference>destinationArray</parameterReference> at which storing begins.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>A 32-bit integer that represents the number of elements to copy.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>destinationArray</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> have different ranks.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> are of incompatible types.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>At least one element in <parameterReference>sourceArray</parameterReference> cannot be cast to the type of <parameterReference>destinationArray</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceIndex</parameterReference> is less than the lower bound of the first dimension of <parameterReference>sourceArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>destinationIndex</parameterReference> is less than the lower bound of the first dimension of <parameterReference>destinationArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>length</parameterReference> is greater than the number of elements from <parameterReference>sourceIndex</parameterReference> to the end of <parameterReference>sourceArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is greater than the number of elements from <parameterReference>destinationIndex</parameterReference> to the end of <parameterReference>destinationArray</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> parameters must have the same number of dimensions.</para>
            <para>When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column), <parameterReference>sourceIndex</parameterReference> must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.</para>
            <para>If <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> overlap, this method behaves as if the original values of <parameterReference>sourceArray</parameterReference> were preserved in a temporary location before <parameterReference>destinationArray</parameterReference> is overwritten.</para>
            <conditionalSection>
              <conditions>
                <programmingLanguage>cpp#</programmingLanguage>
              </conditions>
              <conditionalContent>
                <para>This method is equivalent to the standard C/C++ function <languageKeyword>memmove</languageKeyword>, not <languageKeyword>memcpy</languageKeyword>.</para>
              </conditionalContent>
            </conditionalSection>
            <para>The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.</para>
            <list class="bullet">
              <listItem>
                <para>When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.</para>
              </listItem>
              <listItem>
                <para>When copying from a reference-type or value-type array to an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array, an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> is created to hold each value or reference and then copied. When copying from an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array to a reference-type or value-type array and the assignment is not possible, an <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference> is thrown.</para>
              </listItem>
              <listItem>
                <para>If <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> are both reference-type arrays or are both arrays of type <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>, a shallow copy is performed. A shallow copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is a new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> containing references to the same elements as the original <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> copies the elements and everything directly or indirectly referenced by the elements.</para>
              </listItem>
            </list>
            <para>An <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows: </para>
            <list class="bullet">
              <listItem>
                <para>A type is compatible with itself.</para>
              </listItem>
              <listItem>
                <para>A value type is compatible with <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.</para>
              </listItem>
              <listItem>
                <para>Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
              </listItem>
              <listItem>
                <para>A nonintrinsic (user-defined) value type is compatible only with itself.</para>
              </listItem>
            </list>
            <para>If every element in <parameterReference>sourceArray</parameterReference> requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in <parameterReference>destinationArray</parameterReference>, an <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference> is thrown.</para>
            <para>If this method throws an exception while copying, the state of <parameterReference>destinationArray</parameterReference> is undefined.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to copy from one <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of type <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of type integer.</para>
                <codeReference>Classic Array.Copy1 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Clone</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies a range of elements from an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the specified source index and pastes them to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>sourceArray</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the data to copy.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>sourceIndex</parameterReference>
            <content>
              <para>A 64-bit integer that represents the index in the <parameterReference>sourceArray</parameterReference> at which copying begins.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>destinationArray</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that receives the data.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>destinationIndex</parameterReference>
            <content>
              <para>A 64-bit integer that represents the index in the <parameterReference>destinationArray</parameterReference> at which storing begins.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>, inclusive.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>destinationArray</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> have different ranks.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> are of incompatible types.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>At least one element in <parameterReference>sourceArray</parameterReference> cannot be cast to the type of <parameterReference>destinationArray</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceIndex</parameterReference> is outside the range of valid indexes for the <parameterReference>sourceArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>destinationIndex</parameterReference> is outside the range of valid indexes for the <parameterReference>destinationArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than 0 or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>length</parameterReference> is greater than the number of elements from <parameterReference>sourceIndex</parameterReference> to the end of <parameterReference>sourceArray</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is greater than the number of elements from <parameterReference>destinationIndex</parameterReference> to the end of <parameterReference>destinationArray</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> parameters must have the same number of dimensions.</para>
            <para>When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column), <parameterReference>sourceIndex</parameterReference> must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.</para>
            <para>If <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> overlap, this method behaves as if the original values of <parameterReference>sourceArray</parameterReference> were preserved in a temporary location before <parameterReference>destinationArray</parameterReference> is overwritten.</para>
            <conditionalSection>
              <conditions>
                <programmingLanguage>cpp#</programmingLanguage>
              </conditions>
              <conditionalContent>
                <para>This method is equivalent to the standard C/C++ function <languageKeyword>memmove</languageKeyword>, not <languageKeyword>memcpy</languageKeyword>.</para>
              </conditionalContent>
            </conditionalSection>
            <para>The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.</para>
            <list class="bullet">
              <listItem>
                <para>When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.</para>
              </listItem>
              <listItem>
                <para>When copying from a reference-type or value-type array to an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array, an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> is created to hold each value or reference and then copied. When copying from an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array to a reference-type or value-type array and the assignment is not possible, an <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference> is thrown.</para>
              </listItem>
              <listItem>
                <para>If <parameterReference>sourceArray</parameterReference> and <parameterReference>destinationArray</parameterReference> are both reference-type arrays or are both arrays of type <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>, a shallow copy is performed. A shallow copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is a new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> containing references to the same elements as the original <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> copies the elements and everything directly or indirectly referenced by the elements.</para>
              </listItem>
            </list>
            <para>An <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows: </para>
            <list class="bullet">
              <listItem>
                <para>A type is compatible with itself.</para>
              </listItem>
              <listItem>
                <para>A value type is compatible with <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.</para>
              </listItem>
              <listItem>
                <para>Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
              </listItem>
              <listItem>
                <para>A nonintrinsic (user-defined) value type is compatible only with itself.</para>
              </listItem>
            </list>
            <para>If every element in <parameterReference>sourceArray</parameterReference> requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in <parameterReference>destinationArray</parameterReference>, an <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference> is thrown.</para>
            <para>If this method throws an exception while copying, the state of <parameterReference>destinationArray</parameterReference> is undefined.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to copy from one <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of type <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of type integer.</para>
                <codeReference>Classic Array.Copy1 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Clone</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Array.CopyTo">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies all the elements of the current one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to the specified one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies all the elements of the current one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to the specified one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the specified destination <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> index. The index is specified as a 32-bit integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that is the destination of the elements copied from the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>A 32-bit integer that represents the index in <parameterReference>array</parameterReference> at which copying begins.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
              <para>-or-</para>
              <para>
                <parameterReference>index</parameterReference> is equal to or greater than the length of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>The number of elements in the source <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is greater than the available space from <parameterReference>index</parameterReference> to the end of the destination <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference>
            <content>
              <para>The type of the source <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> cannot be cast automatically to the type of the destination <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>The source <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method supports the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.ICollection</codeEntityReference> interface. If implementing <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.ICollection</codeEntityReference> is not explicitly required, use <codeEntityReference autoUpgrade="true">M:System.Array.Copy(System.Array,System.Array,System.Int32)</codeEntityReference> to avoid an extra indirection.</para>
            <para>If this method throws an exception while copying, the state of <parameterReference>array</parameterReference> is undefined.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to copy an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.CopyTo Example#1</codeReference>
                <para>The following code example shows how to copy an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> with a nonzero lower bound. Note that the entire source <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is copied, including empty elements that overwrite existing elements in the target <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.CopyTo Example#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.ICollection</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Copy(System.Array,System.Array,System.Int32)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Copies all the elements of the current one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to the specified one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies all the elements of the current one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to the specified one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> starting at the specified destination <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> index. The index is specified as a 64-bit integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that is the destination of the elements copied from the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>A 64-bit integer that represents the index in <parameterReference>array</parameterReference> at which copying begins.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
              <para>-or-</para>
              <para>
                <parameterReference>index</parameterReference> is equal to or greater than the length of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>The number of elements in the source <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is greater than the available space from <parameterReference>index</parameterReference> to the end of the destination <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArrayTypeMismatchException</codeEntityReference>
            <content>
              <para>The type of the source <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> cannot be cast automatically to the type of the destination <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>The source <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method supports the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.ICollection</codeEntityReference> interface. If implementing <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.ICollection</codeEntityReference> is not explicitly required, use <codeEntityReference autoUpgrade="true">M:System.Array.Copy(System.Array,System.Array,System.Int64)</codeEntityReference> to avoid an extra indirection.</para>
            <para>If this method throws an exception while copying, the state of <parameterReference>array</parameterReference> is undefined.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to copy an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.CopyTo Example#1</codeReference>
                <para>The following code example shows how to copy an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to another <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> with a nonzero lower bound. Note that the entire source <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is copied, including empty elements that overwrite existing elements in the target <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.CopyTo Example#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.ICollection</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Copy(System.Array,System.Array,System.Int64)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Array.CreateInstance">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> class.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> and length, with zero-based indexing.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>elementType</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The size of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> with the specified length, using zero-based indexing.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not a valid <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not supported. For example, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference> is not supported.</para>
              <para>-or-</para>
              <para>
                <parameterReference>elementType</parameterReference> is an open generic type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Unlike most classes, <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> provides the <codeEntityReference autoUpgrade="true">Overload:System.Array.CreateInstance</codeEntityReference> method, instead of public constructors, to allow for late bound access.</para>
            <para>Reference-type elements are initialized to <languageKeyword>null</languageKeyword>. Value-type elements are initialized to zero.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to create and initialize a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.CreateInstance Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> class.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a two-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> and dimension lengths, with zero-based indexing.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>elementType</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length1</parameterReference>
            <content>
              <para>The size of the first dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length2</parameterReference>
            <content>
              <para>The size of the second dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new two-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> with the specified length for each dimension, using zero-based indexing.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not a valid <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not supported. For example, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference> is not supported. </para>
              <para>-or-</para>
              <para>
                <parameterReference>elementType</parameterReference> is an open generic type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>length1</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length2</parameterReference> is less than zero.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Unlike most classes, <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> provides the <codeEntityReference autoUpgrade="true">Overload:System.Array.CreateInstance</codeEntityReference> method, instead of public constructors, to allow for late bound access.</para>
            <para>Reference-type elements are initialized to <languageKeyword>null</languageKeyword>. Value-type elements are initialized to zero.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the product of <parameterReference>length1</parameterReference> and <parameterReference>length2</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to create and initialize a two-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.CreateInstance1 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a three-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> and dimension lengths, with zero-based indexing.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>elementType</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length1</parameterReference>
            <content>
              <para>The size of the first dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length2</parameterReference>
            <content>
              <para>The size of the second dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length3</parameterReference>
            <content>
              <para>The size of the third dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new three-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> with the specified length for each dimension, using zero-based indexing.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not a valid <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not supported. For example, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference> is not supported. </para>
              <para>-or-</para>
              <para>
                <parameterReference>elementType</parameterReference> is an open generic type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>length1</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length2</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length3</parameterReference> is less than zero.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Unlike most classes, <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> provides the <codeEntityReference autoUpgrade="true">Overload:System.Array.CreateInstance</codeEntityReference> method, instead of public constructors, to allow for late bound access.</para>
            <para>Reference-type elements are initialized to <languageKeyword>null</languageKeyword>. Value-type elements are initialized to zero.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the product of <parameterReference>length1</parameterReference>, <parameterReference>length2</parameterReference>, and <parameterReference>length3</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to create and initialize a three-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.CreateInstance2 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>elementType</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>lengths</parameterReference>
            <content>
              <para>An array of 32-bit integers that represent the size of each dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> with the specified length for each dimension, using zero-based indexing.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>lengths</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not a valid <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference>.</para>
              <para>-or-</para>
              <para>The <parameterReference>lengths</parameterReference> array contains less than one element.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not supported. For example, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference> is not supported. </para>
              <para>-or-</para>
              <para>
                <parameterReference>elementType</parameterReference> is an open generic type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>Any value in <parameterReference>lengths</parameterReference> is less than zero.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Unlike most classes, <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> provides the <codeEntityReference autoUpgrade="true">Overload:System.Array.CreateInstance</codeEntityReference> method, instead of public constructors, to allow for late bound access.</para>
            <para>The number of elements in the <parameterReference>lengths</parameterReference> array must equal the number of dimensions in the new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. Each element of the <parameterReference>lengths</parameterReference> array must specify the length of the corresponding dimension in the new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>Reference-type elements are initialized to <languageKeyword>null</languageKeyword>. Value-type elements are initialized to zero.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the product of all values in <parameterReference>lengths</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to create and initialize a multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.CreateInstance3 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int64[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 64-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>elementType</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>lengths</parameterReference>
            <content>
              <para>An array of 64-bit integers that represent the size of each dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create. Each integer in the array must be between zero and <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>, inclusive.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> with the specified length for each dimension, using zero-based indexing.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>lengths</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not a valid <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference>.</para>
              <para>-or-</para>
              <para>The <parameterReference>lengths</parameterReference> array contains less than one element.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not supported. For example, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference> is not supported. </para>
              <para>-or-</para>
              <para>
                <parameterReference>elementType</parameterReference> is an open generic type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>Any value in <parameterReference>lengths</parameterReference> is less than zero or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Unlike most classes, <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> provides the <codeEntityReference autoUpgrade="true">Overload:System.Array.CreateInstance</codeEntityReference> method, instead of public constructors, to allow for late bound access.</para>
            <para>The number of elements in the <parameterReference>lengths</parameterReference> array must equal the number of dimensions in the new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. Each element of the <parameterReference>lengths</parameterReference> array must specify the length of the corresponding dimension in the new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>Reference-type elements are initialized to <languageKeyword>null</languageKeyword>. Value-type elements are initialized to zero.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the product of all values in <parameterReference>lengths</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to create and initialize a multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.CreateInstance3 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> and dimension lengths, with the specified lower bounds.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>elementType</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>lengths</parameterReference>
            <content>
              <para>A one-dimensional array that contains the size of each dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>lowerBounds</parameterReference>
            <content>
              <para>A one-dimensional array that contains the lower bound (starting index) of each dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to create.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> of the specified <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference> with the specified length and lower bound for each dimension.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>lengths</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>lowerBounds</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not a valid <codeEntityReference autoUpgrade="true">T:System.Type</codeEntityReference>.</para>
              <para>-or-</para>
              <para>The <parameterReference>lengths</parameterReference> array contains less than one element.</para>
              <para>-or-</para>
              <para>The <parameterReference>lengths</parameterReference> and <parameterReference>lowerBounds</parameterReference> arrays do not contain the same number of elements.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>
                <parameterReference>elementType</parameterReference> is not supported. For example, <codeEntityReference autoUpgrade="true">T:System.Void</codeEntityReference> is not supported. </para>
              <para>-or-</para>
              <para>
                <parameterReference>elementType</parameterReference> is an open generic type.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>Any value in <parameterReference>lengths</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>Any value in <parameterReference>lowerBounds</parameterReference> is very large, such that the sum of a dimension's lower bound and length is greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Unlike most classes, <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> provides the <codeEntityReference autoUpgrade="true">Overload:System.Array.CreateInstance</codeEntityReference> method, instead of public constructors, to allow for late bound access.</para>
            <para>The <parameterReference>lengths</parameterReference> and <parameterReference>lowerBounds</parameterReference> arrays must have the same number of elements. The number of elements in the <parameterReference>lengths</parameterReference> array must equal the number of dimensions in the new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>Each element of the <parameterReference>lengths</parameterReference> array must specify the length of the corresponding dimension in the new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>Each element of the <parameterReference>lowerBounds</parameterReference> array must specify the lower bound of the corresponding dimension in the new <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. Generally, the .NET Framework class library and many programming languages do not handle nonzero lower bounds.</para>
            <para>Reference-type elements are initialized to <languageKeyword>null</languageKeyword>. Value-type elements are initialized to zero.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the product of all values in <parameterReference>lengths</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to create and initialize a multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> with specified lower bounds.</para>
                <codeReference>Classic Array.CreateInstance4 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions of the elements to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>array</parameterReference> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>, and processing is stopped when a match is found.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference> generic method and several other generic methods that use the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> generic delegate.</para>
                <para>An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus". The code example also defines a search predicate method named <codeInline>EndsWithSaurus</codeInline>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus". </para>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference> method stops and returns <languageKeyword>true</languageKeyword> at the first element for which the predicate method returns <languageKeyword>true</languageKeyword>, which in this case is "Amargasaurus". </para>
                <alert class="note">
                  <para>In C# and Visual Basic, it is not necessary to create the <codeInline>Predicate&lt;string&gt;</codeInline> delegate (<codeInline>Predicate(Of String)</codeInline> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})</codeEntityReference> generic method stops and returns <languageKeyword>false</languageKeyword> at the first element for which the predicate method returns <languageKeyword>false</languageKeyword>.</para>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference> generic method traverses the array from the beginning, passing each element in turn to the <codeInline>EndsWithSaurus</codeInline> method. The search stops when the <codeInline>EndsWithSaurus</codeInline> method returns <languageKeyword>true</languageKeyword> for the element "Amargasaurus". </para>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference> generic method is used to search the array backward from the end. It finds the element "Dilophosaurus" at position 5. The <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference> generic method is used to return an array containing all the elements that end in "saurus". The elements are displayed.</para>
                <codeReference>Array_FindEtAl#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions of the element to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <parameterReference>T</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>, moving forward in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>, starting with the first element and ending with the last element.  Processing is stopped when a match is found.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses a <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> delegate with the <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference> generic method to search an array of <codeEntityReference autoUpgrade="true">T:System.Drawing.Point</codeEntityReference> structures. The method the delegate represents, <codeInline>ProductGT10</codeInline>, returns <languageKeyword>true</languageKeyword> if the product of the X and Y fields is greater than 100,000. The <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference> method calls the delegate for each element of the array, returning the first point that meets the test condition. </para>
                <alert class="note">
                  <para>Visual Basic and C# users do not need to create the delegate explicitly, or to specify the type argument of the generic method. The compilers determine the necessary types from the method arguments you supply.</para>
                </alert>
                <codeReference>System.Predicate`1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions of the element to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <parameterReference>T</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>, moving backward in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>, starting with the last element and ending with the first element.  Processing is stopped when a match is found.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>, and <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference> generic methods. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus". The code example also defines a search predicate method named <codeInline>EndsWithSaurus</codeInline>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus". </para>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference> generic method traverses the array from the beginning, passing each element in turn to the <codeInline>EndsWithSaurus</codeInline> method. The search stops when the <codeInline>EndsWithSaurus</codeInline> method returns <languageKeyword>true</languageKeyword> for the element "Amargasaurus". </para>
                <alert class="note">
                  <para>In C# and Visual Basic, it is not necessary to create the <codeInline>Predicate&lt;string&gt;</codeInline> delegate (<codeInline>Predicate(Of String)</codeInline> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference> generic method is used to search the array backward from the end. It finds the element "Dilophosaurus" at position 5. The <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference> generic method is used to return an array containing all the elements that end in "saurus". The elements are displayed.</para>
                <para>The code example also demonstrates the <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})</codeEntityReference> generic methods.</para>
                <codeReference>Array_FindEtAl#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves all the elements that match the conditions defined by the specified predicate.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions of the elements to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>, and the elements that match the conditions are saved in the returned array.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>, and <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference> generic methods. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus". The code example also defines a search predicate method named <codeInline>EndsWithSaurus</codeInline>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus". </para>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference> generic method traverses the array from the beginning, passing each element in turn to the <codeInline>EndsWithSaurus</codeInline> method. The search stops when the <codeInline>EndsWithSaurus</codeInline> method returns <languageKeyword>true</languageKeyword> for the element "Amargasaurus". </para>
                <alert class="note">
                  <para>In C# and Visual Basic, it is not necessary to create the <codeInline>Predicate&lt;string&gt;</codeInline> delegate (<codeInline>Predicate(Of String)</codeInline> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference> generic method is used to search the array backward from the end. It finds the element "Dilophosaurus" at position 5. The <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference> generic method is used to return an array containing all the elements that end in "saurus". The elements are displayed.</para>
                <para>The code example also demonstrates the <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})</codeEntityReference> generic methods.</para>
                <codeReference>Array_FindEtAl#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Array.FindIndex">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> or a portion of it.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions of the element to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the first occurrence of an element that matches the conditions defined by <parameterReference>match</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched forward starting at the first element and ending at the last element.</para>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.FindIndex</codeEntityReference> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus". The code example also defines a search predicate method named <codeInline>EndsWithSaurus</codeInline>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus". </para>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindIndex``1(``0[],System.Predicate{``0})</codeEntityReference> method overload traverses the array from the beginning, passing each element in turn to the <codeInline>EndsWithSaurus</codeInline> method. The search stops when the <codeInline>EndsWithSaurus</codeInline> method returns <languageKeyword>true</languageKeyword> for the element at position 1. </para>
                <alert class="note">
                  <para>In C# and Visual Basic, it is not necessary to create the <codeInline>Predicate&lt;string&gt;</codeInline> delegate (<codeInline>Predicate(Of String)</codeInline> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the array beginning at position 2 and continuing to the end of the array. It finds the element at position 5. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the range of three elements beginning at position 2. It returns –1 because there are no dinosaur names in that range that end with "saurus".</para>
                <codeReference>Array_FindIndex#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that extends from the specified index to the last element.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The zero-based starting index of the search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions of the element to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the first occurrence of an element that matches the conditions defined by <parameterReference>match</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched forward starting at <parameterReference>startIndex</parameterReference> and ending at the last element.</para>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the number of elements from <parameterReference>startIndex</parameterReference> to the end of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.FindIndex</codeEntityReference> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus". The code example also defines a search predicate method named <codeInline>EndsWithSaurus</codeInline>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus". </para>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindIndex``1(``0[],System.Predicate{``0})</codeEntityReference> method overload traverses the array from the beginning, passing each element in turn to the <codeInline>EndsWithSaurus</codeInline> method. The search stops when the <codeInline>EndsWithSaurus</codeInline> method returns <languageKeyword>true</languageKeyword> for the element at position 1. </para>
                <alert class="note">
                  <para>In C# and Visual Basic, it is not necessary to create the <codeInline>Predicate&lt;string&gt;</codeInline> delegate (<codeInline>Predicate(Of String)</codeInline> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the array beginning at position 2 and continuing to the end of the array. It finds the element at position 5. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the range of three elements beginning at position 2. It returns –1 because there are no dinosaur names in that range that end with "saurus".</para>
                <codeReference>Array_FindIndex#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that starts at the specified index and contains the specified number of elements.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The zero-based starting index of the search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of elements in the section to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions of the element to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the first occurrence of an element that matches the conditions defined by <parameterReference>match</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>count</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>startIndex</parameterReference> and <parameterReference>count</parameterReference> do not specify a valid section in <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched forward starting at <parameterReference>startIndex</parameterReference> and ending at <parameterReference>startIndex</parameterReference> plus <parameterReference>count</parameterReference> minus 1, if <parameterReference>count</parameterReference> is greater than 0.</para>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>count</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.FindIndex</codeEntityReference> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus". The code example also defines a search predicate method named <codeInline>EndsWithSaurus</codeInline>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus". </para>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindIndex``1(``0[],System.Predicate{``0})</codeEntityReference> method overload traverses the array from the beginning, passing each element in turn to the <codeInline>EndsWithSaurus</codeInline> method. The search stops when the <codeInline>EndsWithSaurus</codeInline> method returns <languageKeyword>true</languageKeyword> for the element at position 1. </para>
                <alert class="note">
                  <para>In C# and Visual Basic, it is not necessary to create the <codeInline>Predicate&lt;string&gt;</codeInline> delegate (<codeInline>Predicate(Of String)</codeInline> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the array beginning at position 2 and continuing to the end of the array. It finds the element at position 5. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the range of three elements beginning at position 2. It returns –1 because there are no dinosaur names in that range that end with "saurus".</para>
                <codeReference>Array_FindIndex#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Array.FindLastIndex">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> or a portion of it.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions of the element to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the last occurrence of an element that matches the conditions defined by <parameterReference>match</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched backward starting at the last element and ending at the first element.</para>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.FindLastIndex</codeEntityReference> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus". The code example also defines a search predicate method named <codeInline>EndsWithSaurus</codeInline>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus". </para>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})</codeEntityReference> method overload traverses the array backward from the end, passing each element in turn to the <codeInline>EndsWithSaurus</codeInline> method. The search stops when the <codeInline>EndsWithSaurus</codeInline> method returns <languageKeyword>true</languageKeyword> for the element at position 5. </para>
                <alert class="note">
                  <para>In C# and Visual Basic, it is not necessary to create the <codeInline>Predicate&lt;string&gt;</codeInline> delegate (<codeInline>Predicate(Of String)</codeInline> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array. It finds the element at position 1. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2). It returns –1 because there are no dinosaur names in that range that end with "saurus".</para>
                <codeReference>Array_FindLastIndex#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that extends from the first element to the specified index.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The zero-based starting index of the backward search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions of the element to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the last occurrence of an element that matches the conditions defined by <parameterReference>match</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched backward starting at <parameterReference>startIndex</parameterReference> and ending at the first element.</para>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the number of elements from the beginning of <parameterReference>array</parameterReference> to <parameterReference>startIndex</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.FindLastIndex</codeEntityReference> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus". The code example also defines a search predicate method named <codeInline>EndsWithSaurus</codeInline>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus". </para>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})</codeEntityReference> method overload traverses the array backward from the end, passing each element in turn to the <codeInline>EndsWithSaurus</codeInline> method. The search stops when the <codeInline>EndsWithSaurus</codeInline> method returns <languageKeyword>true</languageKeyword> for the element at position 5. </para>
                <alert class="note">
                  <para>In C# and Visual Basic, it is not necessary to create the <codeInline>Predicate&lt;string&gt;</codeInline> delegate (<codeInline>Predicate(Of String)</codeInline> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array. It finds the element at position 1. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2). It returns –1 because there are no dinosaur names in that range that end with "saurus".</para>
                <codeReference>Array_FindLastIndex#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the specified number of elements and ends at the specified index.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The zero-based starting index of the backward search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of elements in the section to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions of the element to search for.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the last occurrence of an element that matches the conditions defined by <parameterReference>match</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>count</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>startIndex</parameterReference> and <parameterReference>count</parameterReference> do not specify a valid section in <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched backward starting at <parameterReference>startIndex</parameterReference> and ending at <parameterReference>startIndex</parameterReference> minus <parameterReference>count</parameterReference> plus 1, if <parameterReference>count</parameterReference> is greater than 0.</para>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>count</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.FindLastIndex</codeEntityReference> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus". The code example also defines a search predicate method named <codeInline>EndsWithSaurus</codeInline>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus". </para>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})</codeEntityReference> method overload traverses the array backward from the end, passing each element in turn to the <codeInline>EndsWithSaurus</codeInline> method. The search stops when the <codeInline>EndsWithSaurus</codeInline> method returns <languageKeyword>true</languageKeyword> for the element at position 5. </para>
                <alert class="note">
                  <para>In C# and Visual Basic, it is not necessary to create the <codeInline>Predicate&lt;string&gt;</codeInline> delegate (<codeInline>Predicate(Of String)</codeInline> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array. It finds the element at position 1. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2). It returns –1 because there are no dinosaur names in that range that end with "saurus".</para>
                <codeReference>Array_FindLastIndex#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Performs the specified action on each element of the specified array.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> on whose elements the action is to be performed.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>action</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Action`1</codeEntityReference> to perform on each element of <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>action</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Action`1</codeEntityReference> is a delegate to a method that performs an action on the object passed to it.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Action`1</codeEntityReference>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Action`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns an <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerator</codeEntityReference> for the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>An <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerator</codeEntityReference> for the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <conditionalSection>
              <conditions>
                <programmingLanguage>vb#</programmingLanguage>
                <programmingLanguage>c#</programmingLanguage>
              </conditions>
              <conditionalContent>
                <para>The <languageKeyword>foreach</languageKeyword> statement of the C# language (<languageKeyword>for each</languageKeyword> in C++, <languageKeyword>For Each</languageKeyword> in Visual Basic) hides the complexity of the enumerators. Therefore, using <languageKeyword>foreach</languageKeyword> is recommended, instead of directly manipulating the enumerator.</para>
              </conditionalContent>
            </conditionalSection>
            <para>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection. <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.Reset</codeEntityReference> also brings the enumerator back to this position.  At this position, <codeEntityReference autoUpgrade="true">P:System.Collections.IEnumerator.Current</codeEntityReference> is undefined. Therefore, you must call <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.MoveNext</codeEntityReference> to advance the enumerator to the first element of the collection before reading the value of <codeEntityReference autoUpgrade="true">P:System.Collections.IEnumerator.Current</codeEntityReference>.</para>
            <para>
              <codeEntityReference autoUpgrade="true">P:System.Collections.IEnumerator.Current</codeEntityReference> returns the same object until either <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.MoveNext</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.Reset</codeEntityReference> is called. <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.MoveNext</codeEntityReference> sets <codeEntityReference autoUpgrade="true">P:System.Collections.IEnumerator.Current</codeEntityReference> to the next element.</para>
            <para>If <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.MoveNext</codeEntityReference> passes the end of the collection, the enumerator is positioned after the last element in the collection and <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.MoveNext</codeEntityReference> returns <languageKeyword>false</languageKeyword>. When the enumerator is at this position, subsequent calls to <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.MoveNext</codeEntityReference> also return <languageKeyword>false</languageKeyword>. If the last call to <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.MoveNext</codeEntityReference> returned <languageKeyword>false</languageKeyword>, <codeEntityReference autoUpgrade="true">P:System.Collections.IEnumerator.Current</codeEntityReference> is undefined. To set <codeEntityReference autoUpgrade="true">P:System.Collections.IEnumerator.Current</codeEntityReference> to the first element of the collection again, you can call <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.Reset</codeEntityReference> followed by <codeEntityReference autoUpgrade="true">M:System.Collections.IEnumerator.MoveNext</codeEntityReference>.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to use <codeEntityReference autoUpgrade="true">M:System.Array.GetEnumerator</codeEntityReference> to list the elements of an array.</para>
                <codeReference>System.Array_GetEnumerator#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a 32-bit integer that represents the number of elements in the specified dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>dimension</parameterReference>
            <content>
              <para>A zero-based dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> whose length needs to be determined.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit integer that represents the number of elements in the specified dimension.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>dimension</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>dimension</parameterReference> is equal to or greater than <codeEntityReference autoUpgrade="true">P:System.Array.Rank</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>An example of <codeEntityReference autoUpgrade="true">M:System.Array.GetLength(System.Int32)</codeEntityReference> is <codeInline>GetLength(0)</codeInline>, which returns the number of elements in the first dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLongLength(System.Int32)</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.ICollection.Count</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Array.Rank</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.GetLongLength(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets a 64-bit integer that represents the number of elements in the specified dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>dimension</parameterReference>
            <content>
              <para>A zero-based dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> whose length needs to be determined.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 64-bit integer that represents the number of elements in the specified dimension.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>dimension</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>dimension</parameterReference> is equal to or greater than <codeEntityReference autoUpgrade="true">P:System.Array.Rank</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>An example of <codeEntityReference autoUpgrade="true">M:System.Array.GetLongLength(System.Int32)</codeEntityReference> is <codeInline>GetLongLength(0)</codeInline>, which returns the number of elements in the first dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLength(System.Int32)</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.ICollection.Count</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Array.Rank</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the lower bound of the specified dimension in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>dimension</parameterReference>
            <content>
              <para>A zero-based dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> whose lower bound needs to be determined.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The lower bound of the specified dimension in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>dimension</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>dimension</parameterReference> is equal to or greater than <codeEntityReference autoUpgrade="true">P:System.Array.Rank</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <codeInline>GetLowerBound(0)</codeInline> returns the lower bound for the indexes of the first dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>, and <codeInline>GetLowerBound(Rank - 1)</codeInline> returns the lower bound of the last dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> to initialize a one-dimensional array and a multidimensional array.</para>
                <codeReference>Classic Array.GetUpperBound Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Array.Rank</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the upper bound of the specified dimension in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>dimension</parameterReference>
            <content>
              <para>A zero-based dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> whose upper bound needs to be determined.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The upper bound of the specified dimension in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>dimension</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>dimension</parameterReference> is equal to or greater than <codeEntityReference autoUpgrade="true">P:System.Array.Rank</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <codeInline>GetUpperBound(0)</codeInline> returns the upper bound for the indexes of the first dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>, and <codeInline>GetUpperBound(Rank - 1)</codeInline> returns the upper bound of the last dimension of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> to initialize a one-dimensional array and a multidimensional array.</para>
                <codeReference>Classic Array.GetUpperBound Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Array.Rank</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Array.GetValue">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value of the specified element in the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value at the specified position in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The index is specified as a 32-bit integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>A 32-bit integer that represents the position of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The value at the specified position in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly one dimension.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is outside the range of valid indexes for the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether the value of <parameterReference>index</parameterReference> is out of bounds.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Gets the value of the specified element in the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Array.GetValue(System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value at the specified position in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The index is specified as a 64-bit integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>A 64-bit integer that represents the position of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The value at the specified position in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly one dimension.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is outside the range of valid indexes for the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether the value of <parameterReference>index</parameterReference> is out of bounds.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value at the specified position in the two-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as 32-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>index1</parameterReference>
            <content>
              <para>A 32-bit integer that represents the first-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index2</parameterReference>
            <content>
              <para>A 32-bit integer that represents the second-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The value at the specified position in the two-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly two dimensions.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>Either <parameterReference>index1</parameterReference> or <parameterReference>index2</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the indexes is out of bounds.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.GetValue(System.Int64,System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value at the specified position in the two-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as 64-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>index1</parameterReference>
            <content>
              <para>A 64-bit integer that represents the first-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index2</parameterReference>
            <content>
              <para>A 64-bit integer that represents the second-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The value at the specified position in the two-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly two dimensions.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>Either <parameterReference>index1</parameterReference> or <parameterReference>index2</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the indexes is out of bounds.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value at the specified position in the three-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as 32-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>index1</parameterReference>
            <content>
              <para>A 32-bit integer that represents the first-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index2</parameterReference>
            <content>
              <para>A 32-bit integer that represents the second-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index3</parameterReference>
            <content>
              <para>A 32-bit integer that represents the third-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The value at the specified position in the three-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly three dimensions.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index1</parameterReference> or <parameterReference>index2</parameterReference> or <parameterReference>index3</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the indexes is out of bounds.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.GetValue(System.Int64,System.Int64,System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value at the specified position in the three-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as 64-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>index1</parameterReference>
            <content>
              <para>A 64-bit integer that represents the first-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index2</parameterReference>
            <content>
              <para>A 64-bit integer that represents the second-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index3</parameterReference>
            <content>
              <para>A 64-bit integer that represents the third-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The value at the specified position in the three-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly three dimensions.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index1</parameterReference> or <parameterReference>index2</parameterReference> or <parameterReference>index3</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the indexes is out of bounds.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value at the specified position in the multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as an array of 32-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>indices</parameterReference>
            <content>
              <para>A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The value at the specified position in the multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>indices</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The number of dimensions in the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is not equal to the number of elements in <parameterReference>indices</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>Any element in <parameterReference>indices</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The number of elements in <parameterReference>indices</parameterReference> must equal the number of dimensions in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. All elements in the <parameterReference>indices</parameterReference> array must collectively specify the position of the desired element in the multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the indexes is out of bounds.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.GetValue(System.Int64[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the value at the specified position in the multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as an array of 64-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>indices</parameterReference>
            <content>
              <para>A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to get.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The value at the specified position in the multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>indices</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The number of dimensions in the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is not equal to the number of elements in <parameterReference>indices</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>Any element in <parameterReference>indices</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The number of elements in <parameterReference>indices</parameterReference> must equal the number of dimensions in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. All elements in the <parameterReference>indices</parameterReference> array must collectively specify the position of the desired element in the multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the indexes is out of bounds.</para>
            <para>This method is an O(1) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Array.IndexOf">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the index of the first occurrence of a value in a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> or in a portion of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the first occurrence within the entire one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the first occurrence of <parameterReference>value</parameterReference> within the entire <parameterReference>array</parameterReference>, if found; otherwise, the lower bound of the array minus 1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched forward starting at the first element and ending at the last element.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>Since most arrays will have a lower bound of zero, this method would generally return –1 when <parameterReference>value</parameterReference> is not found. In the rare case that the lower bound of the array is equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> and <parameterReference>value</parameterReference> is not found, this method returns <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>, which is <codeInline>System.Int32.MinValue - 1</codeInline>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to determine the index of the first occurrence of a specified element.</para>
                <codeReference>Classic Array.IndexOf Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns the index of the first occurrence of a value in a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> or in a portion of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that extends from the specified index to the last element.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting index of the search.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the first occurrence of <parameterReference>value</parameterReference> within the range of elements in <parameterReference>array</parameterReference> that extends from <parameterReference>startIndex</parameterReference> to the last element, if found; otherwise, the lower bound of the array minus 1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched forward starting at <parameterReference>startIndex</parameterReference> and ending at the last element.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>Since most arrays will have a lower bound of zero, this method would generally return –1 when <parameterReference>value</parameterReference> is not found. In the rare case that the lower bound of the array is equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> and <parameterReference>value</parameterReference> is not found, this method returns <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>, which is <codeInline>System.Int32.MinValue - 1</codeInline>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the number of elements from <parameterReference>startIndex</parameterReference> to the end of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to determine the index of the first occurrence of a specified element.</para>
                <codeReference>Classic Array.IndexOf Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that starts at the specified index and contains the specified number of elements.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting index of the search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of elements in the section to search.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the first occurrence of <parameterReference>value</parameterReference> within the range of elements in <parameterReference>array</parameterReference> that starts at <parameterReference>startIndex</parameterReference> and contains the number of elements specified in <parameterReference>count</parameterReference>, if found; otherwise, the lower bound of the array minus 1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>count</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>startIndex</parameterReference> and <parameterReference>count</parameterReference> do not specify a valid section in <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched forward starting at <parameterReference>startIndex</parameterReference> and ending at <parameterReference>startIndex</parameterReference> plus <parameterReference>count</parameterReference> minus 1, if <parameterReference>count</parameterReference> is greater than 0.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>Since most arrays will have a lower bound of zero, this method would generally return –1 when <parameterReference>value</parameterReference> is not found. In the rare case that the lower bound of the array is equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> and <parameterReference>value</parameterReference> is not found, this method returns <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>, which is <codeInline>System.Int32.MinValue - 1</codeInline>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>count</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to determine the index of the first occurrence of a specified element.</para>
                <codeReference>Classic Array.IndexOf Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the first occurrence within the entire <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the first occurrence of <parameterReference>value</parameterReference> within the entire <parameterReference>array</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched forward starting at the first element and ending at the last element.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three generic overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <codeEntityReference autoUpgrade="false">M:System.Array.IndexOf``1(``0[],``0)</codeEntityReference> method overload searches the array from the beginning, and finds the first occurrence of the string. The <codeEntityReference autoUpgrade="false">M:System.Array.IndexOf``1(``0[],``0,System.Int32)</codeEntityReference> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)</codeEntityReference> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</para>
                <codeReference>Array_IndexOf#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that extends from the specified index to the last element.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The zero-based starting index of the search.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the first occurrence of <parameterReference>value</parameterReference> within the range of elements in <parameterReference>array</parameterReference> that extends from <parameterReference>startIndex</parameterReference> to the last element, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched forward starting at <parameterReference>startIndex</parameterReference> and ending at the last element.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the number of elements from <parameterReference>startIndex</parameterReference> to the end of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three generic overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <codeEntityReference autoUpgrade="false">M:System.Array.IndexOf``1(``0[],``0)</codeEntityReference> method overload searches the array from the beginning, and finds the first occurrence of the string. The <codeEntityReference autoUpgrade="false">M:System.Array.IndexOf``1(``0[],``0,System.Int32)</codeEntityReference> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)</codeEntityReference> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</para>
                <codeReference>Array_IndexOf#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that starts at the specified index and contains the specified number of elements.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The zero-based starting index of the search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of elements in the section to search.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the first occurrence of <parameterReference>value</parameterReference> within the range of elements in <parameterReference>array</parameterReference> that starts at <parameterReference>startIndex</parameterReference> and contains the number of elements specified in <parameterReference>count</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>count</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>startIndex</parameterReference> and <parameterReference>count</parameterReference> do not specify a valid section in <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched forward starting at <parameterReference>startIndex</parameterReference> and ending at <parameterReference>startIndex</parameterReference> plus <parameterReference>count</parameterReference> minus 1, if <parameterReference>count</parameterReference> is greater than 0.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>count</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three generic overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <codeEntityReference autoUpgrade="false">M:System.Array.IndexOf``1(``0[],``0)</codeEntityReference> method overload searches the array from the beginning, and finds the first occurrence of the string. The <codeEntityReference autoUpgrade="false">M:System.Array.IndexOf``1(``0[],``0,System.Int32)</codeEntityReference> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)</codeEntityReference> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</para>
                <codeReference>Array_IndexOf#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Initialize">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes every element of the value-type <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> by calling the default constructor of the value type.</para>
        </summary>
        <remarks>
          <content>
            <para>This method is designed to help compilers support value-type arrays; most users do not need this method. It must not be used on reference-type arrays.</para>
            <para>If the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is not a value-type <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> or if the value type does not have a default constructor, the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is not modified.</para>
            <para>The value-type <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> can have any lower bound and any number of dimensions.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>.</para>
            <alert class="caution">
              <para>You can use this method only on value types that have constructors; however, value types that are native to C# do not have constructors.</para>
            </alert>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="Overload:System.Array.LastIndexOf">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the index of the last occurrence of a value in a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> or in a portion of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the last occurrence of <parameterReference>value</parameterReference> within the entire <parameterReference>array</parameterReference>, if found; otherwise, the lower bound of the array minus 1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched backward starting at the last element and ending at the first element.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>Since most arrays will have a lower bound of zero, this method would generally return –1 when <parameterReference>value</parameterReference> is not found. In the rare case that the lower bound of the array is equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> and <parameterReference>value</parameterReference> is not found, this method returns <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>, which is <codeInline>System.Int32.MinValue - 1</codeInline>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to determine the index of the last occurrence of a specified element in an array.</para>
                <codeReference>Classic Array.LastIndexOf Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns the index of the last occurrence of a value in a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> or in a portion of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that extends from the first element to the specified index.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting index of the backward search.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the last occurrence of <parameterReference>value</parameterReference> within the range of elements in <parameterReference>array</parameterReference> that extends from the first element to <parameterReference>startIndex</parameterReference>, if found; otherwise, the lower bound of the array minus 1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched backward starting at <parameterReference>startIndex</parameterReference> and ending at the first element.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>Since most arrays will have a lower bound of zero, this method would generally return –1 when <parameterReference>value</parameterReference> is not found. In the rare case that the lower bound of the array is equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> and <parameterReference>value</parameterReference> is not found, this method returns <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>, which is <codeInline>System.Int32.MinValue - 1</codeInline>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the number of elements from the beginning of <parameterReference>array</parameterReference> to <parameterReference>startIndex</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to determine the index of the last occurrence of a specified element in an array.</para>
                <codeReference>Classic Array.LastIndexOf Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the specified number of elements and ends at the specified index.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting index of the backward search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of elements in the section to search.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the last occurrence of <parameterReference>value</parameterReference> within the range of elements in <parameterReference>array</parameterReference> that contains the number of elements specified in <parameterReference>count</parameterReference> and ends at <parameterReference>startIndex</parameterReference>, if found; otherwise, the lower bound of the array minus 1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>count</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>startIndex</parameterReference> and <parameterReference>count</parameterReference> do not specify a valid section in <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched backward starting at <parameterReference>startIndex</parameterReference> and ending at <parameterReference>startIndex</parameterReference> minus <parameterReference>count</parameterReference> plus 1, if <parameterReference>count</parameterReference> is greater than 0.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>Since most arrays will have a lower bound of zero, this method would generally return –1 when <parameterReference>value</parameterReference> is not found. In the rare case that the lower bound of the array is equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> and <parameterReference>value</parameterReference> is not found, this method returns <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>, which is <codeInline>System.Int32.MinValue - 1</codeInline>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>count</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to determine the index of the last occurrence of a specified element in an array. Note that the <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference> method is a backward search; therefore, <parameterReference>count</parameterReference> must be less than or equal to (<parameterReference>startIndex</parameterReference> minus the lower bound of the array plus 1).</para>
                <codeReference>Classic Array.LastIndexOf Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the last occurrence within the entire <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the last occurrence of <parameterReference>value</parameterReference> within the entire <parameterReference>array</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched backward starting at the last element and ending at the first element.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three generic overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <codeEntityReference autoUpgrade="false">M:System.Array.LastIndexOf``1(``0[],``0)</codeEntityReference> method overload searches the entire array from the end, and finds the second occurrence of the string. The <codeEntityReference autoUpgrade="false">M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)</codeEntityReference> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)</codeEntityReference> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</para>
                <codeReference>Array_LastIndexOf#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that extends from the first element to the specified index.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The zero-based starting index of the backward search.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the last occurrence of <parameterReference>value</parameterReference> within the range of elements in <parameterReference>array</parameterReference> that extends from the first element to <parameterReference>startIndex</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched backward starting at <parameterReference>startIndex</parameterReference> and ending at the first element.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the number of elements from the beginning of <parameterReference>array</parameterReference> to <parameterReference>startIndex</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three generic overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <codeEntityReference autoUpgrade="false">M:System.Array.LastIndexOf``1(``0[],``0)</codeEntityReference> method overload searches the entire array from the end, and finds the second occurrence of the string. The <codeEntityReference autoUpgrade="false">M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)</codeEntityReference> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)</codeEntityReference> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</para>
                <codeReference>Array_LastIndexOf#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the specified number of elements and ends at the specified index.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in <parameterReference>array</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The zero-based starting index of the backward search.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of elements in the section to search.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The zero-based index of the last occurrence of <parameterReference>value</parameterReference> within the range of elements in <parameterReference>array</parameterReference> that contains the number of elements specified in <parameterReference>count</parameterReference> and ends at <parameterReference>startIndex</parameterReference>, if found; otherwise, –1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is outside the range of valid indexes for <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>count</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>startIndex</parameterReference> and <parameterReference>count</parameterReference> do not specify a valid section in <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched backward starting at <parameterReference>startIndex</parameterReference> and ending at <parameterReference>startIndex</parameterReference> minus <parameterReference>count</parameterReference> plus 1, if <parameterReference>count</parameterReference> is greater than 0.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>count</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates all three generic overloads of the <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <codeEntityReference autoUpgrade="false">M:System.Array.LastIndexOf``1(``0[],``0)</codeEntityReference> method overload searches the entire array from the end, and finds the second occurrence of the string. The <codeEntityReference autoUpgrade="false">M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)</codeEntityReference> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string. Finally, the <codeEntityReference autoUpgrade="false">M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)</codeEntityReference> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</para>
                <codeReference>Array_LastIndexOf#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Resize``1(``0[],System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Changes the size of an array to the specified new size.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based array to resize, or <languageKeyword>null</languageKeyword> to create a new array with the specified size.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>newSize</parameterReference>
            <content>
              <para>The size of the new array.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>newSize</parameterReference> is less than zero.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method allocates a new array with the specified size, copies elements from the old array to the new one, and then replaces the old array with the new one.</para>
            <para>If <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>, this method creates a new array with the specified size.</para>
            <para>If <parameterReference>newSize</parameterReference> is greater than the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of the old array, a new array is allocated and all the elements are copied from the old array to the new one.  If <parameterReference>newSize</parameterReference> is less than the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of the old array, a new array is allocated and elements are copied from the old array to the new one until the new one is filled; the rest of the elements in the old array are ignored.  If <parameterReference>newSize</parameterReference> is equal to the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of the old array, this method does nothing.  </para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>newSize</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example shows how resizing affects the array.</para>
                <codeReference>System.Array.Resize#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Array.Reverse">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reverses the order of the elements in a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> or in a portion of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reverses the sequence of the elements in the entire one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to reverse.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>After a call to this method, the element at <codeInline>myArray[i]</codeInline>, where <parameterReference>i</parameterReference> is any index in the array, moves to <codeInline>myArray[j]</codeInline>, where <parameterReference>j</parameterReference> equals <codeInline>(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1</codeInline>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to reverse the sort of the values in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.Reverse Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      <overload>
        <summary>
          <para>Reverses the order of the elements in a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> or in a portion of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reverses the sequence of the elements in a range of elements in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to reverse.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the section to reverse.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements in the section to reverse.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>After a call to this method, the element at <codeInline>myArray[i]</codeInline>, where <parameterReference>i</parameterReference> is any index in the array, moves to <codeInline>myArray[j]</codeInline>, where <parameterReference>j</parameterReference> equals <codeInline>(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1</codeInline>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to reverse the sort of the values in a range of elements in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
                <codeReference>Classic Array.Reverse1 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.Array.SetValue">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets the specified element in the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to the specified value.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets a value to the element at the specified position in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The index is specified as a 32-bit integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The new value for the specified element.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>A 32-bit integer that represents the position of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly one dimension.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> cannot be cast to the element type of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is outside the range of valid indexes for the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether the value of <parameterReference>index</parameterReference> is out of bounds.</para>
            <para>For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
            <alert class="note">
              <para>If <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> is used to assign <languageKeyword>null</languageKeyword> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.GetValue</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Sets the specified element in the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to the specified value.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets a value to the element at the specified position in the one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The index is specified as a 64-bit integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The new value for the specified element.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>A 64-bit integer that represents the position of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly one dimension.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> cannot be cast to the element type of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is outside the range of valid indexes for the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether the value of <parameterReference>index</parameterReference> is out of bounds.</para>
            <para>For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
            <alert class="note">
              <para>If <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> is used to assign <languageKeyword>null</languageKeyword> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.GetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets a value to the element at the specified position in the two-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as 32-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The new value for the specified element.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index1</parameterReference>
            <content>
              <para>A 32-bit integer that represents the first-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index2</parameterReference>
            <content>
              <para>A 32-bit integer that represents the second-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly two dimensions.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> cannot be cast to the element type of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>Either <parameterReference>index1</parameterReference> or <parameterReference>index2</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the indexes is out of bounds.</para>
            <para>For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
            <alert class="note">
              <para>If <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> is used to assign <languageKeyword>null</languageKeyword> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.GetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64,System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets a value to the element at the specified position in the two-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as 64-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The new value for the specified element.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index1</parameterReference>
            <content>
              <para>A 64-bit integer that represents the first-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index2</parameterReference>
            <content>
              <para>A 64-bit integer that represents the second-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly two dimensions.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> cannot be cast to the element type of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>Either <parameterReference>index1</parameterReference> or <parameterReference>index2</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the indexes is out of bounds.</para>
            <para>For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
            <alert class="note">
              <para>If <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> is used to assign <languageKeyword>null</languageKeyword> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.GetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets a value to the element at the specified position in the three-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as 32-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The new value for the specified element.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index1</parameterReference>
            <content>
              <para>A 32-bit integer that represents the first-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index2</parameterReference>
            <content>
              <para>A 32-bit integer that represents the second-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index3</parameterReference>
            <content>
              <para>A 32-bit integer that represents the third-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly three dimensions.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> cannot be cast to the element type of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index1</parameterReference> or <parameterReference>index2</parameterReference> or <parameterReference>index3</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the indexes is out of bounds.</para>
            <para>For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
            <alert class="note">
              <para>If <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> is used to assign <languageKeyword>null</languageKeyword> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.GetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets a value to the element at the specified position in the three-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as 64-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The new value for the specified element.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index1</parameterReference>
            <content>
              <para>A 64-bit integer that represents the first-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index2</parameterReference>
            <content>
              <para>A 64-bit integer that represents the second-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index3</parameterReference>
            <content>
              <para>A 64-bit integer that represents the third-dimension index of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> element to set.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly three dimensions.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> cannot be cast to the element type of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index1</parameterReference> or <parameterReference>index2</parameterReference> or <parameterReference>index3</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the indexes is out of bounds.</para>
            <para>For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
            <alert class="note">
              <para>If <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> is used to assign <languageKeyword>null</languageKeyword> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.GetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets a value to the element at the specified position in the multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as an array of 32-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The new value for the specified element.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indices</parameterReference>
            <content>
              <para>A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>indices</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The number of dimensions in the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is not equal to the number of elements in <parameterReference>indices</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> cannot be cast to the element type of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>Any element in <parameterReference>indices</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The number of elements in <parameterReference>indices</parameterReference> must equal the number of dimensions in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. All elements in the <parameterReference>indices</parameterReference> array must collectively specify the position of the desired element in the multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the values in the <parameterReference>indices</parameterReference> array is out of bounds.</para>
            <para>For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
            <alert class="note">
              <para>If <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> is used to assign <languageKeyword>null</languageKeyword> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.GetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets a value to the element at the specified position in the multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The indexes are specified as an array of 64-bit integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The new value for the specified element.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indices</parameterReference>
            <content>
              <para>A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the element to set.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>indices</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The number of dimensions in the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is not equal to the number of elements in <parameterReference>indices</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> cannot be cast to the element type of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>Any element in <parameterReference>indices</parameterReference> is outside the range of valid indexes for the corresponding dimension of the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The number of elements in <parameterReference>indices</parameterReference> must equal the number of dimensions in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. All elements in the <parameterReference>indices</parameterReference> array must collectively specify the position of the desired element in the multidimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference> methods can determine whether any of the values in the <parameterReference>indices</parameterReference> array is out of bounds.</para>
            <para>For more information about conversions, see <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference>.</para>
            <para>This method is an O(1) operation.</para>
            <alert class="note">
              <para>If <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> is used to assign <languageKeyword>null</languageKeyword> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</para>
                <codeReference>System.Array_GetSetValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLowerBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetUpperBound(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.GetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.Array.Sort">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts the elements in one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts the elements in an entire one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation of each element of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to sort.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>One or more elements in <parameterReference>array</parameterReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each element of <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface to be capable of comparisons with every other element in <parameterReference>array</parameterReference>.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to sort the values in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>.</para>
                <codeReference>System.Array.Sort#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      <overload>
        <summary>
          <para>Sorts the elements in one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts a pair of one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation of each key.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>keys</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the keys to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>items</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the items that correspond to each of the keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
              <para>-or-</para>
              <para>
                <languageKeyword>null</languageKeyword> to sort only the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>keys</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>The <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
              <para>-or-</para>
              <para>The <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the lower bound of <parameterReference>keys</parameterReference> does not match the lower bound of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the length of <parameterReference>keys</parameterReference> does not match the length of <parameterReference>items</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>One or more elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. When a key is repositioned during the sorting, the corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is similarly repositioned. Therefore, the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is sorted according to the arrangement of the corresponding keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>Each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface to be capable of comparisons with every other key.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>keys</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>.</para>
                <codeReference>System.Array.Sort2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.IDictionary</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts the elements in a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference> implementation to use when comparing elements.</para>
              <para>-or-</para>
              <para>
                <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and one or more elements in <parameterReference>array</parameterReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The implementation of <parameterReference>comparer</parameterReference> caused an error during the sort. For example, <parameterReference>comparer</parameterReference> might not return 0 when comparing an item with itself.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, each element of <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface to be capable of comparisons with every other element in <parameterReference>array</parameterReference>.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to sort the values in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>.</para>
                <codeReference>System.Array.Sort#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts a pair of one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>keys</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the keys to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>items</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the items that correspond to each of the keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
              <para>-or-</para>
              <para>
                <languageKeyword>null</languageKeyword> to sort only the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference> implementation to use when comparing elements.</para>
              <para>-or-</para>
              <para>
                <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>keys</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>The <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
              <para>-or-</para>
              <para>The <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the lower bound of <parameterReference>keys</parameterReference> does not match the lower bound of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the length of <parameterReference>keys</parameterReference> does not match the length of <parameterReference>items</parameterReference>. </para>
              <para>-or-</para>
              <para>The implementation of <parameterReference>comparer</parameterReference> caused an error during the sort. For example, <parameterReference>comparer</parameterReference> might not return 0 when comparing an item with itself.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and one or more elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. When a key is repositioned during the sorting, the corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is similarly repositioned. Therefore, the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is sorted according to the arrangement of the corresponding keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface to be capable of comparisons with every other key.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>keys</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>.</para>
                <codeReference>System.Array.Sort2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts the elements in a range of elements in a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation of each element of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements in the range to sort.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>One or more elements in <parameterReference>array</parameterReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each element within the specified range of elements in <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface to be capable of comparisons with every other element in <parameterReference>array</parameterReference>.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to sort the values in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>.</para>
                <codeReference>System.Array.Sort#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts a range of elements in a pair of one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation of each key.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>keys</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the keys to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>items</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the items that correspond to each of the keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
              <para>-or-</para>
              <para>
                <languageKeyword>null</languageKeyword> to sort only the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements in the range to sort.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>keys</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>The <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
              <para>-or-</para>
              <para>The <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>keys</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the lower bound of <parameterReference>keys</parameterReference> does not match the lower bound of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the length of <parameterReference>keys</parameterReference> does not match the length of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>One or more elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. When a key is repositioned during the sorting, the corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is similarly repositioned. Therefore, the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is sorted according to the arrangement of the corresponding keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>Each key within the specified range of elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface to be capable of comparisons with every other key.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>.</para>
                <codeReference>System.Array.Sort2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts the elements in a range of elements in a one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements in the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference> implementation to use when comparing elements.</para>
              <para>-or-</para>
              <para>
                <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in <parameterReference>array</parameterReference>. </para>
              <para>-or-</para>
              <para>The implementation of <parameterReference>comparer</parameterReference> caused an error during the sort. For example, <parameterReference>comparer</parameterReference> might not return 0 when comparing an item with itself.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and one or more elements in <parameterReference>array</parameterReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, each element within the specified range of elements in <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface to be capable of comparisons with every other element in <parameterReference>array</parameterReference>.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to sort the values in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>.</para>
                <codeReference>System.Array.Sort#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts a range of elements in a pair of one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>keys</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the keys to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>items</parameterReference>
            <content>
              <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the items that correspond to each of the keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
              <para>-or-</para>
              <para>
                <languageKeyword>null</languageKeyword> to sort only the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements in the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference> implementation to use when comparing elements.</para>
              <para>-or-</para>
              <para>
                <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>keys</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>The <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
              <para>-or-</para>
              <para>The <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>keys</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the lower bound of <parameterReference>keys</parameterReference> does not match the lower bound of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the length of <parameterReference>keys</parameterReference> does not match the length of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. </para>
              <para>-or-</para>
              <para>The implementation of <parameterReference>comparer</parameterReference> caused an error during the sort. For example, <parameterReference>comparer</parameterReference> might not return 0 when comparing an item with itself.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and one or more elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. When a key is repositioned during the sorting, the corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is similarly repositioned. Therefore, the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is sorted according to the arrangement of the corresponding keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, each key within the specified range of elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference> interface to be capable of comparisons with every other key.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>.</para>
                <codeReference>System.Array.Sort2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IComparer</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts the elements in an entire <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implementation of each element of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to sort.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>One or more elements in <parameterReference>array</parameterReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each element of <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface to be capable of comparisons with every other element in <parameterReference>array</parameterReference>.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[])</codeEntityReference> generic method overload and the <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0)</codeEntityReference> generic method overload. An array of strings is created, in no particular order. </para>
                <para>The array is displayed, sorted, and displayed again.</para>
                <alert class="note">
                  <para>The calls to the <codeEntityReference autoUpgrade="true">M:System.Array.Sort``1(``0[])</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.Array.BinarySearch``1(``0[],``0)</codeEntityReference> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <link xlink:href="db27f6b2-f1ec-499e-be3a-7eecf95ca42b">MSIL Disassembler (Ildasm.exe)</link> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0)</codeEntityReference> generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the <codeEntityReference autoUpgrade="true">M:System.Array.BinarySearch``1(``0[],``0)</codeEntityReference> method are passed to the <codeInline>ShowWhere</codeInline> generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not n the array, so the <codeInline>ShowWhere</codeInline> method takes the bitwise complement (the ~ operator in C# and Visual C++, <languageKeyword>Xor</languageKeyword> -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</para>
                <codeReference>Array_SortSearch#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts the elements in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-base <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to sort</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface implementation to use when comparing elements, or <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and one or more elements in <parameterReference>array</parameterReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The implementation of <parameterReference>comparer</parameterReference> caused an error during the sort. For example, <parameterReference>comparer</parameterReference> might not return 0 when comparing an item with itself.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, each element of <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface to be capable of comparisons with every other element in <parameterReference>array</parameterReference>.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overload and the <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overload. </para>
                <para>The code example defines an alternative comparer for strings, named <codeInline>ReverseCompare</codeInline>, which implements the <codeInline>IComparer&lt;string&gt;</codeInline> (<codeInline>IComparer(Of String)</codeInline> in Visual Basic, <codeInline>IComparer&lt;String^&gt;</codeInline> in Visual C++) generic interface. The comparer calls the <codeEntityReference autoUpgrade="false">M:System.String.CompareTo(System.String)</codeEntityReference> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</para>
                <para>The array is displayed, sorted, and displayed again. Arrays must be sorted in order to use the <codeEntityReference autoUpgrade="true">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> method.</para>
                <alert class="note">
                  <para>The calls to the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})</codeEntityReference> and <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <link xlink:href="db27f6b2-f1ec-499e-be3a-7eecf95ca42b">MSIL Disassembler (Ildasm.exe)</link> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> method are passed to the <codeInline>ShowWhere</codeInline> generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not n the array, so the <codeInline>ShowWhere</codeInline> method takes the bitwise complement (the ~ operator in C# and Visual C++, <languageKeyword>Xor</languageKeyword> -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</para>
                <codeReference>Array_SortSearchComparer#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts the elements in a range of elements in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implementation of each element of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to sort</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements in the range to sort.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in <parameterReference>array</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>One or more elements in <parameterReference>array</parameterReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each element within the specified range of elements in <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface to be capable of comparisons with every other element in <parameterReference>array</parameterReference>.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[],System.Int32,System.Int32)</codeEntityReference> generic method overload and the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overload for sorting a range in an array. </para>
                <para>The code example defines an alternative comparer for strings, named <codeInline>ReverseCompare</codeInline>, which implements the <codeInline>IComparer&lt;string&gt;</codeInline> (<codeInline>IComparer(Of String)</codeInline> in Visual Basic, <codeInline>IComparer&lt;String^&gt;</codeInline> in Visual C++) generic interface. The comparer calls the <codeEntityReference autoUpgrade="false">M:System.String.CompareTo(System.String)</codeEntityReference> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</para>
                <para>The code example creates and displays an array of dinosaur names, consisting of three herbivores followed by three carnivores (tyrannosaurids, to be precise). The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[],System.Int32,System.Int32)</codeEntityReference> generic method overload is used to sort the last three elements of the array, which is then displayed. The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overload is used with <codeInline>ReverseCompare</codeInline> to sort the last three elements in reverse order. The thoroughly confused dinosaurs are displayed again.</para>
                <alert class="note">
                  <para>The calls to the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})</codeEntityReference> and <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <link xlink:href="db27f6b2-f1ec-499e-be3a-7eecf95ca42b">MSIL Disassembler (Ildasm.exe)</link> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</para>
                </alert>
                <codeReference>Array_SortIntIntIComparer#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts the elements in a range of elements in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements in the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface implementation to use when comparing elements, or <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>array</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in <parameterReference>array</parameterReference>. </para>
              <para>-or-</para>
              <para>The implementation of <parameterReference>comparer</parameterReference> caused an error during the sort. For example, <parameterReference>comparer</parameterReference> might not return 0 when comparing an item with itself.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and one or more elements in <parameterReference>array</parameterReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, each element within the specified range of elements in <parameterReference>array</parameterReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface to be capable of comparisons with every other element in <parameterReference>array</parameterReference>.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[],System.Int32,System.Int32)</codeEntityReference> generic method overload and the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overload for sorting a range in an array. </para>
                <para>The code example defines an alternative comparer for strings, named <codeInline>ReverseCompare</codeInline>, which implements the <codeInline>IComparer&lt;string&gt;</codeInline> (<codeInline>IComparer(Of String)</codeInline> in Visual Basic, <codeInline>IComparer&lt;String^&gt;</codeInline> in Visual C++) generic interface. The comparer calls the <codeEntityReference autoUpgrade="false">M:System.String.CompareTo(System.String)</codeEntityReference> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</para>
                <para>The code example creates and displays an array of dinosaur names, consisting of three herbivores followed by three carnivores (tyrannosaurids, to be precise). The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[],System.Int32,System.Int32)</codeEntityReference> generic method overload is used to sort the last three elements of the array, which is then displayed. The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overload is used with <codeInline>ReverseCompare</codeInline> to sort the last three elements in reverse order. The thoroughly confused dinosaurs are displayed again.</para>
                <alert class="note">
                  <para>The calls to the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})</codeEntityReference> and <codeEntityReference autoUpgrade="false">M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <link xlink:href="db27f6b2-f1ec-499e-be3a-7eecf95ca42b">MSIL Disassembler (Ildasm.exe)</link> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</para>
                </alert>
                <codeReference>Array_SortIntIntIComparer#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts the elements in an <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the specified <codeEntityReference autoUpgrade="true">T:System.Comparison`1</codeEntityReference>.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to sort</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparison</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Comparison`1</codeEntityReference> to use when comparing elements.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>comparison</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The implementation of <parameterReference>comparison</parameterReference> caused an error during the sort. For example, <parameterReference>comparison</parameterReference> might not return 0 when comparing an item with itself.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})</codeEntityReference> method overload. </para>
                <para>The code example defines an alternative comparison method for strings, named <codeInline>CompareDinosByLength</codeInline>. This method works as follows: First, the comparands are tested for <languageKeyword>null</languageKeyword>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.</para>
                <para>A array of strings is created and populated with four strings, in no particular order. The list also includes an empty string and a null reference. The list is displayed, sorted using a <codeEntityReference autoUpgrade="true">T:System.Comparison`1</codeEntityReference> generic delegate representing the <codeInline>CompareDinosByLength</codeInline> method, and displayed again.</para>
                <codeReference>Array_SortComparison#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Comparison`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts a pair of <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implementation of each key.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>TKye</parameterReference>
            <content>
              <para>The type of the elements of the key array.</para>
            </content>
          </genericParameter>
          <genericParameter>
            <parameterReference>TValue</parameterReference>
            <content>
              <para>The type of the elements of the items array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>keys</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the keys to sort. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>items</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the items that correspond to the keys in <parameterReference>keys</parameterReference>, or <languageKeyword>null</languageKeyword> to sort only <parameterReference>keys</parameterReference>.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>keys</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the lower bound of <parameterReference>keys</parameterReference> does not match the lower bound of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the length of <parameterReference>keys</parameterReference> does not match the length of <parameterReference>items</parameterReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>One or more elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. When a key is repositioned during the sorting, the corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is similarly repositioned. Therefore, the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is sorted according to the arrangement of the corresponding keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>Each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface to be capable of comparisons with every other key.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[])</codeEntityReference>, <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})</codeEntityReference>, <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)</codeEntityReference>, and <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overloads, for sorting pairs of arrays that represent keys and values.</para>
                <para>The code example defines an alternative comparer for strings, named <codeInline>ReverseCompare</codeInline>, which implements the <codeInline>IComparer&lt;string&gt;</codeInline> (<codeInline>IComparer(Of String)</codeInline> in Visual Basic, <codeInline>IComparer&lt;String^&gt;</codeInline> in Visual C++) generic interface. The comparer calls the <codeEntityReference autoUpgrade="false">M:System.String.CompareTo(System.String)</codeEntityReference> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</para>
                <para>The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:</para>
                <list class="bullet">
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[])</codeEntityReference> overload is used to sort both arrays in order of the dinosaur names in the first array. </para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})</codeEntityReference> overload and an instance of <codeInline>ReverseCompare</codeInline> are used to reverse the sort order of the paired arrays.</para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)</codeEntityReference> overload is used to sort the last three elements of both arrays.</para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> overload is used to sort the last three elements of both arrays in reverse order.</para>
                  </listItem>
                </list>
                <alert class="note">
                  <para>The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the <link xlink:href="db27f6b2-f1ec-499e-be3a-7eecf95ca42b">MSIL Disassembler (Ildasm.exe)</link> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</para>
                </alert>
                <codeReference>Array_Sort2IntIntIComparer#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Collections.Generic.IDictionary`2</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts a pair of <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>TKey</parameterReference>
            <content>
              <para>The type of the elements of the key array.</para>
            </content>
          </genericParameter>
          <genericParameter>
            <parameterReference>TValue</parameterReference>
            <content>
              <para>The type of the elements of the items array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>keys</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the keys to sort. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>items</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the items that correspond to the keys in <parameterReference>keys</parameterReference>, or <languageKeyword>null</languageKeyword> to sort only <parameterReference>keys</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface implementation to use when comparing elements, or <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>keys</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the lower bound of <parameterReference>keys</parameterReference> does not match the lower bound of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the length of <parameterReference>keys</parameterReference> does not match the length of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>The implementation of <parameterReference>comparer</parameterReference> caused an error during the sort. For example, <parameterReference>comparer</parameterReference> might not return 0 when comparing an item with itself.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and one or more elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. When a key is repositioned during the sorting, the corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is similarly repositioned. Therefore, the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is sorted according to the arrangement of the corresponding keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface to be capable of comparisons with every other key.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[])</codeEntityReference>, <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})</codeEntityReference>, <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)</codeEntityReference>, and <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overloads, for sorting pairs of arrays that represent keys and values.</para>
                <para>The code example defines an alternative comparer for strings, named <codeInline>ReverseCompare</codeInline>, which implements the <codeInline>IComparer&lt;string&gt;</codeInline> (<codeInline>IComparer(Of String)</codeInline> in Visual Basic, <codeInline>IComparer&lt;String^&gt;</codeInline> in Visual C++) generic interface. The comparer calls the <codeEntityReference autoUpgrade="false">M:System.String.CompareTo(System.String)</codeEntityReference> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</para>
                <para>The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:</para>
                <list class="bullet">
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[])</codeEntityReference> overload is used to sort both arrays in order of the dinosaur names in the first array. </para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})</codeEntityReference> overload and an instance of <codeInline>ReverseCompare</codeInline> are used to reverse the sort order of the paired arrays.</para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)</codeEntityReference> overload is used to sort the last three elements of both arrays.</para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> overload is used to sort the last three elements of both arrays in reverse order.</para>
                  </listItem>
                </list>
                <alert class="note">
                  <para>The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the <link xlink:href="db27f6b2-f1ec-499e-be3a-7eecf95ca42b">MSIL Disassembler (Ildasm.exe)</link> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</para>
                </alert>
                <codeReference>Array_Sort2IntIntIComparer#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts a range of elements in a pair of <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implementation of each key.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>TKey</parameterReference>
            <content>
              <para>The type of the elements of the key array.</para>
            </content>
          </genericParameter>
          <genericParameter>
            <parameterReference>TValue</parameterReference>
            <content>
              <para>The type of the elements of the items array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>keys</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the keys to sort. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>items</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the items that correspond to the keys in <parameterReference>keys</parameterReference>, or <languageKeyword>null</languageKeyword> to sort only <parameterReference>keys</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements in the range to sort.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>keys</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>keys</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the lower bound of <parameterReference>keys</parameterReference> does not match the lower bound of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the length of <parameterReference>keys</parameterReference> does not match the length of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>One or more elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. When a key is repositioned during the sorting, the corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is similarly repositioned. Therefore, the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is sorted according to the arrangement of the corresponding keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>Each key within the specified range of elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface to be capable of comparisons with every other key.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[])</codeEntityReference>, <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})</codeEntityReference>, <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)</codeEntityReference>, and <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overloads, for sorting pairs of arrays that represent keys and values.</para>
                <para>The code example defines an alternative comparer for strings, named <codeInline>ReverseCompare</codeInline>, which implements the <codeInline>IComparer&lt;string&gt;</codeInline> (<codeInline>IComparer(Of String)</codeInline> in Visual Basic, <codeInline>IComparer&lt;String^&gt;</codeInline> in Visual C++) generic interface. The comparer calls the <codeEntityReference autoUpgrade="false">M:System.String.CompareTo(System.String)</codeEntityReference> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</para>
                <para>The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:</para>
                <list class="bullet">
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[])</codeEntityReference> overload is used to sort both arrays in order of the dinosaur names in the first array. </para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})</codeEntityReference> overload and an instance of <codeInline>ReverseCompare</codeInline> are used to reverse the sort order of the paired arrays.</para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)</codeEntityReference> overload is used to sort the last three elements of both arrays.</para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> overload is used to sort the last three elements of both arrays in reverse order.</para>
                  </listItem>
                </list>
                <alert class="note">
                  <para>The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the <link xlink:href="db27f6b2-f1ec-499e-be3a-7eecf95ca42b">MSIL Disassembler (Ildasm.exe)</link> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</para>
                </alert>
                <codeReference>Array_Sort2IntIntIComparer#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sorts a range of elements in a pair of <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> using the specified <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>TKey</parameterReference>
            <content>
              <para>The type of the elements of the key array.</para>
            </content>
          </genericParameter>
          <genericParameter>
            <parameterReference>TValue</parameterReference>
            <content>
              <para>The type of the elements of the items array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>keys</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the keys to sort. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>items</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> that contains the items that correspond to the keys in <parameterReference>keys</parameterReference>, or <languageKeyword>null</languageKeyword> to sort only <parameterReference>keys</parameterReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The starting index of the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of elements in the range to sort.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparer</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference> generic interface implementation to use when comparing elements, or <languageKeyword>null</languageKeyword> to use the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface implementation of each element.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>keys</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than the lower bound of <parameterReference>keys</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>length</parameterReference> is less than zero.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the lower bound of <parameterReference>keys</parameterReference> does not match the lower bound of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and the length of <parameterReference>keys</parameterReference> does not match the length of <parameterReference>items</parameterReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>items</parameterReference> is not <languageKeyword>null</languageKeyword>, and <parameterReference>index</parameterReference> and <parameterReference>length</parameterReference> do not specify a valid range in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. </para>
              <para>-or-</para>
              <para>The implementation of <parameterReference>comparer</parameterReference> caused an error during the sort. For example, <parameterReference>comparer</parameterReference> might not return 0 when comparing an item with itself.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidOperationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, and one or more elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> do not implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Each key in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. When a key is repositioned during the sorting, the corresponding item in the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is similarly repositioned. Therefore, the <parameterReference>items</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is sorted according to the arrangement of the corresponding keys in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            <para>If <parameterReference>comparer</parameterReference> is <languageKeyword>null</languageKeyword>, each key within the specified range of elements in the <parameterReference>keys</parameterReference><codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> must implement the <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> generic interface to be capable of comparisons with every other key.</para>
            <para>If the sort is not successfully completed, the results are undefined.</para>
            <para>This method uses the QuickSort algorithm.  This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</para>
            <para>On average, this method is an O(<parameterReference>n</parameterReference> log <parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <parameterReference>length</parameterReference>; in the worst case it is an O(<parameterReference>n</parameterReference> ^ 2) operation.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[])</codeEntityReference>, <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})</codeEntityReference>, <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)</codeEntityReference>, and <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> generic method overloads, for sorting pairs of arrays that represent keys and values.</para>
                <para>The code example defines an alternative comparer for strings, named <codeInline>ReverseCompare</codeInline>, which implements the <codeInline>IComparer&lt;string&gt;</codeInline> (<codeInline>IComparer(Of String)</codeInline> in Visual Basic, <codeInline>IComparer&lt;String^&gt;</codeInline> in Visual C++) generic interface. The comparer calls the <codeEntityReference autoUpgrade="false">M:System.String.CompareTo(System.String)</codeEntityReference> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</para>
                <para>The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:</para>
                <list class="bullet">
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[])</codeEntityReference> overload is used to sort both arrays in order of the dinosaur names in the first array. </para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})</codeEntityReference> overload and an instance of <codeInline>ReverseCompare</codeInline> are used to reverse the sort order of the paired arrays.</para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)</codeEntityReference> overload is used to sort the last three elements of both arrays.</para>
                  </listItem>
                  <listItem>
                    <para>The <codeEntityReference autoUpgrade="false">M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})</codeEntityReference> overload is used to sort the last three elements of both arrays in reverse order.</para>
                  </listItem>
                </list>
                <alert class="note">
                  <para>The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the <link xlink:href="db27f6b2-f1ec-499e-be3a-7eecf95ca42b">MSIL Disassembler (Ildasm.exe)</link> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</para>
                </alert>
                <codeReference>Array_Sort2IntIntIComparer#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.Generic.IComparer`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.BinarySearch</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether every element in the array matches the conditions defined by the specified predicate.</para>
        </summary>
        <genericParameters>
          <genericParameter>
            <parameterReference>T</parameterReference>
            <content>
              <para>The type of the elements of the array.</para>
            </content>
          </genericParameter>
        </genericParameters>
        <parameters>
          <parameter>
            <parameterReference>array</parameterReference>
            <content>
              <para>The one-dimensional, zero-based <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to check against the conditions</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>match</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> that defines the conditions to check against the elements.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if every element in <parameterReference>array</parameterReference> matches the conditions defined by the specified predicate; otherwise, <languageKeyword>false</languageKeyword>. If there are no elements in the array, the return value is <languageKeyword>true</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>array</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
              <para>-or-</para>
              <para>
                <parameterReference>match</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> is a delegate to a method that returns <languageKeyword>true</languageKeyword> if the object passed to it matches the conditions defined in the delegate.  The elements of <parameterReference>array</parameterReference> are individually passed to the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>, and processing is stopped when the delegate returns <languageKeyword>false</languageKeyword> for any element.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is the <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference> of <parameterReference>array</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})</codeEntityReference> generic method and several other generic methods that use the <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference> generic delegate.</para>
                <para>An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus". The code example also defines a search predicate method named <codeInline>EndsWithSaurus</codeInline>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus". </para>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference> method stops and returns <languageKeyword>true</languageKeyword> at the first element for which the predicate method returns <languageKeyword>true</languageKeyword>, which in this case is "Amargasaurus". </para>
                <alert class="note">
                  <para>In C# and Visual Basic, it is not necessary to create the <codeInline>Predicate&lt;string&gt;</codeInline> delegate (<codeInline>Predicate(Of String)</codeInline> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </para>
                </alert>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})</codeEntityReference> method stops and returns <languageKeyword>false</languageKeyword> at the first element for which the predicate method returns <languageKeyword>false</languageKeyword>.</para>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.Find``1(``0[],System.Predicate{``0})</codeEntityReference> method traverses the array from the beginning, passing each element in turn to the <codeInline>EndsWithSaurus</codeInline> method. The search stops when the <codeInline>EndsWithSaurus</codeInline> method returns <languageKeyword>true</languageKeyword> for the element "Amargasaurus". </para>
                <para>The <codeEntityReference autoUpgrade="true">M:System.Array.FindLast``1(``0[],System.Predicate{``0})</codeEntityReference> method is used to search the array backward from the end. It finds the element "Dilophosaurus" at position 5. The <codeEntityReference autoUpgrade="true">M:System.Array.FindAll``1(``0[],System.Predicate{``0})</codeEntityReference> method is used to return an array containing all the elements that end in "saurus". The elements are displayed.</para>
                <codeReference>Array_FindEtAl#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.Array.Exists``1(``0[],System.Predicate{``0})</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Predicate`1</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Array.System.Collections.ICollection.Count">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the number of elements contained in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>The number of elements contained in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.ICollection.Count</codeEntityReference> is always equal to <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>.</para>
            <para>Retrieving the value of this property is an O(1) operation.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Array.GetLength(System.Int32)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.System.Collections.IList.Add(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Implements <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Collections.IList.Add(System.Object)</codeEntityReference>. Throws a <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference> in all cases.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to be added to the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An exception is always thrown.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>In all cases.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a fixed size; therefore, elements cannot be added or removed. Use the <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> method to change the value of an existing element.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.System.Collections.IList.Clear">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Sets all elements in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> to zero, to <languageKeyword>false</languageKeyword>, or to <languageKeyword>null</languageKeyword>, depending on the element type.</para>
        </summary>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is read-only.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Reference-type elements are set to <languageKeyword>null</languageKeyword>. Boolean-type elements are set to <languageKeyword>false</languageKeyword>. Other value-type elements are set to zero.</para>
            <para>This method only clears the values of the elements; it does not delete the elements themselves. <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a fixed size; therefore, elements cannot be added or removed.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.ICollection.Count</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.System.Collections.IList.Contains(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether an element is in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>. The element to locate can be <languageKeyword>null</languageKeyword> for reference types.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> is found in the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method performs a linear search; therefore, this method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.ICollection.Count</codeEntityReference>.</para>
            <para>This method determines equality by calling the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.IndexOf</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.LastIndexOf</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.System.Collections.IList.IndexOf(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Searches for the specified object and returns the index of the first occurrence within the current one-dimensional instance.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to locate in the current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index of the first occurrence of <parameterReference>value</parameterReference> within the entire <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>, if found; otherwise, the lower bound of the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> minus 1.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.RankException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is multidimensional.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The one-dimensional <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> is searched forward starting at the first element and ending at the last element.</para>
            <para>The elements are compared to the specified value using the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Object.Equals(System.Object)</codeEntityReference> method. If the element type is a nonintrinsic (user-defined) type, the <languageKeyword>Equals</languageKeyword> implementation of that type is used.</para>
            <para>Since most arrays will have a lower bound of zero, this method would generally return –1 when <parameterReference>value</parameterReference> is not found. In the rare case that the lower bound of the array is equal to <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MinValue</codeEntityReference> and <parameterReference>value</parameterReference> is not found, this method returns <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.Int32.MaxValue</codeEntityReference>, which is <codeInline>System.Int32.MinValue - 1</codeInline>.</para>
            <para>This method is an O(<parameterReference>n</parameterReference>) operation, where <parameterReference>n</parameterReference> is <codeEntityReference autoUpgrade="true">P:System.Array.Length</codeEntityReference>.</para>
          </content>
        </remarks>
        <relatedTopics>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.System.Collections.IList.Insert(System.Int32,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Implements <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Collections.IList.Insert(System.Int32,System.Object)</codeEntityReference>. Throws a <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference> in all cases.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The index at which <parameterReference>value</parameterReference> should be inserted.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to insert.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>In all cases.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a fixed size; therefore, elements cannot be added or removed. Use the <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> method to change the value of an existing element.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.Array.System.Collections.IList.Item(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets or sets the element at the specified index.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The index of the element to get or set.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The element at the specified index.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is less than zero.</para>
              <para>-or-</para>
              <para>
                <parameterReference>index</parameterReference> is equal to or greater than <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.ICollection.Count</codeEntityReference>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The current <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> does not have exactly one dimension.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This property provides the ability to access a specific element in the collection by using the following syntax: <codeInline>myCollection[index]</codeInline>.</para>
            <para>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Collections.ICollection.Count</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.GetValue</codeEntityReference>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.System.Collections.IList.Remove(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Implements <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Collections.IList.Remove(System.Object)</codeEntityReference>. Throws a <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference> in all cases.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The object to remove from the <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>In all cases.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a fixed size; therefore, elements cannot be added or removed. Use the <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> method to change the value of an existing element.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
          <link xlink:href="F12922E1-6234-4165-8896-63F0653AB478">Performing Culture-Insensitive String Operations in Arrays</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.Array.System.Collections.IList.RemoveAt(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Implements <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Collections.IList.RemoveAt(System.Int32)</codeEntityReference>. Throws a <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference> in all cases.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>The index of the element to remove.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NotSupportedException</codeEntityReference>
            <content>
              <para>In all cases.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference> has a fixed size; therefore, elements cannot be added or removed. Use the <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference> method to change the value of an existing element.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">Overload:System.Array.SetValue</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
  </members>
</doc>