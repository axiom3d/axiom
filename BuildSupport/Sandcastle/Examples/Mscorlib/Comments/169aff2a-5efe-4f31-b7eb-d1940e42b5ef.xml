<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:dev="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" fileAssetGuid="169aff2a-5efe-4f31-b7eb-d1940e42b5ef" revisionNumber="51">
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.String">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents text as a series of Unicode characters.</para>
        </summary>
        <threadSafety>
          <para>This type is safe for multithreaded operations.</para>
        </threadSafety>
        <remarks>
          <content>
            <para>A string is a sequential collection of Unicode characters that is used to represent text. A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is a sequential collection of <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Char</codeEntityReference> objects that represent a string. The value of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is the content of the sequential collection, and that value is immutable.</para>
            <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is called immutable (read-only) because its value cannot be modified once it has been created. Methods that appear to modify a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object actually return a new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object that contains the modification. If it is necessary to modify the actual contents of a string-like object, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Text.StringBuilder</codeEntityReference> class.</para>
            <para>Each Unicode character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character. Each code point is encoded using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> object. </para>
            <para>A single <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> object usually represents a single code point; that is, the numeric value of the <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> equals the code point. However, a code point might require more than one encoded element. For example, a Unicode supplementary code point (a surrogate pair) is encoded with two <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> objects.</para>
          </content>
          <sections>
            <section>
              <title>Indexes</title>
              <content>
                <para>An index is the position of a <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> object, not a Unicode character, in a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. An index is a zero-based, nonnegative number starting from the first position in the string, which is index position zero. Consecutive index values might not correspond to consecutive Unicode characters because a Unicode character might be encoded as more than one <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> object. To work with each Unicode character instead of each <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> object, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.StringInfo</codeEntityReference> class.</para>
              </content>
            </section>
            <section>
              <title>Ordinal vs. Culture-Sensitive Operations</title>
              <content>
                <para>Members of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class perform either an ordinal or linguistic operation on a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. An ordinal operation acts on the numeric value of each <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> object. A linguistic operation acts on the value of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> taking into account culture-specific casing, sorting, formatting, and parsing rules. Linguistic operations execute in the context of an explicitly declared culture or the implicit current culture. For more information about the current culture, see the <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Globalization.CultureInfo.CurrentCulture</codeEntityReference> topic.</para>
                <para>Casing rules determine how to change a Unicode character between one case and another; for example, from lowercase to uppercase.</para>
                <para>Formatting rules determine how to convert a value to its string representation, while parsing rules determine how to convert a string representation to a value.</para>
                <para>Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other. For example, the <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference> method performs a linguistic comparison while the <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference> method performs an ordinal comparison. Consequently, if the current culture is U.S. English, the <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference> method considers 'a' less than 'A' while the <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference> method considers 'a' greater than 'A'.</para>
                <para>The .NET Framework supports word, string, and ordinal sort rules. A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them. For example, the hyphen ("-") might have a very small weight assigned to it so that "coop" and "co-op" appear next to each other in a sorted list. A string sort is similar to a word sort, except that there are no special cases and all nonalphanumeric symbols come before all alphanumeric Unicode characters. </para>
                <para>A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> object, including the invariant culture that is specified by the <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Globalization.CultureInfo.InvariantCulture</codeEntityReference> property. The current implicit culture is specified by the <codeEntityReference qualifyHint="true" autoUpgrade="true">P:System.Threading.Thread.CurrentCulture</codeEntityReference> property.</para>
                <para>An ordinal sort compares strings based on the numeric value of each <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> object in the string. An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points. However, if case is not important in your application, you can specify an ordinal comparison that ignores case. This is equivalent to converting the string to uppercase using the invariant culture and then performing an ordinal comparison on the result. </para>
                <para>For more information about word, string, and ordinal sort rules, see the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference> topic.</para>
                <para>A culture-sensitive comparison is typically appropriate for sorting, whereas an ordinal comparison is not. An ordinal comparison is typically appropriate for determining whether two strings are equal (that is, for determining identity), whereas a culture-sensitive comparison is not.</para>
                <para>The Remarks for comparison and search methods specify whether the method is case-sensitive and/or culture-sensitive. By definition, any string, including the empty string (""), compares as greater than a null reference, and two null references compare as equal to each other.</para>
              </content>
            </section>
            <section>
              <title>Normalization</title>
              <content>
                <para>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD. A pair of normalized strings is typically evaluated with an ordinal comparison.</para>
              </content>
            </section>
            <section>
              <title>Security Considerations</title>
              <content>
                <para>If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison. This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.</para>
              </content>
            </section>
            <section>
              <title>Functionality</title>
              <content>
                <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class provides members to compare <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects, return the index of a character or string within a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object, copy the value of a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object, partition a string or combine strings, modify the value of string, format numbers, dates and times, or enumeration values into a string, and normalize a string.</para>
                <list class="bullet">
                  <listItem>
                    <para>Use the <codeEntityReference autoUpgrade="true">Overload:System.String.Compare</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.CompareOrdinal</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.CompareTo</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.Equals</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.EndsWith</codeEntityReference>, and <codeEntityReference autoUpgrade="true">Overload:System.String.StartsWith</codeEntityReference> methods for comparisons. </para>
                  </listItem>
                  <listItem>
                    <para>Use the <codeEntityReference autoUpgrade="true">Overload:System.String.IndexOf</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.IndexOfAny</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.LastIndexOf</codeEntityReference>, and <codeEntityReference autoUpgrade="true">Overload:System.String.LastIndexOfAny</codeEntityReference> methods to obtain the index of a substring or Unicode character in a string. </para>
                  </listItem>
                  <listItem>
                    <para>Use <codeEntityReference autoUpgrade="true">M:System.String.Copy(System.String)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)</codeEntityReference> to copy a string or substring to another string or an array of type <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>.</para>
                  </listItem>
                  <listItem>
                    <para>Use the <codeEntityReference autoUpgrade="true">Overload:System.String.Substring</codeEntityReference> and <codeEntityReference autoUpgrade="true">Overload:System.String.Split</codeEntityReference> methods to create one or more new strings from portions of an original string, and the <codeEntityReference autoUpgrade="true">Overload:System.String.Concat</codeEntityReference> and <codeEntityReference autoUpgrade="true">Overload:System.String.Join</codeEntityReference> methods to create a new string from one or more substrings. </para>
                  </listItem>
                  <listItem>
                    <para>Use <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.Replace</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.Remove</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.PadLeft</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.PadRight</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.Trim</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.String.TrimEnd(System.Char[])</codeEntityReference>, and <codeEntityReference autoUpgrade="true">M:System.String.TrimStart(System.Char[])</codeEntityReference> to modify all or part of a string.</para>
                  </listItem>
                  <listItem>
                    <para>Use the <codeEntityReference autoUpgrade="true">Overload:System.String.ToLower</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:System.String.ToLowerInvariant</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.String.ToUpper</codeEntityReference>, and <codeEntityReference autoUpgrade="true">M:System.String.ToUpperInvariant</codeEntityReference> methods to change the case of Unicode characters in a string. </para>
                  </listItem>
                  <listItem>
                    <para>Use <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference> to replace one or more format item placeholders in a string with the text representation of one or more numeric, date and time, or enumeration values. </para>
                  </listItem>
                  <listItem>
                    <para>Use the <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference> property to obtain the number of <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> objects in a string, and the <codeEntityReference autoUpgrade="true">P:System.String.Chars(System.Int32)</codeEntityReference> property to access the actual <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> objects in a string.</para>
                  </listItem>
                  <listItem>
                    <para>Use the <codeEntityReference autoUpgrade="true">Overload:System.String.IsNormalized</codeEntityReference> method to test whether a string is normalized to a particular normalization form. Use the <codeEntityReference autoUpgrade="true">Overload:System.String.Normalize</codeEntityReference> method to create a string that is normalized to a particular normalization form.</para>
                  </listItem>
                </list>
              </content>
            </section>
            <section>
              <title>Implemented Interfaces</title>
              <content>
                <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class implements the <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.ICloneable</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>, <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerable</codeEntityReference>, and <codeEntityReference autoUpgrade="true">T:System.IComparable`1</codeEntityReference> interfaces. Use the <codeEntityReference autoUpgrade="true">T:System.Convert</codeEntityReference> class for conversions instead of this type's explicit interface member implementation of <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.IComparable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.ICloneable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.IConvertible</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerable</codeEntityReference>
          <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Text.StringBuilder</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>
          <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="F:System.String.Empty">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Represents the empty string. This field is read-only.</para>
        </summary>
        <remarks>
          <content>
            <para>The value of this field is the zero-length string, "".</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code examples demonstrate how the <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> field can be used.</para>
                <para>In the first example, the <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is returned as a default value if the value of another field is <languageKeyword>null</languageKeyword>.</para>
                <codeReference>DataBinding#1</codeReference>
                <para>In the second example, the <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference> to test a substring.</para>
                <codeReference>Classic String.Substring1 Example#1</codeReference>
                <para>In the third example, the <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in the decision block of the <codeEntityReference autoUpgrade="true">T:System.Xml.XPath.XPathNavigator</codeEntityReference> object to make decisions about XML parsing.</para>
                <codeReference>XPathNavigator.MoveToNext#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.String.#ctor">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class to the value indicated by a specified pointer to an array of Unicode characters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A pointer to a null terminated array of Unicode characters. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The current process does not have read access to all the addressed characters.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> specifies an array that contains an invalid Unicode character, or<parameterReference> value</parameterReference> specifies an address less than 64000.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>value</parameterReference> is a null pointer, an <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> instance is initialized.</para>
            <para>This constructor copies the sequence of Unicode characters at the specified pointer until a null character (hexadecimal 0x00) is reached.</para>
            <para>If the specified array is not null-terminated, the behavior of this constructor is system dependent. For example, such a situation might cause an access violation.</para>
            <para>In C#, this constructor is defined only in the context of unsafe code.</para>
          </content>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A pointer to an array of Unicode characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting position within <parameterReference>value</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of characters within <parameterReference>value</parameterReference> to use. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> or <parameterReference>length</parameterReference> is less than zero, <parameterReference>value</parameterReference> + <parameterReference>startIndex</parameterReference> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> specifies an array that contains an invalid Unicode character, or<parameterReference> value</parameterReference> + <parameterReference>startIndex</parameterReference> specifies an address less than 64000.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>length</parameterReference> is zero, an <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> instance is initialized.</para>
            <para>This constructor copies Unicode characters from <parameterReference>value</parameterReference>, starting at <parameterReference>startIndex</parameterReference> and ending at (<parameterReference>startIndex</parameterReference> + <parameterReference>length</parameterReference> - 1).</para>
            <para>If the specified range is outside of the memory allocated for the sequence of characters, the behavior of this constructor is system dependent. For example, such a situation might cause an access violation.</para>
            <para>In C#, this constructor is defined only in the context of unsafe code.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class to the value indicated by a specified Unicode character repeated a specified number of times.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>c</parameterReference>
            <content>
              <para>A Unicode character. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of times <parameterReference>c</parameterReference> occurs. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>count</parameterReference> is zero, an <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> instance is initialized.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following simple code example demonstrates how you can create an instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class with this constructor.</para>
                <codeReference>stringexample1#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class to the value indicated by an array of Unicode characters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An array of Unicode characters. </para>
            </content>
          </parameter>
        </parameters>
        <remarks>
          <content>
            <para>If value is <languageKeyword>null</languageKeyword> or contains no element, an <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> instance is initialized.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following simple code example demonstrates how you can create an instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class with this constructor.</para>
                <codeReference>stringexample1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An array of Unicode characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting position within <parameterReference>value</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of characters within <parameterReference>value</parameterReference> to use. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> or <parameterReference>length</parameterReference> is less than zero.</para>
              <para>-or- </para>
              <para>The sum of <parameterReference>startIndex</parameterReference> and <parameterReference>length</parameterReference> is greater than the number of elements in <parameterReference>value</parameterReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>length</parameterReference> is zero, an <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> instance is initialized.</para>
            <para>This constructor copies Unicode characters from <parameterReference>value</parameterReference>, starting at <parameterReference>startIndex</parameterReference> and ending at (<parameterReference>startIndex</parameterReference> + <parameterReference>length</parameterReference> - 1).</para>
          </content>
          <sections>
            <section>
              <title>Performance Considerations</title>
              <content>
                <para>Applications that parse or decode streams of text often use the <codeEntityReference autoUpgrade="true">M:System.String.#ctor(System.Char[],System.Int32,System.Int32)</codeEntityReference> constructor or <codeEntityReference qualifyHint="true" autoUpgrade="false">M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)</codeEntityReference> method to convert runs of characters into a string. If your application repeatedly encounters the same runs of characters, it will waste memory if it repeatedly creates new strings with the same value instead of creating and reusing one string. </para>
                <para>If your application will repeatedly encounter the same runs of characters, but you cannot predict what those runs will be, you might consider using a lookup table instead of creating new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects with the <codeEntityReference autoUpgrade="true">M:System.String.#ctor(System.Char[],System.Int32,System.Int32)</codeEntityReference> constructor. For example, suppose your application reads and parses a stream of characters from a file that contains XML tags and attributes. When you parse the stream, you repeatedly encounter certain tokens (that is, runs of characters with symbolic meaning). Tokens equivalent to the strings "0", "1", "true", and "false" are likely to occur frequently in an XML stream. </para>
                <para>Instead of converting each token your application encounters into a new string, you can create a <codeEntityReference autoUpgrade="true">T:System.Xml.NameTable</codeEntityReference> object to hold commonly occurring strings. The <codeEntityReference autoUpgrade="true">T:System.Xml.NameTable</codeEntityReference> object improves performance because it retrieves stored strings without allocating temporary memory. </para>
                <para>When your application encounters a token, use the <codeEntityReference qualifyHint="true" autoUpgrade="false">M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)</codeEntityReference> method to attempt to retrieve the token from the table. If the token exists, the method returns the corresponding string. If the token does not exist, use the <codeEntityReference qualifyHint="true" autoUpgrade="false">M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)</codeEntityReference> method to insert the token into the table. After the token is inserted, the method returns the corresponding string. In either case, the appropriate string is returned to your application.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following simple code example demonstrates how you can create an instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class with this constructor.</para>
                <codeReference>stringexample1#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class to the value indicated by a pointer to an array of 8-bit signed integers.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A pointer to a null terminated array of 8-bit signed integers. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>A new instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> could not be initialized using <parameterReference>value</parameterReference>, assuming <parameterReference>value</parameterReference> is encoded in ASCII. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>The length of the new string to initialize, which is determined by the null termination character of <parameterReference>value</parameterReference>, is too large to allocate. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.AccessViolationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> specifies an invalid address.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>value</parameterReference> parameter is assumed to point to an array representing a string encoded in ASCII; that is, the string is encoded using the ANSI code page.</para>
            <para>This constructor processes characters from <parameterReference>value</parameterReference> starting from the location specified by the pointer until a null character (hexadecimal 0x00) is reached.</para>
            <para>If the specified array is not null-terminated, the behavior of this constructor is system dependent. For example, such a situation might cause an access violation.</para>
            <para>In C#, this constructor is defined only in the context of unsafe code.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following simple code example demonstrates how you can create an instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class with this constructor.</para>
                <codeReference>stringexample1#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.SByte</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting character position within that array, and a length.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A pointer to an array of 8-bit signed integers. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting position within <parameterReference>value</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of characters within <parameterReference>value</parameterReference> to use. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> or <parameterReference>length</parameterReference> is less than zero. </para>
              <para>-or-</para>
              <para>The address specified by <parameterReference>value</parameterReference> + <parameterReference>startIndex</parameterReference> is too large for the current platform; that is, the address calculation overflowed. </para>
              <para>-or-</para>
              <para>The length of the new string to initialize is too large to allocate.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The address specified by <parameterReference>value</parameterReference> + <parameterReference>startIndex</parameterReference> is less than 64K.</para>
              <para>-or- </para>
              <para>A new instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> could not be initialized using <parameterReference>value</parameterReference>, assuming <parameterReference>value</parameterReference> is encoded in ASCII. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.AccessViolationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference>, <parameterReference>startIndex</parameterReference>, and <parameterReference>length</parameterReference> collectively specify an invalid address.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>value</parameterReference> parameter is assumed to point to an array representing a string encoded in ASCII; that is, the string is encoded using the ANSI code page.</para>
            <para>If <parameterReference>length</parameterReference> is zero, the new instance is initialized to the empty string ("").</para>
            <para>This constructor processes characters from <parameterReference>value</parameterReference> starting at <parameterReference>startIndex</parameterReference> and ending at (<parameterReference>startIndex</parameterReference> + <parameterReference>length</parameterReference> - 1).</para>
            <para>If the specified range is outside of the memory allocated for the sequence of characters, the behavior of this constructor is system dependent. For example, such a situation might cause an access violation.</para>
            <para>In C#, this constructor is defined only in the context of unsafe code.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following simple code example demonstrates how you can create an instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class with this constructor.</para>
                <codeReference>stringexample1#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.SByte</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Initializes a new instance of the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting character position within that array, a length, and an <codeEntityReference autoUpgrade="true">T:System.Text.Encoding</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A pointer to an array of 8-bit signed integers. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting position within <parameterReference>value</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of characters within <parameterReference>value</parameterReference> to use. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>enc</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Text.Encoding</codeEntityReference> object that specifies how the array referenced by <parameterReference>value</parameterReference> is encoded. If <parameterReference>enc</parameterReference> is <languageKeyword>null</languageKeyword>, ANSI encoding is assumed.</para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> or <parameterReference>length</parameterReference> is less than zero. </para>
              <para>-or-</para>
              <para>The address specified by <parameterReference>value</parameterReference> + <parameterReference>startIndex</parameterReference> is too large for the current platform; that is, the address calculation overflowed. </para>
              <para>-or-</para>
              <para>The length of the new string to initialize is too large to allocate.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>The address specified by <parameterReference>value</parameterReference> + <parameterReference>startIndex</parameterReference> is less than 64K.</para>
              <para>-or- </para>
              <para>A new instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> could not be initialized using <parameterReference>value</parameterReference>, assuming <parameterReference>value</parameterReference> is encoded as specified by <parameterReference>enc</parameterReference>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.AccessViolationException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference>, <parameterReference>startIndex</parameterReference>, and <parameterReference>length</parameterReference> collectively specify an invalid address.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>value</parameterReference> parameter is assumed to point to an array representing a string encoded as specified by <parameterReference>enc</parameterReference>.</para>
            <para>If <parameterReference>length</parameterReference> is zero, the new instance is initialized to the empty string ("").</para>
            <para>This constructor processes characters from <parameterReference>value</parameterReference> starting at <parameterReference>startIndex</parameterReference> and ending at (<parameterReference>startIndex</parameterReference> + <parameterReference>length</parameterReference> - 1).</para>
            <para>If the specified range is outside of the memory allocated for the sequence of characters, the behavior of this constructor is system dependent. For example, such a situation might cause an access violation.</para>
            <para>In C#, this constructor is defined only in the context of unsafe code.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following simple code example demonstrates how you can create an instance of a UTF-8 <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with this constructor.</para>
                <codeReference>stringexample1#4</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.SByte</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Clone">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a reference to this instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>This instance of <languageKeyword>String</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The return value is not an independent copy of this instance; it is simply another view of the same data. Use the <codeEntityReference autoUpgrade="true">M:System.String.Copy(System.String)</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)</codeEntityReference> method to create a separate <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object with the same value as this instance.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following simple code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.Clone</codeEntityReference> method.</para>
                <codeReference>stringexample1#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Copy(System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.Compare">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares substrings of two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strA</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indexA</parameterReference>
            <content>
              <para>The position of the substring within <parameterReference>strA</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indexB</parameterReference>
            <content>
              <para>The position of the substring within <parameterReference>strB</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The maximum number of characters in the substrings to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value </para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>The substring in <parameterReference>strA</parameterReference> is less than the substring in <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>The substrings are equal, or <parameterReference>length</parameterReference> is zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>The substring in <parameterReference>strA</parameterReference> is greater than the substring in <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>indexA</parameterReference> is greater than <parameterReference>strA</parameterReference>. <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>indexB</parameterReference> is greater than <parameterReference>strB</parameterReference>. <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>indexA</parameterReference>, <parameterReference>indexB</parameterReference>, or <parameterReference>length</parameterReference> is negative. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The substrings to compare start at <parameterReference>strA</parameterReference> plus <parameterReference>indexA</parameterReference>, and <parameterReference>strB</parameterReference> plus <parameterReference>indexB</parameterReference>. The length of the first substring is the length of <parameterReference>strA</parameterReference> minus <parameterReference>indexA</parameterReference>, and the length of the second substring is the length of <parameterReference>strB</parameterReference> minus <parameterReference>indexB</parameterReference>.</para>
            <para>The number of characters to compare is the lesser of the lengths of the two substrings, and <parameterReference>length</parameterReference>. The <parameterReference>indexA</parameterReference>, <parameterReference>indexB</parameterReference>, and <parameterReference>length</parameterReference> parameters must be nonnegative.</para>
            <para>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</para>
            <para>The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference>.</para>
            <para>One or both comparands can be <languageKeyword>null</languageKeyword>. By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</para>
            <para>The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</para>
            <para>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter 'i' in "file".</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true)== 0); }</code>
            <para>Compare the path name to "file" using an ordinal comparison. The correct code to do this is as follows:</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true, StringComparison.OrdinalIgnoreCase)== 0); }</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example compares two substrings.</para>
                <codeReference>string.compare3#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Compares two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares substrings of two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects, ignoring or honoring their case.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strA</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indexA</parameterReference>
            <content>
              <para>The position of the substring within <parameterReference>strA</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indexB</parameterReference>
            <content>
              <para>The position of the substring within <parameterReference>strB</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The maximum number of characters in the substrings to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ignoreCase</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference> indicating a case-sensitive or insensitive comparison. (<languageKeyword>true</languageKeyword> indicates a case-insensitive comparison.) </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value</para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>The substring in <parameterReference>strA</parameterReference> is less than the substring in <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>The substrings are equal, or <parameterReference>length</parameterReference> is zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>The substring in <parameterReference>strA</parameterReference> is greater than the substring in <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>indexA</parameterReference> is greater than <parameterReference>strA</parameterReference>. <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>indexB</parameterReference> is greater than <parameterReference>strB</parameterReference>. <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>indexA</parameterReference>, <parameterReference>indexB</parameterReference>, or <parameterReference>length</parameterReference> is negative. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The substrings to compare start at <parameterReference>strA</parameterReference> plus <parameterReference>indexA</parameterReference>, and <parameterReference>strB</parameterReference> plus <parameterReference>indexB</parameterReference>. The length of the first substring is the length of <parameterReference>strA</parameterReference> minus <parameterReference>indexA</parameterReference>, and the length of the second substring is the length of <parameterReference>strB</parameterReference> minus <parameterReference>indexB</parameterReference>.</para>
            <para>The number of characters to compare is the lesser of the lengths of the two substrings, and <parameterReference>length</parameterReference>. The <parameterReference>indexA</parameterReference>, <parameterReference>indexB</parameterReference>, and <parameterReference>length</parameterReference> parameters must be nonnegative.</para>
            <para>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</para>
            <para>The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference>.</para>
            <para>One or both comparands can be <languageKeyword>null</languageKeyword>. By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</para>
            <para>The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</para>
            <para>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter 'i' in "file".</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true)== 0); }</code>
            <para>The path name needs to be compared in an invariant manner. The correct code to do this is as follows.</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true, StringComparison.OrdinalIgnoreCase)== 0); }</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example performs two comparisons of two substrings that only differ in case. The first comparison ignores case and the second comparison considers case. </para>
                <codeReference>string.compare4#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares substrings of two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strA</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indexA</parameterReference>
            <content>
              <para>The position of the substring within <parameterReference>strA</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indexB</parameterReference>
            <content>
              <para>The position of the substring within the <parameterReference>strB</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The maximum number of characters in the substrings to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ignoreCase</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference> indicating a case-sensitive or insensitive comparison. (<languageKeyword>true</languageKeyword> indicates a case-insensitive comparison.) </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> object that supplies culture-specific comparison information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value </para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>The substring in <parameterReference>strA</parameterReference> is less than the substring in <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>The substrings are equal, or <parameterReference>length</parameterReference> is zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>The substring in <parameterReference>strA</parameterReference> is greater than the substring in <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>indexA</parameterReference> is greater than <parameterReference>strA</parameterReference>. <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>indexB</parameterReference> is greater than <parameterReference>strB</parameterReference>. <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>indexA</parameterReference>, <parameterReference>indexB</parameterReference>, or <parameterReference>length</parameterReference> is negative. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The substrings to compare start at <parameterReference>strA</parameterReference> plus <parameterReference>indexA</parameterReference>, and <parameterReference>strB</parameterReference> plus <parameterReference>indexB</parameterReference>. The length of the first substring is the length of <parameterReference>strA</parameterReference> minus <parameterReference>indexA</parameterReference>, and the length of the second substring is the length of <parameterReference>strB</parameterReference> minus <parameterReference>indexB</parameterReference>.</para>
            <para>The number of characters to compare is the lesser of the lengths of the two substrings, and <parameterReference>length</parameterReference>. The <parameterReference>indexA</parameterReference>, <parameterReference>indexB</parameterReference>, and <parameterReference>length</parameterReference> parameters must be nonnegative.</para>
            <para>The comparison uses the <parameterReference>culture</parameterReference> parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</para>
            <para>The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference>.</para>
            <para>One or both comparands can be <languageKeyword>null</languageKeyword>. By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</para>
            <para>The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</para>
            <para>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter 'i' in "file".</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true)== 0); }</code>
            <para>Compare the path name to "file" using an ordinal comparison. The correct code to do this is as follows:</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true, StringComparison.OrdinalIgnoreCase)== 0); }</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example compares two substrings using different cultures and ignoring the case of the substrings. The choice of culture affects how the letter 'I' is compared.</para>
                <codeReference>string.compare5#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares substrings of two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strA</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indexA</parameterReference>
            <content>
              <para>The position of the substring within <parameterReference>strA</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indexB</parameterReference>
            <content>
              <para>The position of the substring within <parameterReference>strB</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The maximum number of characters in the substrings to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference> values. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value </para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>The substring in the <parameterReference>strA</parameterReference> parameter is less than the substring in the <parameterReference>strB</parameterReference> parameter.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>The substrings are equal, or the <parameterReference>length</parameterReference> parameter is zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>The substring in <parameterReference>strA</parameterReference> is greater than the substring in <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>indexA</parameterReference> is greater than <parameterReference>strA</parameterReference>. <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>indexB</parameterReference> is greater than <parameterReference>strB</parameterReference>. <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>indexA</parameterReference>, <parameterReference>indexB</parameterReference>, or <parameterReference>length</parameterReference> is negative. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference> value. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The substrings to compare start at <parameterReference>strA</parameterReference> plus <parameterReference>indexA</parameterReference>, and <parameterReference>strB</parameterReference> plus <parameterReference>indexB</parameterReference>. The length of the first substring is the length of <parameterReference>strA</parameterReference> minus <parameterReference>indexA</parameterReference>, and the length of the second substring is the length of <parameterReference>strB</parameterReference> minus <parameterReference>indexB</parameterReference>.</para>
            <para>The number of characters to compare is the lesser of the lengths of the two substrings, and <parameterReference>length</parameterReference>. The <parameterReference>indexA</parameterReference>, <parameterReference>indexB</parameterReference>, and <parameterReference>length</parameterReference> parameters must be nonnegative.</para>
            <para>The <parameterReference>comparisonType</parameterReference> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</para>
            <para>One or both comparands can be <languageKeyword>null</languageKeyword>. By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</para>
            <para>The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</para>
            <para>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter 'i' in "file".</para>
            <code>static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true)== 0); }</code>
            <para>Compare the path name to "file" using an ordinal comparison. The correct code to do this is as follows:</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true, StringComparison.OrdinalIgnoreCase)== 0); }</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example compares two substrings.</para>
                <codeReference>string.compare3#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strA</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value </para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> is less than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> equals <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> is greater than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <remarks>
          <content>
            <para>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</para>
            <para>The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference>.</para>
            <para>One or both comparands can be <languageKeyword>null</languageKeyword>. By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</para>
            <para>The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</para>
            <para>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter 'i' in "file".</para>
            <code>static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true)== 0); }</code>
            <para>Compare the path name to "file" using an ordinal comparison. The correct code to do this is as follows:</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true, StringComparison.OrdinalIgnoreCase)== 0); }</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>In the following code example, the <languageKeyword>ReverseStringComparer</languageKeyword> class demonstrates how you can evaluate two strings with the <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference> method.</para>
                <codeReference>ArrayList#7</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects, ignoring or honoring their case.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strA</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ignoreCase</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference> indicating a case-sensitive or insensitive comparison. (<languageKeyword>true</languageKeyword> indicates a case-insensitive comparison.) </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value </para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> is less than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> equals <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> is greater than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <remarks>
          <content>
            <para>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</para>
            <para>The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference>.</para>
            <para>One or both comparands can be <languageKeyword>null</languageKeyword>. By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</para>
            <para>The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</para>
            <para>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter 'i' in "file".</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true)== 0); }</code>
            <para>Compare the path name to "file" using an ordinal comparison. The correct code to do this is as follows:</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true, StringComparison.OrdinalIgnoreCase)== 0); }</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how this <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference> method is equivalent to using <codeEntityReference autoUpgrade="true">M:System.String.ToUpper</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.String.ToLower</codeEntityReference> when comparing strings.</para>
                <codeReference>stringexample1#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strA</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ignoreCase</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference> indicating a case-sensitive or insensitive comparison. (<languageKeyword>true</languageKeyword> indicates a case-insensitive comparison.) </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> object that supplies culture-specific comparison information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value </para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> is less than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> equals <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> is greater than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The comparison uses the <parameterReference>culture</parameterReference> parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</para>
            <para>The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference>.</para>
            <para>One or both comparands can be <languageKeyword>null</languageKeyword>. By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</para>
            <para>The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</para>
            <para>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter 'i' in "file".</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true)== 0); }</code>
            <para>Compare the path name to "file" using an ordinal comparison. The correct code to do this is as follows:</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true, StringComparison.OrdinalIgnoreCase)== 0); }</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how culture can affect a comparison. In Czech - Czech Republic culture, 'ch' is a single character that is greater than 'd'. However, in English - United States culture, "ch" consists of two characters, and 'c' is less than 'd'.</para>
                <codeReference>string.comp4#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Boolean</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects. A parameter specifies whether the comparison uses the current or invariant culture, honors or ignores case, and uses word or ordinal sort rules.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strA</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> values. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value </para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> is less than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> equals <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> is greater than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference> value. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>comparisonType</parameterReference> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</para>
            <para>One or both comparands can be <languageKeyword>null</languageKeyword>. By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</para>
            <para>The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</para>
            <para>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter 'i' in "file".</para>
            <code>static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true)== 0); }</code>
            <para>Compare the path name to "file" using an ordinal comparison. The correct code to do this is as follows:</para>
            <code> static String IsFileURI(String path) { 
    return (String.Compare(path, 0, "file:", 0, 5, true, StringComparison.OrdinalIgnoreCase)== 0); }</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example compares three versions of the letter 'I'. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</para>
                <codeReference>System.String.CompareCmp#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.CompareOrdinal">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares two <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects by evaluating the numeric values of the corresponding <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> objects in each string.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares substrings of two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects by evaluating the numeric values of the corresponding <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> objects in each substring. </para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strA</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indexA</parameterReference>
            <content>
              <para>The starting index of the substring in <parameterReference>strA</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>indexB</parameterReference>
            <content>
              <para>The starting index of the substring in <parameterReference>strB</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The maximum number of characters in the substrings to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value</para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>The substring in <parameterReference>strA</parameterReference> is less than the substring in <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>The substrings are equal, or <parameterReference>length</parameterReference> is zero. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>The substring in <parameterReference>strA</parameterReference> is greater than the substring in <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>indexA</parameterReference> is greater than <parameterReference>strA</parameterReference>. <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>indexB</parameterReference> is greater than <parameterReference>strB</parameterReference>. <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference>.</para>
              <para>-or- </para>
              <para>
                <parameterReference>indexA</parameterReference>, <parameterReference>indexB</parameterReference>, or <parameterReference>length</parameterReference> is negative. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>indexA</parameterReference>, <parameterReference>indexB</parameterReference>, and <parameterReference>length</parameterReference> parameters must be nonnegative.</para>
            <para>The number of characters compared is the lesser of the length of <parameterReference>strA</parameterReference> less <parameterReference>indexA</parameterReference>, the length of <parameterReference>strB</parameterReference> less <parameterReference>indexB</parameterReference>, and <parameterReference>length</parameterReference>.</para>
            <para>This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>This following code example demonstrates that <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference> use different sort orders.</para>
                <codeReference>StringCompareOrdinal#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Compares two <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects by evaluating the numeric values of the corresponding <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> objects in each string.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects by evaluating the numeric values of the corresponding <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> objects in each string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strA</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value</para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> is less than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> and <parameterReference>strB</parameterReference> are equal. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>
                  <parameterReference>strA</parameterReference> is greater than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <remarks>
          <content>
            <para>This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example performs and ordinal comparison of two strings that only differ in case.</para>
                <codeReference>string.compareordinal#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.CompareTo">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares this instance with a specified object or <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> and returns an indication of their relative values.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares this instance with a specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> that evaluates to a <languageKeyword>String</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value </para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>This instance is less than <parameterReference>value</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>This instance is equal to <parameterReference>value</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>This instance is greater than <parameterReference>value</parameterReference>.</para>
                <para>-or- </para>
                <para>
                  <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>value</parameterReference> must be a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
            <para>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference>.</para>
            <para>For more information about the behavior of this method, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference> method.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can use the <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference> method with an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>.</para>
                <codeReference>ExToString#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Compares this instance with a specified object or <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> and returns an indication of their relative values.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Compares this instance with a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>strB</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
          <table>
            <tableHeader>
              <row>
                <entry>
                  <para>Value </para>
                </entry>
                <entry>
                  <para>Condition </para>
                </entry>
              </row>
            </tableHeader>
            <row>
              <entry>
                <para>Less than zero </para>
              </entry>
              <entry>
                <para>This instance is less than <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Zero </para>
              </entry>
              <entry>
                <para>This instance is equal to <parameterReference>strB</parameterReference>. </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Greater than zero </para>
              </entry>
              <entry>
                <para>This instance is greater than <parameterReference>strB</parameterReference>.</para>
                <para>-or- </para>
                <para>
                  <parameterReference>strB</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
              </entry>
            </row>
          </table>
        </returnValue>
        <remarks>
          <content>
            <para>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference>.</para>
            <para>For more information about the behavior of this method, see the Remarks section of the <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference> method.</para>
            <para>This method implements the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.IComparable`1</codeEntityReference> interface, and performs slightly better than the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference> method because it does not have to unbox an object that contains a string.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can use the <codeEntityReference autoUpgrade="true">M:System.String.CompareTo(System.Object)</codeEntityReference> method with another <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
                <codeReference>stringcompareto#1</codeReference>
                <para>The following code example demonstrates generic and non-generic versions of the CompareTo method for several value and reference types.</para>
                <codeReference>T.CompareTo#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.Concat">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates one or more instances of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, or the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of the values of one or more instances of <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of a specified object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representation of the value of <parameterReference>arg0</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>An <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in place of any null argument.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference> method.</para>
                <codeReference>string.concat5#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Concatenates one or more instances of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, or the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of the values of one or more instances of <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of two specified objects.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The concatenated <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of the values of <parameterReference>arg0</parameterReference> and <parameterReference>arg1</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>An <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in place of any null argument.</para>
            <para>If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, "System.String[]").</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference> method.</para>
                <codeReference>string.concat5#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of three specified objects.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg2</parameterReference>
            <content>
              <para>The third <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The concatenated <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of the values of <parameterReference>arg0</parameterReference>, <parameterReference>arg1</parameterReference>, and <parameterReference>arg2</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>An <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in place of any null argument.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference> method.</para>
                <codeReference>string.concat5#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of the elements in a specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The concatenated <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of the values of the elements in <parameterReference>args</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>args</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>An <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in place of any null object in the array.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of the <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference> method with an <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array.</para>
                <codeReference>stringconcat1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates two specified instances of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>str0</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>str1</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The concatenation of <parameterReference>str0</parameterReference> and <parameterReference>str1</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>An <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in place of any null argument.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example concatenates a person's first, middle, and last name.</para>
                <codeReference>stringconcat4#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates three specified instances of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>str0</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>str1</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>str2</parameterReference>
            <content>
              <para>The third <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The concatenation of <parameterReference>str0</parameterReference>, <parameterReference>str1</parameterReference>, and <parameterReference>str2</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>An <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in place of any null argument.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>In the following code example, the output to the Console is generated using this <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference> method.</para>
                <codeReference>Classic DateTime.ToString2 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates four specified instances of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>str0</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>str1</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>str2</parameterReference>
            <content>
              <para>The third <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>str3</parameterReference>
            <content>
              <para>The fourth <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The concatenation of <parameterReference>str0</parameterReference>, <parameterReference>str1</parameterReference>, <parameterReference>str2</parameterReference>, and <parameterReference>str3</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>An <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in place of any null object in the array.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>In the following code example the DataBinding output is generated using this <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference> method.</para>
                <codeReference>DataBinding#10</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates the elements of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>values</parameterReference>
            <content>
              <para>An array of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> instances. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The concatenated elements of <parameterReference>values</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>values</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>An <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in place of any null object in the array.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the use of the <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference> method with a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array.</para>
                <codeReference>stringconcat3#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a value indicating whether the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object occurs within this string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to seek. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the <parameterReference>value</parameterReference> parameter occurs within this string, or if <parameterReference>value</parameterReference> is the empty string (""); otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the first character position of this string and continues through the last character position.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example determines whether the string "fox" is a substring of a familiar quotation.</para>
                <codeReference>String.Contains#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Creates a new instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the same value as a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>str</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to copy. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the same value as <parameterReference>str</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>str</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays two disimilar strings referenced by two variables, creates a copy of the first string, assigns a reference to the new string to the second variable, then displays the two strings referenced by the variables to demonstrate that the strings are now identical. </para>
                <codeReference>string.copy#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.DBNull</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>sourceIndex</parameterReference>
            <content>
              <para>A character position in this instance. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>destination</parameterReference>
            <content>
              <para>An array of Unicode characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>destinationIndex</parameterReference>
            <content>
              <para>An array element in <parameterReference>destination</parameterReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of characters in this instance to copy to <parameterReference>destination</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>destination</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>sourceIndex</parameterReference>, <parameterReference>destinationIndex</parameterReference>, or <parameterReference>count</parameterReference> is negative </para>
              <para>-or- </para>
              <para>
                <parameterReference>count</parameterReference> is greater than the length of the substring from <parameterReference>startIndex</parameterReference> to the end of this instance </para>
              <para>-or- </para>
              <para>
                <parameterReference>count</parameterReference> is greater than the length of the subarray from <parameterReference>destinationIndex</parameterReference> to the end of <parameterReference>destination</parameterReference></para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>count</parameterReference> characters are copied from the <parameterReference>sourceIndex</parameterReference> position of this instance to the <parameterReference>destinationIndex</parameterReference> position of <parameterReference>destination</parameterReference>.</para>
            <para>
              <parameterReference>sourceIndex</parameterReference> and <parameterReference>destinationIndex</parameterReference> are zero-based.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)</codeEntityReference> method.</para>
                <codeReference>stringcopyto#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Substring(System.Int32)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.EndsWith">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether the end of an instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> matches a specified string.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether the end of this instance matches the specified string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to compare to. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> matches the end of this instance; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method compares <parameterReference>value</parameterReference> to the substring at the end of this instance that is the same length as <parameterReference>value</parameterReference>, and returns an indication whether they are equal. To be equal, <parameterReference>value</parameterReference> must be a reference to this same instance, or match the end of this instance.</para>
            <para>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can use the <codeEntityReference autoUpgrade="true">M:System.String.EndsWith(System.String)</codeEntityReference> method.</para>
                <codeReference>stringendswith#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.StartsWith(System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Compare(System.String,System.String)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Determines whether the end of an instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> matches a specified string.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether the end of this string matches the specified string when compared using the specified culture.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to compare to. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ignoreCase</parameterReference>
            <content>
              <para>
                <languageKeyword>true</languageKeyword> to ignore case when comparing this instance and <parameterReference>value</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>Cultural information that determines how this instance and <parameterReference>value</parameterReference> are compared. If <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>, the current culture is used.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the <parameterReference>value</parameterReference> parameter matches the end of this string; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method compares the <parameterReference>value</parameterReference> parameter to the substring at the end of this string that is the same length as <parameterReference>value</parameterReference>, and returns a value that indicates whether they are equal. To be equal, <parameterReference>value</parameterReference> must be a reference to this same instance, or match the end of this string.</para>
            <para>This method performs a word (culture-sensitive) comparison using the specified casing and culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether the end of this string matches the specified string when compared using the specified comparison option.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to compare to. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference> values that determines how this string and <parameterReference>value</parameterReference> are compared. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the <parameterReference>value</parameterReference> parameter matches the end of this string; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference> value.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.String.EndsWith(System.String,System.StringComparison)</codeEntityReference> method compares the <parameterReference>value</parameterReference> parameter to the substring at the end of this string and returns a value that indicates whether they are equal. To be equal, <parameterReference>value</parameterReference> must be a reference to this same string, be the empty string (""), or match the end of this string. The type of comparison performed by the <codeEntityReference autoUpgrade="true">M:System.String.EndsWith(System.String,System.StringComparison)</codeEntityReference> method depends on the value of the <parameterReference>comparisonType</parameterReference> parameter.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example determines whether a string ends with a particular substring. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</para>
                <codeReference>System.String.EndsWithCmp#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.Equals">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether two <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects have the same value.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether this instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> and a specified object, which must also be a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object, have the same value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>obj</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>obj</parameterReference> is a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> and its value is the same as this instance; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NullReferenceException</codeEntityReference>
            <content>
              <para>This instance is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.Equals(System.Object)</codeEntityReference> method.</para>
                <codeReference>string.equals#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Determines whether two <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects have the same value.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether this instance and another specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object have the same value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the value of the <parameterReference>value</parameterReference> parameter is the same as this instance; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NullReferenceException</codeEntityReference>
            <content>
              <para>This instance is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.Equals(System.Object)</codeEntityReference> method.</para>
                <codeReference>BoundColumn_FormatDataValue#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects have the same value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>b</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the value of <parameterReference>a</parameterReference> is the same as the value of <parameterReference>b</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.Equals(System.Object)</codeEntityReference> method.</para>
                <codeReference>string.equals#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>b</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> values. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the value of the <parameterReference>a</parameterReference> parameter is equal to the value of the <parameterReference>b</parameterReference> parameter; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference> value. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>comparisonType</parameterReference> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses three versions of the <codeEntityReference autoUpgrade="true">Overload:System.String.Equals</codeEntityReference> method to determine whether a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object and a <codeEntityReference autoUpgrade="true">T:System.Text.StringBuilder</codeEntityReference> object are equal.</para>
                <codeReference>string.equals#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether this string and a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> values. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the value of the <parameterReference>value</parameterReference> parameter is the same as this string; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.NullReferenceException</codeEntityReference>
            <content>
              <para>This string is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference> value. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>comparisonType</parameterReference> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses three versions of the <codeEntityReference autoUpgrade="true">Overload:System.String.Equals</codeEntityReference> method to determine whether a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object and a <codeEntityReference autoUpgrade="true">T:System.Text.StringBuilder</codeEntityReference> object are equal. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</para>
                <codeReference>System.String.EqualsCmp#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.CompareOrdinal(System.String,System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.Format">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Replaces each format item in a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the text equivalent of a corresponding object's value.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Replaces the format item in a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the text equivalent of the value of a corresponding <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> instance in a specified array. A specified parameter supplies culture-specific formatting information.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing zero or more format items. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array containing zero or more objects to format. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A copy of <parameterReference>format</parameterReference> in which the format items have been replaced by the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the corresponding instances of <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> in <parameterReference>args</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> or <parameterReference>args</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is invalid.</para>
              <para>-or- </para>
              <para>The number indicating an argument to format is less than zero, or greater than or equal to the length of the <parameterReference>args</parameterReference> array. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
            <para>The <parameterReference>provider</parameterReference> parameter supplies custom and culture-specific information used to moderate the formatting process. For more information, see the Format Providers section of the <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link> topic.</para>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted. The components of a format item are:</para>
            <definitionTable>
              <definedTerm> index </definedTerm>
              <definition>
                <para>A zero-based integer that indicates which element in a list of objects to format. If the object specified by <placeholder>index</placeholder> is <languageKeyword>null</languageKeyword>, then the format item is replaced by the empty string (""). </para>
              </definition>
              <definedTerm> alignment </definedTerm>
              <definition>
                <para>An optional integer indicating the minimum width of the region to contain the formatted value. If the length of the formatted value is less than <placeholder>alignment</placeholder>, then the region is padded with spaces. If <placeholder>alignment</placeholder> is negative, the formatted value is left justified in the region; if <placeholder>alignment</placeholder> is positive, the formatted value is right justified. If <placeholder>alignment</placeholder> is not specified, the length of the region is the length of the formatted value. The comma is required if <placeholder>alignment</placeholder> is specified. </para>
              </definition>
              <definedTerm> formatString </definedTerm>
              <definition>
                <para>An optional string of format specifiers. If <placeholder>formatString</placeholder> is not specified and the corresponding argument implements the <codeEntityReference autoUpgrade="true">T:System.IFormattable</codeEntityReference> interface, then <languageKeyword>null</languageKeyword> is used as the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> format string. Therefore, all implementations of <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> are required to allow <languageKeyword>null</languageKeyword> as a format string, and return default formatting of the object representation as a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. The colon is required if <placeholder>formatString</placeholder> is specified. </para>
              </definition>
            </definitionTable>
            <para>The leading and trailing brace characters, '{' and '}', are required. To specify a single literal brace character in <parameterReference>format</parameterReference>, specify two leading or trailing brace characters; that is, "{{" or "}}".</para>
            <para>If the value of <parameterReference>format</parameterReference> is, "Thank you for your purchase of {0:####} copies of Microsoft®.NET (Core Reference).", and arg[0] is an <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference> with the value 123, then the return value will be: </para>
            <para>"Thank you for your purchase of 123 copies of Microsoft®.NET (Core Reference)." </para>
            <para>If the value of <parameterReference>format</parameterReference> is, "Brad's dog has {0,-8:G} fleas.", arg[0]is an <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference> with the value 42, (and in this example, underscores represent padding spaces) then the return value will be: </para>
            <para>"Brad's dog has 42______ fleas." </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>string.format#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>
          <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link>
        </relatedTopics>
      <overload>
        <summary>
          <para>Replaces each format item in a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the text equivalent of a corresponding object's value.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Replaces the format item in a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the text equivalent of the value of a specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> instance.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing zero or more format items. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to format. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A copy of <parameterReference>format</parameterReference> in which the first format item has been replaced by the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of <parameterReference>arg0</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The format item in <parameterReference>format</parameterReference> is invalid.</para>
              <para>-or- </para>
              <para>The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted. The components of a format item are:</para>
            <definitionTable>
              <definedTerm> index </definedTerm>
              <definition>
                <para>A zero-based integer that indicates which element in a list of objects to format. If the object specified by <placeholder>index</placeholder> is <languageKeyword>null</languageKeyword>, then the format item is replaced by the empty string (""). </para>
              </definition>
              <definedTerm> alignment </definedTerm>
              <definition>
                <para>An optional integer indicating the minimum width of the region to contain the formatted value. If the length of the formatted value is less than <placeholder>alignment</placeholder>, then the region is padded with spaces. If <placeholder>alignment</placeholder> is negative, the formatted value is left justified in the region; if <placeholder>alignment</placeholder> is positive, the formatted value is right justified. If <placeholder>alignment</placeholder> is not specified, the length of the region is the length of the formatted value. The comma is required if <placeholder>alignment</placeholder> is specified. </para>
              </definition>
              <definedTerm> formatString </definedTerm>
              <definition>
                <para>An optional string of format specifiers. If <placeholder>formatString</placeholder> is not specified and the corresponding argument implements the <codeEntityReference autoUpgrade="true">T:System.IFormattable</codeEntityReference> interface, then <languageKeyword>null</languageKeyword> is used as the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> format string. Therefore, all implementations of <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> are required to allow <languageKeyword>null</languageKeyword> as a format string, and return default formatting of the object representation as a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. The colon is required if <placeholder>formatString</placeholder> is specified. </para>
              </definition>
            </definitionTable>
            <para>The leading and trailing brace characters, '{' and '}', are required. To specify a single literal brace character in <parameterReference>format</parameterReference>, specify two leading or trailing brace characters; that is, "{{" or "}}".</para>
            <para>If the value of <parameterReference>format</parameterReference> is, "Thank you for your purchase of {0:####} copies of Microsoft®.NET (Core Reference).", and <parameterReference>arg0</parameterReference> is an <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference> with the value 123, then the return value will be: </para>
            <para>"Thank you for your purchase of 123 copies of Microsoft®.NET (Core Reference)." </para>
            <para>If the value of <parameterReference>format</parameterReference> is, "Brad's dog has {0,-8:G} fleas.", <parameterReference>arg0</parameterReference> is an <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference> with the value 42, (and in this example, underscores represent padding spaces) then the return value will be: </para>
            <para>"Brad's dog has 42______ fleas." </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>string.format#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>
          <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Replaces the format item in a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the text equivalent of the value of two specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> instances.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing zero or more format items. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to format. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to format. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A copy of <parameterReference>format</parameterReference> in which the first and second format items have been replaced by the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalents of <parameterReference>arg0</parameterReference> and <parameterReference>arg1</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is invalid.</para>
              <para>-or- </para>
              <para>The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted. The components of a format item are:</para>
            <definitionTable>
              <definedTerm> index </definedTerm>
              <definition>
                <para>A zero-based integer that indicates which element in a list of objects to format. If the object specified by <placeholder>index</placeholder> is <languageKeyword>null</languageKeyword>, then the format item is replaced by the empty string (""). </para>
              </definition>
              <definedTerm> alignment </definedTerm>
              <definition>
                <para>An optional integer indicating the minimum width of the region to contain the formatted value. If the length of the formatted value is less than <placeholder>alignment</placeholder>, then the region is padded with spaces. If <placeholder>alignment</placeholder> is negative, the formatted value is left justified in the region; if <placeholder>alignment</placeholder> is positive, the formatted value is right justified. If <placeholder>alignment</placeholder> is not specified, the length of the region is the length of the formatted value. The comma is required if <placeholder>alignment</placeholder> is specified. </para>
              </definition>
              <definedTerm> formatString </definedTerm>
              <definition>
                <para>An optional string of format specifiers. If <placeholder>formatString</placeholder> is not specified and the corresponding argument implements the <codeEntityReference autoUpgrade="true">T:System.IFormattable</codeEntityReference> interface, then <languageKeyword>null</languageKeyword> is used as the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> format string. Therefore, all implementations of <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> are required to allow <languageKeyword>null</languageKeyword> as a format string, and return default formatting of the object representation as a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. The colon is required if <placeholder>formatString</placeholder> is specified. </para>
              </definition>
            </definitionTable>
            <para>The leading and trailing brace characters, '{' and '}', are required. To specify a single literal brace character in <parameterReference>format</parameterReference>, specify two leading or trailing brace characters; that is, "{{" or "}}".</para>
            <para>If the value of <parameterReference>format</parameterReference> is, "Thank you for your purchase of {0:####} copies of Microsoft®.NET (Core Reference).", and <parameterReference>arg0</parameterReference> is an <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference> with the value 123, then the return value will be: </para>
            <para>"Thank you for your purchase of 123 copies of Microsoft®.NET (Core Reference)." </para>
            <para>If the value of <parameterReference>format</parameterReference> is, "Brad's dog has {0,-8:G} fleas.", <parameterReference>arg0</parameterReference> is an <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference> with the value 42, (and in this example, underscores represent padding spaces) then the return value will be: </para>
            <para>"Brad's dog has 42______ fleas." </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>string.format#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>
          <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Replaces the format item in a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the text equivalent of the value of three specified <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> instances.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing zero or more format items. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to format. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to format. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg2</parameterReference>
            <content>
              <para>The third <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> to format. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A copy of <parameterReference>format</parameterReference> in which the first, second, and third format items have been replaced by the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalents of <parameterReference>arg0</parameterReference>, <parameterReference>arg1</parameterReference>, and <parameterReference>arg2</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is invalid.</para>
              <para>-or- </para>
              <para>The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted. The components of a format item are:</para>
            <definitionTable>
              <definedTerm> index </definedTerm>
              <definition>
                <para>A zero-based integer that indicates which element in a list of objects to format. If the object specified by <placeholder>index</placeholder> is <languageKeyword>null</languageKeyword>, then the format item is replaced by the empty string (""). </para>
              </definition>
              <definedTerm> alignment </definedTerm>
              <definition>
                <para>An optional integer indicating the minimum width of the region to contain the formatted value. If the length of the formatted value is less than <placeholder>alignment</placeholder>, then the region is padded with spaces. If <placeholder>alignment</placeholder> is negative, the formatted value is left justified in the region; if <placeholder>alignment</placeholder> is positive, the formatted value is right justified. If <placeholder>alignment</placeholder> is not specified, the length of the region is the length of the formatted value. The comma is required if <placeholder>alignment</placeholder> is specified. </para>
              </definition>
              <definedTerm> formatString </definedTerm>
              <definition>
                <para>An optional string of format specifiers. If <placeholder>formatString</placeholder> is not specified and the corresponding argument implements the <codeEntityReference autoUpgrade="true">T:System.IFormattable</codeEntityReference> interface, then <languageKeyword>null</languageKeyword> is used as the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> format string. Therefore, all implementations of <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> are required to allow <languageKeyword>null</languageKeyword> as a format string, and return default formatting of the object representation as a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. The colon is required if <placeholder>formatString</placeholder> is specified. </para>
              </definition>
            </definitionTable>
            <para>The leading and trailing brace characters, '{' and '}', are required. To specify a single literal brace character in <parameterReference>format</parameterReference>, specify two leading or trailing brace characters; that is, "{{" or "}}".</para>
            <para>If the value of <parameterReference>format</parameterReference> is, "Thank you for your purchase of {0:####} copies of Microsoft®.NET (Core Reference).", and <parameterReference>arg0</parameterReference> is an <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference> with the value 123, then the return value will be: </para>
            <para>"Thank you for your purchase of 123 copies of Microsoft®.NET (Core Reference)." </para>
            <para>If the value of <parameterReference>format</parameterReference> is, "Brad's dog has {0,-8:G} fleas.", <parameterReference>arg0</parameterReference> is an <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference> with the value 42, (and in this example, underscores represent padding spaces) then the return value will be: </para>
            <para>"Brad's dog has 42______ fleas." </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>string.format#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>
          <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Replaces the format item in a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> with the text equivalent of the value of a corresponding <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> instance in a specified array.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>format</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> containing zero or more format items. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>args</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> array containing zero or more objects to format. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A copy of <parameterReference>format</parameterReference> in which the format items have been replaced by the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent of the corresponding instances of <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference> in <parameterReference>args</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> or <parameterReference>args</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>
                <parameterReference>format</parameterReference> is invalid.</para>
              <para>-or- </para>
              <para>The number indicating an argument to format is less than zero, or greater than or equal to the length of the <parameterReference>args</parameterReference> array. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method uses the <legacyLink xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</legacyLink> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
            <list class="bullet">
              <listItem>
                <para>For more information about the composite formatting feature supported by methods such as <codeEntityReference autoUpgrade="true">Overload:System.String.Format</codeEntityReference>, <codeEntityReference autoUpgrade="true">Overload:System.Text.StringBuilder.AppendFormat</codeEntityReference>, and some overloads of <codeEntityReference autoUpgrade="true">Overload:System.Console.WriteLine</codeEntityReference>, see <link xlink:href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about numeric format specifiers, see <link xlink:href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</link> and <link xlink:href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about date and time format specifiers, see <link xlink:href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</link> and <link xlink:href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</link>. </para>
              </listItem>
              <listItem>
                <para>For more information about enumeration format specifiers, see <link xlink:href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</link>.</para>
              </listItem>
              <listItem>
                <para>For more information about formatting, see <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link> and <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>. </para>
              </listItem>
            </list>
            <para>The <parameterReference>format</parameterReference> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
            <para>The syntax of a format item is <languageKeyword>{</languageKeyword><placeholder>index</placeholder>[<languageKeyword>,</languageKeyword><placeholder>alignment</placeholder>][<languageKeyword>:</languageKeyword><placeholder>formatString</placeholder>]<languageKeyword>}</languageKeyword>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted. The components of a format item are:</para>
            <definitionTable>
              <definedTerm> index </definedTerm>
              <definition>
                <para>A zero-based integer that indicates which element in a list of objects to format. If the object specified by <placeholder>index</placeholder> is <languageKeyword>null</languageKeyword>, then the format item is replaced by the empty string (""). </para>
              </definition>
              <definedTerm> alignment </definedTerm>
              <definition>
                <para>An optional integer indicating the minimum width of the region to contain the formatted value. If the length of the formatted value is less than <placeholder>alignment</placeholder>, then the region is padded with spaces. If <placeholder>alignment</placeholder> is negative, the formatted value is left justified in the region; if <placeholder>alignment</placeholder> is positive, the formatted value is right justified. If <placeholder>alignment</placeholder> is not specified, the length of the region is the length of the formatted value. The comma is required if <placeholder>alignment</placeholder> is specified. </para>
              </definition>
              <definedTerm> formatString </definedTerm>
              <definition>
                <para>An optional string of format specifiers. If <placeholder>formatString</placeholder> is not specified and the corresponding argument implements the <codeEntityReference autoUpgrade="true">T:System.IFormattable</codeEntityReference> interface, then <languageKeyword>null</languageKeyword> is used as the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> format string. Therefore, all implementations of <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.IFormattable.ToString(System.String,System.IFormatProvider)</codeEntityReference> are required to allow <languageKeyword>null</languageKeyword> as a format string, and return default formatting of the object representation as a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. The colon is required if <placeholder>formatString</placeholder> is specified. </para>
              </definition>
            </definitionTable>
            <para>The leading and trailing brace characters, '{' and '}', are required. To specify a single literal brace character in <parameterReference>format</parameterReference>, specify two leading or trailing brace characters; that is, "{{" or "}}".</para>
            <para>If the value of <parameterReference>format</parameterReference> is, "Thank you for your purchase of {0:####} copies of Microsoft®.NET (Core Reference).", and arg[0] is an <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference> with the value 123, then the return value will be: </para>
            <para>"Thank you for your purchase of 123 copies of Microsoft®.NET (Core Reference)." </para>
            <para>If the value of <parameterReference>format</parameterReference> is, "Brad's dog has {0,-8:G} fleas.", arg[0]is an <codeEntityReference autoUpgrade="true">T:System.Int16</codeEntityReference> with the value 42, (and in this example, underscores represent padding spaces) then the return value will be: </para>
            <para>"Brad's dog has 42______ fleas." </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</para>
                <codeReference>string.format#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>
          <link xlink:href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Overview</link>
          <link xlink:href="a331f04a-7fa0-4dde-b190-078efd1a7227">Formatting Types</link>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.GetEnumerator">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves an object that can iterate through the individual characters in this string.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method is required by programming languages that support the <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerator</codeEntityReference> interface to iterate through members of a collection. For example, the Microsoft Visual Basic and C# programming languages' <languageKeyword>foreach</languageKeyword> statement invokes this method to return a <codeEntityReference autoUpgrade="true">T:System.CharEnumerator</codeEntityReference> object that can provide read-only access to the characters in this instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <codeEntityReference autoUpgrade="true">M:System.String.GetEnumerator</codeEntityReference> method to display each <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Char</codeEntityReference> in the input strings.</para>
                <codeReference>system.string.getenumerator#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerator</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerable</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.String.Chars(System.Int32)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.GetHashCode">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the hash code for this string.</para>
        </summary>
        <returnValue>
          <para>A 32-bit signed integer hash code.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The behavior of <codeEntityReference autoUpgrade="true">M:System.String.GetHashCode</codeEntityReference> is dependent on its implementation, which might change from one version of the common language runtime to another. A reason why this might happen is to improve the performance of <codeEntityReference autoUpgrade="true">M:System.String.GetHashCode</codeEntityReference>. If you require the behavior of <codeEntityReference autoUpgrade="true">M:System.String.GetHashCode</codeEntityReference> to be constant, override the runtime implementation of <codeEntityReference autoUpgrade="true">M:System.String.GetHashCode</codeEntityReference> with an implementation of your own that you know will never change.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.GetHashCode</codeEntityReference> method using various input strings.</para>
                <codeReference>system.string.gethashcode#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.GetTypeCode">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns the <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference> for class <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>The enumerated constant, <codeEntityReference qualifyHint="true" autoUpgrade="true">F:System.TypeCode.String</codeEntityReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example displays the <codeEntityReference autoUpgrade="true">T:System.TypeCode</codeEntityReference> enumerated constant for the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> type.</para>
                <codeReference>string.gettypecode#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.String.IndexOf">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence of a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, or one or more characters, within this string.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence of the specified Unicode character in this string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character to seek. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that character is found, or -1 if it is not.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>The search for <parameterReference>value</parameterReference> is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can search a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> for a character using the <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference> method.</para>
                <codeReference>stringexample1#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Reports the index of the first occurrence of a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>, or one or more characters, within this string.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that character is found, or -1 if it is not.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is less than zero or specifies a position beyond the end of this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>The search ranges from <parameterReference>startIndex</parameterReference> to the end of the string.</para>
            <para>The search for <parameterReference>value</parameterReference> is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference> method.</para>
                <codeReference>string.indexof1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of character positions to examine. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that character is found, or -1 if it is not.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> or <parameterReference>startIndex</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>count</parameterReference> + <parameterReference>startIndex</parameterReference> specifies a position beyond the end of this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The search begins at <parameterReference>startIndex</parameterReference> and continues to <parameterReference>startIndex</parameterReference> + <parameterReference>count</parameterReference> -1. The character at <parameterReference>startIndex</parameterReference> + <parameterReference>count</parameterReference> is not included in the search.</para>
            <para>Index numbering starts from zero.</para>
            <para>The search for <parameterReference>value</parameterReference> is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference> method.</para>
                <codeReference>system.string.indexof#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence of the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> in this instance.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to seek. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that string is found, or -1 if it is not. If <parameterReference>value</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>, the return value is 0.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the first character position of this instance and continues until the last character position.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code exampled demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference> method.</para>
                <codeReference>stringinsert#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence of the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> in this instance. The search starts at a specified character position.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that string is found, or -1 if it is not. If <parameterReference>value</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>, the return value is <parameterReference>startIndex</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>startIndex</parameterReference> specifies a position not within this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the <parameterReference>startIndex</parameterReference> character position of this instance and continues until the last character position.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example searches for all occurrences of a specified string within a target string.</para>
                <codeReference>stringindexof4#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence of the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> in this instance. The search starts at a specified character position and examines a specified number of character positions.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of character positions to examine. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that string is found, or -1 if it is not. If <parameterReference>value</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>, the return value is <parameterReference>startIndex</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> or <parameterReference>startIndex</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>count</parameterReference> plus <parameterReference>startIndex</parameterReference> specify a position not within this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at <parameterReference>startIndex</parameterReference> and continues to <parameterReference>startIndex</parameterReference> + <parameterReference>count</parameterReference> -1. The character at <parameterReference>startIndex</parameterReference> + <parameterReference>count</parameterReference> is not included in the search.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example finds the index of all occurrences of the string "he" within a substring of another string. Note that the number of characters to be searched must be recalculated for each search iteration.</para>
                <codeReference>string.indexof8#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.IndexOfAny">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>anyOf</parameterReference>
            <content>
              <para>A Unicode character array containing one or more characters to seek. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the first occurrence in this instance where any character in <parameterReference>anyOf</parameterReference> was found; otherwise, -1 if no character in <parameterReference>anyOf</parameterReference> was found.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>anyOf</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>The search for <parameterReference>anyOf</parameterReference> is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference> method to check for invalid characters in a user entered string.</para>
                <codeReference>Classic TreeNode.BeginEdit Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>anyOf</parameterReference>
            <content>
              <para>A Unicode character array containing one or more characters to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the first occurrence in this instance where any character in <parameterReference>anyOf</parameterReference> was found; otherwise, -1 if no character in <parameterReference>anyOf</parameterReference> was found.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>anyOf</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>startIndex</parameterReference> is greater than the number of characters in this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>The search ranges from <parameterReference>startIndex</parameterReference> to the end of the string.</para>
            <para>The search for <parameterReference>anyOf</parameterReference> is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example finds the index of the occurrence of any character of the string "is" within a substring of another string.</para>
                <codeReference>string.indexofany2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>anyOf</parameterReference>
            <content>
              <para>A Unicode character array containing one or more characters to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of character positions to examine. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the first occurrence in this instance where any character in <parameterReference>anyOf</parameterReference> was found; otherwise, -1 if no character in <parameterReference>anyOf</parameterReference> was found.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>anyOf</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> or <parameterReference>startIndex</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>count</parameterReference> + <parameterReference>startIndex</parameterReference> is greater than the number of characters in this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The search begins at <parameterReference>startIndex</parameterReference> and continues to <parameterReference>startIndex</parameterReference> + <parameterReference>count</parameterReference> -1. The character at <parameterReference>startIndex</parameterReference> + <parameterReference>count</parameterReference> is not included in the search.</para>
            <para>Index numbering starts from zero.</para>
            <para>The search for <parameterReference>anyOf</parameterReference> is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example finds the index of the occurrence of any character of the string "aid" within a substring of another string.</para>
                <codeReference>string.indexofany3#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Inserts a specified instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> at a specified index position in this instance.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The index position of the insertion. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to insert. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent to this instance but with <parameterReference>value</parameterReference> inserted at position <parameterReference>startIndex</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is negative or greater than the length of this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>startIndex</parameterReference> is equal to the length of this instance, <parameterReference>value</parameterReference> is appended to the end of this instance.</para>
            <para>For example, the return value of <codeInline>"abc".Insert(2, "XYZ")</codeInline> is "abXYZc".</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following console application provides a simple demonstration of the <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference> method.</para>
                <codeReference>stringinsert#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Remove(System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Replace(System.Char,System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Split(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Substring(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves the system's reference to the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>str</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>If the value of <parameterReference>str</parameterReference> is already interned, the system's reference is returned; otherwise, a new reference to a string with the value of <parameterReference>str</parameterReference> is returned.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>str</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program. Consequently, an instance of a literal string with a particular value only exists once in the system.</para>
            <para>For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.String.Intern(System.String)</codeEntityReference> method uses the intern pool to search for a string equal to the value of <parameterReference>str</parameterReference>. If such a string exists, its reference in the intern pool is returned. If the string does not exist, a reference to <parameterReference>str</parameterReference> is added to the intern pool, then that reference is returned.</para>
            <para>In the C# example that follows, the string, s1, which has a value of "MyTest", is already interned because it is a literal in the program.</para>
            <para>The <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Text.StringBuilder</codeEntityReference> class generates a new string object that has the same value as s1. A reference to that string is assigned to s2.</para>
            <para>The <codeEntityReference autoUpgrade="true">M:System.String.Intern(System.String)</codeEntityReference> method searches for a string that has the same value as s2. Since such a string exists, the method returns the same reference that is assigned to s1, then that reference is assigned to s3.</para>
            <para>References s1 and s2 compare unequal because they refer to different objects, while references s1 and s3 compare equal because they refer to the same string.</para>
            <code> String s1 = "MyTest"; 
 String s2 = new StringBuilder().Append("My").Append("Test").ToString(); 
 String s3 = String.Intern(s2); 
 Console.WriteLine((Object)s2==(Object)s1); // Different references.
 Console.WriteLine((Object)s3==(Object)s1); // The same reference.</code>
            <para>Compare this method to the <codeEntityReference autoUpgrade="true">M:System.String.IsInterned(System.String)</codeEntityReference> method.</para>
          </content>
          <sections>
            <section>
              <title>Version Considerations</title>
              <content>
                <para>Starting with the .NET Framework version 2.0, there is a behavioral change in the <codeEntityReference autoUpgrade="true">M:System.String.Intern(System.String)</codeEntityReference> method. In the following C# code sequence, the variable <codeInline>str1</codeInline> is assigned a reference to <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>, the variable <codeInline>str2</codeInline> is assigned the reference to <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> that is returned by the <codeEntityReference autoUpgrade="true">M:System.String.Intern(System.String)</codeEntityReference> method, then the references contained in <codeInline>str1</codeInline> and <codeInline>str2</codeInline> are compared for equality.</para>
                <code>string str1 = String.Empty;
string str2 = String.Intern(String.Empty);
if ((object) str1) == ((object) str2) …</code>
                <para>In the .NET Framework version 1.1, <codeInline>str1</codeInline> and <codeInline>str2</codeInline> are not equal, but starting in the .NET Framework version 2.0, <codeInline>str1</codeInline> and <codeInline>str2</codeInline> are equal.</para>
              </content>
            </section>
            <section>
              <title>Performance Considerations</title>
              <content>
                <para>If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects. First, the memory allocated for interned <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects is not likely be released until the common languange runtime (CLR) terminates. The reason is that the CLR's reference to the interned <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object can persist after your application, or even your application domain, terminates. Second, to intern a string, you must first create the string. The memory used by the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object must still be allocated, even though the memory will eventually be garbage collected. </para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses three strings that are equal in value to determine whether a newly created string and an interned string are equal.</para>
                <codeReference>string.intern#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.IsInterned(System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a reference to a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>str</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> reference to <parameterReference>str</parameterReference> if it is in the common language runtime "intern pool"; otherwise <languageKeyword>null</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>str</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The common language runtime automatically maintains a table, called the "intern pool", which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> you add programmatically.</para>
            <para>The intern pool conserves string storage. If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that have identical values.</para>
            <para>This method looks up <parameterReference>str</parameterReference> in the intern pool. If <parameterReference>str</parameterReference> has already been interned, a reference to that instance is returned; otherwise, <languageKeyword>null</languageKeyword> is returned.</para>
            <para>Compare this method to the <codeEntityReference autoUpgrade="true">M:System.String.Intern(System.String)</codeEntityReference> method.</para>
            <para>This method does not return a Boolean value, but can still be used where a Boolean is needed.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates that literal strings are interned automatically by the compiler.</para>
                <codeReference>string.isinterned#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Intern(System.String)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.IsNormalized">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Indicates whether this string is in a particular Unicode normalization form.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.IsNormalized">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Indicates whether this string is in Unicode normalization form C.</para>
        </summary>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if this string is in normalization form C; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</para>
            <para>The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.</para>
            <para>For a description of supported Unicode normalization forms, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Text.NormalizationForm</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example determines whether a string is successfully normalized to various normalization forms.</para>
                <codeReference>string.normalize#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Normalize</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Indicates whether this string is in a particular Unicode normalization form.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.IsNormalized(System.Text.NormalizationForm)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Indicates whether this string is in the specified Unicode normalization form.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>normalizationForm</parameterReference>
            <content>
              <para>A Unicode normalization form. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if this string is in the normalization form specified by the <parameterReference>normalizationForm</parameterReference> parameter; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</para>
            <para>The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.</para>
            <para>For a description of supported Unicode normalization forms, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Text.NormalizationForm</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.IsNormalized</codeEntityReference> and <codeEntityReference autoUpgrade="true">M:System.String.Normalize</codeEntityReference> methods.</para>
                <codeReference>string.normalize#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Normalize</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Indicates whether the specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is <languageKeyword>null</languageKeyword> or an <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> reference. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the <parameterReference>value</parameterReference> parameter is <languageKeyword>null</languageKeyword> or an empty string (""); otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <codeEntityReference autoUpgrade="true">M:System.String.IsNullOrEmpty(System.String)</codeEntityReference> is a convenience method that enables you to simultaneously test whether a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> is <languageKeyword>null</languageKeyword> or its value is <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example determines whether each of three strings has a value, is an empty string or is <languageKeyword>null</languageKeyword>.</para>
                <codeReference>String.IsNullOrEmpty#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.String.Join">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates a specified separator <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> between each element of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array, yielding a single concatenated string.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates a specified separator <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> between each element of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array, yielding a single concatenated string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>separator</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An array of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> consisting of the elements of <parameterReference>value</parameterReference> interspersed with the <parameterReference>separator</parameterReference> string.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>For example if <parameterReference>separator</parameterReference> is ", " and the elements of <parameterReference>value</parameterReference> are "apple", "orange", "grape", and "pear", <codeInline>Join(separator, value)</codeInline> returns "apple, orange, grape, pear".</para>
            <para>If <parameterReference>separator</parameterReference> is <languageKeyword>null</languageKeyword>, the empty string (<codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>) is used instead.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference> method.</para>
                <codeReference>stringjoin#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Concatenates a specified separator <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> between each element of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array, yielding a single concatenated string.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Concatenates a specified separator <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> between each element of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array, yielding a single concatenated string. Parameters specify the first array element and number of elements to use.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>separator</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>An array of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The first array element in <parameterReference>value</parameterReference> to use. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of elements of <parameterReference>value</parameterReference> to use. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object consisting of the strings in <parameterReference>value</parameterReference> joined by <parameterReference>separator</parameterReference>. Or, <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> if <parameterReference>count</parameterReference> is zero, <parameterReference>value</parameterReference> has no elements, or <parameterReference>separator</parameterReference> and all the elements of <parameterReference>value</parameterReference> are <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> or <parameterReference>count</parameterReference> is less than 0.</para>
              <para>-or- </para>
              <para>
                <parameterReference>startIndex</parameterReference> plus <parameterReference>count</parameterReference> is greater than the number of elements in <parameterReference>value</parameterReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>For example if <parameterReference>separator</parameterReference> is ", " and the elements of <parameterReference>value</parameterReference> are "apple", "orange", "grape", and "pear", <codeInline>Join(separator, value, 1, 2)</codeInline> returns "orange, grape".</para>
            <para>If <parameterReference>separator</parameterReference> is <languageKeyword>null</languageKeyword>, the empty string (<codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>) is used instead.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example concatenates two elements from an array of names of fruit.</para>
                <codeReference>string.join2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.LastIndexOf">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence of a specified Unicode character or <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> within this instance.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence of a specified Unicode character within this instance.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character to seek. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that character is found, or -1 if it is not.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method begins searching at the last character position of this instance and proceeds backwards towards the beginning until either <parameterReference>value</parameterReference> is found or the first character position has been examined. The search is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can search a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> for a character using the <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference> method.</para>
                <codeReference>stringexample1#3</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Reports the index position of the last occurrence of a specified Unicode character or <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> within this instance.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting position of a substring within this instance. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that character is found, or -1 if it is not.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is less than zero or greater than the length of this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method begins searching at the <parameterReference>startIndex</parameterReference> character position of this instance and proceeds backwards towards the beginning until either <parameterReference>value</parameterReference> is found or the first character position has been examined. The search is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example finds the index of all occurrences of a character in a string, working from the end of the string to the start of the string. </para>
                <codeReference>string.lastindexof1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and examines a specified number of character positions.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A Unicode character to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting position of a substring within this instance. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of character positions to examine. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that character is found, or -1 if it is not.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> or <parameterReference>count</parameterReference> is less than zero or greater than the length of this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method begins searching at the <parameterReference>startIndex</parameterReference> character position of this instance and proceeds backwards towards the beginning until either <parameterReference>value</parameterReference> is found or <parameterReference>count</parameterReference> character positions have been examined. The search is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example finds the index of all occurrences of a character in a substring, working from the end of the substring to the start of the substring. </para>
                <codeReference>string.lastindexof2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> within this instance.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to seek. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that string is found, or -1 if it is not. If <parameterReference>value</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>, the return value is the last index position in <parameterReference>value</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the last character position of this instance and proceeds backwards towards the beginning until either <parameterReference>value</parameterReference> is found or the first character position has been examined.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example application shows how the <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference> method can be used to make decisions while parsing string input.</para>
                <codeReference>stringendswith#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> within this instance. The search starts at a specified character position.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that string is found, or -1 if it is not. If <parameterReference>value</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>, the return value is <parameterReference>startIndex</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is less than zero or specifies a position not within this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the <parameterReference>startIndex</parameterReference> character position of this instance and proceeds backwards towards the beginning until either <parameterReference>value</parameterReference> is found or the first character position has been examined.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example finds the index of all occurrences of a string in target string, working from the end of the target string to the start of the target string. </para>
                <codeReference>string.lastindexof7#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> within this instance. The search starts at a specified character position and examines a specified number of character positions.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of character positions to examine. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of <parameterReference>value</parameterReference> if that string is found, or -1 if it is not. If <parameterReference>value</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>, the return value is <parameterReference>startIndex</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> or <parameterReference>startIndex</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>count</parameterReference> plus <parameterReference>startIndex</parameterReference> specify a position not within this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the <parameterReference>startIndex</parameterReference> character position of this instance and proceeds backwards towards the beginning until either <parameterReference>value</parameterReference> is found or <parameterReference>count</parameterReference> character positions have been examined.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example finds the index of all occurrences of a string in substring, working from the end of the substring to the start of the substring. </para>
                <codeReference>string.lastindexof8#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOfAny(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.LastIndexOfAny">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>anyOf</parameterReference>
            <content>
              <para>A Unicode character array containing one or more characters to seek. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the last occurrence in this instance where any character in <parameterReference>anyOf</parameterReference> was found; otherwise, -1 if no character in <parameterReference>anyOf</parameterReference> was found.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>anyOf</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method begins searching at the last character position of this instance and proceeds backwards towards the beginning until either a character in <parameterReference>anyOf</parameterReference> is found or the first character position has been examined. The search is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example finds the index of the last occurrence of any character in the string "is" within another string. </para>
                <codeReference>string.lastindexofany1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>anyOf</parameterReference>
            <content>
              <para>A Unicode character array containing one or more characters to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the last occurrence in this instance where any character in <parameterReference>anyOf</parameterReference> was found; otherwise, -1 if no character in <parameterReference>anyOf</parameterReference> was found.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>anyOf</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> specifies a position not within this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method begins searching at the <parameterReference>startIndex</parameterReference> character position of this instance and proceeds backwards towards the beginning until either a character in <parameterReference>anyOf</parameterReference> is found or the first character position has been examined. The search is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example finds the index of the last occurrence of any character in the string "is" within a substring of another string. </para>
                <codeReference>string.lastindexofany2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and examines a specified number of character positions.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>anyOf</parameterReference>
            <content>
              <para>A Unicode character array containing one or more characters to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of character positions to examine. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the last occurrence in this instance where any character in <parameterReference>anyOf</parameterReference> was found; otherwise, -1 if no character in <parameterReference>anyOf</parameterReference> was found.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>anyOf</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> or <parameterReference>startIndex</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>count</parameterReference> plus <parameterReference>startIndex</parameterReference> specify a position not within this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>This method begins searching at the <parameterReference>startIndex</parameterReference> character position of this instance and proceeds backwards towards the beginning until either a character in <parameterReference>anyOf</parameterReference> is found or <parameterReference>count</parameterReference> character positions have been examined. The search is case-sensitive.</para>
            <para>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)</codeEntityReference> method, where a Unicode scalar value representing a precomposed character, such as the ligature 'Æ' (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example finds the index of the last occurrence of any character in the string "aid" within a substring of another string. </para>
                <codeReference>string.lastindexofany3#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOf(System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.IndexOfAny(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.LastIndexOf(System.Char)</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.Normalize">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a new string whose binary representation is in a particular Unicode normalization form.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Normalize">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</para>
        </summary>
        <returnValue>
          <para>A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</para>
            <para>The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.</para>
            <para>For a description of supported Unicode normalization forms, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Text.NormalizationForm</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</para>
                <codeReference>string.normalize#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.IsNormalized</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns a new string whose binary representation is in a particular Unicode normalization form.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Normalize(System.Text.NormalizationForm)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>normalizationForm</parameterReference>
            <content>
              <para>A Unicode normalization form. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <parameterReference>normalizationForm</parameterReference> parameter.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</para>
            <para>The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.</para>
            <para>For a description of supported Unicode normalization forms, see <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Text.NormalizationForm</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</para>
                <codeReference>string.normalize#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.IsNormalized</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <equivalentCodeEntity>
          <codeEntityReference>M:System.String.Equals(System.Object)</codeEntityReference>
          <content>
          </content>
        </equivalentCodeEntity>
        <summary>
          <para>Determines whether two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects have the same value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>b</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the value of <parameterReference>a</parameterReference> is the same as the value of <parameterReference>b</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This operator is implemented using the <codeEntityReference autoUpgrade="true">M:System.String.Equals(System.Object)</codeEntityReference> method, which means the comparands are tested for a combination of reference and value equality. This operator performs an ordinal comparison.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the equality operator.</para>
                <codeReference>system.string.equality#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <equivalentCodeEntity>
          <codeEntityReference>M:System.String.Equals(System.Object)</codeEntityReference>
          <content>
          </content>
        </equivalentCodeEntity>
        <summary>
          <para>Determines whether two specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> objects have different values.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>a</parameterReference>
            <content>
              <para>A <languageKeyword>String</languageKeyword> or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>b</parameterReference>
            <content>
              <para>A <languageKeyword>String</languageKeyword> or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the value of <parameterReference>a</parameterReference> is different from the value of <parameterReference>b</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This operator is implemented using the <codeEntityReference autoUpgrade="true">M:System.String.Equals(System.Object)</codeEntityReference> method, which means the comparands are tested for a combination of reference and value equality. This operator performs an ordinal comparison.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the inequality operator.</para>
                <codeReference>system.string.inequality#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.String.PadLeft">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Right-aligns the characters in this instance, padding on the left with spaces or a specified Unicode character for a specified total length.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Right-aligns the characters in this instance, padding with spaces on the left for a specified total length.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>totalWidth</parameterReference>
            <content>
              <para>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <parameterReference>totalWidth</parameterReference>. Or, if <parameterReference>totalWidth</parameterReference> is less than the length of this instance, a new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object that is identical to this instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>totalWidth</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>A Unicode space is defined as hexadecimal 0x20.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.PadLeft(System.Int32)</codeEntityReference> method.</para>
                <codeReference>Classic String.PadLeft Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.PadRight(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Right-aligns the characters in this instance, padding on the left with spaces or a specified Unicode character for a specified total length.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Right-aligns the characters in this instance, padding on the left with a specified Unicode character for a specified total length.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>totalWidth</parameterReference>
            <content>
              <para>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>paddingChar</parameterReference>
            <content>
              <para>A Unicode padding character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that is equivalent to this instance, but right-aligned and padded on the left with as many <parameterReference>paddingChar</parameterReference> characters as needed to create a length of <parameterReference>totalWidth</parameterReference>. Or, if <parameterReference>totalWidth</parameterReference> is less than the length of this instance, a new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that is identical to this instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>totalWidth</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.PadLeft(System.Int32)</codeEntityReference> method.</para>
                <codeReference>Classic String.PadLeft1 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.PadRight(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.PadRight">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Left-aligns the characters in this string, padding on the right with spaces or a specified Unicode character, for a specified total length.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Left-aligns the characters in this string, padding with spaces on the right, for a specified total length.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>totalWidth</parameterReference>
            <content>
              <para>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <parameterReference>totalWidth</parameterReference>. Or, if <parameterReference>totalWidth</parameterReference> is less than the length of this instance, a new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that is identical to this instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>totalWidth</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>A Unicode space is defined as hexadecimal 0x20.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.PadRight(System.Int32)</codeEntityReference> method.</para>
                <codeReference>Classic String.PadRight Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.PadLeft(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Left-aligns the characters in this string, padding on the right with spaces or a specified Unicode character, for a specified total length.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Left-aligns the characters in this string, padding on the right with a specified Unicode character, for a specified total length.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>totalWidth</parameterReference>
            <content>
              <para>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>paddingChar</parameterReference>
            <content>
              <para>A Unicode padding character. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that is equivalent to this instance, but left-aligned and padded on the right with as many <parameterReference>paddingChar</parameterReference> characters as needed to create a length of <parameterReference>totalWidth</parameterReference>. Or, if <parameterReference>totalWidth</parameterReference> is less than the length of this instance, a new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that is identical to this instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>totalWidth</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.PadRight(System.Int32)</codeEntityReference> method.</para>
                <codeReference>Classic String.PadRight1 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.PadLeft(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.Remove">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Deletes a specified number of characters from this instance.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Deletes all the characters from this string beginning at a specified position and continuing through the last position.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The position to begin deleting characters. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object that is equivalent to this string less the removed characters.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is less than zero.</para>
              <para>-or- </para>
              <para>
                <parameterReference>startIndex</parameterReference> specifies a position that is not within this string. </para>
            </content>
          </exception>
        </exceptions>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.Remove(System.Int32,System.Int32)</codeEntityReference> method. The next-to-last case removes all text starting from the specified index through the end of the string. The last case removes three characters starting from the specified index.</para>
                <codeReference>string.remove#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Replace(System.Char,System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Split(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Substring(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Deletes a specified number of characters from this instance.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Deletes a specified number of characters from this instance beginning at a specified position.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The position to begin deleting characters. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of characters to delete. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that is equivalent to this instance less <parameterReference>count</parameterReference> number of characters.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>Either <parameterReference>startIndex</parameterReference> or <parameterReference>count</parameterReference> is less than zero.</para>
              <para>-or- </para>
              <para>
                <parameterReference>startIndex</parameterReference> plus <parameterReference>count</parameterReference> specify a position outside this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The following is an example of C# code that prints "123456".</para>
            <code>String s = "123abc456"; 
Console.WriteLine(s.Remove(3, 3));</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can remove the middle name from a complete name.</para>
                <codeReference>stringremove#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Replace(System.Char,System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Split(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Substring(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.Replace">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Replaces all occurrences of a specified Unicode character or <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> in this instance, with another specified Unicode character or <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Replaces all occurrences of a specified Unicode character in this instance with another specified Unicode character.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>oldChar</parameterReference>
            <content>
              <para>A Unicode character to be replaced. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>newChar</parameterReference>
            <content>
              <para>A Unicode character to replace all occurrences of <parameterReference>oldChar</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent to this instance but with all instances of <parameterReference>oldChar</parameterReference> replaced with <parameterReference>newChar</parameterReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method performs an ordinal (case-sensitive and culture-insensitive) search to find <parameterReference>oldChar</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example creates a comma separated value list by substituting commas for the blanks between a series of numbers.</para>
                <codeReference>string.replace1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Remove(System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Split(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Substring(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Replaces all occurrences of a specified Unicode character or <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> in this instance, with another specified Unicode character or <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Replaces all occurrences of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> in this instance, with another specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>oldValue</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to be replaced. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>newValue</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to replace all occurrences of <parameterReference>oldValue</parameterReference>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent to this instance but with all instances of <parameterReference>oldValue</parameterReference> replaced with <parameterReference>newValue</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>oldValue</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>oldValue</parameterReference> is the empty string (""). </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>newValue</parameterReference> is <languageKeyword>null</languageKeyword>, all occurrences of <parameterReference>oldValue</parameterReference> are removed.</para>
            <para>This method performs a word (case-sensitive and culture-sensitive) search to find <parameterReference>oldValue</parameterReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can use the <codeEntityReference autoUpgrade="true">M:System.String.Replace(System.Char,System.Char)</codeEntityReference> method to correct a spelling error.</para>
                <codeReference>stringreplace#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Remove(System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Split(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Substring(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.Split">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array containing the substrings in this instance that are delimited by elements of a specified <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> or <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array containing the substrings in this instance that are delimited by elements of a specified <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> array.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>separator</parameterReference>
            <content>
              <para>An array of Unicode characters that delimit the substrings in this instance, an empty array containing no delimiters, or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <parameterReference>separator</parameterReference>. For more information, see the Remarks section.</para>
        </returnValue>
        <remarks>
          <content>
            <para>Delimiter characters are not included in the elements of the return value array. Delimiters are detected using an ordinal comparison.</para>
            <para>If this instance does not contain any of the characters in <parameterReference>separator</parameterReference>, the return value array consists of a single element that contains this instance. If the <parameterReference>separator</parameterReference> parameter is <languageKeyword>null</languageKeyword> or contains no characters, white space characters are assumed to be the delimiters. </para>
            <para>If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>. </para>
            <para>For example: </para>
            <table>
              <tableHeader>
                <row>
                  <entry>
                    <para>Input </para>
                  </entry>
                  <entry>
                    <para>separator </para>
                  </entry>
                  <entry>
                    <para>Output </para>
                  </entry>
                </row>
              </tableHeader>
              <row>
                <entry>
                  <para>"42, 12, 19" </para>
                </entry>
                <entry>
                  <para>new Char[] {',', ' '} </para>
                </entry>
                <entry>
                  <para>{"42", "", "12", "", "19"} </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>"42..12..19" </para>
                </entry>
                <entry>
                  <para>new Char[] {'.'} </para>
                </entry>
                <entry>
                  <para>{"42", "", "12", "", "19"} </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>"Banana" </para>
                </entry>
                <entry>
                  <para>new Char[] {'.'} </para>
                </entry>
                <entry>
                  <para>{"Banana"} </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>"Darb\nSmarba" </para>
                </entry>
                <entry>
                  <para>new Char[] {} </para>
                </entry>
                <entry>
                  <para>{"Darb", "Smarba"} </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>"Darb\nSmarba" </para>
                </entry>
                <entry>
                  <para>null </para>
                </entry>
                <entry>
                  <para>{"Darb", "Smarba"} </para>
                </entry>
              </row>
            </table>
          </content>
          <sections>
            <section>
              <title>Performance Considerations</title>
              <content>
                <para>The <codeEntityReference autoUpgrade="true">Overload:System.String.Split</codeEntityReference> methods allocate memory for the return value array object and a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object for each array element. If managing memory allocation is critical in your application, consider using the <codeEntityReference autoUpgrade="true">Overload:System.String.IndexOfAny</codeEntityReference> method, and optionally the <codeEntityReference autoUpgrade="true">Overload:System.String.Compare</codeEntityReference> method, to locate a substring within a string. </para>
                <para>If you are splitting a string at a separator character, use the <codeEntityReference autoUpgrade="true">Overload:System.String.IndexOfAny</codeEntityReference> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <codeEntityReference autoUpgrade="true">Overload:System.String.IndexOfAny</codeEntityReference> method to locate the first character of a separator string. Then use the <codeEntityReference autoUpgrade="true">Overload:System.String.Compare</codeEntityReference> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can tokenize a string with the <codeEntityReference autoUpgrade="true">M:System.String.Split(System.Char[])</codeEntityReference> method.</para>
                <codeReference>stringsplit#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Remove(System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Replace(System.Char,System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Substring(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array containing the substrings in this instance that are delimited by elements of a specified <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> or <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array containing the substrings in this instance that are delimited by elements of a specified <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> array. A parameter specifies the maximum number of substrings to return.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>separator</parameterReference>
            <content>
              <para>An array of Unicode characters that delimit the substrings in this instance, an empty array containing no delimiters, or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The maximum number of substrings to return. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <parameterReference>separator</parameterReference>. For more information, see the Remarks section.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> is negative. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Delimiter characters are not included in the elements of the return value array. Delimiters are detected using an ordinal comparison.</para>
            <para>If this instance does not contain any of the characters in <parameterReference>separator</parameterReference>, the return value array consists of a single element that contains this instance. If the <parameterReference>separator</parameterReference> parameter is <languageKeyword>null</languageKeyword> or contains no characters, white space characters are assumed to be the delimiters. If <parameterReference>count</parameterReference> is zero, an empty array is returned.</para>
            <para>If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>. </para>
            <para>If there are more than <parameterReference>count</parameterReference> substrings in this instance, the first <parameterReference>count</parameterReference> minus 1 substrings are returned in the first <parameterReference>count</parameterReference> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</para>
            <para>If <parameterReference>count</parameterReference> is greater than the number of substrings, the available substrings are returned and no exception is thrown.</para>
            <para>For example: </para>
            <table>
              <tableHeader>
                <row>
                  <entry>
                    <para>Input </para>
                  </entry>
                  <entry>
                    <para>separator, count </para>
                  </entry>
                  <entry>
                    <para>Output </para>
                  </entry>
                </row>
              </tableHeader>
              <row>
                <entry>
                  <para>"42, 12, 19" </para>
                </entry>
                <entry>
                  <para>new Char[] {',', ' '}, 2 </para>
                </entry>
                <entry>
                  <para>{"42", " 12, 19"} </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>"42..12..19" </para>
                </entry>
                <entry>
                  <para>new Char[] {'.'}, 4 </para>
                </entry>
                <entry>
                  <para>{"42", "", "12", ".19"} </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>"Banana" </para>
                </entry>
                <entry>
                  <para>new Char[] {'.'}, 2 </para>
                </entry>
                <entry>
                  <para>{"Banana"} </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>"Darb\nSmarba" </para>
                </entry>
                <entry>
                  <para>new Char[] {}, 1 </para>
                </entry>
                <entry>
                  <para>{"Darb\nSmarba"} </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>"Darb\nSmarba" </para>
                </entry>
                <entry>
                  <para>new Char[] null, 2 </para>
                </entry>
                <entry>
                  <para>{"Darb", "Smarba"} </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>"Darb\nSmarba" </para>
                </entry>
                <entry>
                  <para>new Char[] null, 100 </para>
                </entry>
                <entry>
                  <para>{"Darb", "Smarba"} </para>
                </entry>
              </row>
            </table>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how <parameterReference>count</parameterReference> affects the number of strings returned by <codeEntityReference autoUpgrade="true">M:System.String.Split(System.Char[])</codeEntityReference>.</para>
                <codeReference>StringSplit2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Remove(System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Replace(System.Char,System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Substring(System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array containing the substrings in this string that are delimited by elements of a specified <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> array. Parameters specify the maximum number of substrings to return and whether to return empty array elements.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>separator</parameterReference>
            <content>
              <para>An array of Unicode characters that delimit the substrings in this string, an empty array containing no delimiters, or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The maximum number of substrings to return. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>options</parameterReference>
            <content>
              <para>Specify <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.RemoveEmptyEntries</codeEntityReference> to omit empty array elements from the array returned, or <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.None</codeEntityReference> to include empty array elements in the array returned. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An array whose elements contain the substrings in this stringthat are delimited by one or more characters in <parameterReference>separator</parameterReference>. For more information, see the Remarks section.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> is negative. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>options</parameterReference> is not one of the <codeEntityReference autoUpgrade="true">T:System.StringSplitOptions</codeEntityReference> values.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Delimiter characters are not included in the elements of the return value array. Delimiters are detected using an ordinal comparison.</para>
            <para>If this instance does not contain any of the characters in <parameterReference>separator</parameterReference>, the return value array consists of a single element that contains this instance. If the <parameterReference>separator</parameterReference> parameter is <languageKeyword>null</languageKeyword> or contains no characters, white space characters are assumed to be the delimiters. </para>
            <para>If the <parameterReference>count</parameterReference> parameter is zero, or the <parameterReference>options</parameterReference> parameter is <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.RemoveEmptyEntries</codeEntityReference> and the length of this instance is zero, an empty array is returned.</para>
            <para>If the <parameterReference>options</parameterReference> parameter is <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.None</codeEntityReference>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>. </para>
            <para>If there are more than <parameterReference>count</parameterReference> substrings in this instance, the first <parameterReference>count</parameterReference> minus 1 substrings are returned in the first <parameterReference>count</parameterReference> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</para>
            <para>If <parameterReference>count</parameterReference> is greater than the number of substrings, the available substrings are returned and no exception is thrown.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <codeEntityReference autoUpgrade="true">T:System.StringSplitOptions</codeEntityReference> enumeration to include or exclude substrings generated by the <codeEntityReference autoUpgrade="true">Overload:System.String.Split</codeEntityReference> method.</para>
                <codeReference>string.split3#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array containing the substrings in this string that are delimited by elements of a specified <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> array. A parameter specifies whether to return empty array elements.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>separator</parameterReference>
            <content>
              <para>An array of Unicode characters that delimit the substrings in this string, an empty array containing no delimiters, or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>options</parameterReference>
            <content>
              <para>Specify <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.RemoveEmptyEntries</codeEntityReference> to omit empty array elements from the array returned, or <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.None</codeEntityReference> to include empty array elements in the array returned. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An array whose elements contain the substrings in this string that are delimited by one or more characters in <parameterReference>separator</parameterReference>. For more information, see the Remarks section.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>options</parameterReference> is not one of the <codeEntityReference autoUpgrade="true">T:System.StringSplitOptions</codeEntityReference> values.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Delimiter characters are not included in the elements of the return value array. Delimiters are detected using an ordinal comparison.</para>
            <para>If this instance does not contain any of the characters in <parameterReference>separator</parameterReference>, the return value array consists of a single element that contains this instance. If the <parameterReference>separator</parameterReference> parameter is <languageKeyword>null</languageKeyword> or contains no characters, white space characters are assumed to be the delimiters. </para>
            <para>If the <parameterReference>options</parameterReference> parameter is <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.RemoveEmptyEntries</codeEntityReference> and the length of this instance is zero, an empty array is returned.</para>
            <para>If the <parameterReference>options</parameterReference> parameter is <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.None</codeEntityReference>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>. </para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <codeEntityReference autoUpgrade="true">T:System.StringSplitOptions</codeEntityReference> enumeration to include or exclude substrings generated by the <codeEntityReference autoUpgrade="true">Overload:System.String.Split</codeEntityReference> method.</para>
                <codeReference>string.split3#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array containing the substrings in this string that are delimited by elements of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array. Parameters specify the maximum number of substrings to return and whether to return empty array elements.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>separator</parameterReference>
            <content>
              <para>An array of strings that delimit the substrings in this string, an empty array containing no delimiters, or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The maximum number of substrings to return. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>options</parameterReference>
            <content>
              <para>Specify <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.RemoveEmptyEntries</codeEntityReference> to omit empty array elements from the array returned, or <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.None</codeEntityReference> to include empty array elements in the array returned. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An array whose elements contain the substrings in this string that are delimited by one or more strings in <parameterReference>separator</parameterReference>. For more information, see the Remarks section.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> is negative. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>options</parameterReference> is not one of the <codeEntityReference autoUpgrade="true">T:System.StringSplitOptions</codeEntityReference> values.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
          <sections>
            <section>
              <title>Return Value Details</title>
              <content>
                <para>Delimiter strings are not included in the elements of the return value array. Delimiters are detected using an ordinal comparison.</para>
                <para>If this instance does not contain any of the strings in <parameterReference>separator</parameterReference>, the return value array consists of a single element that contains this instance. If the <parameterReference>separator</parameterReference> parameter is <languageKeyword>null</languageKeyword> or contains no characters, white space characters are assumed to be the delimiters. </para>
                <para>If the <parameterReference>count</parameterReference> parameter is zero, or the <parameterReference>options</parameterReference> parameter is <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.RemoveEmptyEntries</codeEntityReference> and the length of this instance is zero, an empty array is returned.</para>
                <para>If the <parameterReference>options</parameterReference> parameter is <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.None</codeEntityReference>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>. </para>
                <para>If there are more than <parameterReference>count</parameterReference> substrings in this instance, the first <parameterReference>count</parameterReference> minus 1 substrings are returned in the first <parameterReference>count</parameterReference> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</para>
                <para>If <parameterReference>count</parameterReference> is greater than the number of substrings, the available substrings are returned and no exception is thrown.</para>
              </content>
            </section>
            <section>
              <title>Comparison Details</title>
              <content>
                <para>The <codeEntityReference autoUpgrade="true">M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)</codeEntityReference> method extracts the substrings in this string that are delimited by one or more of the strings in the <parameterReference>separator</parameterReference> parameter, and returns those substrings as elements of an array. </para>
                <para>The <codeEntityReference autoUpgrade="true">Overload:System.String.Split</codeEntityReference> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference> enumeration. </para>
                <para>The <codeEntityReference autoUpgrade="true">M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)</codeEntityReference> method ignores any element of <parameterReference>separator</parameterReference> whose value is <languageKeyword>null</languageKeyword> or the empty string ("").</para>
                <para>To avoid ambiguous results when strings in <parameterReference>separator</parameterReference> have characters in common, the <codeEntityReference autoUpgrade="true">Overload:System.String.Split</codeEntityReference> method proceeds from the beginning to the end of the value of the instance, and matches the first element in <parameterReference>separator</parameterReference> that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in <parameterReference>separator</parameterReference>.</para>
                <para>For example, consider an instance whose value is "abcdef". If the first element in <parameterReference>separator</parameterReference> was "ef" and the second element was "bcde", the result of the split operation would be "a" and "f". This is because the substring in the instance, "bcde", is encountered and matches an element in <parameterReference>separator</parameterReference> before the substring "f" is encountered.</para>
                <para>However, if the first element of <parameterReference>separator</parameterReference> was "bcd" and the second element was "bc", the result of the split operation would be "a" and "ef". This is because "bcd" is the first delimiter in <parameterReference>separator</parameterReference> that matches a delimiter in the instance. If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be "a" and "def". </para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <codeEntityReference autoUpgrade="true">T:System.StringSplitOptions</codeEntityReference> enumeration to include or exclude substrings generated by the <codeEntityReference autoUpgrade="true">Overload:System.String.Split</codeEntityReference> method.</para>
                <codeReference>string.split3#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array containing the substrings in this string that are delimited by elements of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> array. A parameter specifies whether to return empty array elements.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>separator</parameterReference>
            <content>
              <para>An array of strings that delimit the substrings in this string, an empty array containing no delimiters, or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>options</parameterReference>
            <content>
              <para>Specify <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.RemoveEmptyEntries</codeEntityReference> to omit empty array elements from the array returned, or <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.None</codeEntityReference> to include empty array elements in the array returned. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>An array whose elements contain the substrings in this string that are delimited by one or more strings in <parameterReference>separator</parameterReference>. For more information, see the Remarks section.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>options</parameterReference> is not one of the <codeEntityReference autoUpgrade="true">T:System.StringSplitOptions</codeEntityReference> values.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
          <sections>
            <section>
              <title>Return Value Details</title>
              <content>
                <para>Delimiter strings are not included in the elements of the return value array. Delimiters are detected using an ordinal comparison.</para>
                <para>If this instance does not contain any of the strings in <parameterReference>separator</parameterReference>, the return value array consists of a single element that contains this instance. If the <parameterReference>separator</parameterReference> parameter is <languageKeyword>null</languageKeyword> or contains no characters, white space characters are assumed to be the delimiters. </para>
                <para>If the <parameterReference>options</parameterReference> parameter is <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.RemoveEmptyEntries</codeEntityReference> and the length of this instance is zero, an empty array is returned.</para>
                <para>If the <parameterReference>options</parameterReference> parameter is <codeEntityReference autoUpgrade="true">F:System.StringSplitOptions.None</codeEntityReference>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>. </para>
              </content>
            </section>
            <section>
              <title>Comparison Details</title>
              <content>
                <para>The <codeEntityReference autoUpgrade="true">M:System.String.Split(System.String[],System.StringSplitOptions)</codeEntityReference> method extracts the substrings in this string that are delimited by one or more of the strings in the <parameterReference>separator</parameterReference> parameter, and returns those substrings as elements of an array. </para>
                <para>The <codeEntityReference autoUpgrade="true">Overload:System.String.Split</codeEntityReference> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.CompareOptions</codeEntityReference> enumeration. </para>
                <para>The <codeEntityReference autoUpgrade="true">M:System.String.Split(System.String[],System.StringSplitOptions)</codeEntityReference> method ignores any element of <parameterReference>separator</parameterReference> whose value is <languageKeyword>null</languageKeyword> or the empty string ("").</para>
                <para>To avoid ambiguous results when strings in <parameterReference>separator</parameterReference> have characters in common, the <codeEntityReference autoUpgrade="true">Overload:System.String.Split</codeEntityReference> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in <parameterReference>separator</parameterReference> that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in <parameterReference>separator</parameterReference>.</para>
                <para>For example, consider an instance whose value is "abcdef". If the first element in <parameterReference>separator</parameterReference> was "ef" and the second element was "bcde", the result of the split operation would be "a" and "f". This is because the substring in the instance, "bcde", is encountered and matches an element in <parameterReference>separator</parameterReference> before the substring "f" is encountered.</para>
                <para>However, if the first element of <parameterReference>separator</parameterReference> was "bcd" and the second element was "bc", the result of the split operation would be "a" and "ef". This is because "bcd" is the first delimiter in <parameterReference>separator</parameterReference> that matches a delimiter in the instance. If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be "a" and "def". </para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <codeEntityReference autoUpgrade="true">T:System.StringSplitOptions</codeEntityReference> enumeration to include or exclude substrings generated by the <codeEntityReference autoUpgrade="true">Overload:System.String.Split</codeEntityReference> method.</para>
                <codeReference>string.split3#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="Overload:System.String.StartsWith">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether the beginning of an instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> matches a specified string.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether the beginning of this instance matches the specified string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> to compare. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if <parameterReference>value</parameterReference> matches the beginning of this string; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method compares <parameterReference>value</parameterReference> to the substring at the beginning of this instance that is the same length as <parameterReference>value</parameterReference>, and returns an indication whether they are equal. To be equal, <parameterReference>value</parameterReference> must be an empty string (<codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>), a reference to this same instance, or match the beginning of this instance.</para>
            <para>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can use the <codeEntityReference autoUpgrade="true">M:System.String.StartsWith(System.String)</codeEntityReference> method.</para>
                <codeReference>stringstartswith#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.EndsWith(System.String)</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Determines whether the beginning of an instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> matches a specified string.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether the beginning of this string matches the specified string when compared using the specified culture.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to compare. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>ignoreCase</parameterReference>
            <content>
              <para>
                <languageKeyword>true</languageKeyword> to ignore case when comparing this string and <parameterReference>value</parameterReference>; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>Cultural information that determines how this string and <parameterReference>value</parameterReference> are compared. If <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>, the current culture is used.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the <parameterReference>value</parameterReference> parameter matches the beginning of this string; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>This method compares the <parameterReference>value</parameterReference> parameter to the substring at the beginning of this string that is the same length as <parameterReference>value</parameterReference>, and returns a value that indicates whether they are equal. To be equal, <parameterReference>value</parameterReference> must be an empty string (<codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>), a reference to this same instance, or match the beginning of this instance.</para>
            <para>This method performs a word (culture-sensitive) comparison using the specified casing and culture.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Determines whether the beginning of this string matches the specified string when compared using the specified comparison option.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to compare to. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference> values that determines how this string and <parameterReference>value</parameterReference> are compared. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the <parameterReference>value</parameterReference> parameter matches the beginning of this string; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference> value.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">M:System.String.StartsWith(System.String,System.StringComparison)</codeEntityReference> method compares the <parameterReference>value</parameterReference> parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal. To be equal, <parameterReference>value</parameterReference> must be a reference to this same string, be the empty string (""), or match the beginning of this string. The type of comparison performed by the <codeEntityReference autoUpgrade="true">M:System.String.StartsWith(System.String,System.StringComparison)</codeEntityReference> method depends on the value of the <parameterReference>comparisonType</parameterReference> parameter.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example determines whether a string starts with a particular substring. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</para>
                <codeReference>System.String.StartsWithCmp#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.StringComparison</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.Substring">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a substring from this instance.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a substring from this instance. The substring starts at a specified character position.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting character position of a substring in this instance. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object equivalent to the substring that begins at <parameterReference>startIndex</parameterReference> in this instance, or <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> if <parameterReference>startIndex</parameterReference> is equal to the length of this instance.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is less than zero or greater than the length of this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The index is zero-based.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates obtaining a substring from a string.</para>
                <codeReference>stringsubstring#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Remove(System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Replace(System.Char,System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Split(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Retrieves a substring from this instance.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The index of the start of the substring. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The number of characters in the substring. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent to the substring of length <parameterReference>length</parameterReference> that begins at <parameterReference>startIndex</parameterReference> in this instance, or <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> if <parameterReference>startIndex</parameterReference> is equal to the length of this instance and <parameterReference>length</parameterReference> is zero.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> plus <parameterReference>length</parameterReference> indicates a position not within this instance.</para>
              <para>-or- </para>
              <para>
                <parameterReference>startIndex</parameterReference> or <parameterReference>length</parameterReference> is less than zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>
              <parameterReference>startIndex</parameterReference> is zero-based.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example uses the <codeEntityReference autoUpgrade="true">M:System.String.Substring(System.Int32,System.Int32)</codeEntityReference> method in three cases to isolate substrings within a string. In two cases the substrings are used in comparisons, and in the third case an exception is thrown because invalid parameters are specified.</para>
                <codeReference>Classic String.Substring1 Example#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Insert(System.Int32,System.String)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Join(System.String,System.String[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Remove(System.Int32,System.Int32)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Replace(System.Char,System.Char)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Split(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToBoolean(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a Boolean value.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>
            <languageKeyword>true</languageKeyword> if the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is <codeEntityReference autoUpgrade="true">F:System.Boolean.TrueString</codeEntityReference>, or <languageKeyword>false</languageKeyword> if the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is <codeEntityReference autoUpgrade="true">F:System.Boolean.FalseString</codeEntityReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is not <codeEntityReference autoUpgrade="true">F:System.Boolean.TrueString</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Boolean.FalseString</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The value of this instance must be <codeEntityReference autoUpgrade="true">F:System.Boolean.TrueString</codeEntityReference> or <codeEntityReference autoUpgrade="true">F:System.Boolean.FalseString</codeEntityReference>, with optional leading and trailing white space.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToByte(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to an 8-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object cannot be parsed. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is a number greater than <codeEntityReference autoUpgrade="true">F:System.Byte.MaxValue</codeEntityReference> or less than <codeEntityReference autoUpgrade="true">F:System.Byte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToChar(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts a non-empty string of length one to a <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> object.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The character at index 0 in the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToDateTime(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a date and time.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToDecimal(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a decimal number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object cannot be parsed. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is a number less than <codeEntityReference autoUpgrade="true">F:System.Decimal.MinValue</codeEntityReference> or than <codeEntityReference autoUpgrade="true">F:System.Decimal.MaxValue</codeEntityReference> greater. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToDouble(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a double-precision floating-point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object cannot be parsed. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is a number less than <codeEntityReference autoUpgrade="true">F:System.Double.MinValue</codeEntityReference> or greater than <codeEntityReference autoUpgrade="true">F:System.Double.MaxValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToInt16(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a 16-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object cannot be parsed. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is a number greater than <codeEntityReference autoUpgrade="true">F:System.Int16.MaxValue</codeEntityReference> or less than <codeEntityReference autoUpgrade="true">F:System.Int16.MinValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToInt32(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a 32-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToInt64(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a 64-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToSByte(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to an 8-bit signed integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object cannot be parsed. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is a number greater than <codeEntityReference autoUpgrade="true">F:System.SByte.MaxValue</codeEntityReference> or less than <codeEntityReference autoUpgrade="true">F:System.SByte.MinValue</codeEntityReference>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToSingle(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a single-precision floating-point number.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to an object of a specified type.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>type</parameterReference>
            <content>
              <para>The type of the returned object. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object.</para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>type</parameterReference> is <languageKeyword>null</languageKeyword>.</para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.InvalidCastException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object cannot be converted to the type specified by the <parameterReference>type</parameterReference> parameter. </para>
            </content>
          </exception>
        </exceptions>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToUInt16(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a 16-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object cannot be parsed. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is a number greater than <codeEntityReference autoUpgrade="true">F:System.UInt16.MaxValue</codeEntityReference> or less than <codeEntityReference autoUpgrade="true">F:System.UInt16.MinValue</codeEntityReference>.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToUInt32(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a 32-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.FormatException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object cannot be parsed. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.OverflowException</codeEntityReference>
            <content>
              <para>The value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object is a number greater <codeEntityReference autoUpgrade="true">F:System.UInt32.MaxValue</codeEntityReference> or less than <codeEntityReference autoUpgrade="true">F:System.UInt32.MinValue</codeEntityReference></para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.System.IConvertible.ToUInt64(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <internalOnly>
        </internalOnly>
        <summary>
          <para>Converts the value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to a 64-bit unsigned integer.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> object. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The converted value of the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object.</para>
        </returnValue>
        <remarks>
          <content>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="Overload:System.String.ToCharArray">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies the characters in this instance to a Unicode character array.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.ToCharArray">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies the characters in this instance to a Unicode character array.</para>
        </summary>
        <returnValue>
          <para>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how to easily create a Unicode character array from a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>. The array is then used with the <codeEntityReference autoUpgrade="true">M:System.String.Split(System.Char[])</codeEntityReference> method.</para>
                <codeReference>StringSplit2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Copies the characters in this instance to a Unicode character array.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Copies the characters in a specified substring in this instance to a Unicode character array.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The starting position of a substring in this instance. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>length</parameterReference>
            <content>
              <para>The length of the substring in this instance. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A Unicode character array whose elements are the <parameterReference>length</parameterReference> number of characters in this instance starting from character position <parameterReference>startIndex</parameterReference>.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> or <parameterReference>length</parameterReference> is less than zero.</para>
              <para>-or- </para>
              <para>
                <parameterReference>startIndex</parameterReference> plus <parameterReference>length</parameterReference> is greater than the length of this instance. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>If <parameterReference>length</parameterReference> is zero, the entire string is copied starting from the beginning of this instance, and ignoring the value of <parameterReference>startIndex</parameterReference>. If this instance is an empty string (""), the returned array is empty and has a zero length.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a substring within a string to an array of characters, then enumerates and displays the elements of the array.</para>
                <codeReference>string.tochararray1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Array</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.ToLower">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a copy of this <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> converted to lowercase.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.ToLower">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a copy of this <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> converted to lowercase, using the casing rules of the current culture.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> in lowercase.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method takes into account the current culture. For more information, see the <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> topic.</para>
          </content>
          <sections>
            <section>
              <title>Security Considerations</title>
              <content>
                <para>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <codeEntityReference autoUpgrade="true">M:System.String.ToLowerInvariant</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.String.ToUpperInvariant</codeEntityReference> methods.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts several mixed case strings to lowercase.</para>
                <codeReference>stringlowerupper#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.ToLowerInvariant</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.ToUpper</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.ToUpperInvariant</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns a copy of this <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> converted to lowercase.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a copy of this <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> converted to lowercase, using the casing rules of the specified culture.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> object that supplies culture-specific casing rules. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> in lowercase.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The casing rules of the culture that is currently in effect determines the way the case of a string is changed. If your application depends on the case of a string changing in a predictable way, and the effective culture changes unexpectedly, then you can get invalid results. Consider the following lookup routine where the lookup key is a text string, the key is forced to a standard case to simplify comparisons, and the effective culture is the culture associated with the current thread.</para>
            <code>static object LookupKey(string key) { return internalHashtable[key.ToLower()]; }</code>
            <para>If it is possible for the current thread and its associated culture to change unexpectedly, it is advisable to specify the invariant culture instead of defaulting to the current thread culture. The following example demonstrates the preferred technique.</para>
            <code>static object LookupKey(string key) { return internalHashtable[key.ToLower(CultureInfo.InvariantCulture)]; }</code>
          </content>
          <sections>
            <section>
              <title>Security Considerations</title>
              <content>
                <para>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <codeEntityReference autoUpgrade="true">M:System.String.ToLowerInvariant</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.String.ToUpperInvariant</codeEntityReference> methods.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts two strings of uppercase characters to lowercase characters using the English-United States and Turkish-Turkey cultures, then compares the lowercase strings. The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE. </para>
                <codeReference>string.tolower1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.ToUpper</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a copy of this <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object converted to lowercase using the casing rules of the invariant culture.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object in lowercase.</para>
        </returnValue>
        <remarks>
          <content>
            <para>If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <codeEntityReference autoUpgrade="true">M:System.String.ToLowerInvariant</codeEntityReference> method. The <codeEntityReference autoUpgrade="true">M:System.String.ToLowerInvariant</codeEntityReference> method is equivalent to <codeInline>ToLower(CultureInfo.InvariantCulture)</codeInline>.</para>
          </content>
          <sections>
            <section>
              <title>Security Considerations</title>
              <content>
                <para>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <codeEntityReference autoUpgrade="true">M:System.String.ToLowerInvariant</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.String.ToUpperInvariant</codeEntityReference> methods.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.ToUpperInvariant</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.ToLower(System.Globalization.CultureInfo)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.ToLower</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Globalization.CultureInfo.InvariantCulture</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.ToString">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Converts the value of this instance to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.ToString">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns this instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>; no actual conversion is performed.</para>
        </summary>
        <returnValue>
          <para>This <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </returnValue>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">M:System.String.ToString</codeEntityReference> method.</para>
                <codeReference>string.tostring#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.Clone</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Converts the value of this instance to a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns this instance of <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>; no actual conversion is performed.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>provider</parameterReference>
            <content>
              <para>(Reserved) An <codeEntityReference autoUpgrade="true">T:System.IFormatProvider</codeEntityReference> that supplies culture-specific formatting information. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>This <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference>.</para>
        </returnValue>
        <remarks>
          <content>
            <para>
              <parameterReference>provider</parameterReference> is reserved, and does not currently participate in this operation.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="Overload:System.String.ToUpper">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a copy of this <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> converted to uppercase.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.ToUpper">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a copy of this <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> converted to uppercase, using the casing rules of the current culture.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> in uppercase.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This method takes into account the current culture. For more information, see the <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> topic.</para>
          </content>
          <sections>
            <section>
              <title>Security Considerations</title>
              <content>
                <para>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <codeEntityReference autoUpgrade="true">M:System.String.ToLowerInvariant</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.String.ToUpperInvariant</codeEntityReference> methods.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can make a <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> comparison case-insensitive using the <codeEntityReference autoUpgrade="true">M:System.String.ToUpper</codeEntityReference> method.</para>
                <codeReference>stringexample1#2</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.ToLower</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Returns a copy of this <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> converted to uppercase.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a copy of this <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> converted to uppercase, using the casing rules of the specified culture.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>culture</parameterReference>
            <content>
              <para>A <codeEntityReference autoUpgrade="true">T:System.Globalization.CultureInfo</codeEntityReference> object that supplies culture-specific casing rules. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> in uppercase.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>culture</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The casing rules of the culture that is currently in effect determines the way the case of a string is changed. If your application depends on the case of a string changing in a predictable way, and the effective culture changes unexpectedly, then you can get invalid results. Consider the following lookup routine where the lookup key is a text string, the key is forced to a standard case to simplify comparisons, and the effective culture is the culture associated with the current thread.</para>
            <code>static object LookupKey(string key) { return internalHashtable[key.ToUpper()]; }</code>
            <para>If it is possible for the current thread and its associated culture to change unexpectedly, it is advisable to specify the invariant culture instead of defaulting to the current thread culture. The following example demonstrates the preferred technique.</para>
            <code>static object LookupKey(string key) { return internalHashtable[key.ToUpper(CultureInfo.InvariantCulture)]; }</code>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a string of lowercase characters to two strings of uppercase characters using the English-United States and Turkish-Turkey cultures, then compares the uppercase strings. The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE. </para>
                <codeReference>string.toupper1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.ToLower</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Returns a copy of this <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object converted to uppercase using the casing rules of the invariant culture.</para>
        </summary>
        <returnValue>
          <para>A <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object in uppercase.</para>
        </returnValue>
        <remarks>
          <content>
            <para>If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <codeEntityReference autoUpgrade="true">M:System.String.ToUpperInvariant</codeEntityReference> method. The <codeEntityReference autoUpgrade="true">M:System.String.ToUpperInvariant</codeEntityReference> method is equivalent to <codeInline>ToUpper(CultureInfo.InvariantCulture)</codeInline>.</para>
          </content>
          <sections>
            <section>
              <title>Security Considerations</title>
              <content>
                <para>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <codeEntityReference autoUpgrade="true">M:System.String.ToLowerInvariant</codeEntityReference> or <codeEntityReference autoUpgrade="true">M:System.String.ToUpperInvariant</codeEntityReference> methods.</para>
              </content>
            </section>
          </sections>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example converts a string of lowercase characters to two strings of uppercase characters using the English-United States and Turkish-Turkey cultures, then compares the uppercase strings. The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE. </para>
                <codeReference>string.toupper1#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.ToLowerInvariant</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.ToUpper(System.Globalization.CultureInfo)</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.ToUpper</codeEntityReference>
          <codeEntityReference autoUpgrade="true">P:System.Globalization.CultureInfo.InvariantCulture</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="Overload:System.String.Trim">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Removes all occurrences of a set of specified characters from the beginning and end of this instance.</para>
        </summary>
      </dduexml>
    </member>
    <member name="M:System.String.Trim">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Removes all occurrences of white space characters from the beginning and end of this instance.</para>
        </summary>
        <returnValue>
          <para>A new <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> equivalent to this instance after white space characters are removed from the beginning and end.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The following table lists the white space characters removed by the <codeEntityReference autoUpgrade="true">Overload:System.String.Trim</codeEntityReference> method. The first column lists the Unicode name for the character, and the second column lists the Unicode hexadecimal notation for the code point that identifies the character.</para>
            <table>
              <tableHeader>
                <row>
                  <entry>
                    <para>Unicode name</para>
                  </entry>
                  <entry>
                    <para>Unicode code point</para>
                  </entry>
                </row>
              </tableHeader>
              <row>
                <entry>
                  <para>CHARACTER TABULATION</para>
                </entry>
                <entry>
                  <para>U+0009</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>LINE FEED</para>
                </entry>
                <entry>
                  <para>U+000A</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>LINE TABULATION</para>
                </entry>
                <entry>
                  <para>U+000B</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>FORM FEED</para>
                </entry>
                <entry>
                  <para>U+000C</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>CARRIAGE RETURN</para>
                </entry>
                <entry>
                  <para>U+000D</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>SPACE</para>
                </entry>
                <entry>
                  <para>U+0020</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>NO-BREAK SPACE</para>
                </entry>
                <entry>
                  <para>U+00A0</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>EN QUAD</para>
                </entry>
                <entry>
                  <para>U+2000</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>EM QUAD</para>
                </entry>
                <entry>
                  <para>U+2001</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>EN SPACE</para>
                </entry>
                <entry>
                  <para>U+2002</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>EM SPACE</para>
                </entry>
                <entry>
                  <para>U+2003</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>THREE-PER-EM SPACE</para>
                </entry>
                <entry>
                  <para>U+2004</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>FOUR-PER-EM SPACE</para>
                </entry>
                <entry>
                  <para>U+2005</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>SIX-PER-EM SPACE</para>
                </entry>
                <entry>
                  <para>U+2006</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>FIGURE SPACE</para>
                </entry>
                <entry>
                  <para>U+2007</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>PUNCTUATION SPACE</para>
                </entry>
                <entry>
                  <para>U+2008</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>THIN SPACE</para>
                </entry>
                <entry>
                  <para>U+2009</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>HAIR SPACE</para>
                </entry>
                <entry>
                  <para>U+200A</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>ZERO WIDTH SPACE</para>
                </entry>
                <entry>
                  <para>U+200B</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>IDEOGRAPHIC SPACE</para>
                </entry>
                <entry>
                  <para>U+3000</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>ZERO WIDTH NO-BREAK SPACE</para>
                </entry>
                <entry>
                  <para>U+FEFF</para>
                </entry>
              </row>
            </table>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.String.Trim(System.Char[])</codeEntityReference> method overload.</para>
                <codeReference>stringtrim#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">M:System.String.TrimEnd(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.TrimStart(System.Char[])</codeEntityReference>
        </relatedTopics>
      <overload>
        <summary>
          <para>Removes all occurrences of a set of specified characters from the beginning and end of this instance.</para>
        </summary>
      </overload>
</dduexml>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Removes all occurrences of a set of characters specified in an array from the beginning and end of this instance.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>trimChars</parameterReference>
            <content>
              <para>An array of Unicode characters to be removed or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that remains after all occurrences of the characters in <parameterReference>trimChars</parameterReference> are removed from the beginning and end of this instance. If <parameterReference>trimChars</parameterReference> is <languageKeyword>null</languageKeyword>, white space characters are removed instead.</para>
        </returnValue>
        <remarks>
          <content>
            <para>For more information about what Unicode characters are categorized as white space characters, see the Remarks section of the <codeEntityReference autoUpgrade="false">M:System.String.Trim</codeEntityReference> method overload.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="false">M:System.String.Trim(System.Char[])</codeEntityReference> method overload.</para>
                <codeReference>string.trim2#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.TrimEnd(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.TrimStart(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Removes all occurrences of a set of characters specified in an array from the end of this instance.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>trimChars</parameterReference>
            <content>
              <para>An array of Unicode characters to be removed or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that remains after all occurrences of the characters in <parameterReference>trimChars</parameterReference> are removed from the end. If <parameterReference>trimChars</parameterReference> is <languageKeyword>null</languageKeyword>, white space characters are removed instead.</para>
        </returnValue>
        <remarks>
          <content>
            <para>For more information about what Unicode characters are categorized as white space characters, see the Remarks section of the <codeEntityReference autoUpgrade="false">M:System.String.Trim</codeEntityReference> method overload.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can use the <codeEntityReference autoUpgrade="false">M:System.String.TrimEnd(System.Char[])</codeEntityReference> method overload to trim white space or other characters from the end of a string.</para>
                <codeReference>stringtrim#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.TrimStart(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Removes all occurrences of a set of characters specified in an array from the beginning of this instance.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>trimChars</parameterReference>
            <content>
              <para>An array of Unicode characters to be removed or <languageKeyword>null</languageKeyword>. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> that remains after all occurrences of characters in <parameterReference>trimChars</parameterReference> are removed from the beginning. If <parameterReference>trimChars</parameterReference> is <languageKeyword>null</languageKeyword>, white space characters are removed instead.</para>
        </returnValue>
        <remarks>
          <content>
            <para>For more information about what Unicode characters are categorized as white space characters, see the Remarks section of the <codeEntityReference autoUpgrade="false">M:System.String.Trim</codeEntityReference> method overload.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can use the <codeEntityReference autoUpgrade="false">M:System.String.TrimStart(System.Char[])</codeEntityReference> method overload to trim white space or other characters from the beginning of a string.</para>
                <codeReference>stringtrim#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.Trim(System.Char[])</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.TrimEnd(System.Char[])</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the character at a specified character position in this instance.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>index</parameterReference>
            <content>
              <para>A character position in this instance. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>A Unicode character.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.IndexOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>index</parameterReference> is greater than or equal to the length of this object or less than zero. </para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>The <parameterReference>index</parameterReference> parameter is zero-based.</para>
            <para>This property returns the <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> at the position specified by the <parameterReference>index</parameterReference> parameter. However, a Unicode character might be represented by more than one <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>. Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.StringInfo</codeEntityReference> class to work with each Unicode character instead of each <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates how you can use this indexer in a routine to validate a string.</para>
                <codeReference>Uri_IsHexDigit#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>
          <codeEntityReference autoUpgrade="true">M:System.String.GetEnumerator</codeEntityReference>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="P:System.String.Length">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Gets the number of characters in this instance.</para>
        </summary>
        <returnValue>
          <para>The number of characters in this instance.</para>
        </returnValue>
        <remarks>
          <content>
            <para>The <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference> property returns the number of <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference> objects in this instance, not the number of Unicode characters. The reason is that a Unicode character might be represented by more than one <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>. Use the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.Globalization.StringInfo</codeEntityReference> class to work with each Unicode character instead of each <codeEntityReference autoUpgrade="true">T:System.Char</codeEntityReference>.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
                <para>The following code example demonstrates the <codeEntityReference autoUpgrade="true">P:System.String.Length</codeEntityReference> property.</para>
                <codeReference>string.length#1</codeReference>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
        <relatedTopics>
          <codeEntityReference autoUpgrade="true">T:System.Int32</codeEntityReference>
        </relatedTopics>
      </dduexml>
    </member>
    <member name="M:System.String.System.Collections.IEnumerable.GetEnumerator">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>For a description of this member, see <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Collections.IEnumerable.GetEnumerator</codeEntityReference>.</para>
        </summary>
        <returnValue>
          <para>An object that implements the <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerator</codeEntityReference> interface.</para>
        </returnValue>
        <remarks>
          <content>
            <para>This member is an explicit interface member implementation. It can be used only when the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> instance is cast to an <codeEntityReference autoUpgrade="true">T:System.Collections.IEnumerable</codeEntityReference> interface.</para>
          </content>
        </remarks>
      </dduexml>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <clsCompliantAlternative>
          <codeEntityReference>M:System.String.Concat(System.Object[])</codeEntityReference>
          <content>
          </content>
        </clsCompliantAlternative>
        <summary>
          <para>Concatenates the <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of four specified objects and any objects specified in an optional variable length parameter list.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>arg0</parameterReference>
            <content>
              <para>The first <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg1</parameterReference>
            <content>
              <para>The second <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg2</parameterReference>
            <content>
              <para>The third <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>arg3</parameterReference>
            <content>
              <para>The fourth <codeEntityReference autoUpgrade="true">T:System.Object</codeEntityReference>.</para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>…</parameterReference>
            <content>
              <para>An optional comma-delimited list of one or more additional objects to concatenate. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The concatenated <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> representations of the values of the <parameterReference>arg0</parameterReference>, <parameterReference>arg1</parameterReference>, <parameterReference>arg2</parameterReference>, and <parameterReference>arg3</parameterReference> parameters.</para>
        </returnValue>
        <remarks>
          <content>
            <para>An <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference> string is used in place of any null argument.</para>
            <alert class="note">
              <para>The last parameter of the  <codeEntityReference autoUpgrade="true">M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)</codeEntityReference> method is an optional comma-delimited list of one or more additional objects to concatenate.</para>
            </alert>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence of the specified string in the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. A parameter specifies the type of search to use for the specified string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> values. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the <parameterReference>value</parameterReference> parameter if that string is found, or -1 if it is not. If <parameterReference>value</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>, the return value is 0.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a valid <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> value.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>The <parameterReference>comparisonType</parameterReference> parameter specifies to search for the <parameterReference>value</parameterReference> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence of the specified string in the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> values. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the <parameterReference>value</parameterReference> parameter if that string is found, or -1 if it is not. If <parameterReference>value</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>, the return value is 0.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is negative, or specifies a position that is not within this instance. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a valid <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> value.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>The <parameterReference>comparisonType</parameterReference> parameter specifies to search for the <parameterReference>value</parameterReference> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the first occurrence of the specified string in the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of character positions to examine. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> values. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the <parameterReference>value</parameterReference> parameter if that string is found, or -1 if it is not. If <parameterReference>value</parameterReference> is <codeEntityReference autoUpgrade="true">F:System.String.Empty</codeEntityReference>, the return value is 0.</para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> or <parameterReference>startIndex</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>count</parameterReference> plus <parameterReference>startIndex</parameterReference> specify a position that is not within this instance. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a valid <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> value.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>The search begins at <parameterReference>startIndex</parameterReference> and continues to <parameterReference>startIndex</parameterReference> + <parameterReference>count</parameterReference> -1. The character at <parameterReference>startIndex</parameterReference> + <parameterReference>count</parameterReference> is not included in the search.</para>
            <para>The <parameterReference>comparisonType</parameterReference> parameter specifies to search for the <parameterReference>value</parameterReference> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the last occurrence of a specified string within the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. A parameter specifies the type of search to use for the specified string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> values. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the <parameterReference>value</parameterReference> parameter if that string is found, or -1 if it is not. </para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a valid <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> value.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>The <parameterReference>comparisonType</parameterReference> parameter specifies to search for the <parameterReference>value</parameterReference> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index of the last occurrence of a specified string within the current <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object. Parameters specify the starting search position in the current string, and type of search to use for the specified string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> values. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the <parameterReference>value</parameterReference> parameter if that string is found, or -1 if it is not. </para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>startIndex</parameterReference> is less than zero or specifies a position that is not within this instance. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a valid <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> value.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>The <parameterReference>comparisonType</parameterReference> parameter specifies to search for the <parameterReference>value</parameterReference> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</para>
            <para>The search begins at the <parameterReference>startIndex</parameterReference> character position and proceeds backwards until either <parameterReference>value</parameterReference> is found or the 0 index position is reached.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <dduexml xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <summary>
          <para>Reports the index position of the last occurrence of a specified <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object within this instance. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</para>
        </summary>
        <parameters>
          <parameter>
            <parameterReference>value</parameterReference>
            <content>
              <para>The <codeEntityReference autoUpgrade="true">T:System.String</codeEntityReference> object to seek. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>startIndex</parameterReference>
            <content>
              <para>The search starting position. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>count</parameterReference>
            <content>
              <para>The number of character positions to examine. </para>
            </content>
          </parameter>
          <parameter>
            <parameterReference>comparisonType</parameterReference>
            <content>
              <para>One of the <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> values. </para>
            </content>
          </parameter>
        </parameters>
        <returnValue>
          <para>The index position of the <parameterReference>value</parameterReference> parameter if that string is found, or -1 if it is not. </para>
        </returnValue>
        <exceptions>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentNullException</codeEntityReference>
            <content>
              <para>
                <parameterReference>value</parameterReference> is <languageKeyword>null</languageKeyword>. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentOutOfRangeException</codeEntityReference>
            <content>
              <para>
                <parameterReference>count</parameterReference> or <parameterReference>startIndex</parameterReference> is negative.</para>
              <para>-or- </para>
              <para>
                <parameterReference>count</parameterReference> plus <parameterReference>startIndex</parameterReference> specify a position that is not within this instance. </para>
            </content>
          </exception>
          <exception>
            <codeEntityReference autoUpgrade="true">T:System.ArgumentException</codeEntityReference>
            <content>
              <para>
                <parameterReference>comparisonType</parameterReference> is not a valid <codeEntityReference qualifyHint="true" autoUpgrade="true">T:System.StringComparison</codeEntityReference> value.</para>
            </content>
          </exception>
        </exceptions>
        <remarks>
          <content>
            <para>Index numbering starts from zero.</para>
            <para>The <parameterReference>comparisonType</parameterReference> parameter specifies to search for the <parameterReference>value</parameterReference> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</para>
            <para>The search begins at the <parameterReference>startIndex</parameterReference> character position and proceeds backwards until either <parameterReference>value</parameterReference> is found or <parameterReference>count</parameterReference> character positions have been examined.</para>
          </content>
        </remarks>
        <codeExamples>
          <codeExample>
            <legacy>
              <content>
              </content>
            </legacy>
          </codeExample>
        </codeExamples>
      </dduexml>
    </member>
  </members>
</doc>