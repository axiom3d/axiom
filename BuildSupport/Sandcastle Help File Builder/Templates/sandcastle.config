<configuration>
<dduetools>
    <builder>
      <components>

        <!-- Create skeleton document -->
        <component type="Microsoft.Ddue.Tools.CopyFromFileComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
            <data file="{@PresentationPath}transforms\skeleton.xml" />
            <copy source="/*" target="/" />
        </component>

        <!-- Copy in reflection data -->
        <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <index name="reflection" value="/reflection/apis/api" key="@id" cache="10">
            <data files="reflection.xml" />
            <data files="{@SandcastlePath}Data\Cpref_reflection\*.xml" />
          </index>
          <copy name="reflection" source="*" target="/document/reference" />
        </component>

        <!-- Copy in container data -->
        <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
            <copy name="reflection" key="string(/document/reference/containers/namespace/@api)" source="*[not(local-name()='elements')]" target="/document/reference/containers/namespace" />
        </component>

        <component type="Microsoft.Ddue.Tools.ForEachComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <variable expression="/document/reference/containers//type/@api" />
          <components>
            <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <copy name="reflection" source="apidata|templates|containers|attributes" target="/document/reference/containers//type[@api=$key]" />
            </component>
          </components>
        </component>

        <!-- Generate syntax -->
        <component type="Microsoft.Ddue.Tools.IfThenComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <if condition="not(starts-with($key,'Overload:') or starts-with($key,'R:'))" />
          <then>
            <component type="Microsoft.Ddue.Tools.SyntaxComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <syntax input="/document/reference" output="/document/syntax" />
              <generators>
{@SyntaxFilters}
              </generators>
            </component>
          </then>
        </component>

        <!-- Copy in comments -->
        <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <index name="comments" value="/doc/members/member" key="@name" cache="100">
{@CommentFileList}
            <data files="%SystemRoot%\Microsoft.NET\Framework\v{@FrameworkVersion}\*.xml" />
          </index>
          <copy name="comments" source="*" target="/document/comments" />
        </component>

        <!-- Copy in reflection data and comments for members -->
        <component type="Microsoft.Ddue.Tools.ForEachComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <variable expression="/document/reference/elements/element/@api" />
          <components>
            <component type="Microsoft.Ddue.Tools.IfThenComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <if condition="not(/document/reference/elements/element[@api=$key]/*)" />
              <then>
                <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
                    <copy name="reflection" source="*[not(local-name()='elements')]" target="/document/reference/elements/element[@api=$key]" />
                </component>
              </then>
            </component>
            <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <copy name="comments" source="summary|overloads   " target="/document/reference/elements/element[@api=$key]" />
            </component>
          </components>
        </component>

        <!-- Code block component configuration.  This must appear before the
             TransformComponent.  See also: PostTransformComponent. -->
        <component type="SandcastleBuilder.Components.CodeBlockComponent"
          assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
          id="Code Block Component">
            <!-- Base path for relative filenames in source attributes (optional) -->
            <basePath value="{@ProjectFolder}" />

            <!-- Presentation style for language filter (optional).  If
                 omitted, language filtering is omitted from the code
                 blocks. -->
            <style value="{@PresentationStyle}" />

            <!-- Code colorizer options (required).
                 Attributes:
                    Language syntax configuration file (required)
                    XSLT style file (required)
                    Default language (optional)
                    Enable line numbering (optional)
                    Enable outlining (optional)
                    Tab size override (optional, 0 = Use syntax file setting) -->
            <colorizer syntaxFile="{@SHFBFolder}Colorizer\highlight.xml"
                styleFile="{@SHFBFolder}Colorizer\highlight.xsl"
                language="cs" numberLines="true" outlining="true" tabSize="0" />
        </component>

        <!-- transform -->
        <component type="Microsoft.Ddue.Tools.TransformComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <transform file="{@PresentationPath}transforms\main_sandcastle.xsl">
            <argument key="metadata" value="true" />
            <argument key="languages">
{@SyntaxFiltersDropDown}
            </argument>
          </transform>
        </component>

        <!-- Post-transform component configuration.  This must appear after the
             TransformComponent.  See also: CodeBlockComponent. -->
        <component type="SandcastleBuilder.Components.PostTransformComponent"
          assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
          id="Post-transform Component">
            <!-- Highlighter stylesheet file (required) -->
            <stylesheet filename="{@SHFBFolder}Colorizer\highlight.css" />

            <!-- Highlighter script file (required) -->
            <scriptFile filename="{@SHFBFolder}Colorizer\highlight.js" />

            <!-- Output path for the files (required).  This should match the
                 output path of the HTML files (see SaveComponent below). -->
            <outputPath value="Output\html" />

            <!-- Logo image file (optional).  Filename is required, width,
                 height, and altText are optional attributes. -->
            <logoFile filename="" height="0" width="0" altText="" />

            <!-- Reflection information file for version info (optional) -->
            <reflectionFile filename="reflection.xml" />
        </component>

        <!-- resolve shared content -->
        <component type="Microsoft.Ddue.Tools.SharedContentComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
            <content file="shared_content.xml" />
            <content file="reference_content.xml" />
            <content file="syntax_content.xml" />
        </component>

        <!-- Resolve links to internal and external help topics -->
        <component type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent"
          assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll"
          locale="{@Locale}">
            <targets files="reflection.xml" type="{@ProjectLinks}" />
            <targets files="{@SandcastlePath}Data\Cpref_reflection\*.xml" type="{@SDKLinks}" />
        </component>

        <!-- save the result -->
        <component type="Microsoft.Ddue.Tools.SaveComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
            <save base="Output\html" path="concat(/html/head/meta[@name='guid']/@content,'.htm')" indent="false" omit-xml-declaration="true" />
        </component>

      </components>
    </builder>
  </dduetools>
</configuration>
