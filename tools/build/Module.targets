<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5" DefaultTargets="Compile;Image;Dist;Test">
  <!-- 
    Build system targets for modules.
    Refer to the wiki for documentation.
  -->

  <!-- Custom Tasks -->

  <PropertyGroup>
    <RootDir Condition="'$(RootDir)'==''">..\..</RootDir>
    <MSBuildCommunityTasksPath>$(RootDir)\tools\MSBuild Community Tasks</MSBuildCommunityTasksPath>
    <AxiomBuildTasksPath>$(RootDir)\tools\build</AxiomBuildTasksPath>
  </PropertyGroup>

  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets" />
  <Import Project="$(AxiomBuildTasksPath)\Axiom.Build.Tasks.Targets" />

  <!-- Item Definitions -->

  <ItemDefinitionGroup>
    <CSharpProject>
      <ImageContentPath />
      <ImageOutputPath />
    </CSharpProject>

    <VBProject>
      <ImageContentPath />
      <ImageOutputPath />
    </VBProject>

    <JSharpProject>
      <ImageContentPath />
      <ImageOutputPath />
    </JSharpProject>

    <VisualCProject>
      <ImageContentPath />
      <ImageOutputPath />
    </VisualCProject>

    <SolutionToBuild>
      <ImageContentPath />
      <ImageOutputPath />
    </SolutionToBuild>

    <File>
      <ImagePath>.</ImagePath>
    </File>

    <AssemblyFile>
      <ImagePath>.</ImagePath>
    </AssemblyFile>

    <PdbFile>
      <ImagePath>.</ImagePath>
      <ExcludeFromImage>false</ExcludeFromImage>
    </PdbFile>

    <XmlDocFile>
      <ImagePath>.</ImagePath>
    </XmlDocFile>

    <PluginFile>
      <ImagePath>.</ImagePath>
    </PluginFile>

    <ConfigFile>
      <ImagePath>.</ImagePath>
    </ConfigFile>

    <LicenseFile>
      <ImagePath>.</ImagePath>
    </LicenseFile>

    <Zip>
      <BaseDir />
      <ImagePath>.</ImagePath>
    </Zip>

    <ExportArchive>
      <ImagePath>.</ImagePath>
    </ExportArchive>

    <TestAssembly />

    <ReleaseImageArchive />

    <DebugSymbol />
    <ReleaseDebugSymbols />

    <Feature />
    <Installer />

    <NDoc>
      <CHMDocsDir />
      <VSDocsDir />
      <WebDocsDir />
    </NDoc>

    <CodePlexRelease>
      <Project />
      <Name />
      <Default />
      <ShowToPublic />
      <Description />
      <ReleaseDate />
      <ReleaseStatus />
      <User />
      <Password />
      <ReleaseFiles />
    </CodePlexRelease>
    <ReleaseFile>
      <Release />
      <MimeType />
      <FileType />
    </ReleaseFile>

  </ItemDefinitionGroup>

  <!-- External Properties -->

  <PropertyGroup>
    <StartDir Condition="'$(StartDir)'==''">$(MSBuildStartupDirectory)</StartDir>
    <SourceDir Condition="'$(SourceDir)'==''">$(RootDir)\Projects</SourceDir>
    <ToolsDir Condition="'$(ToolsDir)'==''">$(RootDir)\tools</ToolsDir>
    <BuildDir Condition="'$(BuildDir)'==''">$(RootDir)\build</BuildDir>
    <TempDir Condition="'$(TempDir)'==''">$(BuildDir)\temp</TempDir>
    <ReportDir Condition="'$(ReportDir)'==''">$(BuildDir)\report</ReportDir>
    <ModulesDir Condition="'$(ModulesDir)'==''">$(BuildDir)\modules</ModulesDir>

    <ModuleDir>$(MSBuildProjectDirectory)</ModuleDir>
    <ModuleName>$(MSBuildProjectName)</ModuleName>

    <ModuleBuildDir>$(ModulesDir)\$(ModuleName)</ModuleBuildDir>
    <ModuleTempDir>$(ModuleBuildDir)\temp</ModuleTempDir>
    <ModuleReportDir>$(ModuleBuildDir)\report</ModuleReportDir>
    <ModuleImageDir>$(ModuleBuildDir)\image</ModuleImageDir>
    <ModuleMetaDir>$(ModuleBuildDir)\meta</ModuleMetaDir>
    <ModuleDistDir>$(ModuleBuildDir)\dist</ModuleDistDir>

    <SkipDependencies Condition="'$(SkipDependencies)'==''">false</SkipDependencies>
    <SkipSyncProjects Condition="'$(SkipSyncProjects)'==''">false</SkipSyncProjects>
    <SkipILMerge Condition="'$(SkipILMerge)'==''">false</SkipILMerge>
    <SkipSources Condition="'$(SkipSources)'==''">false</SkipSources>
    <SkipSourceServer Condition="'$(SkipSourceServer)'==''">false</SkipSourceServer>
    <SkipNDoc Condition="'$(SkipNDoc)'==''">false</SkipNDoc>
    <SkipArchive Condition="'$(SkipArchive)'==''">false</SkipArchive>
    <SkipInstaller Condition="'$(SkipInstaller)'==''">false</SkipInstaller>
    <SkipCodeCoverage Condition="'$(SkipCodeCoverage)'==''">false</SkipCodeCoverage>

    <IgnoreTestFailures Condition="'$(IgnoreTestFailures)'==''">false</IgnoreTestFailures>

    <BuildInParallel Condition="'$(BuildInParallel)'==''">true</BuildInParallel>
    <StopOnFirstFailure Condition="'$(StopOnFirstFailure)'==''">true</StopOnFirstFailure>

    <AssemblyVersion Condition="'$(AssemblyVersion)'==''">0.0.0.0</AssemblyVersion>
    <FileVersion Condition="'$(FileVersion)'==''">0.0.0.0</FileVersion>

    <DotNetFrameworkVersion Condition="'$(DotNetFrameworkVersion)'=='' and Exists('$(SystemRoot)\Microsoft.Net\Framework\v4.0.30319\MSBuild.exe')">4.0</DotNetFrameworkVersion>
    <DotNetFrameworkVersion Condition="'$(DotNetFrameworkVersion)'==''">3.5</DotNetFrameworkVersion>

    <ProjectVariant></ProjectVariant>
    <ProjectVariant Condition="'$(DotNetFrameworkVersion)'=='4.0'">.2010</ProjectVariant>
    <ProjectVariantExplicit></ProjectVariantExplicit>
    <ProjectVariantExplicit Condition="'$(DotNetFrameworkVersion)'=='4.0'">.vs2010</ProjectVariantExplicit>

    <TestRunnerType Condition="'$(TestRunnerType)'=='' and '$(SkipCodeCoverage)'=='true'">IsolatedProcess</TestRunnerType>
    <TestRunnerType Condition="'$(TestRunnerType)'==''">NCover3</TestRunnerType>
    <TestReportTypes>Xml;Html-Condensed</TestReportTypes>
  </PropertyGroup>

  <!-- External Targets -->

  <PropertyGroup>
    <PreconditionDependsOn>PrintPreconditionBanner;MainPrecondition;BeforePrecondition;CorePrecondition;AfterPrecondition</PreconditionDependsOn>
    <CleanDependsOn>Precondition;PrintCleanBanner;BeforeClean;CoreClean;AfterClean;DeleteModuleBuildTree;DeleteBuildTree</CleanDependsOn>
    <CompileDependsOn>Precondition;PrintCompileBanner;CreateBuildTree;CreateModuleBuildTree;BeforeCompile;CoreCompile;AfterCompile</CompileDependsOn>
    <ImageDependsOn>Precondition;PrintImageBanner;CreateBuildTree;CreateModuleBuildTree;BeforeImage;CoreImage;AfterImage</ImageDependsOn>
    <DistDependsOn>Precondition;PrintDistBanner;CreateBuildTree;CreateModuleBuildTree;BeforeDist;CoreDist;AfterDist</DistDependsOn>
    <TestDependsOn>Precondition;PrintTestBanner;CreateBuildTree;CreateModuleBuildTree;BeforeTest;CoreTest;AfterTest</TestDependsOn>
    <PublishDependsOn>Precondition;PrintPublishBanner;CreateBuildTree;CreateModuleBuildTree;BeforePublish;CorePublish;AfterPublish</PublishDependsOn>
  </PropertyGroup>

  <Target Name="Precondition"
          DependsOnTargets="$(PreconditionDependsOn)" />
  <Target Name="Clean"
          DependsOnTargets="$(CleanDependsOn)" />
  <Target Name="Compile"
          DependsOnTargets="$(CompileDependsOn)" />
  <Target Name="Image"
          DependsOnTargets="$(ImageDependsOn)" />
  <Target Name="Dist"
          DependsOnTargets="$(DistDependsOn)" />
  <Target Name="Test"
          DependsOnTargets="$(TestDependsOn)" />
  <Target Name="Publish"
          DependsOnTargets="$(PublishDependsOn)" />

  <!-- Overridable Targets -->

  <Target Name="BeforePrecondition" />
  <Target Name="AfterPrecondition" />
  <Target Name="BeforeClean" />
  <Target Name="AfterClean" />
  <Target Name="BeforeCompile" />
  <Target Name="AfterCompile" />
  <Target Name="BeforeImage" />
  <Target Name="AfterImage" />
  <Target Name="BeforeDist" />
  <Target Name="AfterDist" />
  <Target Name="BeforeTest" />
  <Target Name="AfterTest" />
  <Target Name="BeforePublish" />
  <Target Name="AfterPublish" />

  <!-- Preconditions -->

  <Target Name="MainPrecondition"
          DependsOnTargets="VerifyRootDirIsSet;VerifyProjectsSynchronized;BuildCustomTasks" />

  <Target Name="VerifyRootDirIsSet">
    <Error Condition="'$(RootDir)'==''"
	       Text="RootDir must be set." />
  </Target>

  <Target Name="VerifyProjectsSynchronized"
          Condition="'$(Main)'=='true' and '$(SkipSyncProjects)'!='true'">
    <Message Text="Verifying that all VS 2008 and VS 2010 projects are synchronized...%0D%0ASkip this with '/p:SkipSyncProjects=true'."
             Importance="High" />

    <Exec Command="&quot;$(ToolsDir)\build\CompareVSProjFiles.cmd&quot;"
          IgnoreExitCode="true"
		  WorkingDirectory="$(SourceDir)">
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Exec>

    <Error Text="There appear to be some differences between the project items of the VS 2008 projects and those of the VS 2010 projects.  Please run 'Sync VS2010 Projects.bat' to synchronize project items.%0D%0ASkip this with '/p:SkipSyncProjects=true'."
           Condition="'$(ExitCode)'!='0' and ! $(IgnoreTestFailures)" />
  </Target>

  <Target Name="BuildCustomTasks">
    <MSBuild Projects="$(RootDir)\tools\build\AxiomBuildTasks\AxiomBuildTasks.csproj"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Targets="Build" />
  </Target>

  <!-- Banner Text -->

  <Target Name="PrintPreconditionBanner">
    <Message Importance="High" Text="%0A[Precondition]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Precondition: $(ModuleName)" />
  </Target>
  <Target Name="PrintCleanBanner">
    <Message Importance="High" Text="%0A[Clean]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Clean: $(ModuleName)" />
  </Target>
  <Target Name="PrintCompileBanner">
    <Message Importance="High" Text="%0A[Compile]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Compile: $(ModuleName)" />
  </Target>
  <Target Name="PrintImageBanner">
    <Message Importance="High" Text="%0A[Image]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Image: $(ModuleName)" />
  </Target>
  <Target Name="PrintDistBanner">
    <Message Importance="High" Text="%0A[Dist]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Dist: $(ModuleName)" />
  </Target>
  <Target Name="PrintTestBanner">
    <Message Importance="High" Text="%0A[Test]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Test: $(ModuleName)" />
  </Target>
  <Target Name="PrintPublishBanner">
    <Message Importance="High" Text="%0A[Publish]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Publish: $(ModuleName)" />
  </Target>

  <!-- Core Targets -->

  <PropertyGroup>
    <CorePreconditionDependsOn>
      RecursivePrecondition;
    </CorePreconditionDependsOn>
    <CoreCleanDependsOn>
      RecursiveClean;
      PopulateCommonProjects;
      CleanCommonProjects;
      CleanInstaller;
    </CoreCleanDependsOn>
    <CoreCompileDependsOn>
      RecursiveCompile;
      PopulateCommonProjects;
      CompileCommonProjects;
    </CoreCompileDependsOn>
    <CoreImageDependsOn>
      RecursiveImage;
      ImageInheritedModules;
      PopulateCommonProjects;
      ImageCommonProjects;
      MapFilesToCopy;
      ImageFilesToCopy;
      ImagePdbFiles;
      ImageZips;
      ImageExportArchives;
      ImagePluginFiles;
      ImageConfigFiles;
      ImageDocumentation;
      WriteTestAssemblyItemsToMeta;
      WriteXmlDocFileItemsToMeta;
      WriteFeatureItemsToMeta;
      WriteDebugSymbolItemsToMeta;
    </CoreImageDependsOn>
    <CoreDistDependsOn>
      RecursiveDist;
      DistInheritedModules;
      DistReleaseImageArchive;
      DistReleaseDebugSymbols;
      DistInstaller;
    </CoreDistDependsOn>
    <CoreTestDependsOn>
      RecursiveTest;
      TestWithGallio;
    </CoreTestDependsOn>
    <CorePublishDependsOn>
      RecursivePublish;
    </CorePublishDependsOn>
  </PropertyGroup>

  <Target Name="CorePrecondition"
          DependsOnTargets="$(CorePreconditionDependsOn)" />
  <Target Name="CoreClean"
          DependsOnTargets="$(CoreCleanDependsOn)" />
  <Target Name="CoreCompile"
          DependsOnTargets="$(CoreCompileDependsOn)" />
  <Target Name="CoreImage"
          DependsOnTargets="$(CoreImageDependsOn)" />
  <Target Name="CoreDist"
          DependsOnTargets="$(CoreDistDependsOn)" />
  <Target Name="CoreTest"
          DependsOnTargets="$(CoreTestDependsOn)" />
  <Target Name="CorePublish"
          DependsOnTargets="$(CorePublishDependsOn)" />

  <!-- Recursive Targets -->

  <PropertyGroup>
    <Main Condition="'$(Main)'==''">true</Main>

    <RecursiveProperties>
      Main=false;
      RootDir=$(RootDir);
      StartDir=$(StartDir);
      SourceDir=$(SourceDir);
      BuildDir=$(BuildDir);
      ToolsDir=$(ToolsDir);
      SkipModules=$(SkipModules);
      FileVersion=$(FileVersion);
      AssemblyVersion=$(AssemblyVersion);
      DotNetFrameworkVersion=$(DotNetFrameworkVersion);
    </RecursiveProperties>

    <Recurse>false</Recurse>
    <Recurse Condition="'$(SkipDependencies)'!='true' or '$(Main)'=='true'">true</Recurse>
  </PropertyGroup>

  <ItemGroup>
    <SkipModule Include="$(SkipModules)"
                Condition="'$(SkipModules)'!=''" />
  </ItemGroup>

  <Target Name="PopulateRecursiveModules"
          Condition="'@(Module)'!='' and $(Recurse)">
    <FindInList List="@(Module)"
                ItemSpecToFind="%(SkipModule.Identity).module"
                Condition="'@(SkipModule)'!=''"
                MatchFileNameOnly="true"
                CaseSensitive="false">
      <Output TaskParameter="ItemFound" ItemName="_SkippedModule" />
    </FindInList>

    <Message Importance="High"
             Text="Skipping modules: @(_SkippedModule->'%(FileName)', ' ')"
             Condition="'@(_SkippedModule)'!=''" />

    <ItemGroup>
      <RecursiveModule Include="@(Module)" />
      <RecursiveModule Remove="@(_SkippedModule)" Condition="'@(_SkippedModule)'!=''" />
    </ItemGroup>
  </Target>

  <Target Name="RecursivePrecondition"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Precondition" />

    <OnError ExecuteTargets="ModuleError" />
  </Target>

  <Target Name="RecursiveClean"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Clean" />

    <OnError ExecuteTargets="ModuleError" />
  </Target>

  <Target Name="RecursiveCompile"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Compile" />

    <OnError ExecuteTargets="ModuleError" />
  </Target>

  <Target Name="RecursiveImage"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Image" />

    <OnError ExecuteTargets="ModuleError" />
  </Target>

  <Target Name="RecursiveDist"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Dist" />

    <OnError ExecuteTargets="ModuleError" />
  </Target>

  <Target Name="RecursiveTest"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Test" />

    <OnError ExecuteTargets="ModuleError" />
  </Target>

  <Target Name="RecursivePublish"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Publish" />

    <OnError ExecuteTargets="ModuleError" />
  </Target>

  <Target Name="ModuleError">
    <Error Text="One or more modules failed to build.%0D%0ASkip these modules with '/p:SkipModules=Module1;Module2;...'."
           Condition="'$(Main)'=='true'" />
  </Target>

  <!-- Build Tree Setup / TearDown Targets -->

  <Target Name="CreateBuildTree"
          Condition="'$(Main)'=='true'">
    <MakeDir Directories="$(BuildDir);$(TempDir);$(ReportDir);$(ModulesDir)" />
  </Target>

  <Target Name="DeleteBuildTree"
          Condition="'$(Main)'=='true'">
    <RemoveDir Directories="$(BuildDir)" />
  </Target>

  <Target Name="CreateModuleBuildTree">
    <MakeDir Directories="$(ModuleBuildDir);$(ModuleTempDir);$(ModuleReportDir);$(ModuleImageDir);$(ModuleMetaDir);$(ModuleDistDir)" />
  </Target>

  <Target Name="DeleteModuleBuildTree">
    <RemoveDir Directories="$(ModuleBuildDir)" />
  </Target>

  <!-- Modules -->

  <Target Name="ImageInheritedModules"
          Condition="'@(Module)'!=''">
    <CreateItem Include="$(ModulesDir)\%(Module.FileName)\image\**\*"
                Condition="'%(Module.Inherit)'=='true'">
      <Output TaskParameter="Include" ItemName="_InheritedImageFile" />
    </CreateItem>
    <CreateItem Include="$(ModulesDir)\%(Module.FileName)\meta\**\*"
                Condition="'%(Module.Inherit)'=='true'">
      <Output TaskParameter="Include" ItemName="_InheritedMetaFile" />
    </CreateItem>

    <Copy SourceFiles="@(_InheritedImageFile)"
          DestinationFiles="@(_InheritedImageFile->'$(ModuleImageDir)\%(RecursiveDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true"
          Condition="'@(_InheritedImageFile)'!=''" />
    <Copy SourceFiles="@(_InheritedMetaFile)"
          DestinationFiles="@(_InheritedMetaFile->'$(ModuleMetaDir)\%(RecursiveDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true"
          Condition="'@(_InheritedMetaFile)'!=''" />
  </Target>

  <Target Name="DistInheritedModules"
          Condition="'@(Module)'!=''">
    <CreateItem Include="$(ModulesDir)\%(Module.FileName)\dist\**\*"
                Condition="'%(Module.Inherit)'=='true'">
      <Output TaskParameter="Include" ItemName="_InheritedDistFile" />
    </CreateItem>

    <Copy SourceFiles="@(_InheritedDistFile)"
          DestinationFiles="@(_InheritedDistFile->'$(ModuleDistDir)\%(RecursiveDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true"
          Condition="'@(_InheritedDistFile)'!=''" />
  </Target>

  <!-- Projects -->

  <PropertyGroup>
    <CommonProjectProperties>
      RootDir=$(RootDir);
      CustomAfterMicrosoftCommonTargets=$(RootDir)\bin\Custom.After.Microsoft.Common.targets;
      ProjectAssemblyFileVersion=$(FileVersion);
      ProjectAssemblyVersion=$(AssemblyVersion);
    </CommonProjectProperties>
  </PropertyGroup>

  <Target Name="PopulateCommonProjects">
    <ItemGroup>
      <CommonProject Include="@(CSharpProject);@(VBProject);@(JSharpProject);@(VisualCProject);@(SolutionToBuild)" />
    </ItemGroup>
  </Target>

  <Target Name="CleanCommonProjects"
          Condition="'@(CommonProject)'!=''">
    <MSBuild Projects="@(CommonProject)"
             Properties="$(CommonProjectProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Targets="Clean" />
  </Target>

  <Target Name="CompileCommonProjects"
          Condition="'@(CommonProject)'!=''">
    <MSBuild Projects="@(CommonProject)"
             Properties="$(CommonProjectProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Targets="Build" />
  </Target>

  <Target Name="ImageCommonProjects"
          DependsOnTargets="CopyCommonProjectContentToImage;CopyCommonProjectOutputToImage"
          Condition="'@(CommonProject)'!=''" />

  <Target Name="CopyCommonProjectContentToImage"
          Outputs="%(CommonProject.ImageContentPath)">
    <MSBuild Projects="@(CommonProject)"
             Properties="$(CommonProjectProperties)"
			 Condition="'%(CommonProject.ImageContentPath)'!=''"
             Targets="GetContentToCopy">
      <Output TaskParameter="TargetOutputs" ItemName="CommonProjectContentToCopy" />
    </MSBuild>

    <CreateProperty Value="$(ModuleImageDir)\%(CommonProject.ImageContentPath)">
      <Output TaskParameter="Value" PropertyName="_ProjectContentPath" />
    </CreateProperty>

    <Copy SourceFiles="@(CommonProjectContentToCopy)"
          Condition="'@(CommonProjectContentToCopy)'!=''"
          SkipUnchangedFiles="true"
          DestinationFiles="@(CommonProjectContentToCopy->'$(_ProjectContentPath)\%(TargetPath)')" />

    <ItemGroup>
      <CommonProjectContentToCopy Remove="@(CommonProjectContentToCopy)" />
    </ItemGroup>
  </Target>

  <Target Name="CopyCommonProjectOutputToImage"
          Outputs="%(CommonProject.ImageOutputPath)">
    <MSBuild Projects="@(CommonProject)"
             Properties="$(CommonProjectProperties)"
             Condition="'%(CommonProject.ImageOutputPath)'!=''"
             Targets="GetOutputToCopy">
      <Output TaskParameter="TargetOutputs" ItemName="CommonProjectOutputToCopy" />
    </MSBuild>

    <CreateProperty Value="$(ModuleImageDir)\%(CommonProject.ImageOutputPath)">
      <Output TaskParameter="Value" PropertyName="_ProjectOutputPath" />
    </CreateProperty>

    <Copy SourceFiles="@(CommonProjectOutputToCopy)"
          Condition="'@(CommonProjectOutputToCopy)'!=''"
          SkipUnchangedFiles="true"
          DestinationFiles="@(CommonProjectOutputToCopy->'$(_ProjectOutputPath)\%(TargetPath)')" />

    <ItemGroup>
      <CommonProjectOutputToCopy Remove="@(CommonProjectOutputToCopy)" />
    </ItemGroup>
  </Target>

  <Target Name="MapFilesToCopy">
    <ItemGroup>
      <_FileToCopy Include="@(File);@(AssemblyFile);@(XmlDocFile);@(ConfigFile);@(PluginFile);@(LicenseFile)" />
    </ItemGroup>
  </Target>

  <Target Name="ImageFilesToCopy"
          Condition="'@(_FileToCopy)'!=''">
    <MakeDir Directories="@(_FileToCopy->'$(ModuleImageDir)\%(ImagePath)')" />

    <Copy SourceFiles="@(_FileToCopy)"
          DestinationFiles="@(_FileToCopy->'$(ModuleImageDir)\%(ImagePath)\%(RecursiveDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true" />
  </Target>

  <Target Name="ImageZips"
          Condition="'@(Zip)'!=''">
    <Zip Files="@(Zip)"
         WorkingDirectory="%(BaseDir)"
         ZipFileName="$(ModuleImageDir)\%(ImagePath)" />
  </Target>

  <Target Name="ImageExportArchives"
          Condition="'@(ExportArchive)'!=''">
    <Error Text="ImagePath must be specified for ExportArchive '%(ExportArchive.Identity)'."
           Condition="'%(ExportArchive.ImagePath)'==''" />

    <CreateItem Include="$(ModuleTempDir)\%(ExportArchive.ImagePath)">
      <Output TaskParameter="Include" ItemName="_ExportArchiveTempDir" />
    </CreateItem>

    <RemoveDir Directories="@(_ExportArchiveTempDir)" />

    <MakeDir Directories="@(_ExportArchiveTempDir->'%(RootDir)%(Directory)')" />

    <SvnExport RepositoryPath="%(ExportArchive.FullPath)"
               LocalPath="$(ModuleTempDir)\%(ExportArchive.ImagePath)" />

    <CreateItem Include="$(ModuleImageDir)\%(ExportArchive.ImagePath)">
      <Output TaskParameter="Include" ItemName="_ExportArchiveZipFile" />
    </CreateItem>

    <MakeDir Directories="@(_ExportArchiveZipFile->'%(RootDir)%(Directory)')" />

    <CreateItem Include="$(ModuleTempDir)\%(ExportArchive.ImagePath)\**\*"
                AdditionalMetadata="ImagePath=%(ExportArchive.ImagePath)">
      <Output TaskParameter="Include" ItemName="_ExportArchiveItemFile" />
    </CreateItem>

    <Zip Files="@(_ExportArchiveItemFile)"
         Condition="'@(_ExportArchiveItemFile)'!=''"
         WorkingDirectory="$(ModuleTempDir)\%(_ExportArchiveItemFile.ImagePath)"
         ZipFileName="$(ModuleImageDir)\%(_ExportArchiveItemFile.ImagePath)"
         ZipLevel="9" />
  </Target>

  <Target Name="ImagePluginFiles"
          Condition="'@(PluginFile)'!=''">
    <FileUpdate Files="@(PluginFile->'$(ModuleImageDir)\%(ImagePath)\%(Filename)%(Extension)')"
                Regex="0\.0\.0\.0"
                ReplacementText="$(AssemblyVersion)" />
  </Target>

  <Target Name="ImageConfigFiles"
          Condition="'@(ConfigFile)'!=''">
    <FileUpdate Files="@(ConfigFile->'$(ModuleImageDir)\%(ImagePath)\%(Filename)%(Extension)')"
                Regex="0\.0\.0\.0"
                ReplacementText="$(AssemblyVersion)" />
  </Target>

  <!-- Run Tests -->

  <PropertyGroup>
    <GallioInstallDir Condition="'$(GallioInstallDir)'==''">$(ModuleImageDir)</GallioInstallDir>

    <!-- Work around the fact that MSBuild runs as an x86 process on x64 so we see the 32bit registry view. -->
    <NCoverInstallDir Condition="'$(NCoverInstallDir)'=='' and Exists('C:\Program Files\NCover\Build Task Plugins\NCover.MSBuildTasks.dll')">C:\Program Files\NCover</NCoverInstallDir>
    <NCoverInstallDir Condition="'$(NCoverInstallDir)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Gnoso\NCover\@InstallDir)</NCoverInstallDir>
  </PropertyGroup>
  <UsingTask TaskName="NCover.MSBuildTasks.NCoverReporting"
             AssemblyFile="$(NCoverInstallDir)\Build Task Plugins\NCover.MSBuildTasks.dll" />
  <UsingTask TaskName="Gallio.MSBuildTasks.Gallio"
             AssemblyFile="$(GallioInstallDir)\bin\Gallio.MSBuildTasks.dll" />

  <Target Name="WriteTestAssemblyItemsToMeta">
    <WriteLinesToFile File="$(ModuleMetaDir)\$(ModuleName).testassemblies"
                      Lines="@(TestAssembly->'%(FullPath)')"
                      Overwrite="true" />
  </Target>

  <Target Name="ReadMergedTestAssemblyItemsFromMeta">
    <ItemGroup>
      <_TestAssembliesFile Include="$(ModuleMetaDir)\*.testassemblies" />
    </ItemGroup>

    <ReadLinesFromFile File="%(_TestAssembliesFile.FullPath)"
                       Condition="'@(_TestAssembliesFile)'!=''">
      <Output TaskParameter="Lines" ItemName="_MergedTestAssembly" />
    </ReadLinesFromFile>

    <RemoveDuplicates Inputs="@(_MergedTestAssembly)">
      <Output TaskParameter="Filtered" ItemName="MergedTestAssembly" />
    </RemoveDuplicates>
  </Target>

  <Target Name="TestWithGallio"
          DependsOnTargets="ReadMergedTestAssemblyItemsFromMeta;RunMergedTestAssemblyItemsWithGallio"
          Condition="'$(Main)'=='true'">
  </Target>

  <Target Name="RunMergedTestAssemblyItemsWithGallio"
          Condition="'$(Main)'=='true' and '@(MergedTestAssembly)'!=''">
    <PropertyGroup>
      <_TestCoverageFilters>
      </_TestCoverageFilters>
      <_TestSatisfactoryCoverage>
        <Threshold>
          <CoverageMetric>SymbolCoverage</CoverageMetric>
          <Value>95.0</Value>
        </Threshold>
        <Threshold>
          <CoverageMetric>MethodCoverage</CoverageMetric>
          <Value>70</Value>
        </Threshold>
        <Threshold>
          <CoverageMetric>BranchCoverage</CoverageMetric>
          <Value>75</Value>
        </Threshold>
      </_TestSatisfactoryCoverage>
      <_TestCoverageFile>$(ModuleTempDir)\Coverage.xml</_TestCoverageFile>
    </PropertyGroup>

    <Message Text="Running tests..."
             Importance="High" />

    <Delete Files="$(_TestCoverageFile)"
            Condition="Exists('$(_TestCoverageFile)')" />

    <Gallio Files="@(MergedTestAssembly)"
            ReportDirectory="$(ModuleReportDir)"
            ReportTypes="$(TestReportTypes)"
            RunnerType="$(TestRunnerType)"
            RunnerProperties="NCoverCoverageFile='$(_TestCoverageFile)';NCoverArguments='//eas .*.Tests%3B.*.TestResources%3BJetBrains.*%3BAga.Controls%3BConfiguration%3BDevExpress.*%3BEnvDTE.*%3BNAnt.*%3BcsUnit.*%3Bnunit.*%3Bxunit.*%3BQuickGraph.*%3BMbUnit.Framework%3BRhino.Mocks%3BTestDriven.Framework%3BWeifenLuo.*%3Blog4net%3BISymWrapper%3BICSharpCode.TextEditor%3BIronRuby.*%3BIronPython.* //et Castle.*%3BMono.*%3BCecil.*%3BSharpen.*%3BDb4objects.*%3BICSharpCode.*'"
            ShowReports="$(ShowReports)"
            Verbosity="Verbose"
            IgnoreFailures="true"
            RunTimeLimit="2700">
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Gallio>

    <NCoverReporting Condition="'$(SkipCodeCoverage)'!='true' and Exists('$(_TestCoverageFile)')"
                     CoverageDataPaths="$(_TestCoverageFile)"
                     OutputPath="$(ModuleReportDir)\CoverageReport.xml"
                     ProjectName="Gallio"
                     ReportDataFilter="Assembly, Namespace"
                     ReportFormat="Xml"
                     ReportType="SymbolModuleNamespaceClassMethod"
                     SortBy="ClassLine"
                     MaxTopUncoveredToReport="20"
                     CoverageFilters="$(_TestCoverageFilters)"
                     SatisfactoryCoverage="$(_TestSatisfactoryCoverage)" />

    <!--
    <Exec Command="cscript //nologo &quot;$(BinDir)\Run.vbs&quot; &quot;'$(NCoverInstallDir)\NCover.Explorer.exe' $(_TestCoverageFile)&quot;"
          Condition="$(ShowReports) and $(Coverage) and Exists('Coverage.xml')" />
    -->

    <Error Text="Some tests failed!"
             Condition="'$(ExitCode)'!='0' and ! $(IgnoreTestFailures)" />
    <Warning Text="Some tests failed!"
             Condition="'$(ExitCode)'!='0' and $(IgnoreTestFailures)" />
  </Target>

  <!-- Generate Documentation -->

  <PropertyGroup>
    <NDocPath>$(ProgramFiles)\NDoc</NDocPath>
    <NDocHelpFileBuilderPath>$(SHFBROOT)</NDocHelpFileBuilderPath>

    <HTMLHelpCompilerPath>$(ProgramFiles)\HTML Help Workshop\hhc.exe</HTMLHelpCompilerPath>

    <VSIPSDKHelpPath>$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\VSIP\10.0\@InstallDir)\HelpIntegrationWizard\MSHelp2</VSIPSDKHelpPath>
    <VSIPSDKHelpPath Condition="! Exists('$(VSIPSDKHelpPath)')">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\VSIP\9.0\@InstallDir)\HelpIntegrationWizard\MSHelp2</VSIPSDKHelpPath>
  </PropertyGroup>

  <Target Name="WriteXmlDocFileItemsToMeta">
    <WriteLinesToFile File="$(ModuleMetaDir)\$(ModuleName).xmldocfiles"
                      Lines="@(XmlDocFile->'%(FullPath)')"
                      Overwrite="true" />
  </Target>

  <Target Name="ReadMergedXmlDocFileItemsFromMeta">
    <ItemGroup>
      <_XmlDocFilesFile Include="$(ModuleMetaDir)\*.xmldocfiles" />
    </ItemGroup>

    <ReadLinesFromFile File="%(_XmlDocFilesFile.FullPath)"
                       Condition="'@(_XmlDocFilesFile)'!=''">
      <Output TaskParameter="Lines" ItemName="_MergedXmlDocFile" />
    </ReadLinesFromFile>

    <RemoveDuplicates Inputs="@(_MergedXmlDocFile)">
      <Output TaskParameter="Filtered" ItemName="MergedXmlDocFile" />
    </RemoveDuplicates>
  </Target>

  <Target Name="ImageDocumentation"
          DependsOnTargets="ImageDocumentation_NDoc;ImageDocumentation_SkipNDoc" />

  <Target Name="ImageDocumentation_NDoc"
          DependsOnTargets="ImageDocumentation_NDocPreprocess;ImageDocumentation_NDocProcess" />

  <Target Name="ImageDocumentation_NDocPreprocess"
          DependsOnTargets="ReadMergedXmlDocFileItemsFromMeta"
          Condition="'$(SkipNDoc)'!='true' and '@(NDoc)'!=''">

    <Error Text="Microsoft HTML Help Workshop must be installed so that Compiled HTML help (CHM) documentation can be generated.  Look in tools\Setup Files for the Microsoft HTML Help Workshop installer.%0D%0ASkip this with '/p:SkipNDoc=true'."
           Condition="! Exists('$(HTMLHelpCompilerPath)')" />

    <ItemGroup>
      <_NDocDocumentedAssembly Include="@(MergedXmlDocFile->'%(RootDir)%(Directory)%(FileName).dll')"
                                     Condition="Exists('%(RootDir)%(Directory)%(FileName).dll')" />
      <_NDocDocumentedAssembly Include="@(MergedXmlDocFile->'%(RootDir)%(Directory)%(FileName).exe')"
                                     Condition="Exists('%(RootDir)%(Directory)%(FileName).exe')" />
    </ItemGroup>

    <PropertyGroup>
      <_NDocAssemblies>@(_NDocDocumentedAssembly->'&lt;assembly location=&quot;%(FullPath)&quot; documentation=&quot;%(RootDir)%(Directory)%(Filename).xml&quot; /&gt;', '')</_NDocAssemblies>
      <_NDocProjectPath>%(NDoc.FullPath)</_NDocProjectPath>
      <_NDocPatchedProjectPath>%(NDoc.RootDir)%(NDoc.Directory)%(NDoc.Filename).patched%(NDoc.Extension)</_NDocPatchedProjectPath>
      <_NDocBuildDir>$(BuildDir)</_NDocBuildDir>
      <_NDocTempDir>$(TempDir)</_NDocTempDir>
      <_NDocReportDir>$(ReportDir)</_NDocReportDir>
      <_NDocOutputPath>$(_NDocTempDir)\docs\output</_NDocOutputPath>
      <_NDocIntellisensePath>$(_NDocTempDir)\docs\intellisense</_NDocIntellisensePath>
      <_NDocCHMDocsDir>%(NDoc.CHMDocsDir)</_NDocCHMDocsDir>
      <_NDocVSDocsDir>%(NDoc.VSDocsDir)</_NDocVSDocsDir>
      <_NDocWebDocsDir>%(NDoc.WebDocsDir)</_NDocWebDocsDir>
    </PropertyGroup>
  </Target>

  <Target Name="ImageDocumentation_NDocProcess"
          Inputs="@(MergedXmlDocFile);@(_NDocDocumentedAssembly);@(NDoc)"
          Outputs="$(ModuleTempDir)\NDocDone.flag"
          Condition="'$(SkipNDoc)'!='true' and '@(NDoc)'!=''">
    <Message Text="Building Documentation with NDoc..."
             Importance="High" />

    <!-- Patch the project file's DocumentationSources and build it. -->

    <MakeDir Directories="$(_NDocTempDir)" />
    <Copy SourceFiles="$(_NDocProjectPath)" DestinationFiles="$(_NDocPatchedProjectPath)" />
    <FileUpdate Files="$(_NDocPatchedProjectPath)"
                SingleLine="true"
                Regex="&lt;assemblies&gt;.*&lt;/assemblies&gt;"
                ReplacementText="&lt;assemblies&gt;$(_NDocAssemblies)&lt;/assemblies&gt;" />

    <FileUpdate Files="$(_NDocPatchedProjectPath)"
                SingleLine="true"
				RegEx='&lt;property name="OutputDirectory" value=".*?" /&gt;'
				ReplacementText='&lt;property name="OutputDirectory" value="$(_NDocOutputPath)"/&gt;' />

    <Exec Command="$(ToolsDir)\ndoc3\bin\NDoc3Console -documenter=MSDN -project=$(_NDocPatchedProjectPath) -verbose" />

    <!-- Copy the CHM documentation resources to the right place. -->
    <!-- Note: We don't delete the CHM so it will be available for the Web docs too. -->

    <ItemGroup>
      <_NDocCHMDocsFile Include="$(_NDocOutputPath)\*.chm" />
    </ItemGroup>

    <MakeDir Directories="$(_NDocCHMDocsDir)" />
    <Copy SourceFiles="@(_NDocCHMDocsFile)"
          DestinationFolder="$(_NDocCHMDocsDir)" />

    <!-- Move the Visual Studio documentation resources to the right place. -->

    <ItemGroup>
      <_NDocVSDocsFile Include="$(_NDocOutputPath)\*.Hx?" />
      <_NDocVSDocsFile Include="$(_NDocOutputPath)\*_H2Reg.ini" />
    </ItemGroup>

    <RemoveDir Directories="$(_NDocVSDocsDir)" />
    <MakeDir Directories="$(_NDocVSDocsDir)" />
    <Move SourceFiles="@(_NDocVSDocsFile)"
          DestinationFolder="$(_NDocVSDocsDir)" />

    <!-- Move everything else (including a copy of the CHM) to the Web docs dir. -->

    <RemoveDir Directories="$(_NDocWebDocsDir)" />
    <MakeDir Directories="$(_NDocWebDocsDir)\.." />
    <Exec Command="move /y &quot;$(_NDocOutputPath)&quot; &quot;$(_NDocWebDocsDir)&quot;" />

    <!-- Move Intellisense XML documentation to the image. -->

    <MakeDir Directories="@(XmlDocFile->'$(ModuleImageDir)\%(ImagePath)')" />
    <Delete Files="@(XmlDocFile->'$(ModuleImageDir)\bin\%(ImagePath)\%(Filename)%(Extension)')" />
    <Move SourceFiles="@(XmlDocFile->'$(_NDocIntellisensePath)\%(Filename)%(Extension)')"
          DestinationFiles="@(XmlDocFile->'$(ModuleImageDir)\bin\%(ImagePath)\%(Filename)%(Extension)')" />

    <!-- Leave a flag file behind to indicate that we did the work. -->

    <Touch Files="$(ModuleTempDir)\NDocDone.flag"
           AlwaysCreate="true" />
  </Target>

  <Target Name="ImageDocumentation_SkipNDoc"
          Condition="'$(SkipNDoc)'=='true' and '@(NDoc)'!=''">
    <!-- Nothing to do just now because XML documentation is already present. -->
  </Target>

  <!-- Generate Release Archive -->

  <Target Name="DistReleaseImageArchive"
          Condition="'@(ReleaseImageArchive)'!=''">
    <Message Text="Build redistributable Zip archive @(ReleaseImageArchive)..."
             Importance="High" />

    <CreateItem Include="$(ModuleImageDir)\**\*.*">
      <Output TaskParameter="Include" ItemName="_ReleaseImageArchiveFiles" />
    </CreateItem>

    <Zip Files="@(_ReleaseImageArchiveFiles)"
         WorkingDirectory="$(ModuleImageDir)"
         ZipFileName="$(ModuleDistDir)\%(ReleaseImageArchive.Identity)"
         ZipLevel="9" />
  </Target>

  <!-- Generate Installer -->

  <PropertyGroup>
    <InstallerWixProperties>
      Configuration=Release;
      Version=$(FileVersion);
      TargetDir=$(ModuleDistDir)\;
      GallioTargetDir=$(ModuleImageDir);
      WixTargetsPath=$(ToolsDir)\Wix\Wix.targets;
      WixTasksPath=$(ToolsDir)\Wix\WixTasks.dll;
      WixToolPath=$(ToolsDir)\Wix;
      WixExtDir=$(ToolsDir)\Wix;
      DefineSolutionProperties=false
    </InstallerWixProperties>
    <InstallerSourceDir>$(SourceDir)\Installer</InstallerSourceDir>
    <InstallerFeatureFile>$(InstallerSourceDir)\Features.wxi</InstallerFeatureFile>
  </PropertyGroup>

  <Target Name="WriteFeatureItemsToMeta">
    <WriteLinesToFile File="$(ModuleMetaDir)\$(ModuleName).features"
                      Lines="@(Feature)"
                      Overwrite="true" />
  </Target>

  <Target Name="ReadMergedFeatureItemsFromMeta">
    <ItemGroup>
      <_FeaturesFile Include="$(ModuleMetaDir)\*.features" />
    </ItemGroup>

    <ReadLinesFromFile File="%(_FeaturesFile.FullPath)"
                       Condition="'@(_FeaturesFile)'!=''">
      <Output TaskParameter="Lines" ItemName="_MergedFeature" />
    </ReadLinesFromFile>

    <RemoveDuplicates Inputs="@(_MergedFeature)">
      <Output TaskParameter="Filtered" ItemName="MergedFeature" />
    </RemoveDuplicates>
  </Target>

  <Target Name="DistInstaller"
          Condition="'$(SkipInstaller)'!='true' and '@(Installer)'!=''"
          DependsOnTargets="DistInstaller-x86;DistInstaller-x64" />

  <Target Name="PrepareToDistInstaller"
          DependsOnTargets="ReadMergedFeatureItemsFromMeta">
    <WriteLinesToFile File="$(InstallerFeatureFile)"
                      Lines="&lt;Include&gt;"
                      Overwrite="true" />
    <WriteLinesToFile File="$(InstallerFeatureFile)"
                      Lines="@(MergedFeature -> '&lt;?define %(Identity)=&quot;true&quot; ?&gt;')"
                      Overwrite="false" />
    <WriteLinesToFile File="$(InstallerFeatureFile)"
                      Lines="&lt;/Include&gt;"
                      Overwrite="false" />

    <ParseVersion Version="$(FileVersion)">
      <Output TaskParameter="Major" PropertyName="_InstallerMajorVersion" />
      <Output TaskParameter="Minor" PropertyName="_InstallerMinorVersion" />
      <Output TaskParameter="Build" PropertyName="_InstallerBuildNumber" />
    </ParseVersion>

    <PropertyGroup>
      <InstallerWixProperties>
        $(InstallerWixProperties);
        MajorVersion=$(_InstallerMajorVersion);
        MinorVersion=$(_InstallerMinorVersion);
        BuildNumber=$(_InstallerBuildNumber)
      </InstallerWixProperties>
    </PropertyGroup>
  </Target>

  <Target Name="DistInstaller-x86"
          Condition="'@(Installer)'!=''"
          DependsOnTargets="PrepareToDistInstaller">
    <Message Text="Building WiX Installer @(Installer) for x86..."
             Importance="High" />

    <MSBuild Projects="$(InstallerSourceDir)\%(Installer.Identity).wixproj"
             Targets="Build"
             Properties="$(InstallerWixProperties);Platform=x86" />
  </Target>

  <Target Name="DistInstaller-x64"
          Condition="'@(Installer)'!=''"
          DependsOnTargets="PrepareToDistInstaller">
    <Message Text="Building WiX Installer @(Installer) for x64..."
             Importance="High" />

    <MSBuild Projects="$(InstallerSourceDir)\%(Installer.Identity).wixproj"
             Targets="Build"
             Properties="$(InstallerWixProperties);Platform=x64" />
  </Target>

  <Target Name="CleanInstaller"
          Condition="'$(SkipInstaller)'!='true' and '@(Installer)'!=''"
          DependsOnTargets="CleanInstaller-x86;CleanInstaller-x64">
    <Delete Files="$(InstallerFeatureFile)" />
  </Target>

  <Target Name="CleanInstaller-x86"
          Condition="'@(Installer)'!=''">
    <MSBuild Projects="$(InstallerSourceDir)\%(Installer.Identity).wixproj"
             Targets="Clean"
             Properties="$(InstallerWixProperties);Platform=x86" />
  </Target>

  <Target Name="CleanInstaller-x64"
          Condition="'@(Installer)'!=''">
    <MSBuild Projects="$(InstallerSourceDir)\%(Installer.Identity).wixproj"
             Targets="Clean"
             Properties="$(InstallerWixProperties);Platform=x64" />
  </Target>

  <!-- PDBs and Source Server -->

  <PropertyGroup>
    <SourceServerIndexerPath>$(ProgramFiles)\Debugging Tools for Windows\sdk\srcsrv\ssindex.cmd</SourceServerIndexerPath>
    <SourceServerIndexerPath Condition="! Exists('$(SourceServerIndexerPath)')">$(ProgramFiles)\Debugging Tools for Windows (x86)\srcsrv\ssindex.cmd</SourceServerIndexerPath>
    <SourceServerIndexerPath Condition="! Exists('$(SourceServerIndexerPath)')">C:\Program Files\Debugging Tools for Windows (x64)\srcsrv\ssindex.cmd</SourceServerIndexerPath>
  </PropertyGroup>

  <Target Name="ImagePdbFiles"
          Condition="'@(PdbFile)'!=''"
          DependsOnTargets="ImagePdbFiles_SourceServer;ImagePdbFiles_SkipSourceServer">
    <MakeDir Directories="@(PdbFile->'$(ModuleImageDir)\%(ImagePath)')"
             Condition="'%(PdbFile.ExcludeFromImage)'!='true'" />

    <Copy SourceFiles="@(PdbFile->'$(ModuleTempDir)\pdbs\%(Filename)%(Extension)')"
          DestinationFiles="@(PdbFile->'$(ModuleImageDir)\%(ImagePath)\%(Filename)%(Extension)')"
          Condition="'%(PdbFile.ExcludeFromImage)'!='true'"
          SkipUnchangedFiles="true" />

    <ItemGroup>
      <DebugSymbol Include="@(PdbFile->'$(ModuleTempDir)\pdbs\%(Filename)%(Extension)')" />
    </ItemGroup>
  </Target>

  <Target Name="ImagePdbFiles_SourceServer"
          Condition="'$(SkipSourceServer)'!='true' and '@(PdbFile)'!=''"
          Inputs="@(PdbFile)"
          Outputs="@(PdbFile->'$(ModuleTempDir)\pdbs\%(Filename)%(Extension)')">
    <Message Text="Generating source server index..."
             Importance="High" />

    <Error Text="The Debugging Tools for Windows must be installed along with the Source Source SDK in order to embed Source Server indexing information in the PDBs.%0D%0ASkip this with '/p:SkipSourceServer=true'."
             Condition="! Exists('$(SourceServerIndexerPath)')" />

    <MakeDir Directories="$(ModuleTempDir)\pdbs" />

    <Copy SourceFiles="@(PdbFile)"
          DestinationFiles="@(PdbFile->'$(ModuleTempDir)\pdbs\%(Filename)%(Extension)')" />

    <Exec Command="&quot;$(SourceServerIndexerPath)&quot; -System=svn -Ini=&quot;$(SourceDir)\srcsrv.ini&quot; -Source=&quot;$(SourceDir)&quot; -Symbols=&quot;$(ModuleTempDir)\pdbs&quot;"
          Condition="Exists('$(SourceServerIndexerPath)')" />
  </Target>

  <Target Name="ImagePdbFiles_SkipSourceServer"
          Condition="'$(SkipSourceServer)'=='true' and '@(PdbFile)'!=''"
          Inputs="@(PdbFile)"
          Outputs="@(PdbFile->'$(ModuleTempDir)\pdbs\%(Filename)%(Extension)')">
    <MakeDir Directories="$(ModuleTempDir)\pdbs" />

    <Copy SourceFiles="@(PdbFile)"
          DestinationFiles="@(PdbFile->'$(ModuleTempDir)\pdbs\%(Filename)%(Extension)')" />
  </Target>

  <!-- Debug Symbols -->

  <Target Name="WriteDebugSymbolItemsToMeta">
    <WriteLinesToFile File="$(ModuleMetaDir)\$(ModuleName).debugsymbols"
                      Lines="@(DebugSymbol->'%(FullPath)')"
                      Overwrite="true" />
  </Target>

  <Target Name="ReadMergedDebugSymbolItemsFromMeta">
    <ItemGroup>
      <_DebugSymbolsFile Include="$(ModuleMetaDir)\*.debugsymbols" />
    </ItemGroup>

    <ReadLinesFromFile File="%(_DebugSymbolsFile.FullPath)"
                       Condition="'@(_DebugSymbolsFile)'!=''">
      <Output TaskParameter="Lines" ItemName="_MergedDebugSymbols" />
    </ReadLinesFromFile>

    <RemoveDuplicates Inputs="@(_MergedDebugSymbols)">
      <Output TaskParameter="Filtered" ItemName="MergedDebugSymbols" />
    </RemoveDuplicates>
  </Target>

  <Target Name="DistReleaseDebugSymbols"
          DependsOnTargets="ReadMergedDebugSymbolItemsFromMeta"
          Condition="'@(ReleaseDebugSymbols)'!=''">
    <MakeDir Directories="$(ModuleDistDir)\%(ReleaseDebugSymbols.Identity)" />

    <Copy SourceFiles="@(MergedDebugSymbols)"
          DestinationFolder="$(ModuleDistDir)\%(ReleaseDebugSymbols.Identity)"
          SkipUnchangedFiles="true" />
  </Target>
</Project>