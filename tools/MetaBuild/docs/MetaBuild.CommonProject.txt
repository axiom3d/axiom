MetaBuild.CommonProject AddIn
=============================

Provides support for C#, VisualJ# and VisualBasic.Net projects.
Includes the ability to automatically copy project build output and
content to the Image directory during the Image pass.

Custom Rules
------------

Additional custom build rules can be injected into projects by other
add-ins.  For example, a new build rule can be added that automatically
preprocesses certain resources during compilation.  The CommonProject
add-in itself adds a rule to enable dynamically setting the assembly version
information.

These custom rules are always enabled during command-line builds.  To make
them work within Visual Studio, you must edit the project file.

Step 1: Open the *.csproj, *.vbproj or *.vjproj in a text editor.

Step 2: Find the first <PropertyGroup> element within the project file.

Step 3: Before the closing </PropertyGroup>, insert the following lines.

  Be sure to customize the relative path of this file by inserting are
  appropriate number of ".." segments.  This example assumes that MetaBuild
  is installed in a "tools" directory next to the project directory.

    <MetaBuildBinDir>$(MSBuildProjectDirectory)\..\tools\MetaBuild\bin</MetaBuildBinDir>

Step 3b: If you are also using a customized MetaBuild config file, then you
  must insert the following line as well to indicate where the
  config file is located relative to the project directory.

  Be sure to customize the relative path of this file, as above.

    <MetaBuildConfigFile>$(MSBuildProjectDirectory)\..\MetaBuild.config.custom</MetaBuildConfigFile>

Setp 4: After the <Import Project="$(MSBuild*****Path)\Microsoft.*****.targets" /> element,
        insert the following line.

    <Import Project="$(MetaBuildBinDir)\MetaBuild.Common.targets" />

Step 5: Save changes.

Step 6: Open the project in Visual Studio.

  When you open, Visual Studio will display a warning that the project has
  been customized.  This is expected.  Tell Visual Studio to continue
  loading the project normally.

  This warning should only appear the first time a user opens up a
  particular project.


Owner Modules
-------------

If there exists a module file in the same directory as a C#, VisualJ#, or
VisualBasic.Net project and with the same name, then the module is considered
to be the "Owner" of the project.

When other projects reference this project, they will also implicitly reference
the module.

eg. Suppose you have a project file 'MyLibrary.csproj' that has some dependencies
    on native components not implemented in C#.

    Then you can create a module file 'MyLibrary.module' in the same directory
    as the project.  By convention this module will be considered the "owner" of
    the project.

    Suppose now that you are building 'MyApp.module' and it happens to include
    the 'MyApp.csproj' project which references 'MyLibrary.csproj'.  Then
    'MyLibrary.module' will be implicitly referenced by 'MyApp.module' because
    it is considered the owner of 'MyLibrary.csproj'.


Refer to the MetaBuild Module documentation for more information about modules.


CSharpProject, VisualBasicProject, VisualJProject
-------------------------------------------------

Item Synopsis

  * CSharpProject
    Provides the path of a CSharp project to build.

  * VisualBasicProject
    Provides the path of a VisualBasic project to build.

  * VisualJProject
    Provides the path of a VisualJ# project to build.

Item Metadata

  * Properties (OPTIONAL)
    Specifies custom MSBuild properties for the project.

  * ImageOutputPath (OPTIONAL)
    Specifies a path below $(ImageDir) to which the project output files
    should be copied during the Image phase.  This is provided as a
    convenience to facilitate copying all build output to the image.

  * ImageContentPath (OPTIONAL)
    Specifies a path below $(ImageDir) to which the project content files
    should be copied dyrung the Image phase.  This is provided as a
    convenience to facilitate copying all content files (files within
    the project with the "Content" build action) to the image.

  * Configuration (OPTIONAL)
    Specifies the build configuration.
    Default value: $(Configuration)

  * Platform (OPTIONAL)
    Specifies the build platform.
    Default value: $(Platform)

  * AssemblyFileVersion (OPTIONAL)
    Specifies the version number for the assembly file.
    Default value: $(AssemblyFileVersion) which defaults to $(Version)

  * AssemblyVersion (OPTIONAL)
    Specifies the version number for the assembly name.
    Default value: $(AssemblyVersion) which defaults to $(Version)

  Warning: The Properties, Configuration and Platform metadata must be set
           identically each time a project is referenced.  Otherwise the
           project may end up being rebuilt multiple times.

Item Syntax

  <ItemGroup>
    <CSharpProject Include="IncludedProject.csproj">
      <Properties>...</Properties>
      <ImageOutputPath>...</ImageOutputPath>
      <ImageContentPath>...</ImageContentPath>
    </CSharpProject>

    <VisualBasicProject Include="IncludedProject.vbproj">
      <Properties>...</Properties>
      <ImageOutputPath>...</ImageOutputPath>
      <ImageContentPath>...</ImageContentPath>
    </VisualBasicProject>    

    <VisualJProject Include="IncludedProject.vjproj">
      <Properties>...</Properties>
      <ImageOutputPath>...</ImageOutputPath>
      <ImageContentPath>...</ImageContentPath>
    </VisualJProject>    
  </ItemGroup>
