Index: DotNetZip.vsmdi
===================================================================
--- DotNetZip.vsmdi	(revision 90507)
+++ DotNetZip.vsmdi	(working copy)
@@ -1,5 +1,5 @@
-﻿<?xml version="1.0" encoding="UTF-8"?>
-<TestLists xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2006">
+﻿<?xml version="1.0" encoding="utf-8"?>
+<TestLists xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
   <TestList name="Smoke" id="21f93b48-8053-442f-9ef7-d617198f2082" parentListId="a506c786-f082-46d4-b960-f75195c63a43">
     <Description>Basic smoke test
 </Description>
Index: Zip/Shared.cs
===================================================================
--- Zip/Shared.cs	(revision 90507)
+++ Zip/Shared.cs	(working copy)
@@ -660,10 +660,12 @@
         // generates the JIT-compile time exception.
         //
 #endif
+#if !SILVERLIGHT
         private static uint _HRForException(System.Exception ex1)
         {
             return unchecked((uint)System.Runtime.InteropServices.Marshal.GetHRForException(ex1));
         }
+#endif
 
     }
 
Index: Zip/ZipEntry.cs
===================================================================
--- Zip/ZipEntry.cs	(revision 90507)
+++ Zip/ZipEntry.cs	(working copy)
@@ -869,20 +869,11 @@
                 // rename the entry!
                 if (String.IsNullOrEmpty(value)) throw new ZipException("The FileName must be non empty and non-null.");
 
-                var filename = ZipEntry.NameInArchive(value, null);
-                // workitem 8180
-                if (_FileNameInArchive == filename) return; // nothing to do
-
-                // workitem 8047 - when renaming, must remove old and then add a new entry
-                this._container.ZipFile.RemoveEntry(this);
-                this._container.ZipFile.InternalAddEntry(filename, this);
-
-                _FileNameInArchive = filename;
-                _container.ZipFile.NotifyEntryChanged();
-                _metadataChanged = true;
+                Rename( value );
             }
         }
 
+        partial void Rename(string newName);
 
         /// <summary>
         /// The stream that provides content for the ZipEntry.
@@ -2561,10 +2552,12 @@
                         zf.Reset(false);
                         _archiveStream = zf.StreamForDiskNumber(_diskNumber);
                     }
+#if !READ_ONLY
                     else
                     {
                         _archiveStream = _container.ZipOutputStream.OutputStream;
                     }
+#endif
                 }
                 return _archiveStream;
             }
Index: Zip/ZipEntry.Write.cs
===================================================================
--- Zip/ZipEntry.Write.cs	(revision 90507)
+++ Zip/ZipEntry.Write.cs	(working copy)
@@ -34,6 +34,21 @@
 {
     public partial class ZipEntry
     {
+        partial void Rename( string newName )
+        {
+            var filename = ZipEntry.NameInArchive(newName, null);
+            // workitem 8180
+            if (_FileNameInArchive == filename) return; // nothing to do
+
+            // workitem 8047 - when renaming, must remove old and then add a new entry
+            this._container.ZipFile.RemoveEntry(this);
+            this._container.ZipFile.InternalAddEntry(filename, this);
+
+            _FileNameInArchive = filename;
+            _container.ZipFile.NotifyEntryChanged();
+            _metadataChanged = true;
+        }
+
         internal void WriteCentralDirectoryEntry(Stream s)
         {
             byte[] bytes = new byte[4096];
Index: Zip/ZipFile.cs
===================================================================
--- Zip/ZipFile.cs	(revision 90507)
+++ Zip/ZipFile.cs	(working copy)
@@ -2325,7 +2325,11 @@
         {
             get
             {
+#if !SILVERLIGHT
                 return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;
+#else
+                return new System.Version(1,0,0,0);
+#endif
             }
         }
 
@@ -2353,6 +2357,7 @@
         // ZipEntry.
         internal void Reset(bool whileSaving)
         {
+#if !READ_ONLY
             if (_JustSaved)
             {
                 // read in the just-saved zip archive
@@ -2381,6 +2386,7 @@
                 }
                 _JustSaved = false;
             }
+#endif
         }
 
 
@@ -3415,7 +3421,6 @@
             RemoveEntry(e);
         }
 
-
         #endregion
 
         #region Destructors and Disposers
Index: Zip/ZipOutputStream.cs
===================================================================
--- Zip/ZipOutputStream.cs	(revision 90507)
+++ Zip/ZipOutputStream.cs	(working copy)
@@ -50,6 +50,7 @@
 
 namespace Ionic.Zip
 {
+#if !READ_ONLY
     /// <summary>
     ///   Provides a stream metaphor for generating zip files.
     /// </summary>
@@ -1648,20 +1649,23 @@
         // application without extra "noise."
 
     }
+#endif
 
 
-
     internal class ZipContainer
     {
         private ZipFile _zf;
+        private ZipInputStream _zis;
+#if !READ_ONLY
         private ZipOutputStream _zos;
-        private ZipInputStream _zis;
-
+#endif
         public ZipContainer(Object o)
         {
             _zf = (o as ZipFile);
+            _zis = (o as ZipInputStream);
+#if !READ_ONLY
             _zos = (o as ZipOutputStream);
-            _zis = (o as ZipInputStream);
+#endif
         }
 
         public ZipFile ZipFile
@@ -1669,10 +1673,12 @@
             get { return _zf; }
         }
 
+#if !READ_ONLY
         public ZipOutputStream ZipOutputStream
         {
             get { return _zos; }
         }
+#endif
 
         public string Name
         {
@@ -1680,7 +1686,11 @@
             {
                 if (_zf != null) return _zf.Name;
                 if (_zis != null) throw new NotSupportedException();
+#if !READ_ONLY
                 return _zos.Name;
+#else
+                return string.Empty;
+#endif
             }
         }
 
@@ -1690,7 +1700,11 @@
             {
                 if (_zf != null) return _zf._Password;
                 if (_zis != null) return _zis._Password;
+#if !READ_ONLY
                 return _zos._password;
+#else
+                return string.Empty;
+#endif
             }
         }
 
@@ -1700,7 +1714,11 @@
             {
                 if (_zf != null) return _zf._zip64;
                 if (_zis != null) throw new NotSupportedException();
+#if !READ_ONLY
                 return _zos._zip64;
+#else
+                return Zip64Option.Default;
+#endif
             }
         }
 
@@ -1714,7 +1732,7 @@
             }
         }
 
-#if !NETCF
+#if !NETCF && !READ_ONLY
         public Ionic.Zlib.ParallelDeflateOutputStream ParallelDeflater
         {
             get
@@ -1754,7 +1772,11 @@
             {
                 if (_zf != null) return _zf.CodecBufferSize;
                 if (_zis != null) return _zis.CodecBufferSize;
+#if !READ_ONLY
                 return _zos.CodecBufferSize;
+#else
+                return 0;
+#endif
             }
         }
 
@@ -1763,7 +1785,11 @@
             get
             {
                 if (_zf != null) return _zf.Strategy;
+#if !READ_ONLY
                 return _zos.Strategy;
+#else
+                return Ionic.Zlib.CompressionStrategy.Default;
+#endif
             }
         }
 
@@ -1772,7 +1798,11 @@
             get
             {
                 if (_zf != null) return _zf.UseZip64WhenSaving;
+#if !READ_ONLY
                 return _zos.EnableZip64;
+#else
+                return Zip64Option.Default;
+#endif
             }
         }
 
@@ -1781,7 +1811,9 @@
             get
             {
                 if (_zf != null) return _zf.AlternateEncoding;
+#if !READ_ONLY
                 if (_zos!=null) return _zos.AlternateEncoding;
+#endif
                 return null;
             }
         }
@@ -1790,7 +1822,9 @@
             get
             {
                 if (_zf != null) return ZipFile.DefaultEncoding;
+#if !READ_ONLY
                 if (_zos!=null) return ZipOutputStream.DefaultEncoding;
+#endif
                 return null;
             }
         }
@@ -1799,7 +1833,9 @@
             get
             {
                 if (_zf != null) return _zf.AlternateEncodingUsage;
+#if !READ_ONLY
                 if (_zos!=null) return _zos.AlternateEncodingUsage;
+#endif
                 return ZipOption.Never; // n/a
             }
         }
