<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NDoc3.Core</name>
    </assembly>
    <members>
        <member name="T:NDoc3.Core.AssemblySlashDoc">
            <summary>Represents the path to an assembly and its associated documentation comment XML file.</summary>
            <remarks>Documentation comment XML files are known colloquially as <i>"SlashDoc"</i> files as they produced
            by the Microsoft C# compiler when the /doc command-line option is specified. The format of these files is detailed in
            the ECMA C# Specification (Appendix E). 
            See <see href="http://www.ecma-international.org/publications/standards/Ecma-334.htm">here</see> for further details.
            </remarks>
        </member>
        <member name="F:NDoc3.Core.AssemblySlashDoc.assembly">
            <summary>Path to assembly</summary>
        </member>
        <member name="F:NDoc3.Core.AssemblySlashDoc.slashDoc">
            <summary>Path to slashdoc</summary>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDoc.#ctor">
            <overloads>Initializes a new instance of the <see cref="T:NDoc3.Core.AssemblySlashDoc"/> class.</overloads>
            <summary>Initializes a blank instance of the <see cref="T:NDoc3.Core.AssemblySlashDoc"/> class.</summary>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDoc.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:NDoc3.Core.AssemblySlashDoc"/> class
            with the specified Assembly and SlashDoc paths.</summary>
            <param name="assemblyFilename">An assembly filename.</param>
            <param name="slashDocFilename">A documentation comment XML filename.</param>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDoc.Clone">
            <summary>
            <see cref="T:System.ICloneable"/>
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="P:NDoc3.Core.AssemblySlashDoc.Assembly">
            <summary>
            Gets or sets the path to an assembly file.
            </summary>
            <value>A <see cref="T:NDoc3.Core.FilePath"/> representing the path to an assembly.</value>
        </member>
        <member name="P:NDoc3.Core.AssemblySlashDoc.SlashDoc">
            <summary>
            Gets or sets the path to a documentation comment XML file.
            </summary>
            <value>A <see cref="T:NDoc3.Core.FilePath"/> representing the path to a documentation comment XML file.</value>
        </member>
        <member name="T:NDoc3.Core.AssemblySlashDocEventArgs">
            <summary>
            Event arguments class for events related to an AssemblySlashDoc
            </summary>
        </member>
        <member name="F:NDoc3.Core.AssemblySlashDocEventArgs.AssemblySlashDoc">
            <summary>
            The AssemblySlashDoc
            </summary>
        </member>
        <member name="T:NDoc3.Core.AssemblySlashDocEventHandler">
            <summary>
            Event handler delegate for AssemblySlashDoc related events
            </summary>
        </member>
        <member name="T:NDoc3.Core.AssemblySlashDocCollection">
            <summary>
            Represents a collection of assemblies and their associated documentation comment XML files. 
            </summary>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDocCollection.Add(NDoc3.Core.AssemblySlashDoc)">
            <summary>
            Adds the specified <see cref="T:NDoc3.Core.AssemblySlashDoc"/> object to the collection.
            </summary>
            <param name="assySlashDoc">The <see cref="T:NDoc3.Core.AssemblySlashDoc"/> to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assySlashDoc"/> is a <see langword="null"/>.</exception>
            <remarks>
            If the path of the <see cref="P:NDoc3.Core.AssemblySlashDoc.Assembly"/> 
            in <paramref name="assySlashDoc"/> matches one already existing in the collection, the
            operation is silently ignored.
            </remarks>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDocCollection.OnClear">
            <summary>
            Raises the <see cref="E:NDoc3.Core.AssemblySlashDocCollection.Cleared"/> event
            </summary>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDocCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Raises the <see cref="E:NDoc3.Core.AssemblySlashDocCollection.ItemAdded"/> event
            </summary>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDocCollection.Remove(NDoc3.Core.AssemblySlashDoc)">
            <summary>
            Removes the first occurence of a specific <see cref="T:NDoc3.Core.AssemblySlashDoc"/> from the collection.
            </summary>
            <param name="assySlashDoc">The <see cref="T:NDoc3.Core.AssemblySlashDoc"/> to remove from the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assySlashDoc"/> is a <see langword="null"/>.</exception>
            <remarks>
            Elements that follow the removed element move up to occupy the vacated spot and the indexes of the elements that are moved are also updated.
            </remarks>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDocCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Raises the <see cref="E:NDoc3.Core.AssemblySlashDocCollection.ItemRemoved"/> event
            </summary>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDocCollection.Contains(NDoc3.Core.AssemblySlashDoc)">
            <overloads>Determines whether the collection contains a specified element.</overloads>
            <summary>
            Determines whether the collection contains the specified <see cref="T:NDoc3.Core.AssemblySlashDoc"/>.
            </summary>
            <param name="assySlashDoc">The <see cref="T:NDoc3.Core.AssemblySlashDoc"/> to locate in the collection.</param>
            <returns><see langword="true"/> if the collection contains the specified <see cref="T:NDoc3.Core.AssemblySlashDoc"/>, 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDocCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a specified assembly path.
            </summary>
            <param name="path">The assembly path to locate in the collection.</param>
            <returns><see langword="true"/> if the collection contains the specified path, 
            otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a <see langword="null"/>.</exception>
            <remarks>Path comparison is case-insensitive.</remarks>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDocCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Loads <see cref="T:NDoc3.Core.AssemblySlashDoc"/> details from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            <exception cref="T:NDoc3.Core.DocumenterException">The <i>location</i> attribute is missing or is an empty string</exception>
            An open <see cref="T:System.Xml.XmlReader"/> positioned before, or on, the <b>&lt;assemblies&gt;</b> element.</param>
            <remarks>
            The expected format is is follows
            <code escaped="true">
            <assemblies>
            	<assembly location="relative or fixed path" documentation="relative or fixed path"/>
            	...
            </assemblies>
            </code>
            <para>If the <i>location</i> attribute is missing or an empty string an exception will be thrown.</para>
            <para>If the <i>documentation</i> attribute is missing or an empty string it will be silently ignored.</para>
            </remarks>
        </member>
        <member name="M:NDoc3.Core.AssemblySlashDocCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Saves <see cref="T:NDoc3.Core.AssemblySlashDoc"/> details to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">An open <see cref="T:System.Xml.XmlWriter"/>.</param>
            <remarks>
            The persisted format is is follows
            <code escaped="true">
            <assemblies>
            	<assembly location="relative or fixed path" documentation="relative or fixed path"/>
            	...
            </assemblies>
            </code>
            </remarks>
        </member>
        <member name="E:NDoc3.Core.AssemblySlashDocCollection.Cleared">
            <summary>
            Event rasied when the collection is cleared
            </summary>
        </member>
        <member name="E:NDoc3.Core.AssemblySlashDocCollection.ItemAdded">
            <summary>
            Event rasied when an item is added to the collection
            </summary>
        </member>
        <member name="E:NDoc3.Core.AssemblySlashDocCollection.ItemRemoved">
            <summary>
            Event rasied when an item is removed from the collection
            </summary>
        </member>
        <member name="P:NDoc3.Core.AssemblySlashDocCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NDoc3.Core.AssemblySlashDoc"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:NDoc3.Core.AssemblySlashDoc"/> to get or set.</param>
            <value>The <see cref="T:NDoc3.Core.AssemblySlashDoc"/> at the specified index</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index 
            in the collection.</exception>
            <exception cref="T:System.ArgumentNullException">set <i>value</i> is a <see langword="null"/>.</exception>
        </member>
        <member name="T:NDoc3.Core.BaseDocumenter">
            <summary>Provides an abstract base class for documenters.</summary>
            <remarks>
            This is an <see langword="abstract"/> base class for NDoc3 Documenters.
            It provides default implementations of all the methods required by the <see cref="T:NDoc3.Core.IDocumenter"/> interface. 
            It also provides some basic properties which are shared by all documenters. 
            </remarks>
        </member>
        <member name="T:NDoc3.Core.IDocumenter">
            <summary>Represents a class capable of generating documentation from a given assembly and /doc file.</summary>
        </member>
        <member name="M:NDoc3.Core.IDocumenter.CanBuild(NDoc3.Core.Project,System.Boolean)">
            <summary>Checks to make sure the documenter can perform a
            build.</summary>
            <param name="project">The project that would be built.</param>
            <param name="checkInputOnly">When true, don't check for output 
            file locking.</param>
            <remarks>This is for people who like to leave their CHMs open.</remarks>
            <returns>null if the documenter can build; otherwise a message
            describing why it can't build</returns>
        </member>
        <member name="M:NDoc3.Core.IDocumenter.CanBuild(NDoc3.Core.Project)">
            <summary>
            Checks if the documentation output file(s) exist.
            </summary>
            <param name="project">The project that generated the documentation.</param>
            <returns>True if the documentation can be viewed.</returns>
        </member>
        <member name="M:NDoc3.Core.IDocumenter.Build(NDoc3.Core.Project)">
            <summary>Builds the documentation.</summary>
            <remarks>The compiler does not currently allow namespaces to documented.</remarks>
        </member>
        <member name="M:NDoc3.Core.IDocumenter.View">
            <summary>Spawns a new process to view the generated documentation.</summary>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the main output file does not exist.</exception>
        </member>
        <member name="E:NDoc3.Core.IDocumenter.DocBuildingStep">
            <summary>
            Raised to update the overall percent complete value and the current step name.
            </summary>
        </member>
        <member name="E:NDoc3.Core.IDocumenter.DocBuildingProgress">
            <summary>
            Raised to update the current step's percent complete value.
            </summary>
        </member>
        <member name="P:NDoc3.Core.IDocumenter.MainOutputFile">
            <summary>
            Returns the documenter's main output file path.
            </summary>
        </member>
        <member name="P:NDoc3.Core.IDocumenter.Config">
            <summary>Gets or sets the documenter's config object.</summary>
            <remarks>This can be put inside a PropertyGrid for editing by the user.</remarks>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenter.#ctor(NDoc3.Core.IDocumenterConfig)">
            <summary>Initializes a new instance of the <see cref="T:NDoc3.Core.BaseDocumenter"/> class.</summary>
            <param name="config_">settings</param>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenter.View">
            <summary>See <see cref="M:NDoc3.Core.IDocumenter.View">IDocumenter.View</see>.</summary>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenter.OnDocBuildingStep(System.Int32,System.String)">
            <summary>Raises the <see cref="E:NDoc3.Core.BaseDocumenter.DocBuildingStep"/> event.</summary>
            <param name="step">The overall percent complete value.</param>
            <param name="label">A description of the work currently beeing done.</param>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenter.OnDocBuildingProgress(System.Int32)">
            <summary>Raises the <see cref="E:NDoc3.Core.BaseDocumenter.DocBuildingProgress"/> event.</summary>
            <param name="progress">Percentage progress value</param>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenter.CanBuild(NDoc3.Core.Project)">
            <summary>See <see cref="M:NDoc3.Core.IDocumenter.CanBuild(NDoc3.Core.Project)">IDocumenter.CanBuild</see>.</summary>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenter.CanBuild(NDoc3.Core.Project,System.Boolean)">
            <summary>See <see cref="M:NDoc3.Core.IDocumenter.CanBuild(NDoc3.Core.Project,System.Boolean)">CanBuild</see>.</summary>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenter.Build(NDoc3.Core.Project)">
            <summary>See <see cref="M:NDoc3.Core.IDocumenter.Build(NDoc3.Core.Project)">IDocumenter.Build</see>.</summary>
        </member>
        <member name="P:NDoc3.Core.BaseDocumenter.Config">
            <summary>See <see cref="P:NDoc3.Core.IDocumenter.Config">IDocumenter.Config</see>.</summary>
        </member>
        <member name="P:NDoc3.Core.BaseDocumenter.MainOutputFile">
            <summary>See <see cref="P:NDoc3.Core.IDocumenter.MainOutputFile">IDocumenter.MainOutputFile</see>.</summary>
        </member>
        <member name="E:NDoc3.Core.BaseDocumenter.DocBuildingStep">
            <summary>See <see cref="E:NDoc3.Core.IDocumenter.DocBuildingStep">IDocumenter.DocBuildingStep</see>.</summary>
        </member>
        <member name="E:NDoc3.Core.BaseDocumenter.DocBuildingProgress">
            <summary>See <see cref="E:NDoc3.Core.IDocumenter.DocBuildingProgress">IDocumenter.DocBuildingProgress</see>.</summary>
        </member>
        <member name="T:NDoc3.Core.BaseDocumenterConfig">
            <summary>Provides an abstract base class for documenter configurations.</summary>
            <remarks>
            This is a base class for NDoc3 Documenter Configs.  
            It implements all the methods required by the <see cref="T:NDoc3.Core.IDocumenterConfig"/> interface. 
            It also provides some basic properties which are shared by all configs. 
            </remarks>
        </member>
        <member name="T:NDoc3.Core.IDocumenterConfig">
            <summary>Specifies the methods that are common to all documenter configs.</summary>
        </member>
        <member name="M:NDoc3.Core.IDocumenterConfig.SetProject(NDoc3.Core.Project)">
            <summary>Associates the config with a project.</summary>
            <remarks>Changes to the config will notify the project so that 
            it can be marked as modified and saved.</remarks>
        </member>
        <member name="M:NDoc3.Core.IDocumenterConfig.GetProperties">
            <summary>Gets a list of property names.</summary>
            <returns>An enumerable list of property names.</returns>
        </member>
        <member name="M:NDoc3.Core.IDocumenterConfig.SetValue(System.String,System.String)">
            <summary>Sets the value of a property.</summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:NDoc3.Core.IDocumenterConfig.Read(System.Xml.XmlReader)">
            <summary>Reads the previously serialized state of the documenter into memory.</summary>
            <param name="reader">An XmlReader positioned on a documenter element.</param>
            <remarks>This method uses reflection to set all of the public properties in the documenter.</remarks>
        </member>
        <member name="M:NDoc3.Core.IDocumenterConfig.Write(System.Xml.XmlWriter)">
            <summary>Writes the current state of the documenter to the specified XmlWrtier.</summary>
            <param name="writer">An XmlWriter.</param>
            <remarks>This method uses reflection to serialize all of the public properties in the documenter.</remarks>
        </member>
        <member name="M:NDoc3.Core.IDocumenterConfig.CreateDocumenter">
            <summary>
            Creates an instance of a documenter 
            </summary>
            <returns>IDocumenter instance</returns>		
        </member>
        <member name="P:NDoc3.Core.IDocumenterConfig.DocumenterInfo">
            <summary>
            Returns information about the config
            </summary>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.#ctor(NDoc3.Core.IDocumenterInfo)">
            <summary>Initializes a new instance of the <see cref="T:NDoc3.Core.BaseDocumenterConfig"/> class.</summary>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.CreateDocumenter">
            <summary>
            Creates an instance of a documenter <see cref="M:NDoc3.Core.IDocumenterConfig.CreateDocumenter"/>
            </summary>
            <returns>IDocumenter instance</returns>		
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.SetProject(NDoc3.Core.Project)">
            <summary>Associates this config with a <see cref="P:NDoc3.Core.BaseDocumenterConfig.Project"/>.</summary>
            <param name="project">A <see cref="P:NDoc3.Core.BaseDocumenterConfig.Project"/> to associate with this config.</param>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.SetDirty">
            <summary>Sets the <see cref="P:NDoc3.Core.Project.IsDirty"/> property on the <see cref="P:NDoc3.Core.BaseDocumenterConfig.Project"/>.</summary>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.GetProperties">
            <summary>Gets an enumerable list of <see cref="T:System.Reflection.PropertyInfo"/> objects representing the properties of this config.</summary>
            <remarks>properties are represented by <see cref="T:System.Reflection.PropertyInfo"/> objects.</remarks>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.SetValue(System.String,System.String)">
            <summary>
            Sets the value of a named config property.
            </summary>
            <param name="name">The name of the property to set.</param>
            <param name="value">A string representation of the desired property value.</param>
            <remarks>Property name matching is case-insensitive.</remarks>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.Write(System.Xml.XmlWriter)">
            <summary>Writes the current state of the config to the specified <see cref="T:System.Xml.XmlWriter"/>.</summary>
            <param name="writer">An open <see cref="T:System.Xml.XmlWriter"/>.</param>
            <remarks>
            This method uses reflection to serialize the public properties in the config.
            <para>
            A property will <b>not</b> be persisted if,
            <list type="bullet">
            <item>The value is equal to the default value, or</item>
            <item>The string representation of the value is an empty string, or</item>
            <item>The property has a Browsable(false) attribute, or</item>
            <item>The property has a NonPersisted attribute.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.Read(System.Xml.XmlReader)">
            <summary>Loads config details from the specified <see cref="T:System.Xml.XmlReader"/>.</summary>
            <param name="reader">An <see cref="T:System.Xml.XmlReader"/> positioned on a &lt;documenter&gt; element.</param>
            <remarks>Each property found in the XML is loaded into current config using <see cref="M:NDoc3.Core.BaseDocumenterConfig.ReadProperty(System.String,System.String)"/>.</remarks>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.ReadProperty(System.String,System.String)">
            <summary>
            Sets the value of a named property. 
            </summary>
            <param name="name">A property name.</param>
            <param name="value">A string respesentation of the desired property value.</param>
            <returns>A string containing any messages generated while attempting to set the property.</returns>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.HandleUnknownPropertyType(System.String,System.String)">
            <summary>
            When overridden in a derived class, handles a property found by <see cref="M:NDoc3.Core.BaseDocumenterConfig.Read(System.Xml.XmlReader)"/> which does not 
            correspond to any property in the config object.
            </summary>
            <param name="name">The unknown property name.</param>
            <param name="value">A string representation of the desired property value.</param>
            <returns>A string containing any messages generated by the handler.</returns>
            <remarks>
            As implemented in this class, no action is taken.
            <note type="inheritinfo">
            <para>If a handler can translate the unknown property, it can call the protected method 
            <see cref="M:NDoc3.Core.BaseDocumenterConfig.ReadProperty(System.String,System.String)"/> to process to translated name/value.</para>
            </note>
            </remarks>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterConfig.HandleUnknownPropertyValue(System.Reflection.PropertyInfo,System.String)">
            <summary>
            When overridden in a derived class, handles a unknown or invalid property value read by <see cref="M:NDoc3.Core.BaseDocumenterConfig.Read(System.Xml.XmlReader)"/>.
            </summary>
            <param name="property">A valid Property name.</param>
            <param name="value">A string representation of the desired property value.</param>
            <returns>A string containing any messages generated by the handler.</returns>
            <remarks>
            As implemented in this class, an error message is returned which details the 
            property name, type and the invalid value.
            <note type="inheritinfo">
            <para>If a handler can translate the unknown value, it can call the protected method <see cref="M:NDoc3.Core.BaseDocumenterConfig.ReadProperty(System.String,System.String)"/> to
            process to translated name/value.</para>
            </note>
            </remarks>
        </member>
        <member name="P:NDoc3.Core.BaseDocumenterConfig.Project">
            <summary>
            Gets the <see cref="P:NDoc3.Core.BaseDocumenterConfig.Project"/> that this config is associated with, if any
            </summary>
            <value>The <see cref="P:NDoc3.Core.BaseDocumenterConfig.Project"/> that this config is associated with, or a <see langword="null"/> if it is not associated with a project.</value>
        </member>
        <member name="P:NDoc3.Core.BaseDocumenterConfig.DocumenterInfo">
            <summary>
            Gets the display name of the documenter.
            </summary>
        </member>
        <member name="P:NDoc3.Core.BaseDocumenterConfig.CleanIntermediates">
            <summary>Gets or sets a value indicating whether to delete intermediate files after a successful build.</summary>
            <remarks>
            <value>
            <see langword="true"/> if intermediate files should be deleted after a successful build;
            otherwise, <see langword="false"/>. By default, the value of this property is <see langword="false"/>.</value>
            <para>For documenters that result in a compiled output, like the MSDN and VS.NET
            documenters, intermediate files include all of the HTML Help project files, as well as the generated
            HTML files.</para></remarks>
        </member>
        <member name="T:NDoc3.Core.NonPersistedAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:NDoc3.Core.BaseDocumenterInfo">
            <summary>
            Holds meta data about a specific type of documenter
            </summary>
        </member>
        <member name="T:NDoc3.Core.IDocumenterInfo">
            <summary>
            Descriptive information about a documenter
            </summary>
        </member>
        <member name="M:NDoc3.Core.IDocumenterInfo.CreateConfig(NDoc3.Core.Project)">
            <summary>
            Creates an instance of an <see cref="T:NDoc3.Core.IDocumenterConfig"/>
            for the particular type of documenter and associates it with a project
            </summary>
            <param name="project">A project</param>
            <returns>An <see cref="T:NDoc3.Core.IDocumenterConfig"/> for the documenter type</returns>
        </member>
        <member name="M:NDoc3.Core.IDocumenterInfo.CreateConfig">
            <summary>
            Creates an instance of an <see cref="T:NDoc3.Core.IDocumenterConfig"/>
            for the particular type of documenter
            </summary>
            <returns>An <see cref="T:NDoc3.Core.IDocumenterConfig"/> for the documenter type</returns>
        </member>
        <member name="P:NDoc3.Core.IDocumenterInfo.Name">
            <summary>
            The name of the documenter
            </summary>
        </member>
        <member name="P:NDoc3.Core.IDocumenterInfo.DevelopmentStatus">
            <summary>
            The development status (alpha, beta, stable) of this documenter.
            </summary>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="name">The documenter's name</param>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterInfo.#ctor(System.String,NDoc3.Core.DocumenterDevelopmentStatus)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="name">The name of the documenter</param>
            <param name="status">The development status of the documenter</param>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterInfo.CreateConfig(NDoc3.Core.Project)">
            <summary>
            Creates an <see cref="T:NDoc3.Core.IDocumenterConfig"/> object for this documenter type
            </summary>
            <param name="project">A project to associate the config with</param>
            <returns>A config object</returns>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterInfo.CreateConfig">
            <summary>
            Creates an <see cref="T:NDoc3.Core.IDocumenterConfig"/> object for this documenter type
            </summary>
            <returns>A config object</returns>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterInfo.CompareTo(System.Object)">
            <summary>Compares the currrent document to another documenter.</summary>
        </member>
        <member name="M:NDoc3.Core.BaseDocumenterInfo.ToString">
            <summary>
            Override
            </summary>
            <returns>Formatted name of the documenter</returns>
        </member>
        <member name="P:NDoc3.Core.BaseDocumenterInfo.Name">
            <summary>
            The documenter's name
            </summary>
        </member>
        <member name="P:NDoc3.Core.BaseDocumenterInfo.DevelopmentStatus">
            <summary>
            Specifies the development status (alpha, beta, stable) of a documenter.
            </summary>
            <remarks>
            As implemented in this class, this always returns <see cref="T:NDoc3.Core.DocumenterDevelopmentStatus">Stable</see>.
            <note type="inheritinfo">Documenters should override this if they are not yet stable...</note>
            </remarks>
        </member>
        <member name="T:NDoc3.Core.DocumenterException">
            <summary>Represents an exception thrown when attempting to build documentation.</summary>
        </member>
        <member name="M:NDoc3.Core.DocumenterException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:NDoc3.Core.DocumenterException"/> class with the specified message.</summary>
            <param name="message">The message to display when the exception is thrown.</param>
        </member>
        <member name="M:NDoc3.Core.DocumenterException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:NDoc3.Core.DocumenterException"/> class 
            with a specified error message and a reference to the 
            inner exception that is the root cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of Exception that is the cause of the current Exception. 
            If inner is non-null, then the current Exception is raised in a catch block handling the inner exception.</param>
        </member>
        <member name="M:NDoc3.Core.DocumenterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <remarks>
            required to serialize across appdomain boundry
            </remarks>
        </member>
        <member name="T:NDoc3.Core.EmbeddedResources">
            <summary>Utilties to help reading and writing embedded resources.</summary>
            <remarks>This is used to access the stylesheets.</remarks>
        </member>
        <member name="M:NDoc3.Core.EmbeddedResources.WriteEmbeddedResources(System.Type,System.IO.DirectoryInfo)">
            <summary>Writes all the embedded resources with the specified prefix to disk.</summary>
            <param name="resourceLocationHint">The type who's assembly and namespace denotes the location to search for embedded resources.</param>
            <param name="directory">The directory to write the resources to.</param>
        </member>
        <member name="M:NDoc3.Core.EmbeddedResources.WriteEmbeddedResources(System.Reflection.Assembly,System.String,System.IO.DirectoryInfo)">
            <summary>Writes all the embedded resources with the specified prefix to disk.</summary>
            <param name="assembly">The assembly containing the embedded resources.</param>
            <param name="prefix">The prefix to search for.</param>
            <param name="directory">The directory to write the resources to.</param>
        </member>
        <member name="M:NDoc3.Core.EmbeddedResources.WriteEmbeddedResource(System.Type,System.String,System.IO.DirectoryInfo)">
            <summary>Writes an embedded resource to disk.</summary>
            <param name="resourceLocationHint">The type, who's assembly and namespace denote the location containing the embedded resource.</param>
            <param name="resourceName">The name of the embedded resource.</param>
            <param name="directory">The directory to write the resource to.</param>
            <remarks>This essentially copies an embedded resource to a target directory on disk</remarks>
        </member>
        <member name="M:NDoc3.Core.EmbeddedResources.WriteEmbeddedResource(System.Reflection.Assembly,System.String,System.IO.DirectoryInfo,System.String)">
            <summary>Writes an embedded resource to disk.</summary>
            <param name="assembly">The assembly containing the embedded resource.</param>
            <param name="manifestResourceName">The name of the embedded resource.</param>
            <param name="directory">The directory to write the resource to.</param>
            <param name="filename">The filename of the resource on disk.</param>
        </member>
        <member name="M:NDoc3.Core.EmbeddedResources.GetEmbeddedResourceStream(System.Type,System.String)">
            <summary>
            Returns a stream to read data from an embedded resource
            </summary>
            <param name="resourceLocationHint">The type, who's assembly and namespace denote the location containing the embedded resource.</param>
            <param name="resourceName">The name of the embedded resource within <paramref name="resourceLocationHint"/>'s <see cref="P:System.Type.Namespace"/>.</param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.EmbeddedResources.GetEmbeddedResourceReader(System.Type,System.String,System.Text.Encoding)">
            <summary>
            Returns a stream to read data from an embedded resource
            </summary>
            <param name="resourceLocationHint">The type, who's assembly and namespace denote the location containing the embedded resource.</param>
            <param name="resourceName">The name of the embedded resource within <paramref name="resourceLocationHint"/>'s <see cref="P:System.Type.Namespace"/>.</param>
            <param name="encoding">the encoding to use for the reader or <c>null</c> to autodetect encoding.</param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.EmbeddedResources.StreamCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies bytes from input stream to an output stream
            </summary>
            <param name="input">the input stream to read from</param>
            <param name="output">the output stream to write to</param>
            <returns>the number of bytes read</returns>
        </member>
        <member name="T:NDoc3.Core.FilePath">
            <summary>
            
            </summary>
        </member>
        <member name="T:NDoc3.Core.PathItemBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.op_Implicit(NDoc3.Core.PathItemBase)~System.String">
            <summary>
            Explicit conversion of <see cref="T:NDoc3.Core.PathItemBase"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="path">The <see cref="T:NDoc3.Core.PathItemBase"/> to convert.</param>
            <returns>A string containg the fully-qualified path contained in the passed <see cref="T:NDoc3.Core.PathItemBase"/>.</returns>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:NDoc3.Core.PathItemBase"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.PathItemBase"/> class.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.PathItemBase"/> class from a given path string.
            </summary>
            <param name="path">A relative or absolute path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="path"/> is an empty string.</exception>
            <remarks>
            If a <paramref name="path"/> is rooted, <see cref="P:NDoc3.Core.PathItemBase.FixedPath"/> is set to <see langword="true"/>, otherwise
            is is set to <see langword="false"/>
            </remarks>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.#ctor(NDoc3.Core.PathItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.PathItemBase"/> class from an existing <see cref="T:NDoc3.Core.PathItemBase"/> instance.
            </summary>
            <param name="pathItemBase">An existing <see cref="T:NDoc3.Core.PathItemBase"/> instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pathItemBase"/> is a <see langword="null"/>.</exception>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.NormalizePath(System.String)">
            <summary>
            Normalize the path representation according to the current platform we're running on.
            </summary>
            <remarks>
            The implementation of this method must ensure, that 2 paths pointing to the same location
            are considered equal. On Windows, this e.g. means case insensitive comparison of paths.
            </remarks>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.ToString">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.Equals(System.Object)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.Equals(NDoc3.Core.PathItemBase)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.GetHashCode">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.op_Equality(NDoc3.Core.PathItemBase,NDoc3.Core.PathItemBase)">
            <summary>Equality operator.</summary>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.op_Inequality(NDoc3.Core.PathItemBase,NDoc3.Core.PathItemBase)">
            <summary>Inequality operator.</summary>
        </member>
        <member name="P:NDoc3.Core.PathItemBase.BasePath">
            <summary>
            The base path for converting <see cref="T:NDoc3.Core.PathItemBase"/> path to relative form.
            </summary>
            <remarks>
            If the path has not been explicitly set, it defaults to the working directory.
            </remarks>
        </member>
        <member name="P:NDoc3.Core.PathItemBase.Path">
            <summary>
            Gets or sets the fully qualified path.
            </summary>
            <value>The fully qualified path</value>
            <exception cref="T:System.ArgumentNullException">set <paramref name="value"/> is a <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">set <paramref name="value"/> is an empty string.</exception>
            <remarks>
            If the set path is not rooted, <see cref="P:NDoc3.Core.PathItemBase.FixedPath"/> is set to <see langword="false"/>, otherwise
            it left at its current setting.
            </remarks>
        </member>
        <member name="P:NDoc3.Core.PathItemBase.FixedPath">
            <summary>
            Gets or sets an indication whether the path should be saved as fixed or relative to the project file.
            </summary>
            <value>
            if <see langword="true"/>, NDoc3 will save this as a Fixed path; 
            otherwise, it will be saved as a path relative to the NDoc3 project file.
            </value>
        </member>
        <member name="P:NDoc3.Core.PathItemBase.Exists">
            <summary>
            Tests, if the path represented by this instance is valid.
            </summary>
        </member>
        <member name="T:NDoc3.Core.PathItemBase.TypeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.PropertySorter">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.PropertySorter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets whether the GetProperties method is supported.
            </summary>
            <param name="context">Context.</param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.PropertySorter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets the properties.
            </summary>
            <param name="context">Context.</param>
            <param name="value">Value.</param>
            <param name="attributes">Attributes.</param>
            <returns></returns>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.PropertySorter.PropertyOrderPair">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.PropertySorter.PropertyOrderPair.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:NDoc3.Core.PropertyGridUI.PropertySorter.PropertyOrderPair"/> instance.
            </summary>
            <param name="name">Name.</param>
            <param name="order">Order.</param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.PropertySorter.PropertyOrderPair.CompareTo(System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="obj">Obj.</param>
            <returns></returns>
        </member>
        <member name="P:NDoc3.Core.PropertyGridUI.PropertySorter.PropertyOrderPair.Name">
            <summary>
            Gets the name.
            </summary>
            <value></value>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.PathItemBase.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.FilePath.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NDoc3.Core.FilePath"/> class.</summary>
            <overloads>Initializes a new instance of the <see cref="T:NDoc3.Core.FilePath"/> class.</overloads>
        </member>
        <member name="M:NDoc3.Core.FilePath.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:NDoc3.Core.FilePath"/> class from a given path string.</summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:NDoc3.Core.FilePath.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.FilePath"/> class from a given <see cref="T:System.IO.FileInfo"/>.
            </summary>
        </member>
        <member name="M:NDoc3.Core.FilePath.#ctor(NDoc3.Core.FilePath)">
            <summary>Initializes a new instance of the <see cref="T:NDoc3.Core.FilePath"/> class from an existing <see cref="T:NDoc3.Core.FilePath"/> instance.</summary>
            <param name="path">An existing <see cref="T:NDoc3.Core.FilePath"/>.</param>
        </member>
        <member name="P:NDoc3.Core.FilePath.Path">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.FilePath.Exists">
            <inheritDoc/>
        </member>
        <member name="T:NDoc3.Core.FilePath.TypeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.FilePath.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.FilePath.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritDoc/>
        </member>
        <member name="T:NDoc3.Core.FilePath.UIEditor">
            <summary>
            
            </summary>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.FilenameEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.FilenameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the edit style.
            </summary>
            <param name="context">Context.</param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.FilenameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value.
            </summary>
            <param name="context">Context.</param>
            <param name="provider">Provider.</param>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.FilenameEditor.FileDialogFilterAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.FilenameEditor.FileDialogFilterAttribute.#ctor(System.String,System.String)">
            <summary>
            Define a filter for the UIFilenameEditor.
            </summary>
            <param name="title">File dialog title</param>
            <param name="filter">
            The filter to use in the file dialog in UIFilenameEditor. 
            The following is an example of a filter string: 
            "Text files (*.txt)|*.txt|All files (*.*)|*.*"</param>
            <remarks></remarks>
        </member>
        <member name="P:NDoc3.Core.PropertyGridUI.FilenameEditor.FileDialogFilterAttribute.Title">
            <summary>
            Gets the title.
            </summary>
            <value></value>
        </member>
        <member name="P:NDoc3.Core.PropertyGridUI.FilenameEditor.FileDialogFilterAttribute.Filter">
            <summary>
            The filter to use in the file dialog in UIFilenameEditor.
            </summary>
            <value></value>
            <remarks>
            The following is an example of a filter string: 
            "Text files (*.txt)|*.txt|All files (*.*)|*.*"
            </remarks>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.FilenameEditor.SaveFileAttribute">
            <summary>
            Indicates that SaveFileDialog must be shown
            </summary>
        </member>
        <member name="M:NDoc3.Core.FilePath.UIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritDoc/>
        </member>
        <member name="T:NDoc3.Core.FolderPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.FolderPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.FolderPath"/> class.
            </summary>
        </member>
        <member name="M:NDoc3.Core.FolderPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.FolderPath"/> class from a given path string.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:NDoc3.Core.FolderPath.#ctor(NDoc3.Core.FolderPath)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.FolderPath"/> class from an existing <see cref="T:NDoc3.Core.FilePath"/> instance.
            </summary>
            <param name="path">An existing <see cref="T:NDoc3.Core.FolderPath"/>.</param>
        </member>
        <member name="M:NDoc3.Core.FolderPath.ToString">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.FolderPath.Path">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.FolderPath.Exists">
            <inheritDoc/>
        </member>
        <member name="T:NDoc3.Core.FolderPath.TypeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.FolderPath.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.FolderPath.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritDoc/>
        </member>
        <member name="T:NDoc3.Core.FolderPath.UIEditor">
            <summary>
            
            </summary>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.FoldernameEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.FoldernameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the edit style.
            </summary>
            <param name="context">Context.</param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.FoldernameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value.
            </summary>
            <param name="context">Context.</param>
            <param name="provider">Provider.</param>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.FoldernameEditor.FolderDialogTitleAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.FoldernameEditor.FolderDialogTitleAttribute.#ctor(System.String)">
            <summary>
            Define a title for the UIFoldernameEditor.
            </summary>
            <param name="title">Folder dialog title</param>
            <remarks></remarks>
        </member>
        <member name="P:NDoc3.Core.PropertyGridUI.FoldernameEditor.FolderDialogTitleAttribute.Title">
            <summary>
            Gets the title.
            </summary>
            <value></value>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.FoldernameEditor.ExistingFolderOnlyAttribute">
            <summary>
            Indicates that only existing folders can be specified
            </summary>
        </member>
        <member name="M:NDoc3.Core.FolderPath.UIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritDoc/>
        </member>
        <member name="T:NDoc3.Core.ProgressArgs">
            <summary>
            Custom event arguments' class used by DocBuildingEventHandler.
            </summary>
        </member>
        <member name="M:NDoc3.Core.ProgressArgs.#ctor(System.Int32,System.String)">
            <summary>
            ProgressArgs default constructor.
            </summary>
            <param name="progress">Percentage value for a progress bar.</param>
            <param name="status">The label describing the current work beeing done.</param>
        </member>
        <member name="P:NDoc3.Core.ProgressArgs.Progress">
            <summary>
            Gets the percentage value.
            </summary>
            <value>A number between 0 and 100 corresponding to the percentage of work completed.</value>
        </member>
        <member name="P:NDoc3.Core.ProgressArgs.Status">
            <summary>
            Gets the current work label.
            </summary>
            <value>A short description of the current work beeing done.</value>
        </member>
        <member name="T:NDoc3.Core.DocBuildingEventHandler">
            <summary>
            Used by events raised by <see cref="T:NDoc3.Core.IDocumenter"/> to notify doc building progress.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <c>ProgressArgs</c> that contains the event data.</param>
        </member>
        <member name="T:NDoc3.Core.DocumenterDevelopmentStatus">
            <summary>
            Specifies the development status of a documenter.
            </summary>
        </member>
        <member name="F:NDoc3.Core.DocumenterDevelopmentStatus.Alpha">
            <summary>Still in development, not really ready for anyone 
            else to use except to provide feedback.</summary>
        </member>
        <member name="F:NDoc3.Core.DocumenterDevelopmentStatus.Beta">
            <summary>Ready for users to try out, with the understanding that
            bugs are likely.</summary>
        </member>
        <member name="F:NDoc3.Core.DocumenterDevelopmentStatus.Stable">
            <summary>Ready for use, or at least as stable as free 
            software gets!</summary>
        </member>
        <member name="F:NDoc3.Core.DocumenterDevelopmentStatus.Obsolete">
            <summary>
            No longer actively maintained.
            </summary>
        </member>
        <member name="T:NDoc3.Core.InstalledDocumenters">
            <summary>
            Static class containing the collection of documenters 
            currently avialable
            </summary>
        </member>
        <member name="F:NDoc3.Core.InstalledDocumenters._probePath">
            <summary>
            Holds the list of directories that will be scanned for documenters.
            </summary>
        </member>
        <member name="M:NDoc3.Core.InstalledDocumenters.GetDocumenter(System.String)">
            <summary>
            Find a documenter by name
            </summary>
            <param name="name">The name to search for</param>
            <returns>An IdocumenterInfo describing the documenter</returns>
        </member>
        <member name="M:NDoc3.Core.InstalledDocumenters.AppendProbePath(System.String)">
            <summary>
            Appends the specified directory to the documenter probe path.
            </summary>
            <param name="path">The directory to add to the probe path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length <see cref="T:System.String"/>.</exception>
            <remarks>
            <para>
            The probe path is the list of directories that will be scanned for
            assemblies that have classes implementing <see cref="T:NDoc3.Core.IDocumenter"/>.
            </para>
            </remarks>
        </member>
        <member name="M:NDoc3.Core.InstalledDocumenters.FindDocumenters">
            <summary>
            Searches the module directory and all directories in the probe path
            for assemblies containing classes that implement <see cref="T:NDoc3.Core.IDocumenter"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ArrayList"/> containing new instances of all the 
            found documenters.
            </returns>
        </member>
        <member name="M:NDoc3.Core.InstalledDocumenters.FindDocumentersInPath(System.Collections.ArrayList,System.String)">
            <summary>
            Searches the specified directory for assemblies containing classes 
            that implement <see cref="T:NDoc3.Core.IDocumenter"/>.
            </summary>
            <param name="documenters">The collection of <see cref="T:NDoc3.Core.IDocumenter"/> instances to fill.</param>
            <param name="path">The directory to scan for assemblies containing documenters.</param>
        </member>
        <member name="P:NDoc3.Core.InstalledDocumenters.Documenters">
            <summary>
            Gets the list of available documenters.
            </summary>
        </member>
        <member name="T:NDoc3.Core.Namespaces">
            <summary>
            Summary description for Namespaces.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Namespaces.CopyTo(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Copy the list of namespaces to the given list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:NDoc3.Core.Namespaces.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.Namespaces"/> class.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Namespaces.Read(System.Xml.XmlReader)">
            <summary>
            Reads namespace summaries from an XML document.
            </summary>
            <param name="reader">
            An open XmlReader positioned before the namespace elements.</param>
        </member>
        <member name="M:NDoc3.Core.Namespaces.Write(System.Xml.XmlWriter)">
            <summary>
            Writes namespace summaries to an XML document.
            </summary>
            <param name="writer">
            An open XmlWriter.</param>
        </member>
        <member name="M:NDoc3.Core.Namespaces.LoadNamespacesFromAssemblies(NDoc3.Core.Project)">
            <summary>
            Loads the namespaces from assemblies.
            </summary>
            <param name="project">Project.</param>
        </member>
        <member name="E:NDoc3.Core.Namespaces.ContentsChanged">
            <summary>
            Raised when contents of collection change
            </summary>
        </member>
        <member name="P:NDoc3.Core.Namespaces.Item(System.String)">
            <summary>
            Gets or sets the namespace summary with the specified namespace name.
            </summary>
            <value></value>
        </member>
        <member name="P:NDoc3.Core.Namespaces.NamespaceNames">
            <summary>Gets an enumerable list of namespace names.</summary>
        </member>
        <member name="P:NDoc3.Core.Namespaces.Count">
            <summary>The number of namespaces in the collection.</summary>
        </member>
        <member name="T:NDoc3.Core.PathUtilities">
            <summary>
            Utility Routines for path handling
            </summary>
        </member>
        <member name="M:NDoc3.Core.PathUtilities.GetFullPath(System.String,System.String)">
            <summary>
            Combines the specified path with basePath 
            to form a full path to file or directory.
            </summary>
            <param name="basePath">The reference path.</param>
            <param name="path">The relative or absolute path.</param>
            <returns>
            A rooted path.
            </returns>
        </member>
        <member name="M:NDoc3.Core.PathUtilities.GetRelativePath(System.String,System.String)">
            <summary>
            Gets the relative path of the passed path with respect to basePath
            </summary>
            <param name="basePath">The reference path.</param>
            <param name="path">The relative or absolute path.</param>
            <returns>
            A relative path.
            </returns>
        </member>
        <member name="M:NDoc3.Core.PathUtilities.AbsoluteToRelativePath(System.String,System.String)">
            <summary>
            Converts an absolute path to one relative to the given base directory path
            </summary>
            <param name="basePath">The base directory path</param>
            <param name="absolutePath">An absolute path</param>
            <returns>A path to the given absolute path, relative to the base path</returns>
        </member>
        <member name="M:NDoc3.Core.PathUtilities.RelativeToAbsolutePath(System.String,System.String)">
            <summary>
            Converts a given base and relative path to an absolute path
            </summary>
            <param name="basePath">The base directory path</param>
            <param name="relativePath">A path to the base directory path</param>
            <returns>An absolute path</returns>
        </member>
        <member name="M:NDoc3.Core.PathUtilities.NormalizePath(System.String)">
            <summary>
             Normalize the given path, so that paths pointing to the same location can be compared using == operator.
            </summary>
             <remarks>
             Handles only local paths (e.g. no UNC paths!)
             </remarks>
        </member>
        <member name="M:NDoc3.Core.PathUtilities.NormalizePath(System.String,System.Char)">
            <summary>
             Normalize the given path, so that paths pointing to the same location can be compared using == operator.
            </summary>
             <remarks>
             Handles only local paths (e.g. no UNC paths!)
             </remarks>
        </member>
        <member name="M:NDoc3.Core.PathUtilities.ReducePath(System.String,System.Char)">
            <summary>
            Removes "." and ".." parts in the path
            </summary>
            <remarks>
            Handles only local paths (e.g. no UNC paths!)
            </remarks>
        </member>
        <member name="T:NDoc3.Core.Project">
            <summary>Represents an NDoc3 project.</summary>
        </member>
        <member name="M:NDoc3.Core.Project.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NDoc3.Core.Project"/> class.</summary>
        </member>
        <member name="F:NDoc3.Core.Project._referencePaths">
            <summary>
            A collection of directories that will be probed when attempting to load assemblies.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Project.GetFullPath(System.String)">
            <summary>
            Combines the specified path with the <see cref="P:NDoc3.Core.Project.BaseDirectory"/> of 
            the <see cref="T:NDoc3.Core.Project"/> to form a full path to file or directory.
            </summary>
            <param name="path">The relative or absolute path.</param>
            <returns>
            A rooted path.
            </returns>
        </member>
        <member name="M:NDoc3.Core.Project.GetRelativePath(System.String)">
            <summary>
            Gets the relative path of the passed path with respect to the <see cref="P:NDoc3.Core.Project.BaseDirectory"/> of 
            the <see cref="T:NDoc3.Core.Project"/>.
            </summary>
            <param name="path">The relative or absolute path.</param>
            <returns>
            A relative path.
            </returns>
        </member>
        <member name="M:NDoc3.Core.Project.Read(System.String)">
            <summary>Reads an NDoc3 project file from disk.</summary>
        </member>
        <member name="M:NDoc3.Core.Project.OnActiveConfigChanged">
            <summary>
            Raises the <see cref="E:NDoc3.Core.Project.ActiveConfigChanged"/> event
            </summary>
        </member>
        <member name="M:NDoc3.Core.Project.Write(System.String)">
            <summary>Writes an NDoc3 project to a disk file.</summary>
            <remarks>A project is written to file in a 2 stage process;
            <list type="number">
            <item>The project data is serialised to an in-memory store.</item>
            <item>If no errors occured during serialization, the data is written to disk.</item>
            </list>
            <p>This technique ensures that any fatal error during serialization will not cause a
            a corrupt or incomplete project file to be written to disk.</p>
            </remarks>
        </member>
        <member name="M:NDoc3.Core.Project.Clear">
            <summary>Clears the project.</summary>
        </member>
        <member name="P:NDoc3.Core.Project.ProjectFile">
            <summary>
            Gets or sets the project file.
            </summary>
            <value></value>
        </member>
        <member name="E:NDoc3.Core.Project.Modified">
            <summary>Raised when the project <see cref="P:NDoc3.Core.Project.IsDirty"/> state changes from <see langword="false"/> to <see langword="true"/>.</summary>
        </member>
        <member name="P:NDoc3.Core.Project.IsDirty">
            <summary>Gets or sets a value indicating whether the contents of this project have been modified.</summary>
            <remarks>If a project is marked as 'dirty' then the GUI will ask to user if they wish to save the project before loading another, or exiting.</remarks>
        </member>
        <member name="P:NDoc3.Core.Project.SuspendDirtyCheck">
            <summary>
            Gets or sets a value indicating whether <see cref="P:NDoc3.Core.Project.IsDirty"/> is updated when a project property is modifed.
            </summary>
            <value>
            	<see langword="true"/>, if changes to project properties should <b>not</b> update the value of <see cref="P:NDoc3.Core.Project.IsDirty"/>; otherwise, <see langword="false"/>.
            </value>
            <remarks>The default value of this property is <see langword="false"/>, however it is set to <see langword="true"/> during <see cref="M:NDoc3.Core.Project.Read(System.String)"/> so a newly loaded project is not flagged as 'dirty'</remarks>
        </member>
        <member name="P:NDoc3.Core.Project.AssemblySlashDocs">
            <summary>
            Gets the collection of assemblies and documentation comment XML files in the project.
            </summary>
            <value>An <see cref="T:NDoc3.Core.AssemblySlashDocCollection"/>.</value>
        </member>
        <member name="P:NDoc3.Core.Project.ReferencePaths">
            <summary>Gets a collection of directories that will be probed when attempting to load assemblies.</summary>
        </member>
        <member name="P:NDoc3.Core.Project.BaseDirectory">
            <summary>
            Gets the base directory used for relative references.
            </summary>
            <value>
            The directory of the project file, or the current working directory 
            if the project was not loaded from a project file.
            </value>
        </member>
        <member name="P:NDoc3.Core.Project.Namespaces">
            <summary>
            Gets the project namespace summaries collection.
            </summary>
            <value></value>
        </member>
        <member name="E:NDoc3.Core.Project.ActiveConfigChanged">
            <summary>
            Event rasied when the <see cref="P:NDoc3.Core.Project.ActiveConfig"/> changes
            </summary>
        </member>
        <member name="P:NDoc3.Core.Project.ActiveDocumenter">
            <summary>
            The active documenter type
            </summary>
        </member>
        <member name="P:NDoc3.Core.Project.ActiveConfig">
            <summary>
            The curently active <see cref="T:NDoc3.Core.IDocumenterConfig"/>
            </summary>
        </member>
        <member name="T:NDoc3.Core.ProjectModifiedEventHandler">
            <summary>Handles Project <see cref="E:NDoc3.Core.Project.Modified"/> events.</summary>
        </member>
        <member name="T:NDoc3.Core.CouldNotLoadAllAssembliesException">
            <summary>
            This exception is thrown when one or more assemblies can not be loaded.
            </summary>
        </member>
        <member name="M:NDoc3.Core.CouldNotLoadAllAssembliesException.#ctor">
            <summary/>
        </member>
        <member name="M:NDoc3.Core.CouldNotLoadAllAssembliesException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:NDoc3.Core.CouldNotLoadAllAssembliesException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:NDoc3.Core.CouldNotLoadAllAssembliesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="T:NDoc3.Core.DocumenterPropertyFormatException">
            <summary>
            This exception is thrown when there were invalid values in the documenter properties.
            </summary>
        </member>
        <member name="M:NDoc3.Core.DocumenterPropertyFormatException.#ctor">
            <summary/>
        </member>
        <member name="M:NDoc3.Core.DocumenterPropertyFormatException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:NDoc3.Core.DocumenterPropertyFormatException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:NDoc3.Core.DocumenterPropertyFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.AttributesEditor">
            <summary>
            Class which implements a custom UITypeEditor for attributes.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Handler called when editing a value.
            </summary>
            <param name="context">Context</param>
            <param name="provider">Provider</param>
            <param name="value">Current Value</param>
            <returns>New value</returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the edit style for the type.
            </summary>
            <param name="context">Context</param>
            <returns>Edit Style</returns>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.AttributesForm">
            <summary>
            A form to build attributes filter criteria.
            </summary>
        </member>
        <member name="F:NDoc3.Core.PropertyGridUI.AttributesForm.Value">
            <summary>
            Contains the updated value, if the user clicked OK.
            </summary>
        </member>
        <member name="F:NDoc3.Core.PropertyGridUI.AttributesForm.AttributesToShow">
            <summary>
            Structure which holds all the attributes
            </summary>
        </member>
        <member name="F:NDoc3.Core.PropertyGridUI.AttributesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.#ctor(System.Object)">
            <summary>
            Creates and initialize a new AttributesForm object.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.UpdateAttributes">
            <summary>
            Helper function which updates the attributes list
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.UpdateProperties">
            <summary>
            Helper function which udpates the properties list
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.listAttributes_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler called when a new attribute gets selected.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.Add_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the ADD button is clicked.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.Delete_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the DELETE button is clicked.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.Edit_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the EDIT button is clicked.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.AddProp_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the ADD (of the property list) is clicked.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.EditProp_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the EDIT (of the property list) is clicked.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.DeleteProp_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the DELETE (of the property list) is clicked.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.listProperties_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler called when a new item in the property list gets selected.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.buttonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the OK button is clicked.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.AttributesForm.AttributeToShow">
            <summary>
            Class which holds information about an attribute.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.AttributesForm.AttributeToShow.#ctor">
            <summary>
            Creates an empty AttributeToShow object
            </summary>
        </member>
        <member name="F:NDoc3.Core.PropertyGridUI.AttributesForm.AttributeToShow.PropertiesToShow">
            <summary>
            List of properties
            </summary>
        </member>
        <member name="P:NDoc3.Core.PropertyGridUI.AttributesForm.AttributeToShow.Name">
            <summary>
            Name attribute
            </summary>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.EnumDescriptionConverter">
            <summary>
            EnumConverter supporting System.ComponentModel.DescriptionAttribute
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.EnumDescriptionConverter.GetEnumDescription(System.Enum)">
            <summary>
            Gets the Description of the given Enumeration value 
            </summary>
            <param name="value">The enumeration value</param>
            <returns>The Description from the DescriptionAttribute attached to the value, otherwise the enumeration value's name</returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.EnumDescriptionConverter.GetEnumDescription(System.Type,System.String)">
            <summary>
            Gets the Description of a named value in an Enumeration
            </summary>
            <param name="value">The type of the Enumeration</param>
            <param name="name">The name of the Enumeration value</param>
            <returns>The description, if any, else the passed name</returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.EnumDescriptionConverter.GetEnumValue(System.Type,System.String)">
            <summary>
            Gets the value of an Enum, based on it's Description Attribute or named value
            </summary>
            <param name="value">The Enum type</param>
            <param name="description">The description or name of the element</param>
            <returns>The value, or the passed in description, if it was not found</returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.EnumDescriptionConverter.#ctor(System.Type)">
            <summary>
            Constructs EnumDescriptionConverter for a given Enum
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.EnumDescriptionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            <para>Converts the given value object to the specified type, using the specified context and culture information.</para>
            <para>This member overrides <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>.</para>
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object. If a <see langword="null"/> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.EnumDescriptionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            <para>Converts the given object to the type of this converter, using the specified context and culture information.</para>
            <para>This member overrides <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/>.</para>
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object. If a <see langword="null"/> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.LangIdEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.LangIdEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.LangIdEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.LangIdEditor.List_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.LangIdEditor.FillInList(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Windows.Forms.ListBox,System.Int16)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="listBox"></param>
            <param name="value"></param>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.PropertyOrderAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.PropertyOrderAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:NDoc3.Core.PropertyGridUI.PropertyOrderAttribute"/> instance.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="P:NDoc3.Core.PropertyGridUI.PropertyOrderAttribute.Order">
            <summary>
            Gets the order.
            </summary>
            <value></value>
        </member>
        <member name="T:NDoc3.Core.ReferencePathCollectionEditorForm">
            <summary>
            Summary description for ReferencePathCollectionEditorForm.
            </summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollectionEditorForm.#ctor">
            <summary>
            Creates a new <see cref="T:NDoc3.Core.ReferencePathCollectionEditorForm"/> instance.
            </summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollectionEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollectionEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NDoc3.Core.ReferencePathCollectionEditorForm.ReferencePaths">
            <summary>
            Gets or sets the reference paths collection to edit.
            </summary>
            <value></value>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.RuntimePropertyGrid">
            <summary>
            A PropertyGrid with context menu to <b>Reset</b> values and show/hide the <b>Description</b> pane.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.RuntimePropertyGrid.#ctor">
            <summary>
            Creates a new instance of the RuntimePropertyGrid class
            </summary>
        </member>
        <member name="P:NDoc3.Core.PropertyGridUI.RuntimePropertyGrid.LabelWidth">
            <summary>
            Gets or sets the width of the label.
            </summary>
            <value></value>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.SimpleEdit">
            <summary>
            This is a dialog box to prompt for a name.
            </summary>
        </member>
        <member name="F:NDoc3.Core.PropertyGridUI.SimpleEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.SimpleEdit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.PropertyGridUI.SimpleEdit"/> form.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.SimpleEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.SimpleEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NDoc3.Core.PropertyGridUI.SimpleEdit.Value">
            <summary>
            Contains the value of the text box.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.SimpleEdit.SimpleEdit_Load(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the form is initialy loaded.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.SimpleEdit.buttonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the user clicks the OK button.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.TextEditor">
            <summary>
            Provides editing facilities for large blocks of text in the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.TextEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by <see cref="M:NDoc3.Core.PropertyGridUI.TextEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)"/>.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.TextEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:NDoc3.Core.PropertyGridUI.TextEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by <see cref="M:NDoc3.Core.PropertyGridUI.TextEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/>.</returns>
        </member>
        <member name="T:NDoc3.Core.PropertyGridUI.TextEditorForm">
            <summary>
            Used in the conjunction with the <see cref="T:NDoc3.Core.PropertyGridUI.TextEditor"/>, this form
            provides the user a larger interface with which to edit text.
            </summary>
        </member>
        <member name="F:NDoc3.Core.PropertyGridUI.TextEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.TextEditorForm.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NDoc3.Core.PropertyGridUI.TextEditorForm"/> form.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.TextEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NDoc3.Core.PropertyGridUI.TextEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NDoc3.Core.PropertyGridUI.TextEditorForm.Value">
            <summary>
            Gets or sets the text to edit.
            </summary>
            <value>The text to edit.</value>
        </member>
        <member name="T:NDoc3.Core.ReferencePath">
            <summary>
            A path to search for referenced assemblies.
            </summary>
            <remarks>
            if <see cref="P:NDoc3.Core.ReferencePath.IncludeSubDirectories"/> is set to <see langword="true"/>, subdirectories of 
            <see cref="P:NDoc3.Core.ReferencePath.Path"/> will also be searched.
            </remarks>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:NDoc3.Core.ReferencePath"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.ReferencePath"/> class.
            </summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.ReferencePath"/> class from a given path string.
            </summary>
            <param name="path">A relative or absolute path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="path"/> is an empty string.</exception>
            <remarks>
            If <paramref name="path"/> end with "**" then <see cref="P:NDoc3.Core.ReferencePath.IncludeSubDirectories"/> 
            will be set to <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.#ctor(NDoc3.Core.ReferencePath)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.ReferencePath"/> class from an existing <see cref="T:NDoc3.Core.ReferencePath"/> instance.
            </summary>
            <param name="refPath">An existing <see cref="T:NDoc3.Core.ReferencePath"/> instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="refPath"/> is a <see langword="null"/>.</exception>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.Equals(System.Object)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.op_Equality(NDoc3.Core.ReferencePath,NDoc3.Core.ReferencePath)">
            <summary>Equality operator.</summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.op_Inequality(NDoc3.Core.ReferencePath,NDoc3.Core.ReferencePath)">
            <summary>Inequality operator.</summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.GetHashCode">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.ToString">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.ReferencePath.Path">
            <summary>
            Gets or sets the fully qualified path.
            </summary>
            <value>The fully qualified path</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is an empty string.</exception>
            <remarks>
            <para>
            If <paramref name="value"/> is not rooted, <see cref="P:NDoc3.Core.PathItemBase.FixedPath"/> is set to <see langword="false"/>, otherwise
            it left at its current setting.
            </para>
            <para>
            If this property is set to a string that ends with "**" then <see cref="P:NDoc3.Core.ReferencePath.IncludeSubDirectories"/> 
            will be set to <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:NDoc3.Core.ReferencePath.IncludeSubDirectories">
            <summary>
            Gets or sets an indication whether to search subdirectories of the given path.
            </summary>
            <value>
            if <see langword="true"/>, the assembly loader will search subdirectories; otherwise, it will only search given path.
            </value>
        </member>
        <member name="P:NDoc3.Core.ReferencePath.Exists">
            <inheritDoc/>
        </member>
        <member name="T:NDoc3.Core.ReferencePath.TypeConverter">
            <summary>
            <see cref="T:NDoc3.Core.ReferencePath.TypeConverter"/> to convert a string to an instance of <see cref="T:NDoc3.Core.ReferencePath"/>.
            </summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritDoc/>
        </member>
        <member name="T:NDoc3.Core.ReferencePath.UIEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePath.UIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritDoc/>
        </member>
        <member name="T:NDoc3.Core.ReferencePathCollection">
            <summary>
            Type safe collection class for <see cref="T:NDoc3.Core.ReferencePath"/> objects. 
            </summary>
            <remarks>
            <para>Extends the base class <see cref="T:System.Collections.CollectionBase"/> to inherit base collection functionality.</para>
            <para>Implementation of <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> to provide customized type description.</para>
            </remarks>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.#ctor(NDoc3.Core.ReferencePath[])">
            <summary>
            Creates a collection, filled with an initial list of reference paths
            </summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.Add(NDoc3.Core.ReferencePath)">
            <summary>
            Adds the specified <see cref="T:NDoc3.Core.ReferencePath"/> object to the collection.
            </summary>
            <param name="refPath">The <see cref="T:NDoc3.Core.ReferencePath"/> to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="refPath"/> is a <see langword="null"/>.</exception>
            <remarks>
            If the path in <paramref name="refPath"/> matches one already existing in the collection, the
            operation is silently ignored.
            </remarks>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"/> to the end of the collection.
            </summary>
            <param name="c">The <see cref="T:System.Collections.ICollection"/> whose elements should be added to the end of the collection. 
            The collection itself cannot be a <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="c"/> is a <see langword="null"/>.</exception>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.Remove(NDoc3.Core.ReferencePath)">
            <summary>
            Removes the first occurence of a specific <see cref="T:NDoc3.Core.ReferencePath"/> from the collection.
            </summary>
            <param name="refPath">The <see cref="T:NDoc3.Core.ReferencePath"/> to remove from the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="refPath"/> is a <see langword="null"/>.</exception>
            <remarks>
            Elements that follow the removed element move up to occupy the vacated spot and the indexes of the elements that are moved are also updated.
            </remarks>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a specified path.
            </summary>
            <param name="path">The path to locate in the collection.</param>
            <returns><see langword="true"/> if the collection contains the specified path, 
            otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a <see langword="null"/>.</exception>
            <remarks>Path comparison is case-insensitive.</remarks>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Saves reference paths to an XmlWriter.
            </summary>
            <param name="writer">An open XmlWriter.</param>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Loads reference paths from an XMLReader.
            </summary>
            <param name="reader">
            An open XmlReader positioned before or on the referencePaths element.</param>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Called to get the properties of this type. Returns properties with certain
            attributes. this restriction is not implemented here.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="P:NDoc3.Core.ReferencePathCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NDoc3.Core.ReferencePath"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:NDoc3.Core.ReferencePath"/> to get or set.</param>
            <value>The <see cref="T:NDoc3.Core.ReferencePath"/> at the specified index</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index 
            in the collection.</exception>
            <exception cref="T:System.ArgumentNullException">set <i>value</i> is a <see langword="null"/>.</exception>
        </member>
        <member name="T:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor">
            <summary>
            Summary description for CollectionPropertyDescriptor.
            </summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.#ctor(NDoc3.Core.ReferencePathCollection,System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.CanResetValue(System.Object)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.GetValue(System.Object)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.ResetValue(System.Object)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <inheritDoc/>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.SetValue(System.Object,System.Object)">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.Attributes">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.ComponentType">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.DisplayName">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.Description">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.IsReadOnly">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.Name">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.PropertyType">
            <inheritDoc/>
        </member>
        <member name="P:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionPropertyDescriptor.Converter">
            <inheritDoc/>
        </member>
        <member name="T:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value.
            </summary>
            <param name="context">Context.</param>
            <param name="provider">Provider.</param>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.ReferencePathCollection.ReferencePathCollectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the edit style.
            </summary>
            <param name="context">Context.</param>
            <returns></returns>
        </member>
        <member name="T:NDoc3.Core.ReferenceTypeDictionary`2">
            <summary>
             An <see cref="T:System.Collections.Generic.IDictionary`2"/> implementation for reference type values. 
             Avoids the need for calling <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> and the impact of semantics change
             of calling <see cref="P:System.Collections.Generic.Dictionary`2.Item(`0)"/> by throwing an exception if the
             key doesn't exist.
            </summary>
            <typeparam name="TKey">the type of the key - no restrictions</typeparam>
            <typeparam name="TVal">the type of the value - must be a reference type</typeparam>
        </member>
        <member name="M:NDoc3.Core.ReferenceTypeDictionary`2.#ctor">
            <summary>
            Creates a default instance, using <see cref="T:System.Collections.Generic.Dictionary`2"/> as underlying dictionary.
            </summary>
        </member>
        <member name="M:NDoc3.Core.ReferenceTypeDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a default instance, wrapping <paramref name="inner"/> as underlying dictionary.
            </summary>
        </member>
        <member name="T:NDoc3.Core.Reflection.AssemblyLoader">
            <summary>
            Handles the resolution and loading of assemblies.
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.AssemblyLoader.searchDirectories">
            <summary>primary search directories.</summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.AssemblyLoader.directoryLists">
            <summary>List of subdirectory lists already scanned.</summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.AssemblyLoader.searchedDirectories">
            <summary>List of directories already scanned.</summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.AssemblyLoader.unresolvedAssemblies">
            <summary>List of Assemblies that could not be resolved.</summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.AssemblyLoader.AssemblyNameFileNameMap">
            <summary>assemblies already scanned, but not loaded.</summary>
            <remarks>Maps Assembly FullName to Filename for assemblies scanned, 
            but not loaded because they were not a match to the required FullName.
            <p>This list is scanned twice,</p>
            <list type="unordered">
            <term>If the requested assembly has not been loaded, but is in this list, then the file is loaded.</term>
            <term>Once all search paths have been exhausted in an exact name match, this list is checked for a 'partial' match.</term>
            </list></remarks>
        </member>
        <member name="F:NDoc3.Core.Reflection.AssemblyLoader.assemblysLoadedFileName">
            <summary>Loaded assembly cache keyed by Assembly FileName</summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.#ctor(NDoc3.Core.ReferencePath[])">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.Reflection.AssemblyLoader"/> class.
            </summary>
            <param name="referenceDirectories">Reference directories.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.#ctor(NDoc3.Core.ReferencePathCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.Reflection.AssemblyLoader"/> class.
            </summary>
            <param name="referenceDirectories">Reference directories.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.AddSearchDirectory(NDoc3.Core.ReferencePath)">
            <summary>
            Add the path to the list of directories for dependency resolution
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.Install">
            <summary> 
            Installs the assembly resolver by hooking up to the AppDomain's AssemblyResolve event.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.GetAssemblyInfo(System.IO.FileInfo)">
            <summary>Loads an assembly.</summary>
            <param name="assemblyFile">The assembly filename.</param>
            <returns>The assembly object.</returns>
            <remarks>This method loads an assembly into memory. If you
            use Assembly.Load or Assembly.LoadFrom the assembly file locks.
            This method doesn't lock the assembly file.</remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.LoadAssembly(System.IO.FileInfo)">
            <summary>Loads an assembly.</summary>
            <param name="assemblyFile">The assembly filename.</param>
            <returns>The assembly object.</returns>
            <remarks>This method loads an assembly into memory. If you
            use Assembly.Load or Assembly.LoadFrom the assembly file locks.
            This method doesn't lock the assembly file.</remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.CreateAssemblyEvidence(System.String)">
            <summary>
            Creates assembly evidence
            </summary>
            <param name="fileName">The assembly filename</param>
            <returns>The new assembly evidence</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.ResolveAssembly(System.Object,System.ResolveEventArgs)">
            <summary> 
            Resolves the location and loads an assembly not found by the system.
            </summary>
            <remarks>The CLR will take care of loading Framework and GAC assemblies.
            <p>The resolution process uses the following heuristic</p>
            </remarks>
            <param name="sender">the sender of the event</param>
            <param name="args">event arguments</param>
            <returns>the loaded assembly, null, if not found</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.LoadAssemblyFrom(System.String,System.String)">
            <summary> 
            Search for and load the specified assembly in a set of directories.
            This will optionally search recursively.
            </summary>
            <param name="fullName">
            Fully qualified assembly name. If not empty, the full name of each assembly found is
            compared to this name and the assembly is accepted only, if the names match.
            </param>
            <param name="fileName">The name of the assembly.</param>
            <returns>The assembly, or null if not found.</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.LoadAssemblyFrom(System.String,System.String,System.String,System.Boolean)">
            <summary> 
            Search for and load the specified assembly in a given directory.
            This will optionally search recursively into sub-directories if requested.
            </summary>
            <param name="path">The directory to look in.</param>
            <param name="fullName">
            Fully qualified assembly name. If not empty, the full name of each assembly found is
            compared to this name and the assembly is accepted only, if the names match.
            </param>
            <param name="fileName">The name of the assembly.</param>
            <param name="includeSubDirs">true, search subdirectories.</param>
            <returns>The assembly, or null if not found.</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyLoader.GetSubDirectories(System.String)">
            <summary>
            Gets all subdirectories of a directory
            </summary>
            <param name="parentDir">The parent directory</param>
            <returns>Array containing all subdirectories</returns>
        </member>
        <member name="P:NDoc3.Core.Reflection.AssemblyLoader.SearchedDirectories">
            <summary>
            Directories Searched for assemblies.
            </summary>
        </member>
        <member name="P:NDoc3.Core.Reflection.AssemblyLoader.UnresolvedAssemblies">
            <summary>
            Assemblies that could not be resolved.
            </summary>
        </member>
        <member name="T:NDoc3.Core.Reflection.AssemblyXmlDocCache">
            <summary>
            AssemblyXmlDocCache.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NDoc3.Core.Reflection.AssemblyXmlDocCache"/> class.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.Flush">
            <summary>
            Flushes the Cache.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.CacheDocFile(System.String)">
            <summary>
            Populates cache from the given file.
            </summary>
            <param name="fileName">Fully-qualified filename of xml file with which to populate the cache.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.CacheDocs(System.Xml.XmlReader)">
            <summary>
            Cache the xmld docs into a hashtable for faster access.
            </summary>
            <param name="reader">An XmlReader containg the docs the cache</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.PreprocessDoc(NDoc3.Core.Reflection.AssemblyXmlDocCache.XmlDocKey,System.String)">
            <summary>
            Preprocess documentation before placing it in the cache.
            </summary>
            <param name="key">Member name 'id' to which the docs belong</param>
            <param name="doc">A string containing the members documentation</param>
            <returns>processed doc string</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.CleanupNodes(NDoc3.Core.Reflection.AssemblyXmlDocCache.XmlDocKey,System.Xml.XmlNodeList)">
            <summary>
            strip out redundant newlines and spaces from documentation.
            </summary>
            <param name="key">member</param>
            <param name="nodes">list of nodes</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.FixupCodeTag(System.Xml.XmlNode)">
            <summary>
            Remove leading spaces from code tag contents.
            </summary>
            <param name="node">a code tag node</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.ProcessSeeLinks(NDoc3.Core.Reflection.AssemblyXmlDocCache.XmlDocKey,System.Xml.XmlNodeList)">
            <summary>
            Add 'nolink' attributes to self referencing or duplicate see tags.
            </summary>
            <param name="key">current member name 'id'</param>
            <param name="nodes">list of top-level nodes</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.MarkupSeeLinks(System.Collections.Hashtable@,NDoc3.Core.Reflection.AssemblyXmlDocCache.XmlDocKey,System.Xml.XmlNode)">
            <summary>
            Search tags for duplicate or self-referencing see links.
            </summary>
            <param name="linkTable">A table of previous links.</param>
            <param name="key">current member name 'id'</param>
            <param name="node">an Xml Node containing a doc tag</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.GetDoc(System.Reflection.AssemblyName,System.String)">
            <summary>
            Gets Xml documentation for the given ID
            </summary>
            <param name="assemblyName">the name of the assembly to lookup</param>
            <param name="memberId">The ID of the item for which documentation is required</param>
            <returns>a string containg the Xml documentation</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.AssemblyXmlDocCache.HasExcludeTag(System.Type,System.String)">
            <summary>
            Returns whether a member has an exclude tag
            </summary>
            <param name="type"></param>
            <param name="memberId">ID to check</param>
            <returns>true if the member has an exclude tag, otherwise false</returns>
        </member>
        <member name="T:NDoc3.Core.Reflection.BaseReflectionDocumenter">
            <summary>The base class for documenters which use the <see cref="T:NDoc3.Core.Reflection.ReflectionEngine"/> to extract 
            documentation from .Net assemblies.</summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.BaseReflectionDocumenter.#ctor(NDoc3.Core.IDocumenterConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.Reflection.BaseReflectionDocumenter"/> class.
            </summary>
            <param name="config">Documenter setting</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.BaseReflectionDocumenter.MakeXmlFile(NDoc3.Core.Project,System.IO.FileInfo)">
            <summary>
            Writes reflected metadata combined with the /doc comments to the 
            specified file.
            </summary>
            <remarks>
            This is performed in a separate <see cref="T:System.AppDomain"/>.
            </remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.BaseReflectionDocumenter.MakeXml(NDoc3.Core.Project)">
            <summary>
            Returns reflected metadata combined with the /doc comments.
            </summary>
            <remarks>This now evidently writes the string in utf-16 format (and 
            says so, correctly I suppose, in the xml text) so if you write this string to a file with 
            utf-8 encoding it will be unparseable because the file will claim to be utf-16
            but will actually be utf-8.</remarks>
            <returns>XML string</returns>
            <remarks>
            This is performed in a separate <see cref="T:System.AppDomain"/>.
            </remarks>
        </member>
        <member name="T:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig">
            <summary>The base config class for documenters which use the <see cref="T:NDoc3.Core.Reflection.ReflectionEngine"/> to extract 
            documentation from .Net assemblies.</summary>
            <remarks>
            <para>Generating the documentation consists of two high level steps:
            <list type="number">
            <item><description>Merging the /doc XML summary with reflected meta-data from the assemblies.</description></item>
            <item><description>Transforming that merged XML into the documentation (HTML for the MSDN and VS.NET documenters).</description></item>
            </list></para>
            <para>The settings below govern how exactly the XML summary data is merged
            with the reflected meta-data and therefore govern what items will and will not 
            appear in the final documentation.
            </para>
            </remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.CreateNDocXmlGeneratorParameters">
            <summary>
             Creates <see cref="T:NDoc3.Core.Reflection.NDocXmlGeneratorParameters"/> based on this configuration's settings.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.#ctor(NDoc3.Core.IDocumenterInfo)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="info">Info class descrbing the documenter</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.HandleUnknownPropertyType(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.HandleUnknownPropertyValue(System.Reflection.PropertyInfo,System.String)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.ReferencePaths">
            <summary>
            Gets or sets a collection of additional paths to search for reference assemblies.
            </summary>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.ShowMissingSummaries">
            <summary>Gets or sets the ShowMissingSummaries property.</summary>
            <remarks>If this is true, all members without /doc <b>&lt;summary&gt;</b>
            comments will contain the phrase <font color="red">Missing Documentation</font> in the
            generated documentation.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.ShowMissingRemarks">
            <summary>Gets or sets the ShowMissingRemarks property.</summary>
            <remarks>If this is true, all members without /doc <b>&lt;remarks&gt;</b>
            comments will contain the phrase <font color="red">Missing Documentation</font> in the
            generated documentation.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.ShowMissingParams">
            <summary>Gets or sets the ShowMissingParams property.</summary>
            <remarks>If this is true, all parameters without /doc <b>&lt;param&gt;</b>
            comments will contain the phrase <font color="red">Missing Documentation</font> in the
            generated documentation.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.ShowMissingReturns">
            <summary>Gets or sets the ShowMissingReturns property.</summary>
            <remarks>If this is true, all members without /doc <b>&lt;returns&gt;</b>
            comments will contain the phrase <font color="red">Missing Documentation</font> in the
            generated documentation.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.ShowMissingValues">
            <summary>Gets or sets the ShowMissingValues property.</summary>
            <remarks>If this is true, all properties without /doc <b>&lt;value&gt;</b>
            comments will contain the phrase <font color="red">Missing Documentation</font> in the
            generated documentation.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentInheritedMembers">
            <summary>Gets or sets the DocumentInheritedMembers property.</summary>
            <remarks>Determines whether inherited members are documented. 
            </remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentInheritedFrameworkMembers">
            <summary>Gets or sets the DocumentInheritedFrameworkMembers property.</summary>
            <remarks>If true, members inherited from .Net framework classes will be documented. 
            </remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentExplicitInterfaceImplementations">
            <summary>Gets or sets the DocumentInternals property.</summary>
            <remarks>If this is true, members which explicitly implement interfaces will
            be included in the documentation. Normally, these members are not documented.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentInternals">
            <summary>Gets or sets the DocumentInternals property.</summary>
            <remarks>If this is true, types and members marked as internal will
            be included in the documentation. Normally, internal items are not documented.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentProtected">
            <summary>Gets or sets the DocumentProtected property.</summary>
            <remarks>If this is true, protected members will be included in the
            documentation. Since protected members of non-internal types can be
            accessed outside of an assembly, this is true by default.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentSealedProtected">
            <summary>Gets or sets the DocumentSealedProtected property.</summary>
            <remarks>Turn this flag on to document protected members of sealed classes. 
            <b>DocumentProtected</b> must be turned on, too.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentPrivates">
            <summary>Gets or sets the DocumentPrivates property.</summary>
            <remarks>
            <para>If this is true, types and members marked as private will
            be included in the documentation.</para>
            <para>Normally private items are not documented. This is useful
            when use NDoc3 to create documentation intended for internal use.</para></remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentProtectedInternalAsProtected">
            <summary>Gets or sets the DocumentProtectedInternalAsProtected property.</summary>
            <remarks>If this is true, NDoc3 will treat "protected internal" members as "protected" only.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentEmptyNamespaces">
            <summary>Gets or sets the DocumentPrivates property.</summary>
            <remarks>If this is true, empty namespaces will be included in the documentation.
            Normally, empty namespaces are not documented.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.SkipNamespacesWithoutSummaries">
            <summary>Gets or sets the SkipNamespacesWithoutSummaries property.</summary>
            <remarks>Setting this property to true , NDoc3 will not document namespaces 
            that don't have an associated namespace summary.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.EditorBrowsableFilter">
            <summary>Specifies the level of filtering on the EditorBrowsable attribute.</summary>
            <remarks><para>Sets the level of filtering to apply on types/members marked with the <b>EditorBrowsable</b> attribute.  
            <b>Warning: enabling this filter might result in invalid links in the documentation.</b></para>
            <para>As of version 1.3 of NDoc3, the <b>&lt;exclude/&gt;</b> tag is the preferred mechanism for
            suppressing the documentation of types or members.</para></remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.UseNDocXmlFile">
            <summary>Gets or sets a value indicating whether to use the specified XML file as input instead of reflecting the list of assemblies specified on the project.</summary>
            <remarks><para>When set, NDoc3 will use the specified XML file as 
            input instead of reflecting the list of assemblies specified 
            on the project.</para>
            <para>Very useful for debugging documenters. <b><i>Leave empty for normal usage.</i></b></para>
            </remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.AssemblyVersionInfo">
            <summary>Gets or sets the AssemblyVersion property.</summary>
            <remarks>Determines what type of Assembly Version information is documented. 
            </remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.CopyrightText">
            <summary>Gets or sets the CopyrightText property.</summary>
            <remarks>A textual copyright notice that will be included with each topic.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.CopyrightHref">
            <summary>Gets or sets the CopyrightHref property.</summary>
            <remarks>The URI of a copyright notice. A link to this URI will be included
            with each topic.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.FeedbackEmailAddress">
            <summary>Gets or sets the FeedbackEmailAddress property.</summary>
            <remarks>If an email address is supplied, a <b>mailto</b> link 
            will be placed at the bottom of each page, pointing to this address.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.UseNamespaceDocSummaries">
            <summary>Gets or sets the UseNamespaceDocSummaries property.</summary>
            <remarks>If true, the documenter will look for a class with the name 
            <b>NamespaceDoc</b> in each namespace. The summary from that class 
            will then be used as the namespace summary.  The class itself will not 
            show up in the resulting documentation output. 
            <para>You may want to use <b>#if</b> ... <b>#endif</b>
            together with conditional compilation constants to 
            exclude the <b>NamespaceDoc</b> classes from release build assemblies.</para></remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.AutoPropertyBackerSummaries">
            <summary>Gets or sets the AutoPropertyBackerSummaries property.</summary>
            <remarks>If true, the documenter will automatically add a summary 
            for fields which look like they back (hold the value for) a 
            property. The summary is only added if there is no existing summary, 
            which gives you a way to opt out of this behavior in particular cases. 
            Currently the naming conventions supported are such that 
            fields <b>_Length</b> and <b>length</b> will be inferred to back property <b>Length</b>.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.AutoDocumentConstructors">
            <summary>Gets or sets the AutoDocumentConstructors property.</summary>
            <remarks>Turning this flag on will enable automatic summary 
            documentation for default constructors. If no summary for a parameter-less
            constructor is present, the default constructor summary of
            <b>Initializes a new instance of the CLASSNAME class</b> is inserted.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.Preliminary">
            <summary>Get/set the Preliminary preoperty</summary>
            <remarks>
            <para>If true, NDoc3 will mark every topic as being preliminary documentation.
            Each topic will include a notice that the documentation is preliminary</para>
            <para>The default notice is <font color="red">[This is preliminary documentation 
            and subject to change.]</font></para></remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.SdkDocVersion">
            <summary>Gets or sets the LinkToSdkDocVersion property.</summary>
            <remarks>Specifies to which version of the .NET Framework SDK documentation the links to system types will be pointing.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.SdkDocVersionString">
            <summary>
            Converts the chosen SDK version to the string used by MSDN
            </summary>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.SdkDocLanguage">
            <summary>Gets or sets the SdkDocLanguage property.</summary>
            <remarks>Specifies to which Language of the .NET Framework SDK documentation the links to system types will be pointing.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentAttributes">
            <summary>Gets or sets whether or not to document the attributes.</summary>
            <remarks>Set this to true to output the attributes of the types/members 
            in the syntax portion of topics.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentInheritedAttributes">
            <summary>Gets or sets whether or not to document the attributes inherited from base types.</summary>
            <remarks>Set this to true to output the attributes of the base types/members 
            in the syntax portion of topics.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.ShowTypeIdInAttributes">
            <summary>Gets or sets whether or not to show the TypeId property in attributes.</summary>
            <remarks>Set this to true to output the <b>TypeId</b> property in the attributes.</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.DocumentedAttributes">
            <summary>Gets or sets which attributes should be documented.</summary>
            <remarks><para>When <b>DocumentAttributes</b> is set to true, this specifies 
            which attributes/property are visible.  Empty to show all.  </para>
            <para>Format: '&lt;attribute-name-starts-with&gt;,&lt;property-to-show&gt;,&lt;property-to-show&gt;|
            &lt;attribute-name-starts-with&gt;,&lt;property-to-show&gt;,&lt;property-to-show&gt;|(etc...)'.</para></remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.IncludeDefaultThreadSafety">
            <summary>Gets or sets the IncludeDefaultThreadSafety property.</summary>
            <remarks>When true, typs that do not have an explicit &lt;threadsafety&gt;
            tag will include thread safety documentation corresponding to StaticMembersDefaultToSafe 
            and InstanceMembersDefaultToSafe.
            </remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.StaticMembersDefaultToSafe">
            <summary>Gets or sets the StaticMembersDefaultToSafe property.</summary>
            <remarks>When true, types that do not have an explicit &lt;threadsafety&gt;
            tag will default to being safe for accessing static members across threads. 
            (ignored if IncludeDefaultThreadSafety is false)</remarks>
        </member>
        <member name="P:NDoc3.Core.Reflection.BaseReflectionDocumenterConfig.InstanceMembersDefaultToSafe">
            <summary>Gets or sets the InstanceMembersDefaultToSafe property.</summary>
            <remarks>When true, types that do not have an explicit &lt;threadsafety&gt;
             tag will default to being safe for accessing instance members across threads. 
             (ignored if IncludeDefaultThreadSafety is false)</remarks>
        </member>
        <member name="T:NDoc3.Core.Reflection.EditorBrowsableFilterLevel">
            <summary>
            Defines the levels of filtering on the EditorBrowsable attribute.
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.EditorBrowsableFilterLevel.Off">
            <summary>No filtering.</summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.EditorBrowsableFilterLevel.HideNever">
            <summary>Hide members flagged with EditorBrowsableState.Never.</summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.EditorBrowsableFilterLevel.HideAdvanced">
            <summary>Hide members flagged with EditorBrowsableState.Never or EditorBrowsableState.Advanced.</summary>
        </member>
        <member name="T:NDoc3.Core.Reflection.SdkVersion">
            <summary>
            Defines a version of the .NET Framework documentation.
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkVersion.SDK_v1_0">
            <summary>The SDK version 1.0.</summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkVersion.SDK_v1_1">
            <summary>The SDK version 1.1.</summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkVersion.SDK_v2_0">
            <summary>The SDK version 2.0.</summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkVersion.SDK_v3_0">
            <summary>The SDK version 3.0.</summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkVersion.SDK_v3_5">
            <summary>The SDK version 3.5.</summary>
        </member>
        <member name="T:NDoc3.Core.Reflection.SdkLanguage">
            <summary>
            Defines a language version of the .NET Framework documentation.
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkLanguage.en_us">
            <summary>
            English (en-us)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkLanguage.fr_fr">
            <summary>
            French (fr-fr)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkLanguage.de_de">
            <summary>
            German (de-de)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkLanguage.it_it">
            <summary>
            Italian (it-it)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkLanguage.es_es">
            <summary>
            Spanish (es-es)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkLanguage.pt_br">
            <summary>
            Portugese Brazil (pt-br)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkLanguage.ja_jp">
            <summary>
            Japanese
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkLanguage.ko_kr">
            <summary>
            Korean
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkLanguage.zh_tw">
            <summary>
            Chinese Traditional (zh-tw)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.SdkLanguage.zh_cn">
            <summary>
            Chinese Simplified (zh-cn)
            </summary>
        </member>
        <member name="T:NDoc3.Core.Reflection.AssemblyVersionInformationType">
            <summary>
            Defines the type of version information to document.
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.AssemblyVersionInformationType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.AssemblyVersionInformationType.AssemblyVersion">
            <summary>
            AssemblyVersion Attrribute.
            <para>
            This is the standard /.Net version information specified in the AssemblyVersionAttribute.
            </para>
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.AssemblyVersionInformationType.AssemblyFileVersion">
            <summary>
            AssemblyFileVersion Attribute
            <para>
            This is the file version specified in the AssemblyFileVersion attribute, as opposed to the /.Net standard Assembly Version.
            </para>
            <para>This type of version information is useful if an Assembly is to installed in the GAC, and the developer need to avoid side-by-side versioning issues, but wishes to provide build version information...
            </para>
            </summary>
        </member>
        <member name="T:NDoc3.Core.Reflection.ExternalXmlSummaryCache">
            <summary>
            Caches XML summaries.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.ExternalXmlSummaryCache.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.Reflection.ExternalXmlSummaryCache"/>
            class.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.ExternalXmlSummaryCache.Flush">
            <summary>
            Flushes the <see cref="T:NDoc3.Core.Reflection.ExternalXmlSummaryCache"/>.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.ExternalXmlSummaryCache.AddXmlDoc(System.String)">
            <summary>
            Adds given XML document to the summary cache.
            </summary>
            <param name="xmlFileName">The filename of XML document to cache.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.ExternalXmlSummaryCache.GetXmlFor(System.Type)">
            <summary>
            Gets the xml documentation for the assembly of the specified type.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.ExternalXmlSummaryCache.CacheSummaries(System.Xml.XmlTextReader)">
            <summary>
            Caches summaries for all members in XML documentation file.
            </summary>
            <param name="reader">XmlTextReader for XML Documentation</param>
            <remarks>If a member does not have a summary, a zero-length string is stored instead.</remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.ExternalXmlSummaryCache.PreprocessDoc(System.String,System.String)">
            <summary>
            Preprocess documentation before placing it in the cache.
            </summary>
            <param name="id">Member name 'id' to which the docs belong</param>
            <param name="doc">A string containing the members documentation</param>
            <returns>processed doc string</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.ExternalXmlSummaryCache.CleanupNodes(System.Xml.XmlNodeList)">
            <summary>
            strip out redundant newlines and spaces from documentation.
            </summary>
            <param name="nodes">list of nodes</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.ExternalXmlSummaryCache.ProcessSeeLinks(System.String,System.Xml.XmlNodeList)">
            <summary>
            Add 'nolink' attributes to self referencing or duplicate see tags.
            </summary>
            <param name="id">current member name 'id'</param>
            <param name="nodes">list of top-level nodes</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.ExternalXmlSummaryCache.MarkupSeeLinks(System.Collections.Hashtable@,System.String,System.Xml.XmlNode)">
            <summary>
            Search tags for duplicate or self-referencing see links.
            </summary>
            <param name="linkTable">A table of previous links.</param>
            <param name="id">current member name 'id'</param>
            <param name="node">an Xml Node containing a doc tag</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.ExternalXmlSummaryCache.GetSummary(System.String,System.Type)">
            <summary>
            Returns the original summary for a member inherited from a specified type. 
            </summary>
            <param name="memberID">The member ID to lookup.</param>
            <param name="declaringType">The type that declares that member.</param>
            <returns>The summary xml.  If not found, returns an zero length string.</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.ReflectionAssemblyInfo.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Returns the list of attributes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:NDoc3.Core.MemberDisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.MemberDisplayName.GetMemberDisplayName(System.Type)">
            <summary>
            
            </summary>
            <param name="realType"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.MemberDisplayName.GetTypeArgumentsList(System.Type)">
            <summary>
            Get the generic arguments of a type
            </summary>
            <param name="type">The type to get generic arguments from</param>
            <returns></returns>
        </member>
        <member name="T:NDoc3.Core.Reflection.MemberID">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetDeclaringMemberID(System.Reflection.MemberInfo)">
            <summary>
            Gets the member ID of a type member
            </summary>
            <param name="member">Member information</param>
            <returns>Member ID</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetMemberID(System.Type)">
            <summary>
            Get the member ID of a type
            </summary>
            <param name="type">The type</param>
            <returns>The member ID</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetMemberID(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Get the member ID of a field
            </summary>
            <param name="field">The field</param>
            <param name="useDeclaringType">Indicates if the declaring type should be used</param>
            <returns>The member ID</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetMemberID(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Get the member ID of a property
            </summary>
            <param name="property">The property</param>
            <param name="useDeclaringType">Indicates if the declaring type should be used</param>
            <returns>The member ID</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetMemberID(System.Reflection.MethodBase,System.Boolean)">
            <summary>
            Get the member ID of a method
            </summary>
            <param name="method">The method</param>
            <param name="useDeclaringType">Indicates wether or not to use the declaring type</param>
            <returns>The member ID</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetMemberID(System.Reflection.EventInfo,System.Boolean)">
            <summary>
            Get the member ID of an event
            </summary>
            <param name="eventInfo">The event</param>
            <param name="useDeclaringType">Indicates wether or not to use the declaring type</param>
            <returns>The member ID</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetTypeNamespaceName(System.Type)">
            <summary>
            Get the types namespace name (full name)
            </summary>
            <param name="type">The type</param>
            <returns>The namespace name (full name)</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.DereferenceType(System.Type)">
            <summary>
            Returns the underlying element type in case of reference or array types.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetDeclaringTypeName(System.Reflection.MemberInfo)">
            <summary>
            Returns the declaring type name of a member
            </summary>
            <param name="member">The member</param>
            <returns>The declaring type name</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetDeclaringAssemblyName(System.Reflection.MemberInfo)">
            <summary>
            Returns the name of the assembly declaring this member
            </summary>
            <param name="member">The member</param>
            <returns>The declaring's assembly name</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetFullNamespaceName(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns the full namespace name of a member
            </summary>
            <param name="member">The member</param>
            <param name="useDeclaringType">whether to generate the name using the <see cref="P:System.Reflection.MemberInfo.ReflectedType"/> or <see cref="P:System.Reflection.MemberInfo.DeclaringType"/></param>
            <returns>The full namespace name</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetTypeDisplayName(System.Type)">
            <summary>
            Returns the language-agnostic name of the given type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetTypeName(System.Type)">
            <summary>
            Get the type name of a type
            </summary>
            <param name="type">The type</param>
            <returns>The type name</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetTypeName(System.Type,System.Boolean)">
            <summary>
            Returns the type name
            </summary>
            <param name="type">The type</param>
            <param name="UsePositionalNumber"></param>
            <returns>The type name</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetTypeNamespace(System.Type)">
            <summary>
            Gets the type's namespace
            </summary>
            <remarks>
            This due to a reflection issue where type.Namespace occasionally is null.
            </remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetTypeArgumentsList(System.Type)">
            <summary>
            Get the generic argument list of a type
            </summary>
            <param name="type">The type</param>
            <returns>The generic argument list</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.MemberID.GetParameterList(System.Reflection.MethodBase)">
            <summary>
            Return a string representation of method parameters
            </summary>
            <param name="method">The method</param>
            <returns>String representation of the method parameters</returns>
        </member>
        <member name="T:NDoc3.Core.Reflection.MethodContract">
            <summary>
             Defines possible values for a method's contract.
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.MethodContract.Normal">
            <summary>
            Method is an instance member.
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.MethodContract.Static">
            <summary>
            Method is static. (<see cref="F:System.Reflection.MethodAttributes.Static"/>)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.MethodContract.Abstract">
            <summary>
            Method is abstract. (<see cref="F:System.Reflection.MethodAttributes.Abstract"/>)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.MethodContract.Final">
            <summary>
            Method is final. (<see cref="F:System.Reflection.MethodAttributes.Final"/>)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.MethodContract.Virtual">
            <summary>
            Method is virtual. (<see cref="F:System.Reflection.MethodAttributes.Virtual"/>)
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.MethodContract.Override">
            <summary>
            Method is an override. (<see cref="F:System.Reflection.MethodAttributes.NewSlot"/>|<see cref="F:System.Reflection.MethodAttributes.Virtual"/>).
            </summary>
        </member>
        <member name="T:NDoc3.Core.Reflection.NamespaceHierarchyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.NamespaceHierarchyCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.NamespaceHierarchyCollection.Add(System.String,System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="namespaceName"></param>
            <param name="baseType"></param>
            <param name="derivedType"></param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NamespaceHierarchyCollection.GetDerivedTypesCollection(System.String)">
            <summary>
            
            </summary>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="P:NDoc3.Core.Reflection.NamespaceHierarchyCollection.DefinedNamespaces">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:NDoc3.Core.Reflection.NDocXmlGenerator">
            <summary>
            Summary description for ReflectionEngine.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.IsRunningMono">
            <summary>
            Checks if we are using the Mono runtime
            </summary>
            <returns>
            Wether or not we are running with Mono
            </returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.ValidateNDocXml(System.IO.FileInfo)">
            <summary>
            Validates the given ndoc xml against the schema.
            </summary>
            <remarks>This method automatically closes the reader instance passed into it.</remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.ValidateNDocXml(System.IO.TextReader)">
            <summary>
            Validates the given ndoc xml against the schema.
            </summary>
            <remarks>This method automatically closes the reader instance passed into it.</remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.ValidateNDocXml(System.IO.TextReader,System.Boolean)">
            <summary>
            Validates the given ndoc xml against the schema.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.ValidateNDocXmlInternal(System.Xml.XmlReader)">
            <summary>
            Validates the generated XML file against the XML schema.
            </summary>
            <param name="reader">An instance of a XmlReader, containing the XML to be validated.</param>
            <exception cref="T:NDoc3.Core.Reflection.ValidationException">Occures if validation fails.</exception>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.MakeXmlReaderSettings">
            <summary>
            Generates the XmlReaderSettings for validating against the XML Schema.
            </summary>
            <returns>The XmlReaderSettings.</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.MakeXmlFile(System.IO.FileInfo)">
            <summary>Builds an Xml file combining the reflected metadata with the /doc comments.</summary>
            <returns>full pathname of XML file</returns>
            <remarks>The caller is responsible for deleting the xml file after use...</remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.MakeXmlFile(System.IO.FileInfo,System.Xml.Formatting,System.Int32,System.Char)">
            <summary>Builds an Xml file combining the reflected metadata with the /doc comments.</summary>
            <returns>full pathname of XML file</returns>
            <remarks>The caller is responsible for deleting the xml file after use...</remarks>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.MakeXml">
            <summary>Builds an Xml string combining the reflected metadata with the /doc comments.</summary>
            <remarks>This now evidently writes the string in utf-16 format (and
            says so, correctly I suppose, in the xml text) so if you write this string to a file with
            utf-8 encoding it will be unparseable because the file will claim to be utf-16
            but will actually be utf-8.</remarks>
            <returns>XML string</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.BuildXml(System.Xml.XmlWriter)">
            <summary>
            Builds an Xml file combining the reflected metadata with the /doc comments.
            </summary>
            <param name="writer">An instance of a XmlWriter</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteDefaultThreadSafety(System.Xml.XmlWriter)">
            <summary>
            Writes out the default thead safety settings for the project
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteCopyright(System.Xml.XmlWriter)">
            <summary>
            Writes the copyright node to the documentation 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.IsEditorBrowsable(System.Reflection.MemberInfo)">
            <summary>
            Checks if the member has been flagged with the EditorBrowsableState.Never value
            </summary>
            <param name="minfo"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteAssembly(System.Xml.XmlWriter,NDoc3.Core.Reflection.IAssemblyInfo)">
             <summary>
              WriteAssembly
            		WriteCustomAttributes
            		WriteModules
            
             </summary>
             <param name="writer"></param>
             <param name="assembly"></param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteModule(System.Xml.XmlWriter,NDoc3.Core.Reflection.IModuleInfo)">
            <summary>Writes documentation about a module out as XML.</summary>
            <param name="writer">XmlWriter to write on.</param>
            <param name="module">Module to document.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteInterfaces(System.Xml.XmlWriter,System.Type[],System.String)">
            <summary>
            Write all interfaces in a module
            </summary>
            <param name="writer">The XML writer</param>
            <param name="types">An array of types in the module</param>
            <param name="namespaceName">The name of the namespace currently being documented</param>
            <returns>The number of interfaces written</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.GetMethodOverloadIndex(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Returns the method's index in the list of overloads
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteClass(System.Xml.XmlWriter,System.Type,System.Boolean)">
            <summary>Writes XML documenting a class.</summary>
            <param name="writer">XmlWriter to write on.</param>
            <param name="type">Class to document.</param>
            <param name="hiding">true if hiding base members</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteInterface(System.Xml.XmlWriter,System.Type)">
            <summary>Writes XML documenting an interface.</summary>
            <param name="writer">XmlWriter to write on.</param>
            <param name="type">Interface to document.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteDelegate(System.Xml.XmlWriter,System.Type)">
            <summary>Writes XML documenting a delegate.</summary>
            <param name="writer">XmlWriter to write on.</param>
            <param name="type">Delegate to document.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteEnumeration(System.Xml.XmlWriter,System.Type)">
            <summary>Writes XML documenting an enumeration.</summary>
            <param name="writer">XmlWriter to write on.</param>
            <param name="type">Enumeration to document.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteBaseType(System.Xml.XmlWriter,System.Type)">
            <summary>
            Writes the XML structure for the base type of a class
            </summary>
            <param name="writer">The XML writer</param>
            <param name="type">The type of the basetype</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteField(System.Xml.XmlWriter,System.Reflection.FieldInfo,System.Type,System.Boolean)">
            <summary>Writes XML documenting a field.</summary>
            <param name="writer">XmlWriter to write on.</param>
            <param name="field">Field to document.</param>
            <param name="type">Type containing the field.</param>
            <param name="hiding">true if hiding base members</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteDeclaringType(System.Reflection.MemberInfo,System.Xml.XmlWriter)">
            <summary>
            Write the declaring type of a member to the XML file
            </summary>
            <param name="member">The name of the declaring type</param>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.GetDisplayValue(System.Type,System.Object)">
             <summary>
            
             </summary>
             <param name="parent"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteEvent(System.Xml.XmlWriter,System.Reflection.EventInfo,NDoc3.Core.Reflection.NDocXmlGenerator.ImplementsCollection)">
            <summary>Writes XML documenting an event.</summary>
            <param name="writer">XmlWriter to write on.</param>
            <param name="eventInfo">Event to document.</param>
            <param name="implementations">Holds a mapping of interface members to concrete implementations</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteImplementsDeclaringType(System.Type,System.Xml.XmlWriter)">
            <summary>
            Writes the declaring type sections of the implements section
            </summary>
            <param name="t">The type to write the declaring type of</param>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteConstructor(System.Xml.XmlWriter,System.Reflection.ConstructorInfo,System.Int32)">
            <summary>Writes XML documenting a constructor.</summary>
            <param name="writer">XmlWriter to write on.</param>
            <param name="constructor">Constructor to document.</param>
            <param name="overload">If &gt; 0, indicates this is the nth overloaded constructor.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteProperty(System.Xml.XmlWriter,System.Reflection.PropertyInfo,System.Boolean,System.Int32,System.Boolean,NDoc3.Core.Reflection.NDocXmlGenerator.ImplementsCollection)">
            <summary>Writes XML documenting a property.</summary>
            <param name="writer">XmlWriter to write on.</param>
            <param name="property">Property to document.</param>
            <param name="inherited">true if a declaringType attribute should be included.</param>
            <param name="overload">If &gt; 0, indicates this it the nth overloaded method with the same name.</param>
            <param name="hiding">true if this property is hiding base class members with the same name.</param>
            <param name="implementations">Holds a mapping of interface members to concrete implementations</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteMethod(System.Xml.XmlWriter,System.Reflection.MethodInfo,System.Boolean,System.Int32,System.Boolean,NDoc3.Core.Reflection.NDocXmlGenerator.ImplementsCollection)">
            <summary>Writes XML documenting a method.</summary>
            <param name="writer">XmlWriter to write on.</param>
            <param name="method">Method to document.</param>
            <param name="inherited">true if a declaringType attribute should be included.</param>
            <param name="overload">If &gt; 0, indicates this it the nth overloaded method with the same name.</param>
            <param name="hiding">true if this method hides methods of the base class with the same signature.</param>
            <param name="implementations">Holds a mapping of interface members to concrete implementations</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteGenericArgumentsAndParametersMethod(System.Reflection.MethodInfo,System.Xml.XmlWriter)">
            <summary>
            Writes generic arguments and parameters for a method
            </summary>
            <param name="m">Generic method</param>
            <param name="writer">XMLWriter to write the XML</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteGenericArgumentsAndParameters(System.Type,System.Xml.XmlWriter)">
            <summary>
            Writes generic arguments and parameters for a type
            </summary>
            <param name="type">Generic type</param>
            <param name="writer">XMLWriter to write the XML</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteGenericTypeConstraints(System.Type,System.Xml.XmlWriter)">
            <summary>
            Write constraints for a generic type
            </summary>
            <param name="type">The generic type</param>
            <param name="writer">The current XMLWriter</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteGenericMethodConstraints(System.Reflection.MethodInfo,System.Xml.XmlWriter)">
            <summary>
            Write constrains for a generic method
            </summary>
            <param name="m">The generic method</param>
            <param name="writer">The current XMLWriter</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteGenericConstraints(System.Type[],System.Xml.XmlWriter)">
            <summary>
            Writes generic constraints
            </summary>
            <param name="args">An array of generic arguments of a type or method</param>
            <param name="writer">The current XMLWriter</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.CheckForPropertyBacker(System.Xml.XmlWriter,System.Reflection.AssemblyName,System.String,System.Type)">
            <summary>
            This checks whether a field is a property backer, meaning
            it stores the information for the property.
            </summary>
            <remarks>
            <para>This takes advantage of the fact that most people
            have a simple convention for the names of the fields
            and the properties that they back.
            If the field doesn't have a summary already, and it
            looks like it backs a property, and the BaseDocumenterConfig
            property is set appropriately, then this adds a
            summary indicating that.</para>
            <para>This design will call multiple fields the
            backer for a single property.</para>
            <para/>This also will call a public field a backer for a
            property, when typically that wouldn't be the case.
            </remarks>
            <param name="writer">The XmlWriter to write to.</param>
            <param name="assemblyName">the name of the currently processed assembly</param>
            <param name="memberName">The full name of the field.</param>
            <param name="type">The Type which contains the field
            and potentially the property.</param>
            <returns>True only if a property backer is auto-documented.</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.FindProperty(System.String,System.Type)">
            <summary>
            Find a particular property of the specified type, by name.
            Return the PropertyInfo for it.
            </summary>
            <param name="expectedPropertyName">The name of the property to
            find.</param>
            <param name="type">The type in which to search for
            the property.</param>
            <returns>PropertyInfo - The property info, or null for
            not found.</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WritePropertyBackerDocumentation(System.Xml.XmlWriter,System.String,System.Reflection.PropertyInfo)">
            <summary>
            Write xml info for a property's backer field to the specified writer.
            This writes a string with a link to the property.
            </summary>
            <param name="writer">The XmlWriter to write to.</param>
            <param name="element">The field which backs the property.</param>
            <param name="property">The property backed by the field.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGenerator.WriteDerivedTypes(System.Xml.XmlWriter,System.Type)">
            <summary>
            Writes the XML documenting which classes derives from the current class
            </summary>
            <param name="writer">XML writer</param>
            <param name="type">Current class type</param>
        </member>
        <member name="T:NDoc3.Core.Reflection.NDocXmlGenerator.Constraint">
            <summary>
            Contains information about constraints on a generic parameter template
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGenerator.Constraint.typeparam">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGenerator.Constraint.constraint">
            <summary>
            List of constraints on the parameter
            </summary>
        </member>
        <member name="T:NDoc3.Core.Reflection.NDocXmlGeneratorParameters">
            <summary>
            Summary description for NDocXmlGeneratorParameters.
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.NamespaceSummaries">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.AddAssemblyToDocument(System.Type)">
            <summary>
            Adds the type's assembly to the list of assemblies to document.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.AddAssemblyToDocument(System.IO.FileInfo)">
            <summary>
            Adds the assembly to the list of assemblies to document.
            Adds the assembly's slashdoc file as well using the convention myassembly.dll + myassembly.xml
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.AssemblyVersionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.UseNamespaceDocSummaries">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.AutoPropertyBackerSummaries">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.AutoDocumentConstructors">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.SdkDocLanguage">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.ShowMissingSummaries">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.ShowMissingRemarks">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.ShowMissingParams">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.ShowMissingReturns">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.ShowMissingValues">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentInheritedMembers">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentInheritedFrameworkMembers">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentExplicitInterfaceImplementations">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentInternals">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentProtected">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentSealedProtected">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentPrivates">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentProtectedInternalAsProtected">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentEmptyNamespaces">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.SkipNamespacesWithoutSummaries">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.EditorBrowsableFilter">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentInheritedAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.ShowTypeIdInAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.DocumentedAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.CopyrightText">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.CopyrightHref">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.FeedbackEmailAddress">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.Preliminary">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.IncludeDefaultThreadSafety">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.StaticMembersDefaultToSafe">
            <summary>
            
            </summary>
        </member>
        <member name="F:NDoc3.Core.Reflection.NDocXmlGeneratorParameters.InstanceMembersDefaultToSafe">
            <summary>
            
            </summary>
        </member>
        <member name="T:NDoc3.Core.Reflection.ReflectionEngine">
            <summary>
             Used to reflect assemblies of a given project
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.ReflectionEngine.#ctor(NDoc3.Core.ReferencePathCollection)">
            <summary>
            Sets up a remote domain for reflecting assemblies.
            </summary>
            <param name="referencePaths">paths for resolving assembly dependencies</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.ReflectionEngine.Dispose">
            <summary>
             Unloads the remote <see cref="T:System.AppDomain"/>
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.ReflectionEngine.MakeXmlFile(NDoc3.Core.Reflection.NDocXmlGeneratorParameters,System.IO.FileInfo)">
            <summary>
             Reflects assemblies and generates an NDoc xml file
            </summary>
            <param name="args">configuration controlling the reflection process.</param>
            <param name="xmlFile">the file to write the NDoc xml content to</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.ReflectionEngine.MakeXml(NDoc3.Core.Reflection.NDocXmlGeneratorParameters)">
            <summary>
             Reflects assemblies and generates an NDoc xml content
            </summary>
            <param name="args">configuration controlling the reflection process.</param>
            <returns>A string containing the generated XML content</returns>
        </member>
        <member name="M:NDoc3.Core.Reflection.ReflectionEngine.GetNamespacesFromAssembly(System.IO.FileInfo)">
            <summary>
             Scans the given assemblyFile for a list of all namespaces.
            </summary>
            <param name="assemblyFile">a local file path to the assembly</param>
             <returns>an array of namespaces. Is never <c>null</c></returns>
        </member>
        <member name="P:NDoc3.Core.Reflection.ReflectionEngine.remoteServer">
            <summary>
             Gets the remote server
            </summary>
        </member>
        <member name="T:NDoc3.Core.Reflection.ReflectionEngine.ReflectionEngineServer">
            <summary>
             Used for instantiating the server part of the reflection engine
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.ReflectionEngine.ReflectionEngineServer.#ctor">
            <summary>
             Creates a new instance and installs the global <see cref="T:NDoc3.Core.Reflection.AssemblyLoader"/>.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NDoc3.Core.Reflection.ReflectionEngine.ReflectionEngineServer.GetNamespacesFromAssembly(System.IO.FileInfo)">
            <summary>
            Gets the namespaces from assembly.
            </summary>
            <param name="assemblyFile">Assembly file name.</param>
            <returns></returns>
        </member>
        <member name="T:NDoc3.Core.Reflection.TypeHierarchy">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.TypeHierarchy.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.TypeHierarchy.Add(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="baseType">Base type.</param>
            <param name="derivedType">Derived type.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.TypeHierarchy.GetDerivedTypes(System.Type)">
            <summary>
            
            </summary>
            <param name="baseType">Base type.</param>
            <returns></returns>
        </member>
        <member name="T:NDoc3.Core.Reflection.ValidationException">
            <summary>
            Exception class used if validation of xml fails.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.Reflection.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:NDoc3.Core.Reflection.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.Reflection.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.Reflection.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:NDoc3.Core.Reflection.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.Reflection.ValidationException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:NDoc3.Core.Settings">
            <summary>
            This class manages read write access to application settings
            </summary>
            
        </member>
        <member name="M:NDoc3.Core.Settings.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:NDoc3.Core.Settings"/> class.
            </summary>
            <param name="filePath">Path to serialized settings</param>
        </member>
        <member name="M:NDoc3.Core.Settings.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:NDoc3.Core.Settings.GetSetting(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the value of a setting
            </summary>
            <param name="section">The section name to store the list under</param>
            <param name="name">The name of the setting</param>
            <param name="defaultValue">The value to use if no setting is found</param>
            <returns>The stored setting or the default value if no stroed setting is found</returns>
        </member>
        <member name="M:NDoc3.Core.Settings.GetSetting(System.String,System.String,System.Int32)">
            <summary>
            Retrieves the value of a setting
            </summary>
            <param name="section">The section name to store the list under</param>
            <param name="name">The name of the setting</param>
            <param name="defaultValue">The value to use if no setting is found</param>
            <returns>The stored setting or the default value if no stroed setting is found</returns>
        </member>
        <member name="M:NDoc3.Core.Settings.GetSetting(System.String,System.String,System.String)">
            <summary>
            Retrieves the value of a setting
            </summary>
            <param name="section">The section name to store the list under</param>
            <param name="name">The name of the setting</param>
            <param name="defaultValue">The value to use if no setting is found</param>
            <returns>The stored setting or the default value if no stroed setting is found</returns>
        </member>
        <member name="M:NDoc3.Core.Settings.GetSetting(System.String,System.String,System.Object)">
            <summary>
            Retrieves the value of a setting
            </summary>
            <param name="section">The section name to store the list under</param>
            <param name="name">The name of the setting</param>
            <param name="defaultValue">The value to use if no setting is found</param>
            <returns>The stored setting or the default value if no stroed setting is found</returns>
        </member>
        <member name="M:NDoc3.Core.Settings.GetSettingList(System.String,System.String,System.Type,System.Collections.IList@)">
            <summary>
            Retrieves a list of settings. If the list cannot be found
            then no items are added
            </summary>
            <param name="section">The section name to store the list under</param>
            <param name="name">The name of the setting</param>
            <param name="itemType">The type of each setting in the list</param>
            <param name="list">A <see cref="T:System.Collections.IList"/> into which to put each item</param>
        </member>
        <member name="M:NDoc3.Core.Settings.SetSettingList(System.String,System.String,System.String,System.Collections.IList)">
            <summary>
            Stores a list of settings
            </summary>
            <param name="section">The section name to store the list under</param>
            <param name="name">The name of the setting</param>
            <param name="itemName">The name of each item in the list</param>
            <param name="list">The list</param>
        </member>
        <member name="M:NDoc3.Core.Settings.SetSetting(System.String,System.String,System.Boolean)">
            <summary>
            Stores a setting
            </summary>
            <param name="section">The section name to store the setting in</param>
            <param name="name">The name of the setting</param>
            <param name="val">The setting's value</param>
        </member>
        <member name="M:NDoc3.Core.Settings.SetSetting(System.String,System.String,System.Int32)">
            <summary>
            Stores a setting
            </summary>
            <param name="section">The section name to store the setting in</param>
            <param name="name">The name of the setting</param>
            <param name="val">The setting's value</param>
        </member>
        <member name="M:NDoc3.Core.Settings.SetSetting(System.String,System.String,System.String)">
            <summary>
            Stores a setting
            </summary>
            <param name="section">The section name to store the setting in</param>
            <param name="name">The name of the setting</param>
            <param name="val">The setting's value</param>
            <remarks>Passing an emtpy string removes the setting</remarks>
        </member>
        <member name="M:NDoc3.Core.Settings.SetSetting(System.String,System.String,System.Object)">
            <summary>
            Stores a setting
            </summary>
            <param name="section">The section name to store the setting in</param>
            <param name="name">The name of the setting</param>
            <param name="val">The setting's value</param>
            <remarks>Passing a null object removes the setting</remarks>
        </member>
        <member name="M:NDoc3.Core.Settings.RemoveSetting(System.String,System.String)">
            <summary>
            Removes a setting
            </summary>
            <param name="section">Setting section</param>
            <param name="name">Setting name</param>
        </member>
        <member name="P:NDoc3.Core.Settings.UserSettingsFile">
            <summary>
            The full path the the default user settings file
            </summary>
        </member>
        <member name="P:NDoc3.Core.Settings.MachineSettingsFile">
            <summary>
            The full path the the default machine settings file
            </summary>
        </member>
        <member name="P:NDoc3.Core.Settings.UserSettingsLocation">
            <summary>
            The path to the folder where the user specific settings file is stored
            </summary>
        </member>
        <member name="P:NDoc3.Core.Settings.MachineSettingsLocation">
            <summary>
            The path to the folder where the machine wide settings file is stored
            </summary>
        </member>
        <member name="P:NDoc3.Core.Settings.SettingsFolderName">
            <summary>
            Gets the name of the settings folder.
            </summary>
            <value></value>
        </member>
        <member name="T:NDoc3.Core.Settings.NoPrologXmlWriter">
            <summary>
            This class is used to serialize objects without inserting
            xml prolog or doctype declarations
            </summary>
        </member>
        <member name="T:NDoc3.Core.SortedStringDictionary">
            <summary>
            </summary>
        </member>
        <member name="M:NDoc3.Core.SortedStringDictionary.#ctor">
            <summary>
             Creates a new instance, using <see cref="T:System.Collections.Generic.SortedList`2"/> 
             for storing items.
            </summary>
        </member>
        <member name="T:NDoc3.Core.TemplateWriter">
            <summary>
            Stream writer that parses a template file to write a new file.
            </summary>
        </member>
        <member name="M:NDoc3.Core.TemplateWriter.#ctor(System.String,System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.TemplateWriter"/> class for the specified 
            file on the specified path, using the specified template stream and using 
            the default encoding and buffer size.
            </summary>
            <param name="outPath">The complete file path to write to.</param>
            <param name="template">The template's stream reader.</param>
        </member>
        <member name="M:NDoc3.Core.TemplateWriter.#ctor(System.IO.Stream,System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc3.Core.TemplateWriter"/> class for the specified 
            stream, using the specified template stream and using the default encoding 
            and buffer size.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="template">The template's stream reader.</param>
        </member>
        <member name="M:NDoc3.Core.TemplateWriter.CopyToLine(System.String)">
            <summary>
            Copies the text lines form the template to the output stream 
            until a specific line is found.
            </summary>
            <param name="toLine">The line text to search for.  
            Must match exactly.</param>
            <returns><b>true</b> if the line was found, <b>false</b> if the 
            end of the template stream was reached.</returns>
        </member>
        <member name="M:NDoc3.Core.TemplateWriter.CopyToEnd">
            <summary>
            Copies the text lines form the template to the output stream 
            until the end of the template stream.
            </summary>
        </member>
        <member name="M:NDoc3.Core.TemplateWriter.Close">
            <summary>
            Closes the current StreamWriter and StreamReader.
            </summary>
        </member>
        <member name="M:NDoc3.Core.TemplateWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the TemplateWriter 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed 
            and unmanaged resources; <b>false</b> to release only 
            unmanaged resources.</param>
        </member>
        <member name="T:NDoc3.Core.ContentEventHandler">
            <summary>
            Handler for content events
            </summary>
        </member>
        <member name="T:NDoc3.Core.Workspace">
            <summary>
            The Workspace class manages the Output directory and its subfolders
            where help file content and project files are used to compile the 
            final help collection
            </summary>
        </member>
        <member name="F:NDoc3.Core.Workspace.contentDir">
            <summary>
            The name of the directory where the html file are created
            </summary>
        </member>
        <member name="F:NDoc3.Core.Workspace.rootDir">
            <summary>
            The location of the workspace and files
            </summary>
        </member>
        <member name="F:NDoc3.Core.Workspace.cleanableFileTypes">
            <summary>
            These are the output file type extensions that will be cleaned
            </summary>
        </member>
        <member name="M:NDoc3.Core.Workspace.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:NDoc3.Core.Workspace"/> class.
            </summary>
            <param name="root">The location to create the workspace</param>
            <param name="type">The type of workspace</param>
            <param name="contentDirName">The name of the sub folder where content will be placed</param>
            <param name="cleanableExtensions">A semi-colon delimited list of file extensions that can be deleted when cleaning
            the root folder of the workspace (*.ex1;*.ex2)</param>
        </member>
        <member name="M:NDoc3.Core.Workspace.Prepare">
            <summary>
            Prepares the workspace, by creating working and content directories
            </summary>
        </member>
        <member name="M:NDoc3.Core.Workspace.AddResourceDirectory(System.String)">
            <summary>
            Adds a sub directory to the resource directory
            </summary>
            <param name="dirName">The name of the sub directory</param>
        </member>
        <member name="M:NDoc3.Core.Workspace.RemoveResourceDirectory">
            <summary>
            Recursively deletes the ResourceDirectory
            </summary>
        </member>
        <member name="M:NDoc3.Core.Workspace.SaveOutputs(System.String)">
            <summary>
            Saves files mathing the specified filter from the build directory to the root directory
            </summary>
            <param name="filter">File filter to search for</param>
        </member>
        <member name="M:NDoc3.Core.Workspace.ImportProjectFiles(System.String)">
            <summary>
            Copies project resources into the workspace.
            Project files are files needed to compile the help file, but
            are not directly part of its content
            </summary>
            <param name="sourceDirectory">The path to the resources</param>
        </member>
        <member name="M:NDoc3.Core.Workspace.ImportProjectFiles(System.String,System.String)">
            <summary>
            Copies project resources into the workspace
            Project files are files needed to compile the help file, but
            are not directly part of its content
            </summary>
            <param name="sourceDirectory">The path to the resources</param>
            <param name="filter">File filter to use when selecting files to import</param>
        </member>
        <member name="M:NDoc3.Core.Workspace.ImportContentDirectory(System.IO.DirectoryInfo)">
            <summary>
            Recursively copies the contents of sourceDirectory into the workspace content,
            maintainng the same directory structure
            </summary>
            <param name="sourceDirectory">The directory to import</param>
        </member>
        <member name="M:NDoc3.Core.Workspace.OnContentDirectoryAdded(System.String)">
            <summary>
            Raises the <see cref="E:NDoc3.Core.Workspace.ContentDirectoryAdded"/> event
            </summary>
            <param name="relativePath">Path relative to the workspace root</param>
        </member>
        <member name="M:NDoc3.Core.Workspace.GetRelativePath(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Return the relative path between two directories
            </summary>
            <param name="ancestor">The folder closest to the drive root</param>
            <param name="child">A folder that is a child of ancestor</param>
            <returns></returns>
        </member>
        <member name="M:NDoc3.Core.Workspace.ImportContent(System.String)">
            <summary>
            Copies content into the workspace ContentDirectory
            </summary>
            <param name="sourceDirectory">The path to the content files</param>
        </member>
        <member name="M:NDoc3.Core.Workspace.ImportContent(System.String,System.String)">
            <summary>
            Copies content into the workspace ContentDirectory.
            Content are files that will be incorporated into the final help file
            </summary>
            <param name="sourceDirectory">The path to the xontent files</param>
            <param name="filter">File filter to use when selecting files to import</param>
        </member>
        <member name="M:NDoc3.Core.Workspace.OnContentFileAdded(System.String)">
            <summary>
            Raises the <see cref="E:NDoc3.Core.Workspace.ContentFileAdded"/> event
            </summary>
            <param name="fileName">The name of the file added</param>
        </member>
        <member name="M:NDoc3.Core.Workspace.CleanIntermediates">
            <summary>
            Deletes the content of the <see cref="P:NDoc3.Core.Workspace.WorkingDirectory"/>
            </summary>
        </member>
        <member name="M:NDoc3.Core.Workspace.Clean">
            <summary>
            Delets all output and intermediate files from the project workspace
            This will delete all the cleanable files in the root and remove the working directory
            </summary>
        </member>
        <member name="E:NDoc3.Core.Workspace.ContentDirectoryAdded">
            <summary>
            Event raised when a content directory is added
            </summary>
        </member>
        <member name="E:NDoc3.Core.Workspace.ContentFileAdded">
            <summary>
            Event raised when a content file is added
            </summary>
        </member>
        <member name="P:NDoc3.Core.Workspace.WorkingDirectoryName">
            <summary>
            The name of the directory where the compilation takes place
            </summary>
        </member>
        <member name="P:NDoc3.Core.Workspace.ContentDirectoryName">
            <summary>
            The name of the content directory
            </summary>
        </member>
        <member name="P:NDoc3.Core.Workspace.RootDirectory">
            <summary>
            The full path to the worksapce root.
            This is where project outputs will be saved when compilation
            is complete
            </summary>
        </member>
        <member name="P:NDoc3.Core.Workspace.ContentDirectory">
            <summary>
            The full path of the help content files
            </summary>
        </member>
        <member name="P:NDoc3.Core.Workspace.WorkingDirectory">
            <summary>
            The the full path to the directory where the compilation will run
            </summary>
        </member>
        <member name="P:NDoc3.Core.Workspace.ResourceDirectory">
            <summary>
            The location where the xslt stylesheets will be unpacked
            </summary>
        </member>
        <member name="T:NDoc3.MsdnContentService.mtpsFaultDetailType">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.mtpsFaultDetailType.eventId">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.mtpsFaultDetailType.source">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.mtpsFaultDetailType.helpLink">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.availableVersionAndLocale">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.availableVersionAndLocale.locale">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.availableVersionAndLocale.version">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.requestedDocument">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.requestedDocument.selector">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.requestedDocument.type">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.documentTypes">
            <remarks/>
        </member>
        <member name="F:NDoc3.MsdnContentService.documentTypes.primary">
            <remarks/>
        </member>
        <member name="F:NDoc3.MsdnContentService.documentTypes.common">
            <remarks/>
        </member>
        <member name="F:NDoc3.MsdnContentService.documentTypes.image">
            <remarks/>
        </member>
        <member name="F:NDoc3.MsdnContentService.documentTypes.feature">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.primary">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.primary.Any">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.primary.primaryFormat">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.primary.location">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.image">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.image.name">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.image.imageFormat">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.image.location">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.image.Value">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.common">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.common.Any">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.common.commonFormat">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.common.location">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.feature">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.feature.Any">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.feature.featureFormat">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.feature.location">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.appId">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.appId.value">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.getContentRequest">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentRequest.contentIdentifier">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentRequest.locale">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentRequest.version">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentRequest.requestedDocuments">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.getContentResponse">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentResponse.contentId">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentResponse.contentGuid">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentResponse.contentAlias">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentResponse.locale">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentResponse.version">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentResponse.availableVersionsAndLocales">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentResponse.primaryDocuments">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentResponse.imageDocuments">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentResponse.commonDocuments">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getContentResponse.featureDocuments">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.getNavigationPathsRequest">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getNavigationPathsRequest.root">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getNavigationPathsRequest.target">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.navigationKey">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.navigationKey.contentId">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.navigationKey.locale">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.navigationKey.version">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.getNavigationPathsResponse">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.getNavigationPathsResponse.navigationPaths">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.navigationPath">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.navigationPath.navigationPathNodes">
            <remarks/>
        </member>
        <member name="T:NDoc3.MsdnContentService.navigationPathNode">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.navigationPathNode.title">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.navigationPathNode.isPhantom">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.navigationPathNode.isPhantomSpecified">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.navigationPathNode.navigationNodeKey">
            <remarks/>
        </member>
        <member name="P:NDoc3.MsdnContentService.navigationPathNode.contentNodeKey">
            <remarks/>
        </member>
        <member name="T:NDoc3.Support.ArgUtils">
            <summary>
             Utility methods for checking method arguments.
            </summary>
        </member>
        <member name="M:NDoc3.Support.ArgUtils.AssertNotNull``1(``0,System.String)">
            <summary>
             checks the argument against <c>null</c>.
            </summary>
            <exception cref="T:System.ArgumentNullException">in case the given argument was <c>null</c></exception>
        </member>
        <member name="M:NDoc3.Support.ArgUtils.Assert``1(System.Boolean,System.String,System.String)">
            <summary>
             checks the argument against <c>null</c>.
            </summary>
            <exception cref="T:System.ArgumentNullException">in case the given argument was <c>null</c></exception>
        </member>
        <member name="T:NDoc3.Xml.XmlUtils">
            <summary>
            </summary>
        </member>
        <member name="M:NDoc3.Xml.XmlUtils.GetNodeId(System.Xml.XmlNode)">
            <summary>
             Get the node id
            </summary>
            <param name="node">The node</param>
            <returns>Node id</returns>
        </member>
        <member name="M:NDoc3.Xml.XmlUtils.GetNodeType(System.Xml.XmlNode)">
            <summary>
             Gets the node type
            </summary>
            <param name="node">The node</param>
            <returns>The node type</returns>
        </member>
        <member name="M:NDoc3.Xml.XmlUtils.GetNodeTypeId(System.Xml.XmlNode)">
            <summary>
             Gets the node type id
            </summary>
            <param name="node">The node</param>
            <returns>The node type id</returns>
        </member>
        <member name="M:NDoc3.Xml.XmlUtils.GetNodeName(System.Xml.XmlNode)">
            <summary>
             Gets the node name
            </summary>
            <param name="node">The node</param>
            <returns>The node name</returns>
        </member>
        <member name="M:NDoc3.Xml.XmlUtils.GetNodeDisplayName(System.Xml.XmlNode)">
            <summary>
             Gets the node display name
            </summary>
            <param name="typeNode">The node</param>
            <returns>The node display name</returns>
            <remarks>Replace {} with (), to support multiple language, just like MSDN does.</remarks>
        </member>
        <member name="M:NDoc3.Xml.XmlUtils.GetAttributeEnum``1(System.Xml.XmlNode,System.String)">
            <summary>
             Get attribute enumeration value
            </summary>
            <param name="node">The node</param>
            <param name="attributeName">The attribute name</param>
            <typeparam name="TVal">The enumeration type</typeparam>
            <returns>The enumeration value</returns>
            <exception cref="T:System.ArgumentException">Throws an exception if the attribute doesn't exists in the enumeration</exception>
        </member>
        <member name="M:NDoc3.Xml.XmlUtils.GetAttributeEnum``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
             Gets attribute enumeration value, if the value doesn't exists a default value are supplied
            </summary>
            <param name="node">The node</param>
            <param name="attributeName">The attribute name</param>
            <param name="defaultValue">The default value</param>
            <typeparam name="TVal">The enumeration value</typeparam>
            <returns>Enumeration value</returns>
        </member>
        <member name="M:NDoc3.Xml.XmlUtils.GetAttributeString(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
             Gets attribute string
            </summary>
            <param name="node">The node</param>
            <param name="attributeName">The attribute name</param>
            <param name="required">Indicates if the attribute are required to exists</param>
            <returns>The attribute string</returns>
            <exception cref="T:System.ArgumentException">An exception are thrown if the attribute requested are indicated as required</exception>
        </member>
        <member name="T:NDoc3.Core.XsltResourceResolver">
            <summary>	
            Resolves URLs stored as embedded resources in an assembly.
            </summary> 
            <remarks>for debugging purposes, it is possible to direct the resolver to look for the resources in a 
            disk directory rather than extracting them from the assembly. 
            This is especially useful  as it allows the stylesheets to be changed 
            and re-run without recompiling the assembly.</remarks>
        </member>
        <member name="M:NDoc3.Core.XsltResourceResolver.#ctor(System.Type,System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:NDoc3.Core.XsltResourceResolver"/> class.
            </summary>
            <param name="resourceDirs">Either, the namespace of the embedded resources, or a file URI to a disk directory where the recources may be found.</param>
            <param name="embeddedResourceBase">The type's assembly+namespace indicate the location embedded resources shall be probed from.</param>
        </member>
        <member name="M:NDoc3.Core.XsltResourceResolver.ResolveUri(System.Uri,System.String)">
            <summary>
            Resolves the absolute URI from the base and relative URIs.
            </summary>
            <param name="baseUri">The base URI used to resolve the relative URI.</param>
            <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri"/> value. If relative, it combines with the <paramref name="baseUri"/> to make an absolute URI.</param>
            <returns>A <see cref="T:System.Uri"/> representing the absolute URI or <see langword="null"/> if the relative URI can not be resolved.</returns>
            <remarks><paramref name="baseUri"/> is always <see langword="null"/> when this method is called from <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">XslTransform.Load</see></remarks>
        </member>
        <member name="M:NDoc3.Core.XsltResourceResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object containing the actual resource.
            </summary>
            <param name="absoluteUri">The URI returned from <see cref="M:NDoc3.Core.XsltResourceResolver.ResolveUri(System.Uri,System.String)"/>.</param>
            <param name="role">unused.</param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns <b>System.IO.Stream</b> or <b>System.Xml.XmlReader</b> objects.</param>
            <returns></returns>
        </member>
        <member name="P:NDoc3.Core.XsltResourceResolver.ExtensibilityStylesheet">
            <summary>
            User-defined Extensibility Stylesheet
            </summary>
            <value>fully-qualified filename of exstensibility stylesheet</value>
        </member>
    </members>
</doc>
